
Human_Machine_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00800060  00003404  00003498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800150  00800150  00003588  2**0
                  ALLOC
  3 .stab         00002ee0  00000000  00000000  00003588  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017ea  00000000  00000000  00006468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aa36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b7e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b944  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c39f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__vector_13>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__vector_15>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__pack_f+0xba>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e4 e0       	ldi	r30, 0x04	; 4
     162:	f4 e3       	ldi	r31, 0x34	; 52
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a0 35       	cpi	r26, 0x50	; 80
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a0 e5       	ldi	r26, 0x50	; 80
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ae 35       	cpi	r26, 0x5E	; 94
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 d6 12 	call	0x25ac	; 0x25ac <main>
     184:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 c6 03 	call	0x78c	; 0x78c <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a3 e3       	ldi	r26, 0x33	; 51
     222:	b1 e0       	ldi	r27, 0x01	; 1
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	83 e3       	ldi	r24, 0x33	; 51
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__epilogue_restores__>

0000072c <__gtsf2>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__prologue_saves__+0x18>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	89 e0       	ldi	r24, 0x09	; 9
     74a:	e8 2e       	mov	r14, r24
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     76c:	89 85       	ldd	r24, Y+9	; 0x09
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	40 f0       	brcs	.+16     	; 0x782 <__gtsf2+0x56>
     772:	89 89       	ldd	r24, Y+17	; 0x11
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	28 f0       	brcs	.+10     	; 0x782 <__gtsf2+0x56>
     778:	c7 01       	movw	r24, r14
     77a:	b8 01       	movw	r22, r16
     77c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     780:	01 c0       	rjmp	.+2      	; 0x784 <__gtsf2+0x58>
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	68 96       	adiw	r28, 0x18	; 24
     786:	e6 e0       	ldi	r30, 0x06	; 6
     788:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__epilogue_restores__+0x18>

0000078c <__gesf2>:
     78c:	a8 e1       	ldi	r26, 0x18	; 24
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	ec ec       	ldi	r30, 0xCC	; 204
     792:	f3 e0       	ldi	r31, 0x03	; 3
     794:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__prologue_saves__+0x18>
     798:	69 83       	std	Y+1, r22	; 0x01
     79a:	7a 83       	std	Y+2, r23	; 0x02
     79c:	8b 83       	std	Y+3, r24	; 0x03
     79e:	9c 83       	std	Y+4, r25	; 0x04
     7a0:	2d 83       	std	Y+5, r18	; 0x05
     7a2:	3e 83       	std	Y+6, r19	; 0x06
     7a4:	4f 83       	std	Y+7, r20	; 0x07
     7a6:	58 87       	std	Y+8, r21	; 0x08
     7a8:	89 e0       	ldi	r24, 0x09	; 9
     7aa:	e8 2e       	mov	r14, r24
     7ac:	f1 2c       	mov	r15, r1
     7ae:	ec 0e       	add	r14, r28
     7b0:	fd 1e       	adc	r15, r29
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	b7 01       	movw	r22, r14
     7b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     7bc:	8e 01       	movw	r16, r28
     7be:	0f 5e       	subi	r16, 0xEF	; 239
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
     7c2:	ce 01       	movw	r24, r28
     7c4:	05 96       	adiw	r24, 0x05	; 5
     7c6:	b8 01       	movw	r22, r16
     7c8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     7cc:	89 85       	ldd	r24, Y+9	; 0x09
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	40 f0       	brcs	.+16     	; 0x7e2 <__gesf2+0x56>
     7d2:	89 89       	ldd	r24, Y+17	; 0x11
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	28 f0       	brcs	.+10     	; 0x7e2 <__gesf2+0x56>
     7d8:	c7 01       	movw	r24, r14
     7da:	b8 01       	movw	r22, r16
     7dc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <__gesf2+0x58>
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	68 96       	adiw	r28, 0x18	; 24
     7e6:	e6 e0       	ldi	r30, 0x06	; 6
     7e8:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__epilogue_restores__+0x18>

000007ec <__ltsf2>:
     7ec:	a8 e1       	ldi	r26, 0x18	; 24
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	ec ef       	ldi	r30, 0xFC	; 252
     7f2:	f3 e0       	ldi	r31, 0x03	; 3
     7f4:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__prologue_saves__+0x18>
     7f8:	69 83       	std	Y+1, r22	; 0x01
     7fa:	7a 83       	std	Y+2, r23	; 0x02
     7fc:	8b 83       	std	Y+3, r24	; 0x03
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	2d 83       	std	Y+5, r18	; 0x05
     802:	3e 83       	std	Y+6, r19	; 0x06
     804:	4f 83       	std	Y+7, r20	; 0x07
     806:	58 87       	std	Y+8, r21	; 0x08
     808:	89 e0       	ldi	r24, 0x09	; 9
     80a:	e8 2e       	mov	r14, r24
     80c:	f1 2c       	mov	r15, r1
     80e:	ec 0e       	add	r14, r28
     810:	fd 1e       	adc	r15, r29
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	b7 01       	movw	r22, r14
     818:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     81c:	8e 01       	movw	r16, r28
     81e:	0f 5e       	subi	r16, 0xEF	; 239
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	ce 01       	movw	r24, r28
     824:	05 96       	adiw	r24, 0x05	; 5
     826:	b8 01       	movw	r22, r16
     828:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	40 f0       	brcs	.+16     	; 0x842 <__ltsf2+0x56>
     832:	89 89       	ldd	r24, Y+17	; 0x11
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	28 f0       	brcs	.+10     	; 0x842 <__ltsf2+0x56>
     838:	c7 01       	movw	r24, r14
     83a:	b8 01       	movw	r22, r16
     83c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     840:	01 c0       	rjmp	.+2      	; 0x844 <__ltsf2+0x58>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	68 96       	adiw	r28, 0x18	; 24
     846:	e6 e0       	ldi	r30, 0x06	; 6
     848:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__epilogue_restores__+0x18>

0000084c <__fixsfsi>:
     84c:	ac e0       	ldi	r26, 0x0C	; 12
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	ec e2       	ldi	r30, 0x2C	; 44
     852:	f4 e0       	ldi	r31, 0x04	; 4
     854:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__prologue_saves__+0x20>
     858:	69 83       	std	Y+1, r22	; 0x01
     85a:	7a 83       	std	Y+2, r23	; 0x02
     85c:	8b 83       	std	Y+3, r24	; 0x03
     85e:	9c 83       	std	Y+4, r25	; 0x04
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	be 01       	movw	r22, r28
     866:	6b 5f       	subi	r22, 0xFB	; 251
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	61 f1       	breq	.+88     	; 0x8cc <__stack+0x6d>
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	50 f1       	brcs	.+84     	; 0x8cc <__stack+0x6d>
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	21 f4       	brne	.+8      	; 0x884 <__stack+0x25>
     87c:	8e 81       	ldd	r24, Y+6	; 0x06
     87e:	88 23       	and	r24, r24
     880:	51 f1       	breq	.+84     	; 0x8d6 <__stack+0x77>
     882:	2e c0       	rjmp	.+92     	; 0x8e0 <__stack+0x81>
     884:	2f 81       	ldd	r18, Y+7	; 0x07
     886:	38 85       	ldd	r19, Y+8	; 0x08
     888:	37 fd       	sbrc	r19, 7
     88a:	20 c0       	rjmp	.+64     	; 0x8cc <__stack+0x6d>
     88c:	6e 81       	ldd	r22, Y+6	; 0x06
     88e:	2f 31       	cpi	r18, 0x1F	; 31
     890:	31 05       	cpc	r19, r1
     892:	1c f0       	brlt	.+6      	; 0x89a <__stack+0x3b>
     894:	66 23       	and	r22, r22
     896:	f9 f0       	breq	.+62     	; 0x8d6 <__stack+0x77>
     898:	23 c0       	rjmp	.+70     	; 0x8e0 <__stack+0x81>
     89a:	8e e1       	ldi	r24, 0x1E	; 30
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	82 1b       	sub	r24, r18
     8a0:	93 0b       	sbc	r25, r19
     8a2:	29 85       	ldd	r18, Y+9	; 0x09
     8a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a6:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a8:	5c 85       	ldd	r21, Y+12	; 0x0c
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	56 95       	lsr	r21
     8ae:	47 95       	ror	r20
     8b0:	37 95       	ror	r19
     8b2:	27 95       	ror	r18
     8b4:	8a 95       	dec	r24
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	66 23       	and	r22, r22
     8ba:	b1 f0       	breq	.+44     	; 0x8e8 <__stack+0x89>
     8bc:	50 95       	com	r21
     8be:	40 95       	com	r20
     8c0:	30 95       	com	r19
     8c2:	21 95       	neg	r18
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	4f 4f       	sbci	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <__stack+0x89>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <__stack+0x89>
     8d6:	2f ef       	ldi	r18, 0xFF	; 255
     8d8:	3f ef       	ldi	r19, 0xFF	; 255
     8da:	4f ef       	ldi	r20, 0xFF	; 255
     8dc:	5f e7       	ldi	r21, 0x7F	; 127
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <__stack+0x89>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e8       	ldi	r21, 0x80	; 128
     8e8:	b9 01       	movw	r22, r18
     8ea:	ca 01       	movw	r24, r20
     8ec:	2c 96       	adiw	r28, 0x0c	; 12
     8ee:	e2 e0       	ldi	r30, 0x02	; 2
     8f0:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__epilogue_restores__+0x20>

000008f4 <__pack_f>:
     8f4:	df 92       	push	r13
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	fc 01       	movw	r30, r24
     900:	e4 80       	ldd	r14, Z+4	; 0x04
     902:	f5 80       	ldd	r15, Z+5	; 0x05
     904:	06 81       	ldd	r16, Z+6	; 0x06
     906:	17 81       	ldd	r17, Z+7	; 0x07
     908:	d1 80       	ldd	r13, Z+1	; 0x01
     90a:	80 81       	ld	r24, Z
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	48 f4       	brcc	.+18     	; 0x922 <__pack_f+0x2e>
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a0 e1       	ldi	r26, 0x10	; 16
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	e8 2a       	or	r14, r24
     91a:	f9 2a       	or	r15, r25
     91c:	0a 2b       	or	r16, r26
     91e:	1b 2b       	or	r17, r27
     920:	a5 c0       	rjmp	.+330    	; 0xa6c <__pack_f+0x178>
     922:	84 30       	cpi	r24, 0x04	; 4
     924:	09 f4       	brne	.+2      	; 0x928 <__pack_f+0x34>
     926:	9f c0       	rjmp	.+318    	; 0xa66 <__pack_f+0x172>
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	21 f4       	brne	.+8      	; 0x934 <__pack_f+0x40>
     92c:	ee 24       	eor	r14, r14
     92e:	ff 24       	eor	r15, r15
     930:	87 01       	movw	r16, r14
     932:	05 c0       	rjmp	.+10     	; 0x93e <__pack_f+0x4a>
     934:	e1 14       	cp	r14, r1
     936:	f1 04       	cpc	r15, r1
     938:	01 05       	cpc	r16, r1
     93a:	11 05       	cpc	r17, r1
     93c:	19 f4       	brne	.+6      	; 0x944 <__pack_f+0x50>
     93e:	e0 e0       	ldi	r30, 0x00	; 0
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	96 c0       	rjmp	.+300    	; 0xa70 <__pack_f+0x17c>
     944:	62 81       	ldd	r22, Z+2	; 0x02
     946:	73 81       	ldd	r23, Z+3	; 0x03
     948:	9f ef       	ldi	r25, 0xFF	; 255
     94a:	62 38       	cpi	r22, 0x82	; 130
     94c:	79 07       	cpc	r23, r25
     94e:	0c f0       	brlt	.+2      	; 0x952 <__pack_f+0x5e>
     950:	5b c0       	rjmp	.+182    	; 0xa08 <__pack_f+0x114>
     952:	22 e8       	ldi	r18, 0x82	; 130
     954:	3f ef       	ldi	r19, 0xFF	; 255
     956:	26 1b       	sub	r18, r22
     958:	37 0b       	sbc	r19, r23
     95a:	2a 31       	cpi	r18, 0x1A	; 26
     95c:	31 05       	cpc	r19, r1
     95e:	2c f0       	brlt	.+10     	; 0x96a <__pack_f+0x76>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	2a c0       	rjmp	.+84     	; 0x9be <__pack_f+0xca>
     96a:	b8 01       	movw	r22, r16
     96c:	a7 01       	movw	r20, r14
     96e:	02 2e       	mov	r0, r18
     970:	04 c0       	rjmp	.+8      	; 0x97a <__pack_f+0x86>
     972:	76 95       	lsr	r23
     974:	67 95       	ror	r22
     976:	57 95       	ror	r21
     978:	47 95       	ror	r20
     97a:	0a 94       	dec	r0
     97c:	d2 f7       	brpl	.-12     	; 0x972 <__pack_f+0x7e>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	a0 e0       	ldi	r26, 0x00	; 0
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	04 c0       	rjmp	.+8      	; 0x990 <__pack_f+0x9c>
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	aa 1f       	adc	r26, r26
     98e:	bb 1f       	adc	r27, r27
     990:	2a 95       	dec	r18
     992:	d2 f7       	brpl	.-12     	; 0x988 <__pack_f+0x94>
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	a1 09       	sbc	r26, r1
     998:	b1 09       	sbc	r27, r1
     99a:	8e 21       	and	r24, r14
     99c:	9f 21       	and	r25, r15
     99e:	a0 23       	and	r26, r16
     9a0:	b1 23       	and	r27, r17
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	21 f0       	breq	.+8      	; 0x9b2 <__pack_f+0xbe>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	9a 01       	movw	r18, r20
     9b4:	ab 01       	movw	r20, r22
     9b6:	28 2b       	or	r18, r24
     9b8:	39 2b       	or	r19, r25
     9ba:	4a 2b       	or	r20, r26
     9bc:	5b 2b       	or	r21, r27
     9be:	da 01       	movw	r26, r20
     9c0:	c9 01       	movw	r24, r18
     9c2:	8f 77       	andi	r24, 0x7F	; 127
     9c4:	90 70       	andi	r25, 0x00	; 0
     9c6:	a0 70       	andi	r26, 0x00	; 0
     9c8:	b0 70       	andi	r27, 0x00	; 0
     9ca:	80 34       	cpi	r24, 0x40	; 64
     9cc:	91 05       	cpc	r25, r1
     9ce:	a1 05       	cpc	r26, r1
     9d0:	b1 05       	cpc	r27, r1
     9d2:	39 f4       	brne	.+14     	; 0x9e2 <__pack_f+0xee>
     9d4:	27 ff       	sbrs	r18, 7
     9d6:	09 c0       	rjmp	.+18     	; 0x9ea <__pack_f+0xf6>
     9d8:	20 5c       	subi	r18, 0xC0	; 192
     9da:	3f 4f       	sbci	r19, 0xFF	; 255
     9dc:	4f 4f       	sbci	r20, 0xFF	; 255
     9de:	5f 4f       	sbci	r21, 0xFF	; 255
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__pack_f+0xf6>
     9e2:	21 5c       	subi	r18, 0xC1	; 193
     9e4:	3f 4f       	sbci	r19, 0xFF	; 255
     9e6:	4f 4f       	sbci	r20, 0xFF	; 255
     9e8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ea:	e0 e0       	ldi	r30, 0x00	; 0
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	20 30       	cpi	r18, 0x00	; 0
     9f0:	a0 e0       	ldi	r26, 0x00	; 0
     9f2:	3a 07       	cpc	r19, r26
     9f4:	a0 e0       	ldi	r26, 0x00	; 0
     9f6:	4a 07       	cpc	r20, r26
     9f8:	a0 e4       	ldi	r26, 0x40	; 64
     9fa:	5a 07       	cpc	r21, r26
     9fc:	10 f0       	brcs	.+4      	; 0xa02 <__pack_f+0x10e>
     9fe:	e1 e0       	ldi	r30, 0x01	; 1
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	79 01       	movw	r14, r18
     a04:	8a 01       	movw	r16, r20
     a06:	27 c0       	rjmp	.+78     	; 0xa56 <__pack_f+0x162>
     a08:	60 38       	cpi	r22, 0x80	; 128
     a0a:	71 05       	cpc	r23, r1
     a0c:	64 f5       	brge	.+88     	; 0xa66 <__pack_f+0x172>
     a0e:	fb 01       	movw	r30, r22
     a10:	e1 58       	subi	r30, 0x81	; 129
     a12:	ff 4f       	sbci	r31, 0xFF	; 255
     a14:	d8 01       	movw	r26, r16
     a16:	c7 01       	movw	r24, r14
     a18:	8f 77       	andi	r24, 0x7F	; 127
     a1a:	90 70       	andi	r25, 0x00	; 0
     a1c:	a0 70       	andi	r26, 0x00	; 0
     a1e:	b0 70       	andi	r27, 0x00	; 0
     a20:	80 34       	cpi	r24, 0x40	; 64
     a22:	91 05       	cpc	r25, r1
     a24:	a1 05       	cpc	r26, r1
     a26:	b1 05       	cpc	r27, r1
     a28:	39 f4       	brne	.+14     	; 0xa38 <__pack_f+0x144>
     a2a:	e7 fe       	sbrs	r14, 7
     a2c:	0d c0       	rjmp	.+26     	; 0xa48 <__pack_f+0x154>
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__pack_f+0x14c>
     a38:	8f e3       	ldi	r24, 0x3F	; 63
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	a0 e0       	ldi	r26, 0x00	; 0
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e8 0e       	add	r14, r24
     a42:	f9 1e       	adc	r15, r25
     a44:	0a 1f       	adc	r16, r26
     a46:	1b 1f       	adc	r17, r27
     a48:	17 ff       	sbrs	r17, 7
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <__pack_f+0x162>
     a4c:	16 95       	lsr	r17
     a4e:	07 95       	ror	r16
     a50:	f7 94       	ror	r15
     a52:	e7 94       	ror	r14
     a54:	31 96       	adiw	r30, 0x01	; 1
     a56:	87 e0       	ldi	r24, 0x07	; 7
     a58:	16 95       	lsr	r17
     a5a:	07 95       	ror	r16
     a5c:	f7 94       	ror	r15
     a5e:	e7 94       	ror	r14
     a60:	8a 95       	dec	r24
     a62:	d1 f7       	brne	.-12     	; 0xa58 <__pack_f+0x164>
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <__pack_f+0x17c>
     a66:	ee 24       	eor	r14, r14
     a68:	ff 24       	eor	r15, r15
     a6a:	87 01       	movw	r16, r14
     a6c:	ef ef       	ldi	r30, 0xFF	; 255
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	6e 2f       	mov	r22, r30
     a72:	67 95       	ror	r22
     a74:	66 27       	eor	r22, r22
     a76:	67 95       	ror	r22
     a78:	90 2f       	mov	r25, r16
     a7a:	9f 77       	andi	r25, 0x7F	; 127
     a7c:	d7 94       	ror	r13
     a7e:	dd 24       	eor	r13, r13
     a80:	d7 94       	ror	r13
     a82:	8e 2f       	mov	r24, r30
     a84:	86 95       	lsr	r24
     a86:	49 2f       	mov	r20, r25
     a88:	46 2b       	or	r20, r22
     a8a:	58 2f       	mov	r21, r24
     a8c:	5d 29       	or	r21, r13
     a8e:	b7 01       	movw	r22, r14
     a90:	ca 01       	movw	r24, r20
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	08 95       	ret

00000a9e <__unpack_f>:
     a9e:	fc 01       	movw	r30, r24
     aa0:	db 01       	movw	r26, r22
     aa2:	40 81       	ld	r20, Z
     aa4:	51 81       	ldd	r21, Z+1	; 0x01
     aa6:	22 81       	ldd	r18, Z+2	; 0x02
     aa8:	62 2f       	mov	r22, r18
     aaa:	6f 77       	andi	r22, 0x7F	; 127
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	22 1f       	adc	r18, r18
     ab0:	22 27       	eor	r18, r18
     ab2:	22 1f       	adc	r18, r18
     ab4:	93 81       	ldd	r25, Z+3	; 0x03
     ab6:	89 2f       	mov	r24, r25
     ab8:	88 0f       	add	r24, r24
     aba:	82 2b       	or	r24, r18
     abc:	28 2f       	mov	r18, r24
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	99 1f       	adc	r25, r25
     ac2:	99 27       	eor	r25, r25
     ac4:	99 1f       	adc	r25, r25
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	9c 93       	st	X, r25
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	21 15       	cp	r18, r1
     ace:	31 05       	cpc	r19, r1
     ad0:	a9 f5       	brne	.+106    	; 0xb3c <__unpack_f+0x9e>
     ad2:	41 15       	cp	r20, r1
     ad4:	51 05       	cpc	r21, r1
     ad6:	61 05       	cpc	r22, r1
     ad8:	71 05       	cpc	r23, r1
     ada:	11 f4       	brne	.+4      	; 0xae0 <__unpack_f+0x42>
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	37 c0       	rjmp	.+110    	; 0xb4e <__unpack_f+0xb0>
     ae0:	82 e8       	ldi	r24, 0x82	; 130
     ae2:	9f ef       	ldi	r25, 0xFF	; 255
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	9c 93       	st	X, r25
     ae8:	8e 93       	st	-X, r24
     aea:	12 97       	sbiw	r26, 0x02	; 2
     aec:	9a 01       	movw	r18, r20
     aee:	ab 01       	movw	r20, r22
     af0:	67 e0       	ldi	r22, 0x07	; 7
     af2:	22 0f       	add	r18, r18
     af4:	33 1f       	adc	r19, r19
     af6:	44 1f       	adc	r20, r20
     af8:	55 1f       	adc	r21, r21
     afa:	6a 95       	dec	r22
     afc:	d1 f7       	brne	.-12     	; 0xaf2 <__unpack_f+0x54>
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	8c 93       	st	X, r24
     b02:	0d c0       	rjmp	.+26     	; 0xb1e <__unpack_f+0x80>
     b04:	22 0f       	add	r18, r18
     b06:	33 1f       	adc	r19, r19
     b08:	44 1f       	adc	r20, r20
     b0a:	55 1f       	adc	r21, r21
     b0c:	12 96       	adiw	r26, 0x02	; 2
     b0e:	8d 91       	ld	r24, X+
     b10:	9c 91       	ld	r25, X
     b12:	13 97       	sbiw	r26, 0x03	; 3
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	13 96       	adiw	r26, 0x03	; 3
     b18:	9c 93       	st	X, r25
     b1a:	8e 93       	st	-X, r24
     b1c:	12 97       	sbiw	r26, 0x02	; 2
     b1e:	20 30       	cpi	r18, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	38 07       	cpc	r19, r24
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	48 07       	cpc	r20, r24
     b28:	80 e4       	ldi	r24, 0x40	; 64
     b2a:	58 07       	cpc	r21, r24
     b2c:	58 f3       	brcs	.-42     	; 0xb04 <__unpack_f+0x66>
     b2e:	14 96       	adiw	r26, 0x04	; 4
     b30:	2d 93       	st	X+, r18
     b32:	3d 93       	st	X+, r19
     b34:	4d 93       	st	X+, r20
     b36:	5c 93       	st	X, r21
     b38:	17 97       	sbiw	r26, 0x07	; 7
     b3a:	08 95       	ret
     b3c:	2f 3f       	cpi	r18, 0xFF	; 255
     b3e:	31 05       	cpc	r19, r1
     b40:	79 f4       	brne	.+30     	; 0xb60 <__unpack_f+0xc2>
     b42:	41 15       	cp	r20, r1
     b44:	51 05       	cpc	r21, r1
     b46:	61 05       	cpc	r22, r1
     b48:	71 05       	cpc	r23, r1
     b4a:	19 f4       	brne	.+6      	; 0xb52 <__unpack_f+0xb4>
     b4c:	84 e0       	ldi	r24, 0x04	; 4
     b4e:	8c 93       	st	X, r24
     b50:	08 95       	ret
     b52:	64 ff       	sbrs	r22, 4
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <__unpack_f+0xbe>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	8c 93       	st	X, r24
     b5a:	12 c0       	rjmp	.+36     	; 0xb80 <__unpack_f+0xe2>
     b5c:	1c 92       	st	X, r1
     b5e:	10 c0       	rjmp	.+32     	; 0xb80 <__unpack_f+0xe2>
     b60:	2f 57       	subi	r18, 0x7F	; 127
     b62:	30 40       	sbci	r19, 0x00	; 0
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	3c 93       	st	X, r19
     b68:	2e 93       	st	-X, r18
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	8c 93       	st	X, r24
     b70:	87 e0       	ldi	r24, 0x07	; 7
     b72:	44 0f       	add	r20, r20
     b74:	55 1f       	adc	r21, r21
     b76:	66 1f       	adc	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	8a 95       	dec	r24
     b7c:	d1 f7       	brne	.-12     	; 0xb72 <__unpack_f+0xd4>
     b7e:	70 64       	ori	r23, 0x40	; 64
     b80:	14 96       	adiw	r26, 0x04	; 4
     b82:	4d 93       	st	X+, r20
     b84:	5d 93       	st	X+, r21
     b86:	6d 93       	st	X+, r22
     b88:	7c 93       	st	X, r23
     b8a:	17 97       	sbiw	r26, 0x07	; 7
     b8c:	08 95       	ret

00000b8e <__fpcmp_parts_f>:
     b8e:	1f 93       	push	r17
     b90:	dc 01       	movw	r26, r24
     b92:	fb 01       	movw	r30, r22
     b94:	9c 91       	ld	r25, X
     b96:	92 30       	cpi	r25, 0x02	; 2
     b98:	08 f4       	brcc	.+2      	; 0xb9c <__fpcmp_parts_f+0xe>
     b9a:	47 c0       	rjmp	.+142    	; 0xc2a <__fpcmp_parts_f+0x9c>
     b9c:	80 81       	ld	r24, Z
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	08 f4       	brcc	.+2      	; 0xba4 <__fpcmp_parts_f+0x16>
     ba2:	43 c0       	rjmp	.+134    	; 0xc2a <__fpcmp_parts_f+0x9c>
     ba4:	94 30       	cpi	r25, 0x04	; 4
     ba6:	51 f4       	brne	.+20     	; 0xbbc <__fpcmp_parts_f+0x2e>
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	1c 91       	ld	r17, X
     bac:	84 30       	cpi	r24, 0x04	; 4
     bae:	99 f5       	brne	.+102    	; 0xc16 <__fpcmp_parts_f+0x88>
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	68 2f       	mov	r22, r24
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	61 1b       	sub	r22, r17
     bb8:	71 09       	sbc	r23, r1
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <__fpcmp_parts_f+0xac>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	21 f0       	breq	.+8      	; 0xbc8 <__fpcmp_parts_f+0x3a>
     bc0:	92 30       	cpi	r25, 0x02	; 2
     bc2:	31 f4       	brne	.+12     	; 0xbd0 <__fpcmp_parts_f+0x42>
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	b9 f1       	breq	.+110    	; 0xc36 <__fpcmp_parts_f+0xa8>
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	88 23       	and	r24, r24
     bcc:	89 f1       	breq	.+98     	; 0xc30 <__fpcmp_parts_f+0xa2>
     bce:	2d c0       	rjmp	.+90     	; 0xc2a <__fpcmp_parts_f+0x9c>
     bd0:	11 96       	adiw	r26, 0x01	; 1
     bd2:	1c 91       	ld	r17, X
     bd4:	11 97       	sbiw	r26, 0x01	; 1
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	f1 f0       	breq	.+60     	; 0xc16 <__fpcmp_parts_f+0x88>
     bda:	81 81       	ldd	r24, Z+1	; 0x01
     bdc:	18 17       	cp	r17, r24
     bde:	d9 f4       	brne	.+54     	; 0xc16 <__fpcmp_parts_f+0x88>
     be0:	12 96       	adiw	r26, 0x02	; 2
     be2:	2d 91       	ld	r18, X+
     be4:	3c 91       	ld	r19, X
     be6:	13 97       	sbiw	r26, 0x03	; 3
     be8:	82 81       	ldd	r24, Z+2	; 0x02
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	82 17       	cp	r24, r18
     bee:	93 07       	cpc	r25, r19
     bf0:	94 f0       	brlt	.+36     	; 0xc16 <__fpcmp_parts_f+0x88>
     bf2:	28 17       	cp	r18, r24
     bf4:	39 07       	cpc	r19, r25
     bf6:	bc f0       	brlt	.+46     	; 0xc26 <__fpcmp_parts_f+0x98>
     bf8:	14 96       	adiw	r26, 0x04	; 4
     bfa:	8d 91       	ld	r24, X+
     bfc:	9d 91       	ld	r25, X+
     bfe:	0d 90       	ld	r0, X+
     c00:	bc 91       	ld	r27, X
     c02:	a0 2d       	mov	r26, r0
     c04:	24 81       	ldd	r18, Z+4	; 0x04
     c06:	35 81       	ldd	r19, Z+5	; 0x05
     c08:	46 81       	ldd	r20, Z+6	; 0x06
     c0a:	57 81       	ldd	r21, Z+7	; 0x07
     c0c:	28 17       	cp	r18, r24
     c0e:	39 07       	cpc	r19, r25
     c10:	4a 07       	cpc	r20, r26
     c12:	5b 07       	cpc	r21, r27
     c14:	18 f4       	brcc	.+6      	; 0xc1c <__fpcmp_parts_f+0x8e>
     c16:	11 23       	and	r17, r17
     c18:	41 f0       	breq	.+16     	; 0xc2a <__fpcmp_parts_f+0x9c>
     c1a:	0a c0       	rjmp	.+20     	; 0xc30 <__fpcmp_parts_f+0xa2>
     c1c:	82 17       	cp	r24, r18
     c1e:	93 07       	cpc	r25, r19
     c20:	a4 07       	cpc	r26, r20
     c22:	b5 07       	cpc	r27, r21
     c24:	40 f4       	brcc	.+16     	; 0xc36 <__fpcmp_parts_f+0xa8>
     c26:	11 23       	and	r17, r17
     c28:	19 f0       	breq	.+6      	; 0xc30 <__fpcmp_parts_f+0xa2>
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <__fpcmp_parts_f+0xac>
     c30:	6f ef       	ldi	r22, 0xFF	; 255
     c32:	7f ef       	ldi	r23, 0xFF	; 255
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <__fpcmp_parts_f+0xac>
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	cb 01       	movw	r24, r22
     c3c:	1f 91       	pop	r17
     c3e:	08 95       	ret

00000c40 <__vector_13>:


/*******************************************************************************
 *                              ISR's Definitions                              *
 *******************************************************************************/
ISR(USART_RXC_vect){
     c40:	1f 92       	push	r1
     c42:	0f 92       	push	r0
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	0f 92       	push	r0
     c48:	11 24       	eor	r1, r1
     c4a:	2f 93       	push	r18
     c4c:	3f 93       	push	r19
     c4e:	4f 93       	push	r20
     c50:	5f 93       	push	r21
     c52:	6f 93       	push	r22
     c54:	7f 93       	push	r23
     c56:	8f 93       	push	r24
     c58:	9f 93       	push	r25
     c5a:	af 93       	push	r26
     c5c:	bf 93       	push	r27
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
	g_uart_data = UDR;
     c6a:	ec e2       	ldi	r30, 0x2C	; 44
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	80 93 5b 01 	sts	0x015B, r24
    (*receiveCallBackFunction)();
     c74:	e0 91 59 01 	lds	r30, 0x0159
     c78:	f0 91 5a 01 	lds	r31, 0x015A
     c7c:	09 95       	icall
}
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <__vector_15>:

ISR(USART_TXC_vect){
     ca4:	1f 92       	push	r1
     ca6:	0f 92       	push	r0
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	0f 92       	push	r0
     cac:	11 24       	eor	r1, r1
     cae:	2f 93       	push	r18
     cb0:	3f 93       	push	r19
     cb2:	4f 93       	push	r20
     cb4:	5f 93       	push	r21
     cb6:	6f 93       	push	r22
     cb8:	7f 93       	push	r23
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
     cbe:	af 93       	push	r26
     cc0:	bf 93       	push	r27
     cc2:	ef 93       	push	r30
     cc4:	ff 93       	push	r31
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	(*transmitionCallBackFunction)();
     cce:	e0 91 57 01 	lds	r30, 0x0157
     cd2:	f0 91 58 01 	lds	r31, 0x0158
     cd6:	09 95       	icall
}
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	ff 91       	pop	r31
     cde:	ef 91       	pop	r30
     ce0:	bf 91       	pop	r27
     ce2:	af 91       	pop	r26
     ce4:	9f 91       	pop	r25
     ce6:	8f 91       	pop	r24
     ce8:	7f 91       	pop	r23
     cea:	6f 91       	pop	r22
     cec:	5f 91       	pop	r21
     cee:	4f 91       	pop	r20
     cf0:	3f 91       	pop	r19
     cf2:	2f 91       	pop	r18
     cf4:	0f 90       	pop	r0
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	0f 90       	pop	r0
     cfa:	1f 90       	pop	r1
     cfc:	18 95       	reti

00000cfe <UART_init>:

 /*******************************************************************************
 *                            Functions Definitions                            *
 *******************************************************************************/
void UART_init(ST_uart_ConfigType *configType){
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	00 d0       	rcall	.+0      	; 0xd04 <UART_init+0x6>
     d04:	00 d0       	rcall	.+0      	; 0xd06 <UART_init+0x8>
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	9c 83       	std	Y+4, r25	; 0x04
     d0c:	8b 83       	std	Y+3, r24	; 0x03

    uint16 ubrr_value = 0;
     d0e:	1a 82       	std	Y+2, r1	; 0x02
     d10:	19 82       	std	Y+1, r1	; 0x01

	UCSRA |= ( configType->u2x << U2X); 					/* Enable Double the USART Transmission Speed */
     d12:	ab e2       	ldi	r26, 0x2B	; 43
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	eb e2       	ldi	r30, 0x2B	; 43
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	28 2f       	mov	r18, r24
     d1e:	eb 81       	ldd	r30, Y+3	; 0x03
     d20:	fc 81       	ldd	r31, Y+4	; 0x04
     d22:	85 81       	ldd	r24, Z+5	; 0x05
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	82 2b       	or	r24, r18
     d2e:	8c 93       	st	X, r24

	UCSRB |= ( 1 << TXEN );									/* Transmitter Enable*/
     d30:	aa e2       	ldi	r26, 0x2A	; 42
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	ea e2       	ldi	r30, 0x2A	; 42
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	88 60       	ori	r24, 0x08	; 8
     d3c:	8c 93       	st	X, r24
	UCSRB |= ( 1 << RXEN );									/* Receiver Enable */
     d3e:	aa e2       	ldi	r26, 0x2A	; 42
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	ea e2       	ldi	r30, 0x2A	; 42
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	80 61       	ori	r24, 0x10	; 16
     d4a:	8c 93       	st	X, r24
	UCSRB |= ( configType-> receiveInterrupt << RXCIE);		/* RX Complete Interrupt Enable */
     d4c:	aa e2       	ldi	r26, 0x2A	; 42
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	ea e2       	ldi	r30, 0x2A	; 42
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	28 2f       	mov	r18, r24
     d58:	eb 81       	ldd	r30, Y+3	; 0x03
     d5a:	fc 81       	ldd	r31, Y+4	; 0x04
     d5c:	87 81       	ldd	r24, Z+7	; 0x07
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	96 95       	lsr	r25
     d64:	98 2f       	mov	r25, r24
     d66:	88 27       	eor	r24, r24
     d68:	97 95       	ror	r25
     d6a:	87 95       	ror	r24
     d6c:	82 2b       	or	r24, r18
     d6e:	8c 93       	st	X, r24
	UCSRB |= ( configType-> transmitInterrupt << TXCIE);	/* TX Complete Interrupt Enable */
     d70:	aa e2       	ldi	r26, 0x2A	; 42
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	ea e2       	ldi	r30, 0x2A	; 42
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	28 2f       	mov	r18, r24
     d7c:	eb 81       	ldd	r30, Y+3	; 0x03
     d7e:	fc 81       	ldd	r31, Y+4	; 0x04
     d80:	86 81       	ldd	r24, Z+6	; 0x06
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	00 24       	eor	r0, r0
     d88:	96 95       	lsr	r25
     d8a:	87 95       	ror	r24
     d8c:	07 94       	ror	r0
     d8e:	96 95       	lsr	r25
     d90:	87 95       	ror	r24
     d92:	07 94       	ror	r0
     d94:	98 2f       	mov	r25, r24
     d96:	80 2d       	mov	r24, r0
     d98:	82 2b       	or	r24, r18
     d9a:	8c 93       	st	X, r24

	UCSRC |= ( configType->bit_data << UCSZ0 ); 			/* configure number of bits to be send, UCSZ1:0: 11 -> 8-bit */ /* will not work with 9-bits because UCSZ2 not in UCSRC */
     d9c:	a0 e4       	ldi	r26, 0x40	; 64
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e0 e4       	ldi	r30, 0x40	; 64
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	28 2f       	mov	r18, r24
     da8:	eb 81       	ldd	r30, Y+3	; 0x03
     daa:	fc 81       	ldd	r31, Y+4	; 0x04
     dac:	80 81       	ld	r24, Z
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	82 2b       	or	r24, r18
     db8:	8c 93       	st	X, r24
	UCSRC |= ( configType->parity << UPM0 );				/* configure parity bits */
     dba:	a0 e4       	ldi	r26, 0x40	; 64
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e0 e4       	ldi	r30, 0x40	; 64
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	28 2f       	mov	r18, r24
     dc6:	eb 81       	ldd	r30, Y+3	; 0x03
     dc8:	fc 81       	ldd	r31, Y+4	; 0x04
     dca:	81 81       	ldd	r24, Z+1	; 0x01
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	82 95       	swap	r24
     dd2:	92 95       	swap	r25
     dd4:	90 7f       	andi	r25, 0xF0	; 240
     dd6:	98 27       	eor	r25, r24
     dd8:	80 7f       	andi	r24, 0xF0	; 240
     dda:	98 27       	eor	r25, r24
     ddc:	82 2b       	or	r24, r18
     dde:	8c 93       	st	X, r24
	UCSRC |= ( configType->stop_bit << USBS );				/* configure stop bits */
     de0:	a0 e4       	ldi	r26, 0x40	; 64
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e0 e4       	ldi	r30, 0x40	; 64
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	28 2f       	mov	r18, r24
     dec:	eb 81       	ldd	r30, Y+3	; 0x03
     dee:	fc 81       	ldd	r31, Y+4	; 0x04
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	82 2b       	or	r24, r18
     e04:	8c 93       	st	X, r24



	if(configType->u2x == UART_U2X_ENABLE)
     e06:	eb 81       	ldd	r30, Y+3	; 0x03
     e08:	fc 81       	ldd	r31, Y+4	; 0x04
     e0a:	85 81       	ldd	r24, Z+5	; 0x05
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	19 f5       	brne	.+70     	; 0xe56 <UART_init+0x158>
		ubrr_value = (uint16) CALCULATE_BAUD_RATE(configType->baud_rate);
     e10:	eb 81       	ldd	r30, Y+3	; 0x03
     e12:	fc 81       	ldd	r31, Y+4	; 0x04
     e14:	83 81       	ldd	r24, Z+3	; 0x03
     e16:	94 81       	ldd	r25, Z+4	; 0x04
     e18:	cc 01       	movw	r24, r24
     e1a:	a0 e0       	ldi	r26, 0x00	; 0
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	aa 1f       	adc	r26, r26
     e24:	bb 1f       	adc	r27, r27
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	aa 1f       	adc	r26, r26
     e2c:	bb 1f       	adc	r27, r27
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	aa 1f       	adc	r26, r26
     e34:	bb 1f       	adc	r27, r27
     e36:	9c 01       	movw	r18, r24
     e38:	ad 01       	movw	r20, r26
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	92 e1       	ldi	r25, 0x12	; 18
     e3e:	aa e7       	ldi	r26, 0x7A	; 122
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	bc 01       	movw	r22, r24
     e44:	cd 01       	movw	r24, r26
     e46:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <__udivmodsi4>
     e4a:	da 01       	movw	r26, r20
     e4c:	c9 01       	movw	r24, r18
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	89 83       	std	Y+1, r24	; 0x01
     e54:	26 c0       	rjmp	.+76     	; 0xea2 <UART_init+0x1a4>
	else
		ubrr_value = (uint16) CALCULATE_BAUD_RATE(configType->baud_rate * 2);
     e56:	eb 81       	ldd	r30, Y+3	; 0x03
     e58:	fc 81       	ldd	r31, Y+4	; 0x04
     e5a:	83 81       	ldd	r24, Z+3	; 0x03
     e5c:	94 81       	ldd	r25, Z+4	; 0x04
     e5e:	cc 01       	movw	r24, r24
     e60:	a0 e0       	ldi	r26, 0x00	; 0
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	aa 1f       	adc	r26, r26
     e6a:	bb 1f       	adc	r27, r27
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	aa 1f       	adc	r26, r26
     e72:	bb 1f       	adc	r27, r27
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	aa 1f       	adc	r26, r26
     e7a:	bb 1f       	adc	r27, r27
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	aa 1f       	adc	r26, r26
     e82:	bb 1f       	adc	r27, r27
     e84:	9c 01       	movw	r18, r24
     e86:	ad 01       	movw	r20, r26
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	92 e1       	ldi	r25, 0x12	; 18
     e8c:	aa e7       	ldi	r26, 0x7A	; 122
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	bc 01       	movw	r22, r24
     e92:	cd 01       	movw	r24, r26
     e94:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <__udivmodsi4>
     e98:	da 01       	movw	r26, r20
     e9a:	c9 01       	movw	r24, r18
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01

//	UBRRH = (ubrr_value >> 8) & (0x0F);
	UBRRH = (uint8)(ubrr_value >> 8);
     ea2:	e0 e4       	ldi	r30, 0x40	; 64
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	89 2f       	mov	r24, r25
     eac:	99 27       	eor	r25, r25
     eae:	80 83       	st	Z, r24
	UBRRL = (uint8) ubrr_value;
     eb0:	e9 e2       	ldi	r30, 0x29	; 41
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	80 83       	st	Z, r24

}
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <UART_sendCharacter>:

void UART_sendCharacter(uint8 data){
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
     ed2:	eb e2       	ldi	r30, 0x2B	; 43
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	80 72       	andi	r24, 0x20	; 32
     ede:	90 70       	andi	r25, 0x00	; 0
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	b9 f3       	breq	.-18     	; 0xed2 <UART_sendCharacter+0xc>
	UDR = data;
     ee4:	ec e2       	ldi	r30, 0x2C	; 44
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	80 83       	st	Z, r24
}
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <UART_sendArray>:

void UART_sendArray(uint8 *str, uint8 str_size){
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <UART_sendArray+0x6>
     efa:	00 d0       	rcall	.+0      	; 0xefc <UART_sendArray+0x8>
     efc:	0f 92       	push	r0
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	8b 83       	std	Y+3, r24	; 0x03
     f06:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < str_size; i++){
     f08:	1a 82       	std	Y+2, r1	; 0x02
     f0a:	19 82       	std	Y+1, r1	; 0x01
     f0c:	19 c0       	rjmp	.+50     	; 0xf40 <UART_sendArray+0x4c>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
     f0e:	eb e2       	ldi	r30, 0x2B	; 43
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	80 72       	andi	r24, 0x20	; 32
     f1a:	90 70       	andi	r25, 0x00	; 0
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	b9 f3       	breq	.-18     	; 0xf0e <UART_sendArray+0x1a>
		UDR = str[i];
     f20:	ac e2       	ldi	r26, 0x2C	; 44
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	29 81       	ldd	r18, Y+1	; 0x01
     f26:	3a 81       	ldd	r19, Y+2	; 0x02
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	fc 01       	movw	r30, r24
     f2e:	e2 0f       	add	r30, r18
     f30:	f3 1f       	adc	r31, r19
     f32:	80 81       	ld	r24, Z
     f34:	8c 93       	st	X, r24
	UDR = data;
}

void UART_sendArray(uint8 *str, uint8 str_size){

	for(int i = 0; i < str_size; i++){
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	8d 81       	ldd	r24, Y+5	; 0x05
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	9a 81       	ldd	r25, Y+2	; 0x02
     f4a:	82 17       	cp	r24, r18
     f4c:	93 07       	cpc	r25, r19
     f4e:	fc f2       	brlt	.-66     	; 0xf0e <UART_sendArray+0x1a>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
		UDR = str[i];
	}

}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <UART_rcvCharacter>:

uint8 UART_rcvCharacter(){
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
	while( BIT_IS_CLEAR(UCSRA, RXC) ){}
     f68:	eb e2       	ldi	r30, 0x2B	; 43
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	88 23       	and	r24, r24
     f70:	dc f7       	brge	.-10     	; 0xf68 <UART_rcvCharacter+0x8>
	return UDR;
     f72:	ec e2       	ldi	r30, 0x2C	; 44
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <UART_int_rx_callBack>:

void UART_int_rx_callBack(void (*callBackFunction)(void)){
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	00 d0       	rcall	.+0      	; 0xf84 <UART_int_rx_callBack+0x6>
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
	receiveCallBackFunction = callBackFunction;
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	90 93 5a 01 	sts	0x015A, r25
     f94:	80 93 59 01 	sts	0x0159, r24
}
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <UART_int_tx_callBack>:

void UART_int_tx_callBack(void (*callBackFunction)(void)){
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <UART_int_tx_callBack+0x6>
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01
    transmitionCallBackFunction = callBackFunction;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	90 93 58 01 	sts	0x0158, r25
     fb8:	80 93 57 01 	sts	0x0157, r24
}
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <__vector_9>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(TIMER1_OVF_vect){
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62

	(*callBackFunction)();
     ff0:	e0 91 5c 01 	lds	r30, 0x015C
     ff4:	f0 91 5d 01 	lds	r31, 0x015D
     ff8:	09 95       	icall
	TCNT1 = tcnt1_value;
     ffa:	ec e4       	ldi	r30, 0x4C	; 76
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 91 50 01 	lds	r24, 0x0150
    1002:	90 91 51 01 	lds	r25, 0x0151
    1006:	91 83       	std	Z+1, r25	; 0x01
    1008:	80 83       	st	Z, r24
}
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	ff 91       	pop	r31
    1010:	ef 91       	pop	r30
    1012:	bf 91       	pop	r27
    1014:	af 91       	pop	r26
    1016:	9f 91       	pop	r25
    1018:	8f 91       	pop	r24
    101a:	7f 91       	pop	r23
    101c:	6f 91       	pop	r22
    101e:	5f 91       	pop	r21
    1020:	4f 91       	pop	r20
    1022:	3f 91       	pop	r19
    1024:	2f 91       	pop	r18
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <Timer1_init>:


void Timer1_init(const ST_timer1_configType * Config_Ptr){
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <Timer1_init+0x6>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	9a 83       	std	Y+2, r25	; 0x02
    103c:	89 83       	std	Y+1, r24	; 0x01

	tcnt1_value = Config_Ptr->initial_value;
    103e:	e9 81       	ldd	r30, Y+1	; 0x01
    1040:	fa 81       	ldd	r31, Y+2	; 0x02
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	90 93 51 01 	sts	0x0151, r25
    104a:	80 93 50 01 	sts	0x0150, r24


	TCNT1 = tcnt1_value;
    104e:	ec e4       	ldi	r30, 0x4C	; 76
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 91 50 01 	lds	r24, 0x0150
    1056:	90 91 51 01 	lds	r25, 0x0151
    105a:	91 83       	std	Z+1, r25	; 0x01
    105c:	80 83       	st	Z, r24
	TCCR1B |= ( 0x07 & Config_Ptr->prescaler );
    105e:	ae e4       	ldi	r26, 0x4E	; 78
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ee e4       	ldi	r30, 0x4E	; 78
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	98 2f       	mov	r25, r24
    106a:	e9 81       	ldd	r30, Y+1	; 0x01
    106c:	fa 81       	ldd	r31, Y+2	; 0x02
    106e:	84 81       	ldd	r24, Z+4	; 0x04
    1070:	87 70       	andi	r24, 0x07	; 7
    1072:	89 2b       	or	r24, r25
    1074:	8c 93       	st	X, r24
	SET_BIT(TIMSK, TOIE1);	/* Overflow Interrupt Enable */
    1076:	a9 e5       	ldi	r26, 0x59	; 89
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e9 e5       	ldi	r30, 0x59	; 89
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	84 60       	ori	r24, 0x04	; 4
    1082:	8c 93       	st	X, r24


}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <Timer1_deInit>:
void Timer1_deInit(void){
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1096:	ec e4       	ldi	r30, 0x4C	; 76
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	11 82       	std	Z+1, r1	; 0x01
    109c:	10 82       	st	Z, r1
	TCCR1A = 0;
    109e:	ef e4       	ldi	r30, 0x4F	; 79
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	10 82       	st	Z, r1
	TCCR1B = 0;
    10a4:	ee e4       	ldi	r30, 0x4E	; 78
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, TOIE1);
    10aa:	a9 e5       	ldi	r26, 0x59	; 89
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e9 e5       	ldi	r30, 0x59	; 89
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8b 7f       	andi	r24, 0xFB	; 251
    10b6:	8c 93       	st	X, r24
}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void)){
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <Timer1_setCallBack+0x6>
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	89 83       	std	Y+1, r24	; 0x01

	callBackFunction = a_ptr;
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	90 93 5d 01 	sts	0x015D, r25
    10d4:	80 93 5c 01 	sts	0x015C, r24
}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <GPIO_setupPinDirection>:
 *******************************************************************************/



void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <GPIO_setupPinDirection+0x6>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <GPIO_setupPinDirection+0x8>
    10ea:	0f 92       	push	r0
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	6a 83       	std	Y+2, r22	; 0x02
    10f4:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	88 30       	cpi	r24, 0x08	; 8
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <GPIO_setupPinDirection+0x1c>
    10fc:	d5 c0       	rjmp	.+426    	; 0x12a8 <GPIO_setupPinDirection+0x1c6>
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	84 30       	cpi	r24, 0x04	; 4
    1102:	08 f0       	brcs	.+2      	; 0x1106 <GPIO_setupPinDirection+0x24>
    1104:	d1 c0       	rjmp	.+418    	; 0x12a8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	3d 83       	std	Y+5, r19	; 0x05
    110e:	2c 83       	std	Y+4, r18	; 0x04
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	91 05       	cpc	r25, r1
    1118:	09 f4       	brne	.+2      	; 0x111c <GPIO_setupPinDirection+0x3a>
    111a:	43 c0       	rjmp	.+134    	; 0x11a2 <GPIO_setupPinDirection+0xc0>
    111c:	2c 81       	ldd	r18, Y+4	; 0x04
    111e:	3d 81       	ldd	r19, Y+5	; 0x05
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	2c f4       	brge	.+10     	; 0x1130 <GPIO_setupPinDirection+0x4e>
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	9d 81       	ldd	r25, Y+5	; 0x05
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	71 f0       	breq	.+28     	; 0x114a <GPIO_setupPinDirection+0x68>
    112e:	bc c0       	rjmp	.+376    	; 0x12a8 <GPIO_setupPinDirection+0x1c6>
    1130:	2c 81       	ldd	r18, Y+4	; 0x04
    1132:	3d 81       	ldd	r19, Y+5	; 0x05
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	09 f4       	brne	.+2      	; 0x113c <GPIO_setupPinDirection+0x5a>
    113a:	5f c0       	rjmp	.+190    	; 0x11fa <GPIO_setupPinDirection+0x118>
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	9d 81       	ldd	r25, Y+5	; 0x05
    1140:	83 30       	cpi	r24, 0x03	; 3
    1142:	91 05       	cpc	r25, r1
    1144:	09 f4       	brne	.+2      	; 0x1148 <GPIO_setupPinDirection+0x66>
    1146:	85 c0       	rjmp	.+266    	; 0x1252 <GPIO_setupPinDirection+0x170>
    1148:	af c0       	rjmp	.+350    	; 0x12a8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	a1 f4       	brne	.+40     	; 0x1178 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1150:	aa e3       	ldi	r26, 0x3A	; 58
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ea e3       	ldi	r30, 0x3A	; 58
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <GPIO_setupPinDirection+0x8c>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <GPIO_setupPinDirection+0x88>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	98 c0       	rjmp	.+304    	; 0x12a8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1178:	aa e3       	ldi	r26, 0x3A	; 58
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ea e3       	ldi	r30, 0x3A	; 58
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <GPIO_setupPinDirection+0xb4>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <GPIO_setupPinDirection+0xb0>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	83 c0       	rjmp	.+262    	; 0x12a8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	a1 f4       	brne	.+40     	; 0x11d0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    11a8:	a7 e3       	ldi	r26, 0x37	; 55
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e7 e3       	ldi	r30, 0x37	; 55
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <GPIO_setupPinDirection+0xe4>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <GPIO_setupPinDirection+0xe0>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	6c c0       	rjmp	.+216    	; 0x12a8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    11d0:	a7 e3       	ldi	r26, 0x37	; 55
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e7 e3       	ldi	r30, 0x37	; 55
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <GPIO_setupPinDirection+0x10c>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <GPIO_setupPinDirection+0x108>
    11f2:	80 95       	com	r24
    11f4:	84 23       	and	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	57 c0       	rjmp	.+174    	; 0x12a8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	a1 f4       	brne	.+40     	; 0x1228 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1200:	a4 e3       	ldi	r26, 0x34	; 52
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e4 e3       	ldi	r30, 0x34	; 52
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <GPIO_setupPinDirection+0x13c>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <GPIO_setupPinDirection+0x138>
    1222:	84 2b       	or	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	40 c0       	rjmp	.+128    	; 0x12a8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1228:	a4 e3       	ldi	r26, 0x34	; 52
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e4 e3       	ldi	r30, 0x34	; 52
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <GPIO_setupPinDirection+0x164>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <GPIO_setupPinDirection+0x160>
    124a:	80 95       	com	r24
    124c:	84 23       	and	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	2b c0       	rjmp	.+86     	; 0x12a8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	a1 f4       	brne	.+40     	; 0x1280 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1258:	a1 e3       	ldi	r26, 0x31	; 49
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e1 e3       	ldi	r30, 0x31	; 49
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <GPIO_setupPinDirection+0x194>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <GPIO_setupPinDirection+0x190>
    127a:	84 2b       	or	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	14 c0       	rjmp	.+40     	; 0x12a8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1280:	a1 e3       	ldi	r26, 0x31	; 49
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e1 e3       	ldi	r30, 0x31	; 49
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <GPIO_setupPinDirection+0x1bc>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <GPIO_setupPinDirection+0x1b8>
    12a2:	80 95       	com	r24
    12a4:	84 23       	and	r24, r20
    12a6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	00 d0       	rcall	.+0      	; 0x12be <GPIO_writePin+0x6>
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <GPIO_writePin+0x8>
    12c0:	0f 92       	push	r0
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	6a 83       	std	Y+2, r22	; 0x02
    12ca:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	88 30       	cpi	r24, 0x08	; 8
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <GPIO_writePin+0x1c>
    12d2:	d5 c0       	rjmp	.+426    	; 0x147e <GPIO_writePin+0x1c6>
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	84 30       	cpi	r24, 0x04	; 4
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <GPIO_writePin+0x24>
    12da:	d1 c0       	rjmp	.+418    	; 0x147e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3d 83       	std	Y+5, r19	; 0x05
    12e4:	2c 83       	std	Y+4, r18	; 0x04
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	91 05       	cpc	r25, r1
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <GPIO_writePin+0x3a>
    12f0:	43 c0       	rjmp	.+134    	; 0x1378 <GPIO_writePin+0xc0>
    12f2:	2c 81       	ldd	r18, Y+4	; 0x04
    12f4:	3d 81       	ldd	r19, Y+5	; 0x05
    12f6:	22 30       	cpi	r18, 0x02	; 2
    12f8:	31 05       	cpc	r19, r1
    12fa:	2c f4       	brge	.+10     	; 0x1306 <GPIO_writePin+0x4e>
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
    12fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	71 f0       	breq	.+28     	; 0x1320 <GPIO_writePin+0x68>
    1304:	bc c0       	rjmp	.+376    	; 0x147e <GPIO_writePin+0x1c6>
    1306:	2c 81       	ldd	r18, Y+4	; 0x04
    1308:	3d 81       	ldd	r19, Y+5	; 0x05
    130a:	22 30       	cpi	r18, 0x02	; 2
    130c:	31 05       	cpc	r19, r1
    130e:	09 f4       	brne	.+2      	; 0x1312 <GPIO_writePin+0x5a>
    1310:	5f c0       	rjmp	.+190    	; 0x13d0 <GPIO_writePin+0x118>
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	83 30       	cpi	r24, 0x03	; 3
    1318:	91 05       	cpc	r25, r1
    131a:	09 f4       	brne	.+2      	; 0x131e <GPIO_writePin+0x66>
    131c:	85 c0       	rjmp	.+266    	; 0x1428 <GPIO_writePin+0x170>
    131e:	af c0       	rjmp	.+350    	; 0x147e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	a1 f4       	brne	.+40     	; 0x134e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1326:	ab e3       	ldi	r26, 0x3B	; 59
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	eb e3       	ldi	r30, 0x3B	; 59
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <GPIO_writePin+0x8c>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <GPIO_writePin+0x88>
    1348:	84 2b       	or	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	98 c0       	rjmp	.+304    	; 0x147e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    134e:	ab e3       	ldi	r26, 0x3B	; 59
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	eb e3       	ldi	r30, 0x3B	; 59
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <GPIO_writePin+0xb4>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <GPIO_writePin+0xb0>
    1370:	80 95       	com	r24
    1372:	84 23       	and	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	83 c0       	rjmp	.+262    	; 0x147e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	a1 f4       	brne	.+40     	; 0x13a6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    137e:	a8 e3       	ldi	r26, 0x38	; 56
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e8 e3       	ldi	r30, 0x38	; 56
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <GPIO_writePin+0xe4>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <GPIO_writePin+0xe0>
    13a0:	84 2b       	or	r24, r20
    13a2:	8c 93       	st	X, r24
    13a4:	6c c0       	rjmp	.+216    	; 0x147e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    13a6:	a8 e3       	ldi	r26, 0x38	; 56
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e8 e3       	ldi	r30, 0x38	; 56
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	48 2f       	mov	r20, r24
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 2e       	mov	r0, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <GPIO_writePin+0x10c>
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	0a 94       	dec	r0
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <GPIO_writePin+0x108>
    13c8:	80 95       	com	r24
    13ca:	84 23       	and	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	57 c0       	rjmp	.+174    	; 0x147e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	a1 f4       	brne	.+40     	; 0x13fe <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    13d6:	a5 e3       	ldi	r26, 0x35	; 53
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e3       	ldi	r30, 0x35	; 53
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <GPIO_writePin+0x13c>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <GPIO_writePin+0x138>
    13f8:	84 2b       	or	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	40 c0       	rjmp	.+128    	; 0x147e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    13fe:	a5 e3       	ldi	r26, 0x35	; 53
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e3       	ldi	r30, 0x35	; 53
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <GPIO_writePin+0x164>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <GPIO_writePin+0x160>
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	2b c0       	rjmp	.+86     	; 0x147e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	a1 f4       	brne	.+40     	; 0x1456 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    142e:	a2 e3       	ldi	r26, 0x32	; 50
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e2 e3       	ldi	r30, 0x32	; 50
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <GPIO_writePin+0x194>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <GPIO_writePin+0x190>
    1450:	84 2b       	or	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	14 c0       	rjmp	.+40     	; 0x147e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1456:	a2 e3       	ldi	r26, 0x32	; 50
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e2 e3       	ldi	r30, 0x32	; 50
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <GPIO_writePin+0x1bc>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <GPIO_writePin+0x1b8>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <GPIO_readPin+0x6>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <GPIO_readPin+0x8>
    1496:	0f 92       	push	r0
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	8a 83       	std	Y+2, r24	; 0x02
    149e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    14a0:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	88 30       	cpi	r24, 0x08	; 8
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <GPIO_readPin+0x1c>
    14a8:	84 c0       	rjmp	.+264    	; 0x15b2 <GPIO_readPin+0x124>
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	84 30       	cpi	r24, 0x04	; 4
    14ae:	08 f0       	brcs	.+2      	; 0x14b2 <GPIO_readPin+0x24>
    14b0:	80 c0       	rjmp	.+256    	; 0x15b2 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	3d 83       	std	Y+5, r19	; 0x05
    14ba:	2c 83       	std	Y+4, r18	; 0x04
    14bc:	4c 81       	ldd	r20, Y+4	; 0x04
    14be:	5d 81       	ldd	r21, Y+5	; 0x05
    14c0:	41 30       	cpi	r20, 0x01	; 1
    14c2:	51 05       	cpc	r21, r1
    14c4:	79 f1       	breq	.+94     	; 0x1524 <GPIO_readPin+0x96>
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	82 30       	cpi	r24, 0x02	; 2
    14cc:	91 05       	cpc	r25, r1
    14ce:	34 f4       	brge	.+12     	; 0x14dc <GPIO_readPin+0x4e>
    14d0:	2c 81       	ldd	r18, Y+4	; 0x04
    14d2:	3d 81       	ldd	r19, Y+5	; 0x05
    14d4:	21 15       	cp	r18, r1
    14d6:	31 05       	cpc	r19, r1
    14d8:	69 f0       	breq	.+26     	; 0x14f4 <GPIO_readPin+0x66>
    14da:	6b c0       	rjmp	.+214    	; 0x15b2 <GPIO_readPin+0x124>
    14dc:	4c 81       	ldd	r20, Y+4	; 0x04
    14de:	5d 81       	ldd	r21, Y+5	; 0x05
    14e0:	42 30       	cpi	r20, 0x02	; 2
    14e2:	51 05       	cpc	r21, r1
    14e4:	b9 f1       	breq	.+110    	; 0x1554 <GPIO_readPin+0xc6>
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	91 05       	cpc	r25, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <GPIO_readPin+0x64>
    14f0:	49 c0       	rjmp	.+146    	; 0x1584 <GPIO_readPin+0xf6>
    14f2:	5f c0       	rjmp	.+190    	; 0x15b2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    14f4:	e9 e3       	ldi	r30, 0x39	; 57
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	88 2f       	mov	r24, r24
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a9 01       	movw	r20, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <GPIO_readPin+0x7e>
    1508:	55 95       	asr	r21
    150a:	47 95       	ror	r20
    150c:	8a 95       	dec	r24
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <GPIO_readPin+0x7a>
    1510:	ca 01       	movw	r24, r20
    1512:	81 70       	andi	r24, 0x01	; 1
    1514:	90 70       	andi	r25, 0x00	; 0
    1516:	88 23       	and	r24, r24
    1518:	19 f0       	breq	.+6      	; 0x1520 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	49 c0       	rjmp	.+146    	; 0x15b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1520:	19 82       	std	Y+1, r1	; 0x01
    1522:	47 c0       	rjmp	.+142    	; 0x15b2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1524:	e6 e3       	ldi	r30, 0x36	; 54
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	88 2f       	mov	r24, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	a9 01       	movw	r20, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <GPIO_readPin+0xae>
    1538:	55 95       	asr	r21
    153a:	47 95       	ror	r20
    153c:	8a 95       	dec	r24
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <GPIO_readPin+0xaa>
    1540:	ca 01       	movw	r24, r20
    1542:	81 70       	andi	r24, 0x01	; 1
    1544:	90 70       	andi	r25, 0x00	; 0
    1546:	88 23       	and	r24, r24
    1548:	19 f0       	breq	.+6      	; 0x1550 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	31 c0       	rjmp	.+98     	; 0x15b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1550:	19 82       	std	Y+1, r1	; 0x01
    1552:	2f c0       	rjmp	.+94     	; 0x15b2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1554:	e3 e3       	ldi	r30, 0x33	; 51
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a9 01       	movw	r20, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <GPIO_readPin+0xde>
    1568:	55 95       	asr	r21
    156a:	47 95       	ror	r20
    156c:	8a 95       	dec	r24
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <GPIO_readPin+0xda>
    1570:	ca 01       	movw	r24, r20
    1572:	81 70       	andi	r24, 0x01	; 1
    1574:	90 70       	andi	r25, 0x00	; 0
    1576:	88 23       	and	r24, r24
    1578:	19 f0       	breq	.+6      	; 0x1580 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	19 c0       	rjmp	.+50     	; 0x15b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1580:	19 82       	std	Y+1, r1	; 0x01
    1582:	17 c0       	rjmp	.+46     	; 0x15b2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1584:	e0 e3       	ldi	r30, 0x30	; 48
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	88 2f       	mov	r24, r24
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a9 01       	movw	r20, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <GPIO_readPin+0x10e>
    1598:	55 95       	asr	r21
    159a:	47 95       	ror	r20
    159c:	8a 95       	dec	r24
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <GPIO_readPin+0x10a>
    15a0:	ca 01       	movw	r24, r20
    15a2:	81 70       	andi	r24, 0x01	; 1
    15a4:	90 70       	andi	r25, 0x00	; 0
    15a6:	88 23       	and	r24, r24
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15b0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <GPIO_togglePin>:
void GPIO_togglePin(uint8 port_num, uint8 pin_num){
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <GPIO_togglePin+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <GPIO_togglePin+0x8>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	6a 83       	std	Y+2, r22	; 0x02


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	88 30       	cpi	r24, 0x08	; 8
    15d8:	08 f0       	brcs	.+2      	; 0x15dc <GPIO_togglePin+0x18>
    15da:	72 c0       	rjmp	.+228    	; 0x16c0 <GPIO_togglePin+0xfc>
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	84 30       	cpi	r24, 0x04	; 4
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <GPIO_togglePin+0x20>
    15e2:	6e c0       	rjmp	.+220    	; 0x16c0 <GPIO_togglePin+0xfc>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	3c 83       	std	Y+4, r19	; 0x04
    15ec:	2b 83       	std	Y+3, r18	; 0x03
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	91 05       	cpc	r25, r1
    15f6:	49 f1       	breq	.+82     	; 0x164a <GPIO_togglePin+0x86>
    15f8:	2b 81       	ldd	r18, Y+3	; 0x03
    15fa:	3c 81       	ldd	r19, Y+4	; 0x04
    15fc:	22 30       	cpi	r18, 0x02	; 2
    15fe:	31 05       	cpc	r19, r1
    1600:	2c f4       	brge	.+10     	; 0x160c <GPIO_togglePin+0x48>
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	61 f0       	breq	.+24     	; 0x1622 <GPIO_togglePin+0x5e>
    160a:	5a c0       	rjmp	.+180    	; 0x16c0 <GPIO_togglePin+0xfc>
    160c:	2b 81       	ldd	r18, Y+3	; 0x03
    160e:	3c 81       	ldd	r19, Y+4	; 0x04
    1610:	22 30       	cpi	r18, 0x02	; 2
    1612:	31 05       	cpc	r19, r1
    1614:	71 f1       	breq	.+92     	; 0x1672 <GPIO_togglePin+0xae>
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	83 30       	cpi	r24, 0x03	; 3
    161c:	91 05       	cpc	r25, r1
    161e:	e9 f1       	breq	.+122    	; 0x169a <GPIO_togglePin+0xd6>
    1620:	4f c0       	rjmp	.+158    	; 0x16c0 <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA, pin_num);
    1622:	ab e3       	ldi	r26, 0x3B	; 59
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	eb e3       	ldi	r30, 0x3B	; 59
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <GPIO_togglePin+0x7c>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <GPIO_togglePin+0x78>
    1644:	84 27       	eor	r24, r20
    1646:	8c 93       	st	X, r24
    1648:	3b c0       	rjmp	.+118    	; 0x16c0 <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB, pin_num);
    164a:	a8 e3       	ldi	r26, 0x38	; 56
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e8 e3       	ldi	r30, 0x38	; 56
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <GPIO_togglePin+0xa4>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <GPIO_togglePin+0xa0>
    166c:	84 27       	eor	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	27 c0       	rjmp	.+78     	; 0x16c0 <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC, pin_num);
    1672:	a5 e3       	ldi	r26, 0x35	; 53
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e5 e3       	ldi	r30, 0x35	; 53
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <GPIO_togglePin+0xcc>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <GPIO_togglePin+0xc8>
    1694:	84 27       	eor	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	13 c0       	rjmp	.+38     	; 0x16c0 <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD, pin_num);
    169a:	a2 e3       	ldi	r26, 0x32	; 50
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e2 e3       	ldi	r30, 0x32	; 50
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <GPIO_togglePin+0xf4>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <GPIO_togglePin+0xf0>
    16bc:	84 27       	eor	r24, r20
    16be:	8c 93       	st	X, r24
			break;
		}
	}
}
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <GPIO_setupPortDirection+0x6>
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <GPIO_setupPortDirection+0x8>
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	84 30       	cpi	r24, 0x04	; 4
    16e2:	90 f5       	brcc	.+100    	; 0x1748 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	3c 83       	std	Y+4, r19	; 0x04
    16ec:	2b 83       	std	Y+3, r18	; 0x03
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	d1 f0       	breq	.+52     	; 0x172c <GPIO_setupPortDirection+0x5e>
    16f8:	2b 81       	ldd	r18, Y+3	; 0x03
    16fa:	3c 81       	ldd	r19, Y+4	; 0x04
    16fc:	22 30       	cpi	r18, 0x02	; 2
    16fe:	31 05       	cpc	r19, r1
    1700:	2c f4       	brge	.+10     	; 0x170c <GPIO_setupPortDirection+0x3e>
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	61 f0       	breq	.+24     	; 0x1722 <GPIO_setupPortDirection+0x54>
    170a:	1e c0       	rjmp	.+60     	; 0x1748 <GPIO_setupPortDirection+0x7a>
    170c:	2b 81       	ldd	r18, Y+3	; 0x03
    170e:	3c 81       	ldd	r19, Y+4	; 0x04
    1710:	22 30       	cpi	r18, 0x02	; 2
    1712:	31 05       	cpc	r19, r1
    1714:	81 f0       	breq	.+32     	; 0x1736 <GPIO_setupPortDirection+0x68>
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	9c 81       	ldd	r25, Y+4	; 0x04
    171a:	83 30       	cpi	r24, 0x03	; 3
    171c:	91 05       	cpc	r25, r1
    171e:	81 f0       	breq	.+32     	; 0x1740 <GPIO_setupPortDirection+0x72>
    1720:	13 c0       	rjmp	.+38     	; 0x1748 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1722:	ea e3       	ldi	r30, 0x3A	; 58
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	80 83       	st	Z, r24
    172a:	0e c0       	rjmp	.+28     	; 0x1748 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    172c:	e7 e3       	ldi	r30, 0x37	; 55
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	80 83       	st	Z, r24
    1734:	09 c0       	rjmp	.+18     	; 0x1748 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1736:	e4 e3       	ldi	r30, 0x34	; 52
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	80 83       	st	Z, r24
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1740:	e1 e3       	ldi	r30, 0x31	; 49
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	80 83       	st	Z, r24
			break;
		}
	}
}
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value){
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	00 d0       	rcall	.+0      	; 0x175c <GPIO_writePort+0x6>
    175c:	00 d0       	rcall	.+0      	; 0x175e <GPIO_writePort+0x8>
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	84 30       	cpi	r24, 0x04	; 4
    176a:	90 f5       	brcc	.+100    	; 0x17d0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	3c 83       	std	Y+4, r19	; 0x04
    1774:	2b 83       	std	Y+3, r18	; 0x03
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	9c 81       	ldd	r25, Y+4	; 0x04
    177a:	81 30       	cpi	r24, 0x01	; 1
    177c:	91 05       	cpc	r25, r1
    177e:	d1 f0       	breq	.+52     	; 0x17b4 <GPIO_writePort+0x5e>
    1780:	2b 81       	ldd	r18, Y+3	; 0x03
    1782:	3c 81       	ldd	r19, Y+4	; 0x04
    1784:	22 30       	cpi	r18, 0x02	; 2
    1786:	31 05       	cpc	r19, r1
    1788:	2c f4       	brge	.+10     	; 0x1794 <GPIO_writePort+0x3e>
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	61 f0       	breq	.+24     	; 0x17aa <GPIO_writePort+0x54>
    1792:	1e c0       	rjmp	.+60     	; 0x17d0 <GPIO_writePort+0x7a>
    1794:	2b 81       	ldd	r18, Y+3	; 0x03
    1796:	3c 81       	ldd	r19, Y+4	; 0x04
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	31 05       	cpc	r19, r1
    179c:	81 f0       	breq	.+32     	; 0x17be <GPIO_writePort+0x68>
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	9c 81       	ldd	r25, Y+4	; 0x04
    17a2:	83 30       	cpi	r24, 0x03	; 3
    17a4:	91 05       	cpc	r25, r1
    17a6:	81 f0       	breq	.+32     	; 0x17c8 <GPIO_writePort+0x72>
    17a8:	13 c0       	rjmp	.+38     	; 0x17d0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    17aa:	eb e3       	ldi	r30, 0x3B	; 59
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	80 83       	st	Z, r24
    17b2:	0e c0       	rjmp	.+28     	; 0x17d0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    17b4:	e8 e3       	ldi	r30, 0x38	; 56
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	80 83       	st	Z, r24
    17bc:	09 c0       	rjmp	.+18     	; 0x17d0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    17be:	e5 e3       	ldi	r30, 0x35	; 53
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	80 83       	st	Z, r24
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    17c8:	e2 e3       	ldi	r30, 0x32	; 50
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	80 83       	st	Z, r24
			break;
		}
	}
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num){
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <GPIO_readPort+0x6>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <GPIO_readPort+0x8>
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
    17ec:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	84 30       	cpi	r24, 0x04	; 4
    17f2:	90 f5       	brcc	.+100    	; 0x1858 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	3c 83       	std	Y+4, r19	; 0x04
    17fc:	2b 83       	std	Y+3, r18	; 0x03
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	91 05       	cpc	r25, r1
    1806:	d1 f0       	breq	.+52     	; 0x183c <GPIO_readPort+0x5e>
    1808:	2b 81       	ldd	r18, Y+3	; 0x03
    180a:	3c 81       	ldd	r19, Y+4	; 0x04
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	2c f4       	brge	.+10     	; 0x181c <GPIO_readPort+0x3e>
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	61 f0       	breq	.+24     	; 0x1832 <GPIO_readPort+0x54>
    181a:	1e c0       	rjmp	.+60     	; 0x1858 <GPIO_readPort+0x7a>
    181c:	2b 81       	ldd	r18, Y+3	; 0x03
    181e:	3c 81       	ldd	r19, Y+4	; 0x04
    1820:	22 30       	cpi	r18, 0x02	; 2
    1822:	31 05       	cpc	r19, r1
    1824:	81 f0       	breq	.+32     	; 0x1846 <GPIO_readPort+0x68>
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	83 30       	cpi	r24, 0x03	; 3
    182c:	91 05       	cpc	r25, r1
    182e:	81 f0       	breq	.+32     	; 0x1850 <GPIO_readPort+0x72>
    1830:	13 c0       	rjmp	.+38     	; 0x1858 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1832:	e9 e3       	ldi	r30, 0x39	; 57
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	0e c0       	rjmp	.+28     	; 0x1858 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    183c:	e6 e3       	ldi	r30, 0x36	; 54
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	09 c0       	rjmp	.+18     	; 0x1858 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1846:	e3 e3       	ldi	r30, 0x33	; 51
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	04 c0       	rjmp	.+8      	; 0x1858 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1850:	e0 e3       	ldi	r30, 0x30	; 48
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1858:	89 81       	ldd	r24, Y+1	; 0x01
}
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <LCD_init>:
#include "lcd.h"
#include "../../MCAL/gpio/gpio.h"
#include <util/delay.h>


void LCD_init(){
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	2e 97       	sbiw	r28, 0x0e	; 14
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_RS_PORT, LCD_RS_PIN, PIN_OUTPUT);
    187c:	83 e0       	ldi	r24, 0x03	; 3
    187e:	66 e0       	ldi	r22, 0x06	; 6
    1880:	41 e0       	ldi	r20, 0x01	; 1
    1882:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT, LCD_E_PIN, PIN_OUTPUT);
    1886:	83 e0       	ldi	r24, 0x03	; 3
    1888:	67 e0       	ldi	r22, 0x07	; 7
    188a:	41 e0       	ldi	r20, 0x01	; 1
    188c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_setupPinDirection>
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	a0 ea       	ldi	r26, 0xA0	; 160
    1896:	b1 e4       	ldi	r27, 0x41	; 65
    1898:	8b 87       	std	Y+11, r24	; 0x0b
    189a:	9c 87       	std	Y+12, r25	; 0x0c
    189c:	ad 87       	std	Y+13, r26	; 0x0d
    189e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	4a ef       	ldi	r20, 0xFA	; 250
    18ae:	54 e4       	ldi	r21, 0x44	; 68
    18b0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	8f 83       	std	Y+7, r24	; 0x07
    18ba:	98 87       	std	Y+8, r25	; 0x08
    18bc:	a9 87       	std	Y+9, r26	; 0x09
    18be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c0:	6f 81       	ldd	r22, Y+7	; 0x07
    18c2:	78 85       	ldd	r23, Y+8	; 0x08
    18c4:	89 85       	ldd	r24, Y+9	; 0x09
    18c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e8       	ldi	r20, 0x80	; 128
    18ce:	5f e3       	ldi	r21, 0x3F	; 63
    18d0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    18d4:	88 23       	and	r24, r24
    18d6:	2c f4       	brge	.+10     	; 0x18e2 <LCD_init+0x7a>
		__ticks = 1;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9e 83       	std	Y+6, r25	; 0x06
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	3f c0       	rjmp	.+126    	; 0x1960 <LCD_init+0xf8>
	else if (__tmp > 65535)
    18e2:	6f 81       	ldd	r22, Y+7	; 0x07
    18e4:	78 85       	ldd	r23, Y+8	; 0x08
    18e6:	89 85       	ldd	r24, Y+9	; 0x09
    18e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	3f ef       	ldi	r19, 0xFF	; 255
    18ee:	4f e7       	ldi	r20, 0x7F	; 127
    18f0:	57 e4       	ldi	r21, 0x47	; 71
    18f2:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    18f6:	18 16       	cp	r1, r24
    18f8:	4c f5       	brge	.+82     	; 0x194c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1900:	9e 85       	ldd	r25, Y+14	; 0x0e
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e2       	ldi	r20, 0x20	; 32
    1908:	51 e4       	ldi	r21, 0x41	; 65
    190a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	bc 01       	movw	r22, r24
    1914:	cd 01       	movw	r24, r26
    1916:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9e 83       	std	Y+6, r25	; 0x06
    1920:	8d 83       	std	Y+5, r24	; 0x05
    1922:	0f c0       	rjmp	.+30     	; 0x1942 <LCD_init+0xda>
    1924:	88 ec       	ldi	r24, 0xC8	; 200
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	9c 83       	std	Y+4, r25	; 0x04
    192a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <LCD_init+0xc8>
    1934:	9c 83       	std	Y+4, r25	; 0x04
    1936:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1938:	8d 81       	ldd	r24, Y+5	; 0x05
    193a:	9e 81       	ldd	r25, Y+6	; 0x06
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	9e 83       	std	Y+6, r25	; 0x06
    1940:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1942:	8d 81       	ldd	r24, Y+5	; 0x05
    1944:	9e 81       	ldd	r25, Y+6	; 0x06
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	69 f7       	brne	.-38     	; 0x1924 <LCD_init+0xbc>
    194a:	14 c0       	rjmp	.+40     	; 0x1974 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194c:	6f 81       	ldd	r22, Y+7	; 0x07
    194e:	78 85       	ldd	r23, Y+8	; 0x08
    1950:	89 85       	ldd	r24, Y+9	; 0x09
    1952:	9a 85       	ldd	r25, Y+10	; 0x0a
    1954:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	8d 83       	std	Y+5, r24	; 0x05
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <LCD_init+0x104>
    1970:	9a 83       	std	Y+2, r25	; 0x02
    1972:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	6f ef       	ldi	r22, 0xFF	; 255
    1978:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_CMD_2_LINES_8BITS_MODE);
    197c:	88 e3       	ldi	r24, 0x38	; 56
    197e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CMD_DISPLAY_ON_CURSOR_OF);
    1982:	8c e0       	ldi	r24, 0x0C	; 12
    1984:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CMD_CLEAR);
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <LCD_sendCommand>

}
    198e:	2e 96       	adiw	r28, 0x0e	; 14
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command){
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	e9 97       	sbiw	r28, 0x39	; 57
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	89 af       	std	Y+57, r24	; 0x39
	//Clear RS
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    19b6:	83 e0       	ldi	r24, 0x03	; 3
    19b8:	66 e0       	ldi	r22, 0x06	; 6
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <GPIO_writePin>
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	a0 e8       	ldi	r26, 0x80	; 128
    19c6:	bf e3       	ldi	r27, 0x3F	; 63
    19c8:	8d ab       	std	Y+53, r24	; 0x35
    19ca:	9e ab       	std	Y+54, r25	; 0x36
    19cc:	af ab       	std	Y+55, r26	; 0x37
    19ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d0:	6d a9       	ldd	r22, Y+53	; 0x35
    19d2:	7e a9       	ldd	r23, Y+54	; 0x36
    19d4:	8f a9       	ldd	r24, Y+55	; 0x37
    19d6:	98 ad       	ldd	r25, Y+56	; 0x38
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	4a ef       	ldi	r20, 0xFA	; 250
    19de:	54 e4       	ldi	r21, 0x44	; 68
    19e0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	89 ab       	std	Y+49, r24	; 0x31
    19ea:	9a ab       	std	Y+50, r25	; 0x32
    19ec:	ab ab       	std	Y+51, r26	; 0x33
    19ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19f0:	69 a9       	ldd	r22, Y+49	; 0x31
    19f2:	7a a9       	ldd	r23, Y+50	; 0x32
    19f4:	8b a9       	ldd	r24, Y+51	; 0x33
    19f6:	9c a9       	ldd	r25, Y+52	; 0x34
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e8       	ldi	r20, 0x80	; 128
    19fe:	5f e3       	ldi	r21, 0x3F	; 63
    1a00:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1a04:	88 23       	and	r24, r24
    1a06:	2c f4       	brge	.+10     	; 0x1a12 <LCD_sendCommand+0x72>
		__ticks = 1;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	98 ab       	std	Y+48, r25	; 0x30
    1a0e:	8f a7       	std	Y+47, r24	; 0x2f
    1a10:	3f c0       	rjmp	.+126    	; 0x1a90 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1a12:	69 a9       	ldd	r22, Y+49	; 0x31
    1a14:	7a a9       	ldd	r23, Y+50	; 0x32
    1a16:	8b a9       	ldd	r24, Y+51	; 0x33
    1a18:	9c a9       	ldd	r25, Y+52	; 0x34
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	3f ef       	ldi	r19, 0xFF	; 255
    1a1e:	4f e7       	ldi	r20, 0x7F	; 127
    1a20:	57 e4       	ldi	r21, 0x47	; 71
    1a22:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1a26:	18 16       	cp	r1, r24
    1a28:	4c f5       	brge	.+82     	; 0x1a7c <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2a:	6d a9       	ldd	r22, Y+53	; 0x35
    1a2c:	7e a9       	ldd	r23, Y+54	; 0x36
    1a2e:	8f a9       	ldd	r24, Y+55	; 0x37
    1a30:	98 ad       	ldd	r25, Y+56	; 0x38
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e2       	ldi	r20, 0x20	; 32
    1a38:	51 e4       	ldi	r21, 0x41	; 65
    1a3a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	bc 01       	movw	r22, r24
    1a44:	cd 01       	movw	r24, r26
    1a46:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	98 ab       	std	Y+48, r25	; 0x30
    1a50:	8f a7       	std	Y+47, r24	; 0x2f
    1a52:	0f c0       	rjmp	.+30     	; 0x1a72 <LCD_sendCommand+0xd2>
    1a54:	88 ec       	ldi	r24, 0xC8	; 200
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	9e a7       	std	Y+46, r25	; 0x2e
    1a5a:	8d a7       	std	Y+45, r24	; 0x2d
    1a5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <LCD_sendCommand+0xc0>
    1a64:	9e a7       	std	Y+46, r25	; 0x2e
    1a66:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	98 ab       	std	Y+48, r25	; 0x30
    1a70:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a74:	98 a9       	ldd	r25, Y+48	; 0x30
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	69 f7       	brne	.-38     	; 0x1a54 <LCD_sendCommand+0xb4>
    1a7a:	14 c0       	rjmp	.+40     	; 0x1aa4 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a80:	8b a9       	ldd	r24, Y+51	; 0x33
    1a82:	9c a9       	ldd	r25, Y+52	; 0x34
    1a84:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	98 ab       	std	Y+48, r25	; 0x30
    1a8e:	8f a7       	std	Y+47, r24	; 0x2f
    1a90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a92:	98 a9       	ldd	r25, Y+48	; 0x30
    1a94:	9c a7       	std	Y+44, r25	; 0x2c
    1a96:	8b a7       	std	Y+43, r24	; 0x2b
    1a98:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <LCD_sendCommand+0xfc>
    1aa0:	9c a7       	std	Y+44, r25	; 0x2c
    1aa2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	//SET E
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	67 e0       	ldi	r22, 0x07	; 7
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <GPIO_writePin>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a0 e8       	ldi	r26, 0x80	; 128
    1ab4:	bf e3       	ldi	r27, 0x3F	; 63
    1ab6:	8f a3       	std	Y+39, r24	; 0x27
    1ab8:	98 a7       	std	Y+40, r25	; 0x28
    1aba:	a9 a7       	std	Y+41, r26	; 0x29
    1abc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	6f a1       	ldd	r22, Y+39	; 0x27
    1ac0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ac2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ac4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a ef       	ldi	r20, 0xFA	; 250
    1acc:	54 e4       	ldi	r21, 0x44	; 68
    1ace:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	8b a3       	std	Y+35, r24	; 0x23
    1ad8:	9c a3       	std	Y+36, r25	; 0x24
    1ada:	ad a3       	std	Y+37, r26	; 0x25
    1adc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ade:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <LCD_sendCommand+0x160>
		__ticks = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9a a3       	std	Y+34, r25	; 0x22
    1afc:	89 a3       	std	Y+33, r24	; 0x21
    1afe:	3f c0       	rjmp	.+126    	; 0x1b7e <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1b00:	6b a1       	ldd	r22, Y+35	; 0x23
    1b02:	7c a1       	ldd	r23, Y+36	; 0x24
    1b04:	8d a1       	ldd	r24, Y+37	; 0x25
    1b06:	9e a1       	ldd	r25, Y+38	; 0x26
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	4c f5       	brge	.+82     	; 0x1b6a <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b18:	6f a1       	ldd	r22, Y+39	; 0x27
    1b1a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b1c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9a a3       	std	Y+34, r25	; 0x22
    1b3e:	89 a3       	std	Y+33, r24	; 0x21
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <LCD_sendCommand+0x1c0>
    1b42:	88 ec       	ldi	r24, 0xC8	; 200
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	98 a3       	std	Y+32, r25	; 0x20
    1b48:	8f 8f       	std	Y+31, r24	; 0x1f
    1b4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b4c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <LCD_sendCommand+0x1ae>
    1b52:	98 a3       	std	Y+32, r25	; 0x20
    1b54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b56:	89 a1       	ldd	r24, Y+33	; 0x21
    1b58:	9a a1       	ldd	r25, Y+34	; 0x22
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	9a a3       	std	Y+34, r25	; 0x22
    1b5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b60:	89 a1       	ldd	r24, Y+33	; 0x21
    1b62:	9a a1       	ldd	r25, Y+34	; 0x22
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	69 f7       	brne	.-38     	; 0x1b42 <LCD_sendCommand+0x1a2>
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b70:	9e a1       	ldd	r25, Y+38	; 0x26
    1b72:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9a a3       	std	Y+34, r25	; 0x22
    1b7c:	89 a3       	std	Y+33, r24	; 0x21
    1b7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b80:	9a a1       	ldd	r25, Y+34	; 0x22
    1b82:	9e 8f       	std	Y+30, r25	; 0x1e
    1b84:	8d 8f       	std	Y+29, r24	; 0x1d
    1b86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LCD_sendCommand+0x1ea>
    1b8e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b90:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);


	GPIO_writePort(LCD_DATA_PORT, command);
    1b92:	82 e0       	ldi	r24, 0x02	; 2
    1b94:	69 ad       	ldd	r22, Y+57	; 0x39
    1b96:	0e 94 ab 0b 	call	0x1756	; 0x1756 <GPIO_writePort>
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a0 e8       	ldi	r26, 0x80	; 128
    1ba0:	bf e3       	ldi	r27, 0x3F	; 63
    1ba2:	89 8f       	std	Y+25, r24	; 0x19
    1ba4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ba6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ba8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1baa:	69 8d       	ldd	r22, Y+25	; 0x19
    1bac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	4a ef       	ldi	r20, 0xFA	; 250
    1bb8:	54 e4       	ldi	r21, 0x44	; 68
    1bba:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	8d 8b       	std	Y+21, r24	; 0x15
    1bc4:	9e 8b       	std	Y+22, r25	; 0x16
    1bc6:	af 8b       	std	Y+23, r26	; 0x17
    1bc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bca:	6d 89       	ldd	r22, Y+21	; 0x15
    1bcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bce:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e8       	ldi	r20, 0x80	; 128
    1bd8:	5f e3       	ldi	r21, 0x3F	; 63
    1bda:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1bde:	88 23       	and	r24, r24
    1be0:	2c f4       	brge	.+10     	; 0x1bec <LCD_sendCommand+0x24c>
		__ticks = 1;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9c 8b       	std	Y+20, r25	; 0x14
    1be8:	8b 8b       	std	Y+19, r24	; 0x13
    1bea:	3f c0       	rjmp	.+126    	; 0x1c6a <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1bec:	6d 89       	ldd	r22, Y+21	; 0x15
    1bee:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	3f ef       	ldi	r19, 0xFF	; 255
    1bf8:	4f e7       	ldi	r20, 0x7F	; 127
    1bfa:	57 e4       	ldi	r21, 0x47	; 71
    1bfc:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1c00:	18 16       	cp	r1, r24
    1c02:	4c f5       	brge	.+82     	; 0x1c56 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c04:	69 8d       	ldd	r22, Y+25	; 0x19
    1c06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e2       	ldi	r20, 0x20	; 32
    1c12:	51 e4       	ldi	r21, 0x41	; 65
    1c14:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	bc 01       	movw	r22, r24
    1c1e:	cd 01       	movw	r24, r26
    1c20:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	9c 8b       	std	Y+20, r25	; 0x14
    1c2a:	8b 8b       	std	Y+19, r24	; 0x13
    1c2c:	0f c0       	rjmp	.+30     	; 0x1c4c <LCD_sendCommand+0x2ac>
    1c2e:	88 ec       	ldi	r24, 0xC8	; 200
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	9a 8b       	std	Y+18, r25	; 0x12
    1c34:	89 8b       	std	Y+17, r24	; 0x11
    1c36:	89 89       	ldd	r24, Y+17	; 0x11
    1c38:	9a 89       	ldd	r25, Y+18	; 0x12
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <LCD_sendCommand+0x29a>
    1c3e:	9a 8b       	std	Y+18, r25	; 0x12
    1c40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c42:	8b 89       	ldd	r24, Y+19	; 0x13
    1c44:	9c 89       	ldd	r25, Y+20	; 0x14
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	9c 8b       	std	Y+20, r25	; 0x14
    1c4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	69 f7       	brne	.-38     	; 0x1c2e <LCD_sendCommand+0x28e>
    1c54:	14 c0       	rjmp	.+40     	; 0x1c7e <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c56:	6d 89       	ldd	r22, Y+21	; 0x15
    1c58:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c5e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	9c 8b       	std	Y+20, r25	; 0x14
    1c68:	8b 8b       	std	Y+19, r24	; 0x13
    1c6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6e:	98 8b       	std	Y+16, r25	; 0x10
    1c70:	8f 87       	std	Y+15, r24	; 0x0f
    1c72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c74:	98 89       	ldd	r25, Y+16	; 0x10
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <LCD_sendCommand+0x2d6>
    1c7a:	98 8b       	std	Y+16, r25	; 0x10
    1c7c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	//CLEAR E
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    1c7e:	83 e0       	ldi	r24, 0x03	; 3
    1c80:	67 e0       	ldi	r22, 0x07	; 7
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <GPIO_writePin>
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	a0 e8       	ldi	r26, 0x80	; 128
    1c8e:	bf e3       	ldi	r27, 0x3F	; 63
    1c90:	8b 87       	std	Y+11, r24	; 0x0b
    1c92:	9c 87       	std	Y+12, r25	; 0x0c
    1c94:	ad 87       	std	Y+13, r26	; 0x0d
    1c96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	4a ef       	ldi	r20, 0xFA	; 250
    1ca6:	54 e4       	ldi	r21, 0x44	; 68
    1ca8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	8f 83       	std	Y+7, r24	; 0x07
    1cb2:	98 87       	std	Y+8, r25	; 0x08
    1cb4:	a9 87       	std	Y+9, r26	; 0x09
    1cb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cba:	78 85       	ldd	r23, Y+8	; 0x08
    1cbc:	89 85       	ldd	r24, Y+9	; 0x09
    1cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e8       	ldi	r20, 0x80	; 128
    1cc6:	5f e3       	ldi	r21, 0x3F	; 63
    1cc8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1ccc:	88 23       	and	r24, r24
    1cce:	2c f4       	brge	.+10     	; 0x1cda <LCD_sendCommand+0x33a>
		__ticks = 1;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9e 83       	std	Y+6, r25	; 0x06
    1cd6:	8d 83       	std	Y+5, r24	; 0x05
    1cd8:	3f c0       	rjmp	.+126    	; 0x1d58 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1cda:	6f 81       	ldd	r22, Y+7	; 0x07
    1cdc:	78 85       	ldd	r23, Y+8	; 0x08
    1cde:	89 85       	ldd	r24, Y+9	; 0x09
    1ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	3f ef       	ldi	r19, 0xFF	; 255
    1ce6:	4f e7       	ldi	r20, 0x7F	; 127
    1ce8:	57 e4       	ldi	r21, 0x47	; 71
    1cea:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1cee:	18 16       	cp	r1, r24
    1cf0:	4c f5       	brge	.+82     	; 0x1d44 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e2       	ldi	r20, 0x20	; 32
    1d00:	51 e4       	ldi	r21, 0x41	; 65
    1d02:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	9e 83       	std	Y+6, r25	; 0x06
    1d18:	8d 83       	std	Y+5, r24	; 0x05
    1d1a:	0f c0       	rjmp	.+30     	; 0x1d3a <LCD_sendCommand+0x39a>
    1d1c:	88 ec       	ldi	r24, 0xC8	; 200
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	9c 83       	std	Y+4, r25	; 0x04
    1d22:	8b 83       	std	Y+3, r24	; 0x03
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <LCD_sendCommand+0x388>
    1d2c:	9c 83       	std	Y+4, r25	; 0x04
    1d2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	9e 81       	ldd	r25, Y+6	; 0x06
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	9e 83       	std	Y+6, r25	; 0x06
    1d38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	69 f7       	brne	.-38     	; 0x1d1c <LCD_sendCommand+0x37c>
    1d42:	14 c0       	rjmp	.+40     	; 0x1d6c <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d44:	6f 81       	ldd	r22, Y+7	; 0x07
    1d46:	78 85       	ldd	r23, Y+8	; 0x08
    1d48:	89 85       	ldd	r24, Y+9	; 0x09
    1d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	9a 83       	std	Y+2, r25	; 0x02
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	9a 81       	ldd	r25, Y+2	; 0x02
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <LCD_sendCommand+0x3c4>
    1d68:	9a 83       	std	Y+2, r25	; 0x02
    1d6a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);

}
    1d6c:	e9 96       	adiw	r28, 0x39	; 57
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 character){
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	e9 97       	sbiw	r28, 0x39	; 57
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	89 af       	std	Y+57, r24	; 0x39
	//Set RS
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	66 e0       	ldi	r22, 0x06	; 6
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <GPIO_writePin>
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a0 e8       	ldi	r26, 0x80	; 128
    1da4:	bf e3       	ldi	r27, 0x3F	; 63
    1da6:	8d ab       	std	Y+53, r24	; 0x35
    1da8:	9e ab       	std	Y+54, r25	; 0x36
    1daa:	af ab       	std	Y+55, r26	; 0x37
    1dac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dae:	6d a9       	ldd	r22, Y+53	; 0x35
    1db0:	7e a9       	ldd	r23, Y+54	; 0x36
    1db2:	8f a9       	ldd	r24, Y+55	; 0x37
    1db4:	98 ad       	ldd	r25, Y+56	; 0x38
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	4a ef       	ldi	r20, 0xFA	; 250
    1dbc:	54 e4       	ldi	r21, 0x44	; 68
    1dbe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	89 ab       	std	Y+49, r24	; 0x31
    1dc8:	9a ab       	std	Y+50, r25	; 0x32
    1dca:	ab ab       	std	Y+51, r26	; 0x33
    1dcc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dce:	69 a9       	ldd	r22, Y+49	; 0x31
    1dd0:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd2:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd4:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e8       	ldi	r20, 0x80	; 128
    1ddc:	5f e3       	ldi	r21, 0x3F	; 63
    1dde:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1de2:	88 23       	and	r24, r24
    1de4:	2c f4       	brge	.+10     	; 0x1df0 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	98 ab       	std	Y+48, r25	; 0x30
    1dec:	8f a7       	std	Y+47, r24	; 0x2f
    1dee:	3f c0       	rjmp	.+126    	; 0x1e6e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1df0:	69 a9       	ldd	r22, Y+49	; 0x31
    1df2:	7a a9       	ldd	r23, Y+50	; 0x32
    1df4:	8b a9       	ldd	r24, Y+51	; 0x33
    1df6:	9c a9       	ldd	r25, Y+52	; 0x34
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	3f ef       	ldi	r19, 0xFF	; 255
    1dfc:	4f e7       	ldi	r20, 0x7F	; 127
    1dfe:	57 e4       	ldi	r21, 0x47	; 71
    1e00:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1e04:	18 16       	cp	r1, r24
    1e06:	4c f5       	brge	.+82     	; 0x1e5a <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e08:	6d a9       	ldd	r22, Y+53	; 0x35
    1e0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e2       	ldi	r20, 0x20	; 32
    1e16:	51 e4       	ldi	r21, 0x41	; 65
    1e18:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	98 ab       	std	Y+48, r25	; 0x30
    1e2e:	8f a7       	std	Y+47, r24	; 0x2f
    1e30:	0f c0       	rjmp	.+30     	; 0x1e50 <LCD_displayCharacter+0xd2>
    1e32:	88 ec       	ldi	r24, 0xC8	; 200
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	9e a7       	std	Y+46, r25	; 0x2e
    1e38:	8d a7       	std	Y+45, r24	; 0x2d
    1e3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <LCD_displayCharacter+0xc0>
    1e42:	9e a7       	std	Y+46, r25	; 0x2e
    1e44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e48:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	98 ab       	std	Y+48, r25	; 0x30
    1e4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e52:	98 a9       	ldd	r25, Y+48	; 0x30
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	69 f7       	brne	.-38     	; 0x1e32 <LCD_displayCharacter+0xb4>
    1e58:	14 c0       	rjmp	.+40     	; 0x1e82 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e60:	9c a9       	ldd	r25, Y+52	; 0x34
    1e62:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	98 ab       	std	Y+48, r25	; 0x30
    1e6c:	8f a7       	std	Y+47, r24	; 0x2f
    1e6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e70:	98 a9       	ldd	r25, Y+48	; 0x30
    1e72:	9c a7       	std	Y+44, r25	; 0x2c
    1e74:	8b a7       	std	Y+43, r24	; 0x2b
    1e76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <LCD_displayCharacter+0xfc>
    1e7e:	9c a7       	std	Y+44, r25	; 0x2c
    1e80:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	//SET E
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    1e82:	83 e0       	ldi	r24, 0x03	; 3
    1e84:	67 e0       	ldi	r22, 0x07	; 7
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <GPIO_writePin>
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	a0 e8       	ldi	r26, 0x80	; 128
    1e92:	bf e3       	ldi	r27, 0x3F	; 63
    1e94:	8f a3       	std	Y+39, r24	; 0x27
    1e96:	98 a7       	std	Y+40, r25	; 0x28
    1e98:	a9 a7       	std	Y+41, r26	; 0x29
    1e9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e9e:	78 a5       	ldd	r23, Y+40	; 0x28
    1ea0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ea2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	4a ef       	ldi	r20, 0xFA	; 250
    1eaa:	54 e4       	ldi	r21, 0x44	; 68
    1eac:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	8b a3       	std	Y+35, r24	; 0x23
    1eb6:	9c a3       	std	Y+36, r25	; 0x24
    1eb8:	ad a3       	std	Y+37, r26	; 0x25
    1eba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ebc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ebe:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e8       	ldi	r20, 0x80	; 128
    1eca:	5f e3       	ldi	r21, 0x3F	; 63
    1ecc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1ed0:	88 23       	and	r24, r24
    1ed2:	2c f4       	brge	.+10     	; 0x1ede <LCD_displayCharacter+0x160>
		__ticks = 1;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9a a3       	std	Y+34, r25	; 0x22
    1eda:	89 a3       	std	Y+33, r24	; 0x21
    1edc:	3f c0       	rjmp	.+126    	; 0x1f5c <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1ede:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	3f ef       	ldi	r19, 0xFF	; 255
    1eea:	4f e7       	ldi	r20, 0x7F	; 127
    1eec:	57 e4       	ldi	r21, 0x47	; 71
    1eee:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1ef2:	18 16       	cp	r1, r24
    1ef4:	4c f5       	brge	.+82     	; 0x1f48 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef8:	78 a5       	ldd	r23, Y+40	; 0x28
    1efa:	89 a5       	ldd	r24, Y+41	; 0x29
    1efc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e2       	ldi	r20, 0x20	; 32
    1f04:	51 e4       	ldi	r21, 0x41	; 65
    1f06:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9a a3       	std	Y+34, r25	; 0x22
    1f1c:	89 a3       	std	Y+33, r24	; 0x21
    1f1e:	0f c0       	rjmp	.+30     	; 0x1f3e <LCD_displayCharacter+0x1c0>
    1f20:	88 ec       	ldi	r24, 0xC8	; 200
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	98 a3       	std	Y+32, r25	; 0x20
    1f26:	8f 8f       	std	Y+31, r24	; 0x1f
    1f28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f2a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_displayCharacter+0x1ae>
    1f30:	98 a3       	std	Y+32, r25	; 0x20
    1f32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f34:	89 a1       	ldd	r24, Y+33	; 0x21
    1f36:	9a a1       	ldd	r25, Y+34	; 0x22
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	9a a3       	std	Y+34, r25	; 0x22
    1f3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f40:	9a a1       	ldd	r25, Y+34	; 0x22
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	69 f7       	brne	.-38     	; 0x1f20 <LCD_displayCharacter+0x1a2>
    1f46:	14 c0       	rjmp	.+40     	; 0x1f70 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f48:	6b a1       	ldd	r22, Y+35	; 0x23
    1f4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f50:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	9a a3       	std	Y+34, r25	; 0x22
    1f5a:	89 a3       	std	Y+33, r24	; 0x21
    1f5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f60:	9e 8f       	std	Y+30, r25	; 0x1e
    1f62:	8d 8f       	std	Y+29, r24	; 0x1d
    1f64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <LCD_displayCharacter+0x1ea>
    1f6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f6e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);


	GPIO_writePort(LCD_DATA_PORT, character);
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	69 ad       	ldd	r22, Y+57	; 0x39
    1f74:	0e 94 ab 0b 	call	0x1756	; 0x1756 <GPIO_writePort>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 e8       	ldi	r26, 0x80	; 128
    1f7e:	bf e3       	ldi	r27, 0x3F	; 63
    1f80:	89 8f       	std	Y+25, r24	; 0x19
    1f82:	9a 8f       	std	Y+26, r25	; 0x1a
    1f84:	ab 8f       	std	Y+27, r26	; 0x1b
    1f86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	69 8d       	ldd	r22, Y+25	; 0x19
    1f8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	4a ef       	ldi	r20, 0xFA	; 250
    1f96:	54 e4       	ldi	r21, 0x44	; 68
    1f98:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	8d 8b       	std	Y+21, r24	; 0x15
    1fa2:	9e 8b       	std	Y+22, r25	; 0x16
    1fa4:	af 8b       	std	Y+23, r26	; 0x17
    1fa6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1faa:	7e 89       	ldd	r23, Y+22	; 0x16
    1fac:	8f 89       	ldd	r24, Y+23	; 0x17
    1fae:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e8       	ldi	r20, 0x80	; 128
    1fb6:	5f e3       	ldi	r21, 0x3F	; 63
    1fb8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1fbc:	88 23       	and	r24, r24
    1fbe:	2c f4       	brge	.+10     	; 0x1fca <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	9c 8b       	std	Y+20, r25	; 0x14
    1fc6:	8b 8b       	std	Y+19, r24	; 0x13
    1fc8:	3f c0       	rjmp	.+126    	; 0x2048 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1fca:	6d 89       	ldd	r22, Y+21	; 0x15
    1fcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fce:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	3f ef       	ldi	r19, 0xFF	; 255
    1fd6:	4f e7       	ldi	r20, 0x7F	; 127
    1fd8:	57 e4       	ldi	r21, 0x47	; 71
    1fda:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1fde:	18 16       	cp	r1, r24
    1fe0:	4c f5       	brge	.+82     	; 0x2034 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fe4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e2       	ldi	r20, 0x20	; 32
    1ff0:	51 e4       	ldi	r21, 0x41	; 65
    1ff2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9c 8b       	std	Y+20, r25	; 0x14
    2008:	8b 8b       	std	Y+19, r24	; 0x13
    200a:	0f c0       	rjmp	.+30     	; 0x202a <LCD_displayCharacter+0x2ac>
    200c:	88 ec       	ldi	r24, 0xC8	; 200
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9a 8b       	std	Y+18, r25	; 0x12
    2012:	89 8b       	std	Y+17, r24	; 0x11
    2014:	89 89       	ldd	r24, Y+17	; 0x11
    2016:	9a 89       	ldd	r25, Y+18	; 0x12
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <LCD_displayCharacter+0x29a>
    201c:	9a 8b       	std	Y+18, r25	; 0x12
    201e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2020:	8b 89       	ldd	r24, Y+19	; 0x13
    2022:	9c 89       	ldd	r25, Y+20	; 0x14
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	9c 8b       	std	Y+20, r25	; 0x14
    2028:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202a:	8b 89       	ldd	r24, Y+19	; 0x13
    202c:	9c 89       	ldd	r25, Y+20	; 0x14
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	69 f7       	brne	.-38     	; 0x200c <LCD_displayCharacter+0x28e>
    2032:	14 c0       	rjmp	.+40     	; 0x205c <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2034:	6d 89       	ldd	r22, Y+21	; 0x15
    2036:	7e 89       	ldd	r23, Y+22	; 0x16
    2038:	8f 89       	ldd	r24, Y+23	; 0x17
    203a:	98 8d       	ldd	r25, Y+24	; 0x18
    203c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9c 8b       	std	Y+20, r25	; 0x14
    2046:	8b 8b       	std	Y+19, r24	; 0x13
    2048:	8b 89       	ldd	r24, Y+19	; 0x13
    204a:	9c 89       	ldd	r25, Y+20	; 0x14
    204c:	98 8b       	std	Y+16, r25	; 0x10
    204e:	8f 87       	std	Y+15, r24	; 0x0f
    2050:	8f 85       	ldd	r24, Y+15	; 0x0f
    2052:	98 89       	ldd	r25, Y+16	; 0x10
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_displayCharacter+0x2d6>
    2058:	98 8b       	std	Y+16, r25	; 0x10
    205a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	//CLEAR E
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    205c:	83 e0       	ldi	r24, 0x03	; 3
    205e:	67 e0       	ldi	r22, 0x07	; 7
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <GPIO_writePin>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	a0 e8       	ldi	r26, 0x80	; 128
    206c:	bf e3       	ldi	r27, 0x3F	; 63
    206e:	8b 87       	std	Y+11, r24	; 0x0b
    2070:	9c 87       	std	Y+12, r25	; 0x0c
    2072:	ad 87       	std	Y+13, r26	; 0x0d
    2074:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2076:	6b 85       	ldd	r22, Y+11	; 0x0b
    2078:	7c 85       	ldd	r23, Y+12	; 0x0c
    207a:	8d 85       	ldd	r24, Y+13	; 0x0d
    207c:	9e 85       	ldd	r25, Y+14	; 0x0e
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	4a ef       	ldi	r20, 0xFA	; 250
    2084:	54 e4       	ldi	r21, 0x44	; 68
    2086:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	8f 83       	std	Y+7, r24	; 0x07
    2090:	98 87       	std	Y+8, r25	; 0x08
    2092:	a9 87       	std	Y+9, r26	; 0x09
    2094:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2096:	6f 81       	ldd	r22, Y+7	; 0x07
    2098:	78 85       	ldd	r23, Y+8	; 0x08
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e8       	ldi	r20, 0x80	; 128
    20a4:	5f e3       	ldi	r21, 0x3F	; 63
    20a6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    20aa:	88 23       	and	r24, r24
    20ac:	2c f4       	brge	.+10     	; 0x20b8 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	3f c0       	rjmp	.+126    	; 0x2136 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	3f ef       	ldi	r19, 0xFF	; 255
    20c4:	4f e7       	ldi	r20, 0x7F	; 127
    20c6:	57 e4       	ldi	r21, 0x47	; 71
    20c8:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    20cc:	18 16       	cp	r1, r24
    20ce:	4c f5       	brge	.+82     	; 0x2122 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e2       	ldi	r20, 0x20	; 32
    20de:	51 e4       	ldi	r21, 0x41	; 65
    20e0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	bc 01       	movw	r22, r24
    20ea:	cd 01       	movw	r24, r26
    20ec:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	9e 83       	std	Y+6, r25	; 0x06
    20f6:	8d 83       	std	Y+5, r24	; 0x05
    20f8:	0f c0       	rjmp	.+30     	; 0x2118 <LCD_displayCharacter+0x39a>
    20fa:	88 ec       	ldi	r24, 0xC8	; 200
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9c 83       	std	Y+4, r25	; 0x04
    2100:	8b 83       	std	Y+3, r24	; 0x03
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_displayCharacter+0x388>
    210a:	9c 83       	std	Y+4, r25	; 0x04
    210c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	9e 81       	ldd	r25, Y+6	; 0x06
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	9e 83       	std	Y+6, r25	; 0x06
    2116:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	9e 81       	ldd	r25, Y+6	; 0x06
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	69 f7       	brne	.-38     	; 0x20fa <LCD_displayCharacter+0x37c>
    2120:	14 c0       	rjmp	.+40     	; 0x214a <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2122:	6f 81       	ldd	r22, Y+7	; 0x07
    2124:	78 85       	ldd	r23, Y+8	; 0x08
    2126:	89 85       	ldd	r24, Y+9	; 0x09
    2128:	9a 85       	ldd	r25, Y+10	; 0x0a
    212a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	9a 83       	std	Y+2, r25	; 0x02
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_displayCharacter+0x3c4>
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);

}
    214a:	e9 96       	adiw	r28, 0x39	; 57
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <LCD_displayString>:
void LCD_displayString(const char *str){
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	00 d0       	rcall	.+0      	; 0x2162 <LCD_displayString+0x6>
    2162:	0f 92       	push	r0
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	9b 83       	std	Y+3, r25	; 0x03
    216a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    216c:	19 82       	std	Y+1, r1	; 0x01
    216e:	0e c0       	rjmp	.+28     	; 0x218c <LCD_displayString+0x30>
	while(str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	9b 81       	ldd	r25, Y+3	; 0x03
    217a:	fc 01       	movw	r30, r24
    217c:	e2 0f       	add	r30, r18
    217e:	f3 1f       	adc	r31, r19
    2180:	80 81       	ld	r24, Z
    2182:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <LCD_displayCharacter>
		i++;
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	8f 5f       	subi	r24, 0xFF	; 255
    218a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
void LCD_displayString(const char *str){
	uint8 i = 0;
	while(str[i] != '\0')
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	9b 81       	ldd	r25, Y+3	; 0x03
    2196:	fc 01       	movw	r30, r24
    2198:	e2 0f       	add	r30, r18
    219a:	f3 1f       	adc	r31, r19
    219c:	80 81       	ld	r24, Z
    219e:	88 23       	and	r24, r24
    21a0:	39 f7       	brne	.-50     	; 0x2170 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <LCD_moveCursor>:
void LCD_moveCursor(uint8 row, uint8 col){
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <LCD_moveCursor+0x6>
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <LCD_moveCursor+0x8>
    21b6:	0f 92       	push	r0
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	8a 83       	std	Y+2, r24	; 0x02
    21be:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	3d 83       	std	Y+5, r19	; 0x05
    21c8:	2c 83       	std	Y+4, r18	; 0x04
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	9d 81       	ldd	r25, Y+5	; 0x05
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	91 05       	cpc	r25, r1
    21d2:	c1 f0       	breq	.+48     	; 0x2204 <LCD_moveCursor+0x56>
    21d4:	2c 81       	ldd	r18, Y+4	; 0x04
    21d6:	3d 81       	ldd	r19, Y+5	; 0x05
    21d8:	22 30       	cpi	r18, 0x02	; 2
    21da:	31 05       	cpc	r19, r1
    21dc:	2c f4       	brge	.+10     	; 0x21e8 <LCD_moveCursor+0x3a>
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	9d 81       	ldd	r25, Y+5	; 0x05
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	61 f0       	breq	.+24     	; 0x21fe <LCD_moveCursor+0x50>
    21e6:	19 c0       	rjmp	.+50     	; 0x221a <LCD_moveCursor+0x6c>
    21e8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ea:	3d 81       	ldd	r19, Y+5	; 0x05
    21ec:	22 30       	cpi	r18, 0x02	; 2
    21ee:	31 05       	cpc	r19, r1
    21f0:	69 f0       	breq	.+26     	; 0x220c <LCD_moveCursor+0x5e>
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	9d 81       	ldd	r25, Y+5	; 0x05
    21f6:	83 30       	cpi	r24, 0x03	; 3
    21f8:	91 05       	cpc	r25, r1
    21fa:	61 f0       	breq	.+24     	; 0x2214 <LCD_moveCursor+0x66>
    21fc:	0e c0       	rjmp	.+28     	; 0x221a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	0b c0       	rjmp	.+22     	; 0x221a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	80 5c       	subi	r24, 0xC0	; 192
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	07 c0       	rjmp	.+14     	; 0x221a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	80 5f       	subi	r24, 0xF0	; 240
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	03 c0       	rjmp	.+6      	; 0x221a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	80 5b       	subi	r24, 0xB0	; 176
    2218:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	LCD_sendCommand(lcd_memory_address | LCD_CMD_FORCE_CURSOR_BEGINNING_1STLINE);
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	80 68       	ori	r24, 0x80	; 128
    221e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <LCD_sendCommand>
}
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *str){
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	00 d0       	rcall	.+0      	; 0x2238 <LCD_displayStringRowColumn+0x6>
    2238:	00 d0       	rcall	.+0      	; 0x223a <LCD_displayStringRowColumn+0x8>
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	6a 83       	std	Y+2, r22	; 0x02
    2242:	5c 83       	std	Y+4, r21	; 0x04
    2244:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	6a 81       	ldd	r22, Y+2	; 0x02
    224a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_moveCursor>
	LCD_displayString(str);
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
}
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <LCD_clearScreen>:
void LCD_clearScreen(void){
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CMD_CLEAR);
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <LCD_sendCommand>
}
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <LCD_integerToString>:
void LCD_integerToString(uint16 number){
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	62 97       	sbiw	r28, 0x12	; 18
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	9a 8b       	std	Y+18, r25	; 0x12
    228e:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(number,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2290:	89 89       	ldd	r24, Y+17	; 0x11
    2292:	9a 89       	ldd	r25, Y+18	; 0x12
    2294:	9e 01       	movw	r18, r28
    2296:	2f 5f       	subi	r18, 0xFF	; 255
    2298:	3f 4f       	sbci	r19, 0xFF	; 255
    229a:	b9 01       	movw	r22, r18
    229c:	4a e0       	ldi	r20, 0x0A	; 10
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	0e 94 81 17 	call	0x2f02	; 0x2f02 <itoa>
	LCD_displayString(buff); /* Display the string */
    22a4:	ce 01       	movw	r24, r28
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
}
    22ac:	62 96       	adiw	r28, 0x12	; 18
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <LCD_floatToString>:

void LCD_floatToString(float number){
    22be:	0f 93       	push	r16
    22c0:	1f 93       	push	r17
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	64 97       	sbiw	r28, 0x14	; 20
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	69 8b       	std	Y+17, r22	; 0x11
    22d8:	7a 8b       	std	Y+18, r23	; 0x12
    22da:	8b 8b       	std	Y+19, r24	; 0x13
    22dc:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16]; /* String to hold the ascii result */
	dtostrf(number, 3, 2, buff);
    22de:	89 89       	ldd	r24, Y+17	; 0x11
    22e0:	9a 89       	ldd	r25, Y+18	; 0x12
    22e2:	ab 89       	ldd	r26, Y+19	; 0x13
    22e4:	bc 89       	ldd	r27, Y+20	; 0x14
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	43 e0       	ldi	r20, 0x03	; 3
    22ec:	50 e0       	ldi	r21, 0x00	; 0
    22ee:	22 e0       	ldi	r18, 0x02	; 2
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	fe 01       	movw	r30, r28
    22f4:	31 96       	adiw	r30, 0x01	; 1
    22f6:	8f 01       	movw	r16, r30
    22f8:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <dtostrf>
	LCD_displayString(buff); /* Display the string */
    22fc:	ce 01       	movw	r24, r28
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
}
    2304:	64 96       	adiw	r28, 0x14	; 20
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	08 95       	ret

0000231a <KEYPAD_getPressedKey>:
//	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
//#endif
//}

uint8 KEYPAD_getPressedKey(void)
{
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	00 d0       	rcall	.+0      	; 0x2320 <KEYPAD_getPressedKey+0x6>
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	60 e0       	ldi	r22, 0x00	; 0
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	61 e0       	ldi	r22, 0x01	; 1
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	62 e0       	ldi	r22, 0x02	; 2
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	63 e0       	ldi	r22, 0x03	; 3
    2346:	40 e0       	ldi	r20, 0x00	; 0
    2348:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	64 e0       	ldi	r22, 0x04	; 4
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	65 e0       	ldi	r22, 0x05	; 5
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	66 e0       	ldi	r22, 0x06	; 6
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_setupPinDirection>

	PORTA |= 0xf0;
    236a:	ab e3       	ldi	r26, 0x3B	; 59
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	eb e3       	ldi	r30, 0x3B	; 59
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	80 6f       	ori	r24, 0xF0	; 240
    2376:	8c 93       	st	X, r24

#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	67 e0       	ldi	r22, 0x07	; 7
    237c:	40 e0       	ldi	r20, 0x00	; 0
    237e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2382:	19 82       	std	Y+1, r1	; 0x01
    2384:	35 c0       	rjmp	.+106    	; 0x23f0 <KEYPAD_getPressedKey+0xd6>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	69 81       	ldd	r22, Y+1	; 0x01
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	69 81       	ldd	r22, Y+1	; 0x01
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    239a:	1a 82       	std	Y+2, r1	; 0x02
    239c:	1e c0       	rjmp	.+60     	; 0x23da <KEYPAD_getPressedKey+0xc0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	98 2f       	mov	r25, r24
    23a2:	9c 5f       	subi	r25, 0xFC	; 252
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	69 2f       	mov	r22, r25
    23a8:	0e 94 47 0a 	call	0x148e	; 0x148e <GPIO_readPin>
    23ac:	88 23       	and	r24, r24
    23ae:	91 f4       	brne	.+36     	; 0x23d4 <KEYPAD_getPressedKey+0xba>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	88 2f       	mov	r24, r24
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	98 2f       	mov	r25, r24
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	89 0f       	add	r24, r25
    23c4:	8f 5f       	subi	r24, 0xFF	; 255
    23c6:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}
}
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	8f 5f       	subi	r24, 0xFF	; 255
    23d8:	8a 83       	std	Y+2, r24	; 0x02
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	84 30       	cpi	r24, 0x04	; 4
    23de:	f8 f2       	brcs	.-66     	; 0x239e <KEYPAD_getPressedKey+0x84>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	69 81       	ldd	r22, Y+1	; 0x01
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	8f 5f       	subi	r24, 0xFF	; 255
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	84 30       	cpi	r24, 0x04	; 4
    23f4:	40 f2       	brcs	.-112    	; 0x2386 <KEYPAD_getPressedKey+0x6c>
    23f6:	c5 cf       	rjmp	.-118    	; 0x2382 <KEYPAD_getPressedKey+0x68>

000023f8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <KEYPAD_4x4_adjustKeyNumber+0x6>
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2406:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	28 2f       	mov	r18, r24
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	3c 83       	std	Y+4, r19	; 0x04
    2410:	2b 83       	std	Y+3, r18	; 0x03
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	9c 81       	ldd	r25, Y+4	; 0x04
    2416:	88 30       	cpi	r24, 0x08	; 8
    2418:	91 05       	cpc	r25, r1
    241a:	09 f4       	brne	.+2      	; 0x241e <KEYPAD_4x4_adjustKeyNumber+0x26>
    241c:	70 c0       	rjmp	.+224    	; 0x24fe <KEYPAD_4x4_adjustKeyNumber+0x106>
    241e:	2b 81       	ldd	r18, Y+3	; 0x03
    2420:	3c 81       	ldd	r19, Y+4	; 0x04
    2422:	29 30       	cpi	r18, 0x09	; 9
    2424:	31 05       	cpc	r19, r1
    2426:	5c f5       	brge	.+86     	; 0x247e <KEYPAD_4x4_adjustKeyNumber+0x86>
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	84 30       	cpi	r24, 0x04	; 4
    242e:	91 05       	cpc	r25, r1
    2430:	09 f4       	brne	.+2      	; 0x2434 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2432:	59 c0       	rjmp	.+178    	; 0x24e6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2434:	2b 81       	ldd	r18, Y+3	; 0x03
    2436:	3c 81       	ldd	r19, Y+4	; 0x04
    2438:	25 30       	cpi	r18, 0x05	; 5
    243a:	31 05       	cpc	r19, r1
    243c:	9c f4       	brge	.+38     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	9c 81       	ldd	r25, Y+4	; 0x04
    2442:	82 30       	cpi	r24, 0x02	; 2
    2444:	91 05       	cpc	r25, r1
    2446:	09 f4       	brne	.+2      	; 0x244a <KEYPAD_4x4_adjustKeyNumber+0x52>
    2448:	48 c0       	rjmp	.+144    	; 0x24da <KEYPAD_4x4_adjustKeyNumber+0xe2>
    244a:	2b 81       	ldd	r18, Y+3	; 0x03
    244c:	3c 81       	ldd	r19, Y+4	; 0x04
    244e:	23 30       	cpi	r18, 0x03	; 3
    2450:	31 05       	cpc	r19, r1
    2452:	0c f0       	brlt	.+2      	; 0x2456 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2454:	45 c0       	rjmp	.+138    	; 0x24e0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	81 30       	cpi	r24, 0x01	; 1
    245c:	91 05       	cpc	r25, r1
    245e:	09 f4       	brne	.+2      	; 0x2462 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2460:	39 c0       	rjmp	.+114    	; 0x24d4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2462:	68 c0       	rjmp	.+208    	; 0x2534 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    2464:	2b 81       	ldd	r18, Y+3	; 0x03
    2466:	3c 81       	ldd	r19, Y+4	; 0x04
    2468:	26 30       	cpi	r18, 0x06	; 6
    246a:	31 05       	cpc	r19, r1
    246c:	09 f4       	brne	.+2      	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x78>
    246e:	41 c0       	rjmp	.+130    	; 0x24f2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	9c 81       	ldd	r25, Y+4	; 0x04
    2474:	87 30       	cpi	r24, 0x07	; 7
    2476:	91 05       	cpc	r25, r1
    2478:	0c f0       	brlt	.+2      	; 0x247c <KEYPAD_4x4_adjustKeyNumber+0x84>
    247a:	3e c0       	rjmp	.+124    	; 0x24f8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    247c:	37 c0       	rjmp	.+110    	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0xf4>
    247e:	2b 81       	ldd	r18, Y+3	; 0x03
    2480:	3c 81       	ldd	r19, Y+4	; 0x04
    2482:	2c 30       	cpi	r18, 0x0C	; 12
    2484:	31 05       	cpc	r19, r1
    2486:	09 f4       	brne	.+2      	; 0x248a <KEYPAD_4x4_adjustKeyNumber+0x92>
    2488:	46 c0       	rjmp	.+140    	; 0x2516 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	9c 81       	ldd	r25, Y+4	; 0x04
    248e:	8d 30       	cpi	r24, 0x0D	; 13
    2490:	91 05       	cpc	r25, r1
    2492:	5c f4       	brge	.+22     	; 0x24aa <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2494:	2b 81       	ldd	r18, Y+3	; 0x03
    2496:	3c 81       	ldd	r19, Y+4	; 0x04
    2498:	2a 30       	cpi	r18, 0x0A	; 10
    249a:	31 05       	cpc	r19, r1
    249c:	b1 f1       	breq	.+108    	; 0x250a <KEYPAD_4x4_adjustKeyNumber+0x112>
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	8b 30       	cpi	r24, 0x0B	; 11
    24a4:	91 05       	cpc	r25, r1
    24a6:	a4 f5       	brge	.+104    	; 0x2510 <KEYPAD_4x4_adjustKeyNumber+0x118>
    24a8:	2d c0       	rjmp	.+90     	; 0x2504 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    24aa:	2b 81       	ldd	r18, Y+3	; 0x03
    24ac:	3c 81       	ldd	r19, Y+4	; 0x04
    24ae:	2e 30       	cpi	r18, 0x0E	; 14
    24b0:	31 05       	cpc	r19, r1
    24b2:	b9 f1       	breq	.+110    	; 0x2522 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	9c 81       	ldd	r25, Y+4	; 0x04
    24b8:	8e 30       	cpi	r24, 0x0E	; 14
    24ba:	91 05       	cpc	r25, r1
    24bc:	7c f1       	brlt	.+94     	; 0x251c <KEYPAD_4x4_adjustKeyNumber+0x124>
    24be:	2b 81       	ldd	r18, Y+3	; 0x03
    24c0:	3c 81       	ldd	r19, Y+4	; 0x04
    24c2:	2f 30       	cpi	r18, 0x0F	; 15
    24c4:	31 05       	cpc	r19, r1
    24c6:	81 f1       	breq	.+96     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x130>
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	9c 81       	ldd	r25, Y+4	; 0x04
    24cc:	80 31       	cpi	r24, 0x10	; 16
    24ce:	91 05       	cpc	r25, r1
    24d0:	71 f1       	breq	.+92     	; 0x252e <KEYPAD_4x4_adjustKeyNumber+0x136>
    24d2:	30 c0       	rjmp	.+96     	; 0x2534 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    24d4:	87 e3       	ldi	r24, 0x37	; 55
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	2f c0       	rjmp	.+94     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    24da:	88 e3       	ldi	r24, 0x38	; 56
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	2c c0       	rjmp	.+88     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    24e0:	89 e3       	ldi	r24, 0x39	; 57
    24e2:	89 83       	std	Y+1, r24	; 0x01
    24e4:	29 c0       	rjmp	.+82     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    24e6:	85 e2       	ldi	r24, 0x25	; 37
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	26 c0       	rjmp	.+76     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    24ec:	84 e3       	ldi	r24, 0x34	; 52
    24ee:	89 83       	std	Y+1, r24	; 0x01
    24f0:	23 c0       	rjmp	.+70     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    24f2:	85 e3       	ldi	r24, 0x35	; 53
    24f4:	89 83       	std	Y+1, r24	; 0x01
    24f6:	20 c0       	rjmp	.+64     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    24f8:	86 e3       	ldi	r24, 0x36	; 54
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	1d c0       	rjmp	.+58     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    24fe:	8a e2       	ldi	r24, 0x2A	; 42
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	1a c0       	rjmp	.+52     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 9: keypad_button = '1';
    2504:	81 e3       	ldi	r24, 0x31	; 49
    2506:	89 83       	std	Y+1, r24	; 0x01
    2508:	17 c0       	rjmp	.+46     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    250a:	82 e3       	ldi	r24, 0x32	; 50
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	14 c0       	rjmp	.+40     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    2510:	83 e3       	ldi	r24, 0x33	; 51
    2512:	89 83       	std	Y+1, r24	; 0x01
    2514:	11 c0       	rjmp	.+34     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2516:	8d e2       	ldi	r24, 0x2D	; 45
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	0e c0       	rjmp	.+28     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    251c:	8d e0       	ldi	r24, 0x0D	; 13
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	0b c0       	rjmp	.+22     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 14: keypad_button = '0';
    2522:	80 e3       	ldi	r24, 0x30	; 48
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	08 c0       	rjmp	.+16     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2528:	8d e3       	ldi	r24, 0x3D	; 61
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	05 c0       	rjmp	.+10     	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    252e:	8b e2       	ldi	r24, 0x2B	; 43
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2538:	89 81       	ldd	r24, Y+1	; 0x01
}
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <handleTimer_callBack>:
ST_timer1_configType timer1_configType = {TIMER1_MAX_VALUE - TIMER1_ONE_SECOND_CLK_256_8M, TIMER1_MAX_VALUE, TIMER1_CLK_256, TIMER1_NORMAL};
ST_uart_ConfigType uart_configType = {UART_BITS_EIGHT, UART_PARITY_DISABLE, UART_STOP_ONE_BIT, BAUD_9600, UART_U2X_ENABLE, UART_INT_TX_DISABLE, UART_INT_RX_DISABLE};

uint16 seconds = 0;

void handleTimer_callBack(){
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
	if(seconds > 0)
    2550:	80 91 55 01 	lds	r24, 0x0155
    2554:	90 91 56 01 	lds	r25, 0x0156
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	49 f0       	breq	.+18     	; 0x256e <handleTimer_callBack+0x26>
		seconds--;
    255c:	80 91 55 01 	lds	r24, 0x0155
    2560:	90 91 56 01 	lds	r25, 0x0156
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	90 93 56 01 	sts	0x0156, r25
    256a:	80 93 55 01 	sts	0x0155, r24
}
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <setup>:

void setup(){
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
	//	KEYPAD_init();

	LCD_init();
    257c:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_init>
	UART_init(&uart_configType);
    2580:	81 e4       	ldi	r24, 0x41	; 65
    2582:	91 e0       	ldi	r25, 0x01	; 1
    2584:	0e 94 7f 06 	call	0xcfe	; 0xcfe <UART_init>
	Timer1_init(&timer1_configType);
    2588:	8b e3       	ldi	r24, 0x3B	; 59
    258a:	91 e0       	ldi	r25, 0x01	; 1
    258c:	0e 94 18 08 	call	0x1030	; 0x1030 <Timer1_init>
	Timer1_setCallBack(&handleTimer_callBack);
    2590:	84 ea       	ldi	r24, 0xA4	; 164
    2592:	92 e1       	ldi	r25, 0x12	; 18
    2594:	0e 94 5f 08 	call	0x10be	; 0x10be <Timer1_setCallBack>
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    2598:	af e5       	ldi	r26, 0x5F	; 95
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	ef e5       	ldi	r30, 0x5F	; 95
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	80 68       	ori	r24, 0x80	; 128
    25a4:	8c 93       	st	X, r24
}
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <main>:

void readAndSendPassword();
void changePass();
uint8 checkPass(uint8 key);

void main(void){
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	ab 97       	sbiw	r28, 0x2b	; 43
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	f8 94       	cli
    25ba:	de bf       	out	0x3e, r29	; 62
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	cd bf       	out	0x3d, r28	; 61

	setup();
    25c0:	0e 94 ba 12 	call	0x2574	; 0x2574 <setup>

	LCD_displayString("System loading...");
    25c4:	80 e6       	ldi	r24, 0x60	; 96
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
	LCD_moveCursor(1,0);
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_moveCursor>
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	aa e7       	ldi	r26, 0x7A	; 122
    25da:	b4 e4       	ldi	r27, 0x44	; 68
    25dc:	8f a3       	std	Y+39, r24	; 0x27
    25de:	98 a7       	std	Y+40, r25	; 0x28
    25e0:	a9 a7       	std	Y+41, r26	; 0x29
    25e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e4:	6f a1       	ldd	r22, Y+39	; 0x27
    25e6:	78 a5       	ldd	r23, Y+40	; 0x28
    25e8:	89 a5       	ldd	r24, Y+41	; 0x29
    25ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	4a ef       	ldi	r20, 0xFA	; 250
    25f2:	54 e4       	ldi	r21, 0x44	; 68
    25f4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	8b a3       	std	Y+35, r24	; 0x23
    25fe:	9c a3       	std	Y+36, r25	; 0x24
    2600:	ad a3       	std	Y+37, r26	; 0x25
    2602:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2604:	6b a1       	ldd	r22, Y+35	; 0x23
    2606:	7c a1       	ldd	r23, Y+36	; 0x24
    2608:	8d a1       	ldd	r24, Y+37	; 0x25
    260a:	9e a1       	ldd	r25, Y+38	; 0x26
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e8       	ldi	r20, 0x80	; 128
    2612:	5f e3       	ldi	r21, 0x3F	; 63
    2614:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2618:	88 23       	and	r24, r24
    261a:	2c f4       	brge	.+10     	; 0x2626 <main+0x7a>
		__ticks = 1;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	9a a3       	std	Y+34, r25	; 0x22
    2622:	89 a3       	std	Y+33, r24	; 0x21
    2624:	3f c0       	rjmp	.+126    	; 0x26a4 <main+0xf8>
	else if (__tmp > 65535)
    2626:	6b a1       	ldd	r22, Y+35	; 0x23
    2628:	7c a1       	ldd	r23, Y+36	; 0x24
    262a:	8d a1       	ldd	r24, Y+37	; 0x25
    262c:	9e a1       	ldd	r25, Y+38	; 0x26
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	3f ef       	ldi	r19, 0xFF	; 255
    2632:	4f e7       	ldi	r20, 0x7F	; 127
    2634:	57 e4       	ldi	r21, 0x47	; 71
    2636:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    263a:	18 16       	cp	r1, r24
    263c:	4c f5       	brge	.+82     	; 0x2690 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263e:	6f a1       	ldd	r22, Y+39	; 0x27
    2640:	78 a5       	ldd	r23, Y+40	; 0x28
    2642:	89 a5       	ldd	r24, Y+41	; 0x29
    2644:	9a a5       	ldd	r25, Y+42	; 0x2a
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e2       	ldi	r20, 0x20	; 32
    264c:	51 e4       	ldi	r21, 0x41	; 65
    264e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	bc 01       	movw	r22, r24
    2658:	cd 01       	movw	r24, r26
    265a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	9a a3       	std	Y+34, r25	; 0x22
    2664:	89 a3       	std	Y+33, r24	; 0x21
    2666:	0f c0       	rjmp	.+30     	; 0x2686 <main+0xda>
    2668:	88 ec       	ldi	r24, 0xC8	; 200
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	98 a3       	std	Y+32, r25	; 0x20
    266e:	8f 8f       	std	Y+31, r24	; 0x1f
    2670:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2672:	98 a1       	ldd	r25, Y+32	; 0x20
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <main+0xc8>
    2678:	98 a3       	std	Y+32, r25	; 0x20
    267a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267c:	89 a1       	ldd	r24, Y+33	; 0x21
    267e:	9a a1       	ldd	r25, Y+34	; 0x22
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	9a a3       	std	Y+34, r25	; 0x22
    2684:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2686:	89 a1       	ldd	r24, Y+33	; 0x21
    2688:	9a a1       	ldd	r25, Y+34	; 0x22
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	69 f7       	brne	.-38     	; 0x2668 <main+0xbc>
    268e:	14 c0       	rjmp	.+40     	; 0x26b8 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2690:	6b a1       	ldd	r22, Y+35	; 0x23
    2692:	7c a1       	ldd	r23, Y+36	; 0x24
    2694:	8d a1       	ldd	r24, Y+37	; 0x25
    2696:	9e a1       	ldd	r25, Y+38	; 0x26
    2698:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9a a3       	std	Y+34, r25	; 0x22
    26a2:	89 a3       	std	Y+33, r24	; 0x21
    26a4:	89 a1       	ldd	r24, Y+33	; 0x21
    26a6:	9a a1       	ldd	r25, Y+34	; 0x22
    26a8:	9e 8f       	std	Y+30, r25	; 0x1e
    26aa:	8d 8f       	std	Y+29, r24	; 0x1d
    26ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <main+0x104>
    26b4:	9e 8f       	std	Y+30, r25	; 0x1e
    26b6:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1000); /* delay 1 second to be sure that both ECU MCU is running */

	LCD_clearScreen();
    26b8:	0e 94 32 11 	call	0x2264	; 0x2264 <LCD_clearScreen>

	changePass();
    26bc:	0e 94 66 15 	call	0x2acc	; 0x2acc <changePass>

	while(1){
		LCD_clearScreen();
    26c0:	0e 94 32 11 	call	0x2264	; 0x2264 <LCD_clearScreen>
		LCD_displayString("+ : open door");
    26c4:	82 e7       	ldi	r24, 0x72	; 114
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
		LCD_moveCursor(1,0);
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_moveCursor>
		LCD_displayString("- : change pass");
    26d4:	80 e8       	ldi	r24, 0x80	; 128
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>

		uint8 key = KEYPAD_getPressedKey();
    26dc:	0e 94 8d 11 	call	0x231a	; 0x231a <KEYPAD_getPressedKey>
    26e0:	8b a7       	std	Y+43, r24	; 0x2b
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	aa e7       	ldi	r26, 0x7A	; 122
    26e8:	b3 e4       	ldi	r27, 0x43	; 67
    26ea:	89 8f       	std	Y+25, r24	; 0x19
    26ec:	9a 8f       	std	Y+26, r25	; 0x1a
    26ee:	ab 8f       	std	Y+27, r26	; 0x1b
    26f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f2:	69 8d       	ldd	r22, Y+25	; 0x19
    26f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4a ef       	ldi	r20, 0xFA	; 250
    2700:	54 e4       	ldi	r21, 0x44	; 68
    2702:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	8d 8b       	std	Y+21, r24	; 0x15
    270c:	9e 8b       	std	Y+22, r25	; 0x16
    270e:	af 8b       	std	Y+23, r26	; 0x17
    2710:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2712:	6d 89       	ldd	r22, Y+21	; 0x15
    2714:	7e 89       	ldd	r23, Y+22	; 0x16
    2716:	8f 89       	ldd	r24, Y+23	; 0x17
    2718:	98 8d       	ldd	r25, Y+24	; 0x18
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2726:	88 23       	and	r24, r24
    2728:	2c f4       	brge	.+10     	; 0x2734 <main+0x188>
		__ticks = 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9c 8b       	std	Y+20, r25	; 0x14
    2730:	8b 8b       	std	Y+19, r24	; 0x13
    2732:	3f c0       	rjmp	.+126    	; 0x27b2 <main+0x206>
	else if (__tmp > 65535)
    2734:	6d 89       	ldd	r22, Y+21	; 0x15
    2736:	7e 89       	ldd	r23, Y+22	; 0x16
    2738:	8f 89       	ldd	r24, Y+23	; 0x17
    273a:	98 8d       	ldd	r25, Y+24	; 0x18
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	4c f5       	brge	.+82     	; 0x279e <main+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274c:	69 8d       	ldd	r22, Y+25	; 0x19
    274e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2750:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2752:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9c 8b       	std	Y+20, r25	; 0x14
    2772:	8b 8b       	std	Y+19, r24	; 0x13
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <main+0x1e8>
    2776:	88 ec       	ldi	r24, 0xC8	; 200
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	9a 8b       	std	Y+18, r25	; 0x12
    277c:	89 8b       	std	Y+17, r24	; 0x11
    277e:	89 89       	ldd	r24, Y+17	; 0x11
    2780:	9a 89       	ldd	r25, Y+18	; 0x12
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <main+0x1d6>
    2786:	9a 8b       	std	Y+18, r25	; 0x12
    2788:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	8b 89       	ldd	r24, Y+19	; 0x13
    278c:	9c 89       	ldd	r25, Y+20	; 0x14
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9c 8b       	std	Y+20, r25	; 0x14
    2792:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	8b 89       	ldd	r24, Y+19	; 0x13
    2796:	9c 89       	ldd	r25, Y+20	; 0x14
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	69 f7       	brne	.-38     	; 0x2776 <main+0x1ca>
    279c:	14 c0       	rjmp	.+40     	; 0x27c6 <main+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	6d 89       	ldd	r22, Y+21	; 0x15
    27a0:	7e 89       	ldd	r23, Y+22	; 0x16
    27a2:	8f 89       	ldd	r24, Y+23	; 0x17
    27a4:	98 8d       	ldd	r25, Y+24	; 0x18
    27a6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9c 8b       	std	Y+20, r25	; 0x14
    27b0:	8b 8b       	std	Y+19, r24	; 0x13
    27b2:	8b 89       	ldd	r24, Y+19	; 0x13
    27b4:	9c 89       	ldd	r25, Y+20	; 0x14
    27b6:	98 8b       	std	Y+16, r25	; 0x10
    27b8:	8f 87       	std	Y+15, r24	; 0x0f
    27ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    27bc:	98 89       	ldd	r25, Y+16	; 0x10
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <main+0x212>
    27c2:	98 8b       	std	Y+16, r25	; 0x10
    27c4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);/* it needs at least 200ms to work properly*/
		LCD_clearScreen();
    27c6:	0e 94 32 11 	call	0x2264	; 0x2264 <LCD_clearScreen>

		if( key == '+' ){
    27ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    27cc:	8b 32       	cpi	r24, 0x2B	; 43
    27ce:	f9 f4       	brne	.+62     	; 0x280e <main+0x262>
			if( checkPass('+') == 1){
    27d0:	8b e2       	ldi	r24, 0x2B	; 43
    27d2:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <checkPass>
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	09 f0       	breq	.+2      	; 0x27dc <main+0x230>
    27da:	72 cf       	rjmp	.-284    	; 0x26c0 <main+0x114>
				//TODO run motor
				LCD_displayString("Unlocking Door");
    27dc:	80 e9       	ldi	r24, 0x90	; 144
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
				//TODO delay here
				UART_rcvCharacter();
    27e4:	0e 94 b0 07 	call	0xf60	; 0xf60 <UART_rcvCharacter>
				LCD_clearScreen();
    27e8:	0e 94 32 11 	call	0x2264	; 0x2264 <LCD_clearScreen>
				LCD_displayString("Hold Door");
    27ec:	8f e9       	ldi	r24, 0x9F	; 159
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
				UART_rcvCharacter();
    27f4:	0e 94 b0 07 	call	0xf60	; 0xf60 <UART_rcvCharacter>
				LCD_clearScreen();
    27f8:	0e 94 32 11 	call	0x2264	; 0x2264 <LCD_clearScreen>
				LCD_displayString("Locking Door");
    27fc:	89 ea       	ldi	r24, 0xA9	; 169
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
				UART_rcvCharacter();
    2804:	0e 94 b0 07 	call	0xf60	; 0xf60 <UART_rcvCharacter>
				LCD_clearScreen();
    2808:	0e 94 32 11 	call	0x2264	; 0x2264 <LCD_clearScreen>
    280c:	59 cf       	rjmp	.-334    	; 0x26c0 <main+0x114>
			}
		}
		else if( key == '-' ){
    280e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2810:	8d 32       	cpi	r24, 0x2D	; 45
    2812:	09 f0       	breq	.+2      	; 0x2816 <main+0x26a>
    2814:	55 cf       	rjmp	.-342    	; 0x26c0 <main+0x114>
			if( checkPass('-') == 1){
    2816:	8d e2       	ldi	r24, 0x2D	; 45
    2818:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <checkPass>
    281c:	81 30       	cpi	r24, 0x01	; 1
    281e:	09 f0       	breq	.+2      	; 0x2822 <main+0x276>
    2820:	4f cf       	rjmp	.-354    	; 0x26c0 <main+0x114>
				LCD_displayString("correct");
    2822:	86 eb       	ldi	r24, 0xB6	; 182
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	aa e7       	ldi	r26, 0x7A	; 122
    2830:	b4 e4       	ldi	r27, 0x44	; 68
    2832:	8b 87       	std	Y+11, r24	; 0x0b
    2834:	9c 87       	std	Y+12, r25	; 0x0c
    2836:	ad 87       	std	Y+13, r26	; 0x0d
    2838:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283a:	6b 85       	ldd	r22, Y+11	; 0x0b
    283c:	7c 85       	ldd	r23, Y+12	; 0x0c
    283e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2840:	9e 85       	ldd	r25, Y+14	; 0x0e
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	4a ef       	ldi	r20, 0xFA	; 250
    2848:	54 e4       	ldi	r21, 0x44	; 68
    284a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	8f 83       	std	Y+7, r24	; 0x07
    2854:	98 87       	std	Y+8, r25	; 0x08
    2856:	a9 87       	std	Y+9, r26	; 0x09
    2858:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    285a:	6f 81       	ldd	r22, Y+7	; 0x07
    285c:	78 85       	ldd	r23, Y+8	; 0x08
    285e:	89 85       	ldd	r24, Y+9	; 0x09
    2860:	9a 85       	ldd	r25, Y+10	; 0x0a
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e8       	ldi	r20, 0x80	; 128
    2868:	5f e3       	ldi	r21, 0x3F	; 63
    286a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    286e:	88 23       	and	r24, r24
    2870:	2c f4       	brge	.+10     	; 0x287c <main+0x2d0>
		__ticks = 1;
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	9e 83       	std	Y+6, r25	; 0x06
    2878:	8d 83       	std	Y+5, r24	; 0x05
    287a:	3f c0       	rjmp	.+126    	; 0x28fa <main+0x34e>
	else if (__tmp > 65535)
    287c:	6f 81       	ldd	r22, Y+7	; 0x07
    287e:	78 85       	ldd	r23, Y+8	; 0x08
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	9a 85       	ldd	r25, Y+10	; 0x0a
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	3f ef       	ldi	r19, 0xFF	; 255
    2888:	4f e7       	ldi	r20, 0x7F	; 127
    288a:	57 e4       	ldi	r21, 0x47	; 71
    288c:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2890:	18 16       	cp	r1, r24
    2892:	4c f5       	brge	.+82     	; 0x28e6 <main+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2894:	6b 85       	ldd	r22, Y+11	; 0x0b
    2896:	7c 85       	ldd	r23, Y+12	; 0x0c
    2898:	8d 85       	ldd	r24, Y+13	; 0x0d
    289a:	9e 85       	ldd	r25, Y+14	; 0x0e
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e2       	ldi	r20, 0x20	; 32
    28a2:	51 e4       	ldi	r21, 0x41	; 65
    28a4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	bc 01       	movw	r22, r24
    28ae:	cd 01       	movw	r24, r26
    28b0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9e 83       	std	Y+6, r25	; 0x06
    28ba:	8d 83       	std	Y+5, r24	; 0x05
    28bc:	0f c0       	rjmp	.+30     	; 0x28dc <main+0x330>
    28be:	88 ec       	ldi	r24, 0xC8	; 200
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9c 83       	std	Y+4, r25	; 0x04
    28c4:	8b 83       	std	Y+3, r24	; 0x03
    28c6:	8b 81       	ldd	r24, Y+3	; 0x03
    28c8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <main+0x31e>
    28ce:	9c 83       	std	Y+4, r25	; 0x04
    28d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d2:	8d 81       	ldd	r24, Y+5	; 0x05
    28d4:	9e 81       	ldd	r25, Y+6	; 0x06
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	9e 83       	std	Y+6, r25	; 0x06
    28da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	69 f7       	brne	.-38     	; 0x28be <main+0x312>
    28e4:	14 c0       	rjmp	.+40     	; 0x290e <main+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e6:	6f 81       	ldd	r22, Y+7	; 0x07
    28e8:	78 85       	ldd	r23, Y+8	; 0x08
    28ea:	89 85       	ldd	r24, Y+9	; 0x09
    28ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ee:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	9e 83       	std	Y+6, r25	; 0x06
    28f8:	8d 83       	std	Y+5, r24	; 0x05
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	9a 83       	std	Y+2, r25	; 0x02
    2900:	89 83       	std	Y+1, r24	; 0x01
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	9a 81       	ldd	r25, Y+2	; 0x02
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	f1 f7       	brne	.-4      	; 0x2906 <main+0x35a>
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				LCD_clearScreen();
    290e:	0e 94 32 11 	call	0x2264	; 0x2264 <LCD_clearScreen>
				changePass();
    2912:	0e 94 66 15 	call	0x2acc	; 0x2acc <changePass>
    2916:	d4 ce       	rjmp	.-600    	; 0x26c0 <main+0x114>

00002918 <readAndSendPassword>:
		}
	}
}


void readAndSendPassword(){
    2918:	0f 93       	push	r16
    291a:	1f 93       	push	r17
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	6a 97       	sbiw	r28, 0x1a	; 26
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61

	uint8 password[PASSWORD_SIZE] = {'=', '=', '=', '=', '=', '='};			/* password that store 5 chars and \0 */
    2930:	ce 01       	movw	r24, r28
    2932:	40 96       	adiw	r24, 0x10	; 16
    2934:	9f 8b       	std	Y+23, r25	; 0x17
    2936:	8e 8b       	std	Y+22, r24	; 0x16
    2938:	e9 e4       	ldi	r30, 0x49	; 73
    293a:	f1 e0       	ldi	r31, 0x01	; 1
    293c:	f9 8f       	std	Y+25, r31	; 0x19
    293e:	e8 8f       	std	Y+24, r30	; 0x18
    2940:	f6 e0       	ldi	r31, 0x06	; 6
    2942:	fa 8f       	std	Y+26, r31	; 0x1a
    2944:	e8 8d       	ldd	r30, Y+24	; 0x18
    2946:	f9 8d       	ldd	r31, Y+25	; 0x19
    2948:	00 80       	ld	r0, Z
    294a:	88 8d       	ldd	r24, Y+24	; 0x18
    294c:	99 8d       	ldd	r25, Y+25	; 0x19
    294e:	01 96       	adiw	r24, 0x01	; 1
    2950:	99 8f       	std	Y+25, r25	; 0x19
    2952:	88 8f       	std	Y+24, r24	; 0x18
    2954:	ee 89       	ldd	r30, Y+22	; 0x16
    2956:	ff 89       	ldd	r31, Y+23	; 0x17
    2958:	00 82       	st	Z, r0
    295a:	8e 89       	ldd	r24, Y+22	; 0x16
    295c:	9f 89       	ldd	r25, Y+23	; 0x17
    295e:	01 96       	adiw	r24, 0x01	; 1
    2960:	9f 8b       	std	Y+23, r25	; 0x17
    2962:	8e 8b       	std	Y+22, r24	; 0x16
    2964:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2966:	91 50       	subi	r25, 0x01	; 1
    2968:	9a 8f       	std	Y+26, r25	; 0x1a
    296a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    296c:	ee 23       	and	r30, r30
    296e:	51 f7       	brne	.-44     	; 0x2944 <readAndSendPassword+0x2c>
	uint8 password_index = 0;
    2970:	1f 86       	std	Y+15, r1	; 0x0f

	for(;;){
		password[password_index] = KEYPAD_getPressedKey();
    2972:	8f 85       	ldd	r24, Y+15	; 0x0f
    2974:	08 2f       	mov	r16, r24
    2976:	10 e0       	ldi	r17, 0x00	; 0
    2978:	0e 94 8d 11 	call	0x231a	; 0x231a <KEYPAD_getPressedKey>
    297c:	28 2f       	mov	r18, r24
    297e:	ce 01       	movw	r24, r28
    2980:	40 96       	adiw	r24, 0x10	; 16
    2982:	fc 01       	movw	r30, r24
    2984:	e0 0f       	add	r30, r16
    2986:	f1 1f       	adc	r31, r17
    2988:	20 83       	st	Z, r18
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	aa e7       	ldi	r26, 0x7A	; 122
    2990:	b3 e4       	ldi	r27, 0x43	; 67
    2992:	8b 87       	std	Y+11, r24	; 0x0b
    2994:	9c 87       	std	Y+12, r25	; 0x0c
    2996:	ad 87       	std	Y+13, r26	; 0x0d
    2998:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299a:	6b 85       	ldd	r22, Y+11	; 0x0b
    299c:	7c 85       	ldd	r23, Y+12	; 0x0c
    299e:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	4a ef       	ldi	r20, 0xFA	; 250
    29a8:	54 e4       	ldi	r21, 0x44	; 68
    29aa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	8f 83       	std	Y+7, r24	; 0x07
    29b4:	98 87       	std	Y+8, r25	; 0x08
    29b6:	a9 87       	std	Y+9, r26	; 0x09
    29b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ba:	6f 81       	ldd	r22, Y+7	; 0x07
    29bc:	78 85       	ldd	r23, Y+8	; 0x08
    29be:	89 85       	ldd	r24, Y+9	; 0x09
    29c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e8       	ldi	r20, 0x80	; 128
    29c8:	5f e3       	ldi	r21, 0x3F	; 63
    29ca:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    29ce:	88 23       	and	r24, r24
    29d0:	2c f4       	brge	.+10     	; 0x29dc <readAndSendPassword+0xc4>
		__ticks = 1;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
    29da:	3f c0       	rjmp	.+126    	; 0x2a5a <readAndSendPassword+0x142>
	else if (__tmp > 65535)
    29dc:	6f 81       	ldd	r22, Y+7	; 0x07
    29de:	78 85       	ldd	r23, Y+8	; 0x08
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	3f ef       	ldi	r19, 0xFF	; 255
    29e8:	4f e7       	ldi	r20, 0x7F	; 127
    29ea:	57 e4       	ldi	r21, 0x47	; 71
    29ec:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    29f0:	18 16       	cp	r1, r24
    29f2:	4c f5       	brge	.+82     	; 0x2a46 <readAndSendPassword+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e2       	ldi	r20, 0x20	; 32
    2a02:	51 e4       	ldi	r21, 0x41	; 65
    2a04:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	cd 01       	movw	r24, r26
    2a10:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	9e 83       	std	Y+6, r25	; 0x06
    2a1a:	8d 83       	std	Y+5, r24	; 0x05
    2a1c:	0f c0       	rjmp	.+30     	; 0x2a3c <readAndSendPassword+0x124>
    2a1e:	88 ec       	ldi	r24, 0xC8	; 200
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	9c 83       	std	Y+4, r25	; 0x04
    2a24:	8b 83       	std	Y+3, r24	; 0x03
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <readAndSendPassword+0x112>
    2a2e:	9c 83       	std	Y+4, r25	; 0x04
    2a30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a32:	8d 81       	ldd	r24, Y+5	; 0x05
    2a34:	9e 81       	ldd	r25, Y+6	; 0x06
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	69 f7       	brne	.-38     	; 0x2a1e <readAndSendPassword+0x106>
    2a44:	14 c0       	rjmp	.+40     	; 0x2a6e <readAndSendPassword+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a46:	6f 81       	ldd	r22, Y+7	; 0x07
    2a48:	78 85       	ldd	r23, Y+8	; 0x08
    2a4a:	89 85       	ldd	r24, Y+9	; 0x09
    2a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	9e 83       	std	Y+6, r25	; 0x06
    2a58:	8d 83       	std	Y+5, r24	; 0x05
    2a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5e:	9a 83       	std	Y+2, r25	; 0x02
    2a60:	89 83       	std	Y+1, r24	; 0x01
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <readAndSendPassword+0x14e>
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);/* it needs at least 200ms to work properly*/

		if(password[password_index] == '=' ){ /* if user pressed Enter */
    2a6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	ce 01       	movw	r24, r28
    2a76:	40 96       	adiw	r24, 0x10	; 16
    2a78:	fc 01       	movw	r30, r24
    2a7a:	e2 0f       	add	r30, r18
    2a7c:	f3 1f       	adc	r31, r19
    2a7e:	80 81       	ld	r24, Z
    2a80:	8d 33       	cpi	r24, 0x3D	; 61
    2a82:	c9 f4       	brne	.+50     	; 0x2ab6 <readAndSendPassword+0x19e>
			password[password_index] = '\0';
    2a84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a86:	28 2f       	mov	r18, r24
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	40 96       	adiw	r24, 0x10	; 16
    2a8e:	fc 01       	movw	r30, r24
    2a90:	e2 0f       	add	r30, r18
    2a92:	f3 1f       	adc	r31, r19
    2a94:	10 82       	st	Z, r1
			LCD_displayCharacter('*');
			password_index++;
		}
	}

	UART_sendArray(password, PASSWORD_SIZE); /*TODO UART should not used in app layer*/
    2a96:	ce 01       	movw	r24, r28
    2a98:	40 96       	adiw	r24, 0x10	; 16
    2a9a:	66 e0       	ldi	r22, 0x06	; 6
    2a9c:	0e 94 7a 07 	call	0xef4	; 0xef4 <UART_sendArray>
}
    2aa0:	6a 96       	adiw	r28, 0x1a	; 26
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	1f 91       	pop	r17
    2ab2:	0f 91       	pop	r16
    2ab4:	08 95       	ret

		if(password[password_index] == '=' ){ /* if user pressed Enter */
			password[password_index] = '\0';
			break;
		}
		else if(password_index <= 4){ /* index 4 indicates that 5 numbers have been entered*/
    2ab6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab8:	85 30       	cpi	r24, 0x05	; 5
    2aba:	08 f0       	brcs	.+2      	; 0x2abe <readAndSendPassword+0x1a6>
    2abc:	5a cf       	rjmp	.-332    	; 0x2972 <readAndSendPassword+0x5a>
			LCD_displayCharacter('*');
    2abe:	8a e2       	ldi	r24, 0x2A	; 42
    2ac0:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <LCD_displayCharacter>
			password_index++;
    2ac4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ac6:	8f 5f       	subi	r24, 0xFF	; 255
    2ac8:	8f 87       	std	Y+15, r24	; 0x0f
    2aca:	53 cf       	rjmp	.-346    	; 0x2972 <readAndSendPassword+0x5a>

00002acc <changePass>:
	}

	UART_sendArray(password, PASSWORD_SIZE); /*TODO UART should not used in app layer*/
}

void changePass(){
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	2f 97       	sbiw	r28, 0x0f	; 15
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	de bf       	out	0x3e, r29	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	cd bf       	out	0x3d, r28	; 61


	uint8 response = 'w';
    2ae0:	87 e7       	ldi	r24, 0x77	; 119
    2ae2:	8f 87       	std	Y+15, r24	; 0x0f

	do{
			UART_sendCharacter('p');
    2ae4:	80 e7       	ldi	r24, 0x70	; 112
    2ae6:	0e 94 63 07 	call	0xec6	; 0xec6 <UART_sendCharacter>
			LCD_displayString("plz enter pass: ");
    2aea:	8e eb       	ldi	r24, 0xBE	; 190
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
			LCD_moveCursor(1,0);
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	60 e0       	ldi	r22, 0x00	; 0
    2af6:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_moveCursor>
			readAndSendPassword();
    2afa:	0e 94 8c 14 	call	0x2918	; 0x2918 <readAndSendPassword>
			LCD_clearScreen();
    2afe:	0e 94 32 11 	call	0x2264	; 0x2264 <LCD_clearScreen>

			LCD_displayString("plz re-enter the");
    2b02:	8f ec       	ldi	r24, 0xCF	; 207
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
			LCD_moveCursor(1,0);
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	60 e0       	ldi	r22, 0x00	; 0
    2b0e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_moveCursor>
			LCD_displayString("same pass:");
    2b12:	80 ee       	ldi	r24, 0xE0	; 224
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
			readAndSendPassword();
    2b1a:	0e 94 8c 14 	call	0x2918	; 0x2918 <readAndSendPassword>
			LCD_clearScreen();
    2b1e:	0e 94 32 11 	call	0x2264	; 0x2264 <LCD_clearScreen>

			LCD_displayString("checking password");
    2b22:	8b ee       	ldi	r24, 0xEB	; 235
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
			response = UART_rcvCharacter();
    2b2a:	0e 94 b0 07 	call	0xf60	; 0xf60 <UART_rcvCharacter>
    2b2e:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_clearScreen();
    2b30:	0e 94 32 11 	call	0x2264	; 0x2264 <LCD_clearScreen>



			if(response == 't')
    2b34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b36:	84 37       	cpi	r24, 0x74	; 116
    2b38:	69 f4       	brne	.+26     	; 0x2b54 <changePass+0x88>
			{

				LCD_displayString("Password Saved");
    2b3a:	8d ef       	ldi	r24, 0xFD	; 253
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
				LCD_moveCursor(1,0);
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_moveCursor>
				LCD_displayString("Successfully");
    2b4a:	8c e0       	ldi	r24, 0x0C	; 12
    2b4c:	91 e0       	ldi	r25, 0x01	; 1
    2b4e:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
    2b52:	0f c0       	rjmp	.+30     	; 0x2b72 <changePass+0xa6>
			}
			else if(response == 'f'){
    2b54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b56:	86 36       	cpi	r24, 0x66	; 102
    2b58:	61 f4       	brne	.+24     	; 0x2b72 <changePass+0xa6>

				LCD_displayString("Different");
    2b5a:	89 e1       	ldi	r24, 0x19	; 25
    2b5c:	91 e0       	ldi	r25, 0x01	; 1
    2b5e:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
				LCD_moveCursor(1,0);
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	60 e0       	ldi	r22, 0x00	; 0
    2b66:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_moveCursor>
				LCD_displayString("passwords");
    2b6a:	83 e2       	ldi	r24, 0x23	; 35
    2b6c:	91 e0       	ldi	r25, 0x01	; 1
    2b6e:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	aa ef       	ldi	r26, 0xFA	; 250
    2b78:	b4 e4       	ldi	r27, 0x44	; 68
    2b7a:	8b 87       	std	Y+11, r24	; 0x0b
    2b7c:	9c 87       	std	Y+12, r25	; 0x0c
    2b7e:	ad 87       	std	Y+13, r26	; 0x0d
    2b80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	4a ef       	ldi	r20, 0xFA	; 250
    2b90:	54 e4       	ldi	r21, 0x44	; 68
    2b92:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	8f 83       	std	Y+7, r24	; 0x07
    2b9c:	98 87       	std	Y+8, r25	; 0x08
    2b9e:	a9 87       	std	Y+9, r26	; 0x09
    2ba0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba4:	78 85       	ldd	r23, Y+8	; 0x08
    2ba6:	89 85       	ldd	r24, Y+9	; 0x09
    2ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e8       	ldi	r20, 0x80	; 128
    2bb0:	5f e3       	ldi	r21, 0x3F	; 63
    2bb2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2bb6:	88 23       	and	r24, r24
    2bb8:	2c f4       	brge	.+10     	; 0x2bc4 <changePass+0xf8>
		__ticks = 1;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	9e 83       	std	Y+6, r25	; 0x06
    2bc0:	8d 83       	std	Y+5, r24	; 0x05
    2bc2:	3f c0       	rjmp	.+126    	; 0x2c42 <changePass+0x176>
	else if (__tmp > 65535)
    2bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc6:	78 85       	ldd	r23, Y+8	; 0x08
    2bc8:	89 85       	ldd	r24, Y+9	; 0x09
    2bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	3f ef       	ldi	r19, 0xFF	; 255
    2bd0:	4f e7       	ldi	r20, 0x7F	; 127
    2bd2:	57 e4       	ldi	r21, 0x47	; 71
    2bd4:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2bd8:	18 16       	cp	r1, r24
    2bda:	4c f5       	brge	.+82     	; 0x2c2e <changePass+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bde:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e2       	ldi	r20, 0x20	; 32
    2bea:	51 e4       	ldi	r21, 0x41	; 65
    2bec:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	9e 83       	std	Y+6, r25	; 0x06
    2c02:	8d 83       	std	Y+5, r24	; 0x05
    2c04:	0f c0       	rjmp	.+30     	; 0x2c24 <changePass+0x158>
    2c06:	88 ec       	ldi	r24, 0xC8	; 200
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	9c 83       	std	Y+4, r25	; 0x04
    2c0c:	8b 83       	std	Y+3, r24	; 0x03
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c10:	9c 81       	ldd	r25, Y+4	; 0x04
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <changePass+0x146>
    2c16:	9c 83       	std	Y+4, r25	; 0x04
    2c18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	9e 83       	std	Y+6, r25	; 0x06
    2c22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c24:	8d 81       	ldd	r24, Y+5	; 0x05
    2c26:	9e 81       	ldd	r25, Y+6	; 0x06
    2c28:	00 97       	sbiw	r24, 0x00	; 0
    2c2a:	69 f7       	brne	.-38     	; 0x2c06 <changePass+0x13a>
    2c2c:	14 c0       	rjmp	.+40     	; 0x2c56 <changePass+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c30:	78 85       	ldd	r23, Y+8	; 0x08
    2c32:	89 85       	ldd	r24, Y+9	; 0x09
    2c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c36:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	9e 83       	std	Y+6, r25	; 0x06
    2c40:	8d 83       	std	Y+5, r24	; 0x05
    2c42:	8d 81       	ldd	r24, Y+5	; 0x05
    2c44:	9e 81       	ldd	r25, Y+6	; 0x06
    2c46:	9a 83       	std	Y+2, r25	; 0x02
    2c48:	89 83       	std	Y+1, r24	; 0x01
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	f1 f7       	brne	.-4      	; 0x2c4e <changePass+0x182>
    2c52:	9a 83       	std	Y+2, r25	; 0x02
    2c54:	89 83       	std	Y+1, r24	; 0x01
			}
			_delay_ms(2000);
			LCD_clearScreen();
    2c56:	0e 94 32 11 	call	0x2264	; 0x2264 <LCD_clearScreen>

		}while(response == 'f');
    2c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c5c:	86 36       	cpi	r24, 0x66	; 102
    2c5e:	09 f4       	brne	.+2      	; 0x2c62 <changePass+0x196>
    2c60:	41 cf       	rjmp	.-382    	; 0x2ae4 <changePass+0x18>
}
    2c62:	2f 96       	adiw	r28, 0x0f	; 15
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <checkPass>:

uint8 checkPass(uint8 key){
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	61 97       	sbiw	r28, 0x11	; 17
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	88 8b       	std	Y+16, r24	; 0x10

	uint8 response = 'w';
    2c8a:	87 e7       	ldi	r24, 0x77	; 119
    2c8c:	8f 87       	std	Y+15, r24	; 0x0f

	do{
		UART_sendCharacter(key);
    2c8e:	88 89       	ldd	r24, Y+16	; 0x10
    2c90:	0e 94 63 07 	call	0xec6	; 0xec6 <UART_sendCharacter>
		LCD_displayString("plz enter pass: ");
    2c94:	8e eb       	ldi	r24, 0xBE	; 190
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
		LCD_moveCursor(1,0);
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	60 e0       	ldi	r22, 0x00	; 0
    2ca0:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_moveCursor>
		readAndSendPassword();
    2ca4:	0e 94 8c 14 	call	0x2918	; 0x2918 <readAndSendPassword>
		response = UART_rcvCharacter();
    2ca8:	0e 94 b0 07 	call	0xf60	; 0xf60 <UART_rcvCharacter>
    2cac:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_clearScreen();
    2cae:	0e 94 32 11 	call	0x2264	; 0x2264 <LCD_clearScreen>

		if(response == 'b'){
    2cb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cb4:	82 36       	cpi	r24, 0x62	; 98
    2cb6:	09 f0       	breq	.+2      	; 0x2cba <checkPass+0x46>
    2cb8:	95 c0       	rjmp	.+298    	; 0x2de4 <checkPass+0x170>
			LCD_displayString("ERROR");
    2cba:	8d e2       	ldi	r24, 0x2D	; 45
    2cbc:	91 e0       	ldi	r25, 0x01	; 1
    2cbe:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
			seconds = 60;/* wait here for 60 seconds */
    2cc2:	8c e3       	ldi	r24, 0x3C	; 60
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	90 93 56 01 	sts	0x0156, r25
    2cca:	80 93 55 01 	sts	0x0155, r24
    2cce:	82 c0       	rjmp	.+260    	; 0x2dd4 <checkPass+0x160>
			while(seconds > 0){
				LCD_clearScreen();
    2cd0:	0e 94 32 11 	call	0x2264	; 0x2264 <LCD_clearScreen>
				LCD_displayString("ERROR");
    2cd4:	8d e2       	ldi	r24, 0x2D	; 45
    2cd6:	91 e0       	ldi	r25, 0x01	; 1
    2cd8:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_displayString>
				LCD_moveCursor(1,0);
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_moveCursor>
				LCD_integerToString(seconds);
    2ce4:	80 91 55 01 	lds	r24, 0x0155
    2ce8:	90 91 56 01 	lds	r25, 0x0156
    2cec:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_integerToString>
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	aa e7       	ldi	r26, 0x7A	; 122
    2cf6:	b3 e4       	ldi	r27, 0x43	; 67
    2cf8:	8b 87       	std	Y+11, r24	; 0x0b
    2cfa:	9c 87       	std	Y+12, r25	; 0x0c
    2cfc:	ad 87       	std	Y+13, r26	; 0x0d
    2cfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	4a ef       	ldi	r20, 0xFA	; 250
    2d0e:	54 e4       	ldi	r21, 0x44	; 68
    2d10:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	8f 83       	std	Y+7, r24	; 0x07
    2d1a:	98 87       	std	Y+8, r25	; 0x08
    2d1c:	a9 87       	std	Y+9, r26	; 0x09
    2d1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d20:	6f 81       	ldd	r22, Y+7	; 0x07
    2d22:	78 85       	ldd	r23, Y+8	; 0x08
    2d24:	89 85       	ldd	r24, Y+9	; 0x09
    2d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	40 e8       	ldi	r20, 0x80	; 128
    2d2e:	5f e3       	ldi	r21, 0x3F	; 63
    2d30:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2d34:	88 23       	and	r24, r24
    2d36:	2c f4       	brge	.+10     	; 0x2d42 <checkPass+0xce>
		__ticks = 1;
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	9e 83       	std	Y+6, r25	; 0x06
    2d3e:	8d 83       	std	Y+5, r24	; 0x05
    2d40:	3f c0       	rjmp	.+126    	; 0x2dc0 <checkPass+0x14c>
	else if (__tmp > 65535)
    2d42:	6f 81       	ldd	r22, Y+7	; 0x07
    2d44:	78 85       	ldd	r23, Y+8	; 0x08
    2d46:	89 85       	ldd	r24, Y+9	; 0x09
    2d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	3f ef       	ldi	r19, 0xFF	; 255
    2d4e:	4f e7       	ldi	r20, 0x7F	; 127
    2d50:	57 e4       	ldi	r21, 0x47	; 71
    2d52:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2d56:	18 16       	cp	r1, r24
    2d58:	4c f5       	brge	.+82     	; 0x2dac <checkPass+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	40 e2       	ldi	r20, 0x20	; 32
    2d68:	51 e4       	ldi	r21, 0x41	; 65
    2d6a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	bc 01       	movw	r22, r24
    2d74:	cd 01       	movw	r24, r26
    2d76:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	9e 83       	std	Y+6, r25	; 0x06
    2d80:	8d 83       	std	Y+5, r24	; 0x05
    2d82:	0f c0       	rjmp	.+30     	; 0x2da2 <checkPass+0x12e>
    2d84:	88 ec       	ldi	r24, 0xC8	; 200
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	9c 83       	std	Y+4, r25	; 0x04
    2d8a:	8b 83       	std	Y+3, r24	; 0x03
    2d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <checkPass+0x11c>
    2d94:	9c 83       	std	Y+4, r25	; 0x04
    2d96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d98:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	9e 83       	std	Y+6, r25	; 0x06
    2da0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da2:	8d 81       	ldd	r24, Y+5	; 0x05
    2da4:	9e 81       	ldd	r25, Y+6	; 0x06
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	69 f7       	brne	.-38     	; 0x2d84 <checkPass+0x110>
    2daa:	14 c0       	rjmp	.+40     	; 0x2dd4 <checkPass+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dac:	6f 81       	ldd	r22, Y+7	; 0x07
    2dae:	78 85       	ldd	r23, Y+8	; 0x08
    2db0:	89 85       	ldd	r24, Y+9	; 0x09
    2db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	9e 83       	std	Y+6, r25	; 0x06
    2dbe:	8d 83       	std	Y+5, r24	; 0x05
    2dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc4:	9a 83       	std	Y+2, r25	; 0x02
    2dc6:	89 83       	std	Y+1, r24	; 0x01
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	9a 81       	ldd	r25, Y+2	; 0x02
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <checkPass+0x158>
    2dd0:	9a 83       	std	Y+2, r25	; 0x02
    2dd2:	89 83       	std	Y+1, r24	; 0x01
		LCD_clearScreen();

		if(response == 'b'){
			LCD_displayString("ERROR");
			seconds = 60;/* wait here for 60 seconds */
			while(seconds > 0){
    2dd4:	80 91 55 01 	lds	r24, 0x0155
    2dd8:	90 91 56 01 	lds	r25, 0x0156
    2ddc:	00 97       	sbiw	r24, 0x00	; 0
    2dde:	09 f0       	breq	.+2      	; 0x2de2 <checkPass+0x16e>
    2de0:	77 cf       	rjmp	.-274    	; 0x2cd0 <checkPass+0x5c>
    2de2:	0a c0       	rjmp	.+20     	; 0x2df8 <checkPass+0x184>
				_delay_ms(250);

			}
			break;
		}
		else if(response == 't'){
    2de4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de6:	84 37       	cpi	r24, 0x74	; 116
    2de8:	19 f4       	brne	.+6      	; 0x2df0 <checkPass+0x17c>
			return 1;
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	89 8b       	std	Y+17, r24	; 0x11
    2dee:	05 c0       	rjmp	.+10     	; 0x2dfa <checkPass+0x186>
		}
	}while(response == 'f');
    2df0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2df2:	86 36       	cpi	r24, 0x66	; 102
    2df4:	09 f4       	brne	.+2      	; 0x2df8 <checkPass+0x184>
    2df6:	4b cf       	rjmp	.-362    	; 0x2c8e <checkPass+0x1a>

	return 0;
    2df8:	19 8a       	std	Y+17, r1	; 0x11
    2dfa:	89 89       	ldd	r24, Y+17	; 0x11
}
    2dfc:	61 96       	adiw	r28, 0x11	; 17
    2dfe:	0f b6       	in	r0, 0x3f	; 63
    2e00:	f8 94       	cli
    2e02:	de bf       	out	0x3e, r29	; 62
    2e04:	0f be       	out	0x3f, r0	; 63
    2e06:	cd bf       	out	0x3d, r28	; 61
    2e08:	cf 91       	pop	r28
    2e0a:	df 91       	pop	r29
    2e0c:	08 95       	ret

00002e0e <__udivmodsi4>:
    2e0e:	a1 e2       	ldi	r26, 0x21	; 33
    2e10:	1a 2e       	mov	r1, r26
    2e12:	aa 1b       	sub	r26, r26
    2e14:	bb 1b       	sub	r27, r27
    2e16:	fd 01       	movw	r30, r26
    2e18:	0d c0       	rjmp	.+26     	; 0x2e34 <__udivmodsi4_ep>

00002e1a <__udivmodsi4_loop>:
    2e1a:	aa 1f       	adc	r26, r26
    2e1c:	bb 1f       	adc	r27, r27
    2e1e:	ee 1f       	adc	r30, r30
    2e20:	ff 1f       	adc	r31, r31
    2e22:	a2 17       	cp	r26, r18
    2e24:	b3 07       	cpc	r27, r19
    2e26:	e4 07       	cpc	r30, r20
    2e28:	f5 07       	cpc	r31, r21
    2e2a:	20 f0       	brcs	.+8      	; 0x2e34 <__udivmodsi4_ep>
    2e2c:	a2 1b       	sub	r26, r18
    2e2e:	b3 0b       	sbc	r27, r19
    2e30:	e4 0b       	sbc	r30, r20
    2e32:	f5 0b       	sbc	r31, r21

00002e34 <__udivmodsi4_ep>:
    2e34:	66 1f       	adc	r22, r22
    2e36:	77 1f       	adc	r23, r23
    2e38:	88 1f       	adc	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	1a 94       	dec	r1
    2e3e:	69 f7       	brne	.-38     	; 0x2e1a <__udivmodsi4_loop>
    2e40:	60 95       	com	r22
    2e42:	70 95       	com	r23
    2e44:	80 95       	com	r24
    2e46:	90 95       	com	r25
    2e48:	9b 01       	movw	r18, r22
    2e4a:	ac 01       	movw	r20, r24
    2e4c:	bd 01       	movw	r22, r26
    2e4e:	cf 01       	movw	r24, r30
    2e50:	08 95       	ret

00002e52 <__prologue_saves__>:
    2e52:	2f 92       	push	r2
    2e54:	3f 92       	push	r3
    2e56:	4f 92       	push	r4
    2e58:	5f 92       	push	r5
    2e5a:	6f 92       	push	r6
    2e5c:	7f 92       	push	r7
    2e5e:	8f 92       	push	r8
    2e60:	9f 92       	push	r9
    2e62:	af 92       	push	r10
    2e64:	bf 92       	push	r11
    2e66:	cf 92       	push	r12
    2e68:	df 92       	push	r13
    2e6a:	ef 92       	push	r14
    2e6c:	ff 92       	push	r15
    2e6e:	0f 93       	push	r16
    2e70:	1f 93       	push	r17
    2e72:	cf 93       	push	r28
    2e74:	df 93       	push	r29
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
    2e7a:	ca 1b       	sub	r28, r26
    2e7c:	db 0b       	sbc	r29, r27
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	09 94       	ijmp

00002e8a <__epilogue_restores__>:
    2e8a:	2a 88       	ldd	r2, Y+18	; 0x12
    2e8c:	39 88       	ldd	r3, Y+17	; 0x11
    2e8e:	48 88       	ldd	r4, Y+16	; 0x10
    2e90:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e92:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e94:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e96:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e98:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e9c:	b9 84       	ldd	r11, Y+9	; 0x09
    2e9e:	c8 84       	ldd	r12, Y+8	; 0x08
    2ea0:	df 80       	ldd	r13, Y+7	; 0x07
    2ea2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ea4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ea6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ea8:	1b 81       	ldd	r17, Y+3	; 0x03
    2eaa:	aa 81       	ldd	r26, Y+2	; 0x02
    2eac:	b9 81       	ldd	r27, Y+1	; 0x01
    2eae:	ce 0f       	add	r28, r30
    2eb0:	d1 1d       	adc	r29, r1
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	de bf       	out	0x3e, r29	; 62
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	ed 01       	movw	r28, r26
    2ebe:	08 95       	ret

00002ec0 <dtostrf>:
    2ec0:	ef 92       	push	r14
    2ec2:	ff 92       	push	r15
    2ec4:	0f 93       	push	r16
    2ec6:	1f 93       	push	r17
    2ec8:	f2 2f       	mov	r31, r18
    2eca:	f0 2e       	mov	r15, r16
    2ecc:	47 fd       	sbrc	r20, 7
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <dtostrf+0x14>
    2ed0:	e4 e0       	ldi	r30, 0x04	; 4
    2ed2:	01 c0       	rjmp	.+2      	; 0x2ed6 <dtostrf+0x16>
    2ed4:	e4 e1       	ldi	r30, 0x14	; 20
    2ed6:	24 2f       	mov	r18, r20
    2ed8:	33 27       	eor	r19, r19
    2eda:	27 fd       	sbrc	r18, 7
    2edc:	30 95       	com	r19
    2ede:	37 ff       	sbrs	r19, 7
    2ee0:	03 c0       	rjmp	.+6      	; 0x2ee8 <dtostrf+0x28>
    2ee2:	30 95       	com	r19
    2ee4:	21 95       	neg	r18
    2ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee8:	4f 2d       	mov	r20, r15
    2eea:	51 2f       	mov	r21, r17
    2eec:	0f 2f       	mov	r16, r31
    2eee:	ee 2e       	mov	r14, r30
    2ef0:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <dtoa_prf>
    2ef4:	8f 2d       	mov	r24, r15
    2ef6:	91 2f       	mov	r25, r17
    2ef8:	1f 91       	pop	r17
    2efa:	0f 91       	pop	r16
    2efc:	ff 90       	pop	r15
    2efe:	ef 90       	pop	r14
    2f00:	08 95       	ret

00002f02 <itoa>:
    2f02:	fb 01       	movw	r30, r22
    2f04:	9f 01       	movw	r18, r30
    2f06:	e8 94       	clt
    2f08:	42 30       	cpi	r20, 0x02	; 2
    2f0a:	c4 f0       	brlt	.+48     	; 0x2f3c <itoa+0x3a>
    2f0c:	45 32       	cpi	r20, 0x25	; 37
    2f0e:	b4 f4       	brge	.+44     	; 0x2f3c <itoa+0x3a>
    2f10:	4a 30       	cpi	r20, 0x0A	; 10
    2f12:	29 f4       	brne	.+10     	; 0x2f1e <itoa+0x1c>
    2f14:	97 fb       	bst	r25, 7
    2f16:	1e f4       	brtc	.+6      	; 0x2f1e <itoa+0x1c>
    2f18:	90 95       	com	r25
    2f1a:	81 95       	neg	r24
    2f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1e:	64 2f       	mov	r22, r20
    2f20:	77 27       	eor	r23, r23
    2f22:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__udivmodhi4>
    2f26:	80 5d       	subi	r24, 0xD0	; 208
    2f28:	8a 33       	cpi	r24, 0x3A	; 58
    2f2a:	0c f0       	brlt	.+2      	; 0x2f2e <itoa+0x2c>
    2f2c:	89 5d       	subi	r24, 0xD9	; 217
    2f2e:	81 93       	st	Z+, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	a1 f7       	brne	.-24     	; 0x2f1e <itoa+0x1c>
    2f36:	16 f4       	brtc	.+4      	; 0x2f3c <itoa+0x3a>
    2f38:	5d e2       	ldi	r21, 0x2D	; 45
    2f3a:	51 93       	st	Z+, r21
    2f3c:	10 82       	st	Z, r1
    2f3e:	c9 01       	movw	r24, r18
    2f40:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <strrev>

00002f44 <dtoa_prf>:
    2f44:	a9 e0       	ldi	r26, 0x09	; 9
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e8 ea       	ldi	r30, 0xA8	; 168
    2f4a:	f7 e1       	ldi	r31, 0x17	; 23
    2f4c:	0c 94 2d 17 	jmp	0x2e5a	; 0x2e5a <__prologue_saves__+0x8>
    2f50:	6a 01       	movw	r12, r20
    2f52:	12 2f       	mov	r17, r18
    2f54:	a0 2e       	mov	r10, r16
    2f56:	be 2c       	mov	r11, r14
    2f58:	2b e3       	ldi	r18, 0x3B	; 59
    2f5a:	20 17       	cp	r18, r16
    2f5c:	18 f4       	brcc	.+6      	; 0x2f64 <dtoa_prf+0x20>
    2f5e:	2c e3       	ldi	r18, 0x3C	; 60
    2f60:	92 2e       	mov	r9, r18
    2f62:	02 c0       	rjmp	.+4      	; 0x2f68 <dtoa_prf+0x24>
    2f64:	90 2e       	mov	r9, r16
    2f66:	93 94       	inc	r9
    2f68:	ae 01       	movw	r20, r28
    2f6a:	4f 5f       	subi	r20, 0xFF	; 255
    2f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f6e:	27 e0       	ldi	r18, 0x07	; 7
    2f70:	09 2d       	mov	r16, r9
    2f72:	0e 94 04 19 	call	0x3208	; 0x3208 <__ftoa_engine>
    2f76:	bc 01       	movw	r22, r24
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	e8 2e       	mov	r14, r24
    2f7c:	ff 24       	eor	r15, r15
    2f7e:	c7 01       	movw	r24, r14
    2f80:	89 70       	andi	r24, 0x09	; 9
    2f82:	90 70       	andi	r25, 0x00	; 0
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	11 f4       	brne	.+4      	; 0x2f8c <dtoa_prf+0x48>
    2f88:	ad e2       	ldi	r26, 0x2D	; 45
    2f8a:	09 c0       	rjmp	.+18     	; 0x2f9e <dtoa_prf+0x5a>
    2f8c:	b1 fe       	sbrs	r11, 1
    2f8e:	02 c0       	rjmp	.+4      	; 0x2f94 <dtoa_prf+0x50>
    2f90:	ab e2       	ldi	r26, 0x2B	; 43
    2f92:	05 c0       	rjmp	.+10     	; 0x2f9e <dtoa_prf+0x5a>
    2f94:	b0 fc       	sbrc	r11, 0
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <dtoa_prf+0x58>
    2f98:	a0 e0       	ldi	r26, 0x00	; 0
    2f9a:	01 c0       	rjmp	.+2      	; 0x2f9e <dtoa_prf+0x5a>
    2f9c:	a0 e2       	ldi	r26, 0x20	; 32
    2f9e:	e3 fe       	sbrs	r14, 3
    2fa0:	3b c0       	rjmp	.+118    	; 0x3018 <dtoa_prf+0xd4>
    2fa2:	aa 23       	and	r26, r26
    2fa4:	11 f4       	brne	.+4      	; 0x2faa <dtoa_prf+0x66>
    2fa6:	23 e0       	ldi	r18, 0x03	; 3
    2fa8:	01 c0       	rjmp	.+2      	; 0x2fac <dtoa_prf+0x68>
    2faa:	24 e0       	ldi	r18, 0x04	; 4
    2fac:	21 17       	cp	r18, r17
    2fae:	10 f0       	brcs	.+4      	; 0x2fb4 <dtoa_prf+0x70>
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	02 c0       	rjmp	.+4      	; 0x2fb8 <dtoa_prf+0x74>
    2fb4:	12 1b       	sub	r17, r18
    2fb6:	21 2f       	mov	r18, r17
    2fb8:	eb 2c       	mov	r14, r11
    2fba:	b4 fe       	sbrs	r11, 4
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <dtoa_prf+0x7e>
    2fbe:	32 2f       	mov	r19, r18
    2fc0:	0a c0       	rjmp	.+20     	; 0x2fd6 <dtoa_prf+0x92>
    2fc2:	f6 01       	movw	r30, r12
    2fc4:	32 2f       	mov	r19, r18
    2fc6:	80 e2       	ldi	r24, 0x20	; 32
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <dtoa_prf+0x8a>
    2fca:	81 93       	st	Z+, r24
    2fcc:	31 50       	subi	r19, 0x01	; 1
    2fce:	33 23       	and	r19, r19
    2fd0:	e1 f7       	brne	.-8      	; 0x2fca <dtoa_prf+0x86>
    2fd2:	c2 0e       	add	r12, r18
    2fd4:	d1 1c       	adc	r13, r1
    2fd6:	aa 23       	and	r26, r26
    2fd8:	19 f0       	breq	.+6      	; 0x2fe0 <dtoa_prf+0x9c>
    2fda:	f6 01       	movw	r30, r12
    2fdc:	a1 93       	st	Z+, r26
    2fde:	6f 01       	movw	r12, r30
    2fe0:	f6 01       	movw	r30, r12
    2fe2:	31 96       	adiw	r30, 0x01	; 1
    2fe4:	e2 fe       	sbrs	r14, 2
    2fe6:	05 c0       	rjmp	.+10     	; 0x2ff2 <dtoa_prf+0xae>
    2fe8:	9e e4       	ldi	r25, 0x4E	; 78
    2fea:	d6 01       	movw	r26, r12
    2fec:	9c 93       	st	X, r25
    2fee:	81 e4       	ldi	r24, 0x41	; 65
    2ff0:	04 c0       	rjmp	.+8      	; 0x2ffa <dtoa_prf+0xb6>
    2ff2:	9e e6       	ldi	r25, 0x6E	; 110
    2ff4:	d6 01       	movw	r26, r12
    2ff6:	9c 93       	st	X, r25
    2ff8:	81 e6       	ldi	r24, 0x61	; 97
    2ffa:	11 96       	adiw	r26, 0x01	; 1
    2ffc:	8c 93       	st	X, r24
    2ffe:	91 83       	std	Z+1, r25	; 0x01
    3000:	32 96       	adiw	r30, 0x02	; 2
    3002:	df 01       	movw	r26, r30
    3004:	83 2f       	mov	r24, r19
    3006:	90 e2       	ldi	r25, 0x20	; 32
    3008:	02 c0       	rjmp	.+4      	; 0x300e <dtoa_prf+0xca>
    300a:	9d 93       	st	X+, r25
    300c:	81 50       	subi	r24, 0x01	; 1
    300e:	88 23       	and	r24, r24
    3010:	e1 f7       	brne	.-8      	; 0x300a <dtoa_prf+0xc6>
    3012:	e3 0f       	add	r30, r19
    3014:	f1 1d       	adc	r31, r1
    3016:	40 c0       	rjmp	.+128    	; 0x3098 <dtoa_prf+0x154>
    3018:	e2 fe       	sbrs	r14, 2
    301a:	42 c0       	rjmp	.+132    	; 0x30a0 <dtoa_prf+0x15c>
    301c:	aa 23       	and	r26, r26
    301e:	11 f4       	brne	.+4      	; 0x3024 <dtoa_prf+0xe0>
    3020:	23 e0       	ldi	r18, 0x03	; 3
    3022:	01 c0       	rjmp	.+2      	; 0x3026 <dtoa_prf+0xe2>
    3024:	24 e0       	ldi	r18, 0x04	; 4
    3026:	21 17       	cp	r18, r17
    3028:	10 f0       	brcs	.+4      	; 0x302e <dtoa_prf+0xea>
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	02 c0       	rjmp	.+4      	; 0x3032 <dtoa_prf+0xee>
    302e:	12 1b       	sub	r17, r18
    3030:	21 2f       	mov	r18, r17
    3032:	eb 2c       	mov	r14, r11
    3034:	b4 fe       	sbrs	r11, 4
    3036:	02 c0       	rjmp	.+4      	; 0x303c <dtoa_prf+0xf8>
    3038:	92 2f       	mov	r25, r18
    303a:	0a c0       	rjmp	.+20     	; 0x3050 <dtoa_prf+0x10c>
    303c:	f6 01       	movw	r30, r12
    303e:	92 2f       	mov	r25, r18
    3040:	80 e2       	ldi	r24, 0x20	; 32
    3042:	02 c0       	rjmp	.+4      	; 0x3048 <dtoa_prf+0x104>
    3044:	81 93       	st	Z+, r24
    3046:	91 50       	subi	r25, 0x01	; 1
    3048:	99 23       	and	r25, r25
    304a:	e1 f7       	brne	.-8      	; 0x3044 <dtoa_prf+0x100>
    304c:	c2 0e       	add	r12, r18
    304e:	d1 1c       	adc	r13, r1
    3050:	aa 23       	and	r26, r26
    3052:	19 f0       	breq	.+6      	; 0x305a <dtoa_prf+0x116>
    3054:	f6 01       	movw	r30, r12
    3056:	a1 93       	st	Z+, r26
    3058:	6f 01       	movw	r12, r30
    305a:	f6 01       	movw	r30, r12
    305c:	31 96       	adiw	r30, 0x01	; 1
    305e:	e2 fe       	sbrs	r14, 2
    3060:	08 c0       	rjmp	.+16     	; 0x3072 <dtoa_prf+0x12e>
    3062:	89 e4       	ldi	r24, 0x49	; 73
    3064:	d6 01       	movw	r26, r12
    3066:	8c 93       	st	X, r24
    3068:	8e e4       	ldi	r24, 0x4E	; 78
    306a:	11 96       	adiw	r26, 0x01	; 1
    306c:	8c 93       	st	X, r24
    306e:	86 e4       	ldi	r24, 0x46	; 70
    3070:	07 c0       	rjmp	.+14     	; 0x3080 <dtoa_prf+0x13c>
    3072:	89 e6       	ldi	r24, 0x69	; 105
    3074:	d6 01       	movw	r26, r12
    3076:	8c 93       	st	X, r24
    3078:	8e e6       	ldi	r24, 0x6E	; 110
    307a:	11 96       	adiw	r26, 0x01	; 1
    307c:	8c 93       	st	X, r24
    307e:	86 e6       	ldi	r24, 0x66	; 102
    3080:	81 83       	std	Z+1, r24	; 0x01
    3082:	32 96       	adiw	r30, 0x02	; 2
    3084:	df 01       	movw	r26, r30
    3086:	89 2f       	mov	r24, r25
    3088:	20 e2       	ldi	r18, 0x20	; 32
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <dtoa_prf+0x14c>
    308c:	2d 93       	st	X+, r18
    308e:	81 50       	subi	r24, 0x01	; 1
    3090:	88 23       	and	r24, r24
    3092:	e1 f7       	brne	.-8      	; 0x308c <dtoa_prf+0x148>
    3094:	e9 0f       	add	r30, r25
    3096:	f1 1d       	adc	r31, r1
    3098:	10 82       	st	Z, r1
    309a:	2e ef       	ldi	r18, 0xFE	; 254
    309c:	3f ef       	ldi	r19, 0xFF	; 255
    309e:	af c0       	rjmp	.+350    	; 0x31fe <dtoa_prf+0x2ba>
    30a0:	16 16       	cp	r1, r22
    30a2:	17 06       	cpc	r1, r23
    30a4:	1c f0       	brlt	.+6      	; 0x30ac <dtoa_prf+0x168>
    30a6:	41 e0       	ldi	r20, 0x01	; 1
    30a8:	50 e0       	ldi	r21, 0x00	; 0
    30aa:	03 c0       	rjmp	.+6      	; 0x30b2 <dtoa_prf+0x16e>
    30ac:	ab 01       	movw	r20, r22
    30ae:	4f 5f       	subi	r20, 0xFF	; 255
    30b0:	5f 4f       	sbci	r21, 0xFF	; 255
    30b2:	aa 20       	and	r10, r10
    30b4:	19 f4       	brne	.+6      	; 0x30bc <dtoa_prf+0x178>
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	03 c0       	rjmp	.+6      	; 0x30c2 <dtoa_prf+0x17e>
    30bc:	8a 2d       	mov	r24, r10
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	01 96       	adiw	r24, 0x01	; 1
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	aa 23       	and	r26, r26
    30c8:	11 f0       	breq	.+4      	; 0x30ce <dtoa_prf+0x18a>
    30ca:	21 e0       	ldi	r18, 0x01	; 1
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	24 0f       	add	r18, r20
    30d0:	35 1f       	adc	r19, r21
    30d2:	28 0f       	add	r18, r24
    30d4:	39 1f       	adc	r19, r25
    30d6:	81 2f       	mov	r24, r17
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	28 17       	cp	r18, r24
    30dc:	39 07       	cpc	r19, r25
    30de:	14 f0       	brlt	.+4      	; 0x30e4 <dtoa_prf+0x1a0>
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	02 c0       	rjmp	.+4      	; 0x30e8 <dtoa_prf+0x1a4>
    30e4:	12 1b       	sub	r17, r18
    30e6:	21 2f       	mov	r18, r17
    30e8:	4b 2d       	mov	r20, r11
    30ea:	50 e0       	ldi	r21, 0x00	; 0
    30ec:	ca 01       	movw	r24, r20
    30ee:	80 71       	andi	r24, 0x10	; 16
    30f0:	90 70       	andi	r25, 0x00	; 0
    30f2:	b4 fc       	sbrc	r11, 4
    30f4:	0d c0       	rjmp	.+26     	; 0x3110 <dtoa_prf+0x1cc>
    30f6:	b3 fc       	sbrc	r11, 3
    30f8:	0b c0       	rjmp	.+22     	; 0x3110 <dtoa_prf+0x1cc>
    30fa:	f6 01       	movw	r30, r12
    30fc:	32 2f       	mov	r19, r18
    30fe:	40 e2       	ldi	r20, 0x20	; 32
    3100:	02 c0       	rjmp	.+4      	; 0x3106 <dtoa_prf+0x1c2>
    3102:	41 93       	st	Z+, r20
    3104:	31 50       	subi	r19, 0x01	; 1
    3106:	33 23       	and	r19, r19
    3108:	e1 f7       	brne	.-8      	; 0x3102 <dtoa_prf+0x1be>
    310a:	c2 0e       	add	r12, r18
    310c:	d1 1c       	adc	r13, r1
    310e:	01 c0       	rjmp	.+2      	; 0x3112 <dtoa_prf+0x1ce>
    3110:	32 2f       	mov	r19, r18
    3112:	aa 23       	and	r26, r26
    3114:	19 f0       	breq	.+6      	; 0x311c <dtoa_prf+0x1d8>
    3116:	f6 01       	movw	r30, r12
    3118:	a1 93       	st	Z+, r26
    311a:	6f 01       	movw	r12, r30
    311c:	89 2b       	or	r24, r25
    311e:	11 f0       	breq	.+4      	; 0x3124 <dtoa_prf+0x1e0>
    3120:	13 2f       	mov	r17, r19
    3122:	0a c0       	rjmp	.+20     	; 0x3138 <dtoa_prf+0x1f4>
    3124:	f6 01       	movw	r30, r12
    3126:	13 2f       	mov	r17, r19
    3128:	80 e3       	ldi	r24, 0x30	; 48
    312a:	02 c0       	rjmp	.+4      	; 0x3130 <dtoa_prf+0x1ec>
    312c:	81 93       	st	Z+, r24
    312e:	11 50       	subi	r17, 0x01	; 1
    3130:	11 23       	and	r17, r17
    3132:	e1 f7       	brne	.-8      	; 0x312c <dtoa_prf+0x1e8>
    3134:	c3 0e       	add	r12, r19
    3136:	d1 1c       	adc	r13, r1
    3138:	09 2d       	mov	r16, r9
    313a:	06 0f       	add	r16, r22
    313c:	ba 80       	ldd	r11, Y+2	; 0x02
    313e:	90 e1       	ldi	r25, 0x10	; 16
    3140:	89 2e       	mov	r8, r25
    3142:	91 2c       	mov	r9, r1
    3144:	8e 20       	and	r8, r14
    3146:	9f 20       	and	r9, r15
    3148:	e4 fe       	sbrs	r14, 4
    314a:	04 c0       	rjmp	.+8      	; 0x3154 <dtoa_prf+0x210>
    314c:	f1 e3       	ldi	r31, 0x31	; 49
    314e:	bf 16       	cp	r11, r31
    3150:	09 f4       	brne	.+2      	; 0x3154 <dtoa_prf+0x210>
    3152:	01 50       	subi	r16, 0x01	; 1
    3154:	10 16       	cp	r1, r16
    3156:	14 f0       	brlt	.+4      	; 0x315c <dtoa_prf+0x218>
    3158:	01 e0       	ldi	r16, 0x01	; 1
    315a:	03 c0       	rjmp	.+6      	; 0x3162 <dtoa_prf+0x21e>
    315c:	09 30       	cpi	r16, 0x09	; 9
    315e:	08 f0       	brcs	.+2      	; 0x3162 <dtoa_prf+0x21e>
    3160:	08 e0       	ldi	r16, 0x08	; 8
    3162:	9b 01       	movw	r18, r22
    3164:	77 ff       	sbrs	r23, 7
    3166:	02 c0       	rjmp	.+4      	; 0x316c <dtoa_prf+0x228>
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	cb 01       	movw	r24, r22
    316e:	01 96       	adiw	r24, 0x01	; 1
    3170:	82 1b       	sub	r24, r18
    3172:	93 0b       	sbc	r25, r19
    3174:	fe 01       	movw	r30, r28
    3176:	31 96       	adiw	r30, 0x01	; 1
    3178:	e8 0f       	add	r30, r24
    317a:	f9 1f       	adc	r31, r25
    317c:	8e e2       	ldi	r24, 0x2E	; 46
    317e:	f8 2e       	mov	r15, r24
    3180:	3b 01       	movw	r6, r22
    3182:	60 1a       	sub	r6, r16
    3184:	71 08       	sbc	r7, r1
    3186:	8a 2d       	mov	r24, r10
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	44 27       	eor	r20, r20
    318c:	55 27       	eor	r21, r21
    318e:	48 1b       	sub	r20, r24
    3190:	59 0b       	sbc	r21, r25
    3192:	8f ef       	ldi	r24, 0xFF	; 255
    3194:	2f 3f       	cpi	r18, 0xFF	; 255
    3196:	38 07       	cpc	r19, r24
    3198:	19 f4       	brne	.+6      	; 0x31a0 <dtoa_prf+0x25c>
    319a:	d6 01       	movw	r26, r12
    319c:	fd 92       	st	X+, r15
    319e:	6d 01       	movw	r12, r26
    31a0:	62 17       	cp	r22, r18
    31a2:	73 07       	cpc	r23, r19
    31a4:	2c f0       	brlt	.+10     	; 0x31b0 <dtoa_prf+0x26c>
    31a6:	62 16       	cp	r6, r18
    31a8:	73 06       	cpc	r7, r19
    31aa:	14 f4       	brge	.+4      	; 0x31b0 <dtoa_prf+0x26c>
    31ac:	80 81       	ld	r24, Z
    31ae:	01 c0       	rjmp	.+2      	; 0x31b2 <dtoa_prf+0x26e>
    31b0:	80 e3       	ldi	r24, 0x30	; 48
    31b2:	21 50       	subi	r18, 0x01	; 1
    31b4:	30 40       	sbci	r19, 0x00	; 0
    31b6:	31 96       	adiw	r30, 0x01	; 1
    31b8:	24 17       	cp	r18, r20
    31ba:	35 07       	cpc	r19, r21
    31bc:	24 f0       	brlt	.+8      	; 0x31c6 <dtoa_prf+0x282>
    31be:	d6 01       	movw	r26, r12
    31c0:	8d 93       	st	X+, r24
    31c2:	6d 01       	movw	r12, r26
    31c4:	e6 cf       	rjmp	.-52     	; 0x3192 <dtoa_prf+0x24e>
    31c6:	26 17       	cp	r18, r22
    31c8:	37 07       	cpc	r19, r23
    31ca:	49 f4       	brne	.+18     	; 0x31de <dtoa_prf+0x29a>
    31cc:	b5 e3       	ldi	r27, 0x35	; 53
    31ce:	bb 15       	cp	r27, r11
    31d0:	28 f0       	brcs	.+10     	; 0x31dc <dtoa_prf+0x298>
    31d2:	bb 16       	cp	r11, r27
    31d4:	21 f4       	brne	.+8      	; 0x31de <dtoa_prf+0x29a>
    31d6:	81 14       	cp	r8, r1
    31d8:	91 04       	cpc	r9, r1
    31da:	09 f4       	brne	.+2      	; 0x31de <dtoa_prf+0x29a>
    31dc:	81 e3       	ldi	r24, 0x31	; 49
    31de:	f6 01       	movw	r30, r12
    31e0:	81 93       	st	Z+, r24
    31e2:	d6 01       	movw	r26, r12
    31e4:	81 2f       	mov	r24, r17
    31e6:	90 e2       	ldi	r25, 0x20	; 32
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <dtoa_prf+0x2aa>
    31ea:	9c 93       	st	X, r25
    31ec:	81 50       	subi	r24, 0x01	; 1
    31ee:	11 96       	adiw	r26, 0x01	; 1
    31f0:	88 23       	and	r24, r24
    31f2:	d9 f7       	brne	.-10     	; 0x31ea <dtoa_prf+0x2a6>
    31f4:	e1 0f       	add	r30, r17
    31f6:	f1 1d       	adc	r31, r1
    31f8:	10 82       	st	Z, r1
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	c9 01       	movw	r24, r18
    3200:	29 96       	adiw	r28, 0x09	; 9
    3202:	ee e0       	ldi	r30, 0x0E	; 14
    3204:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__epilogue_restores__+0x8>

00003208 <__ftoa_engine>:
    3208:	28 30       	cpi	r18, 0x08	; 8
    320a:	08 f0       	brcs	.+2      	; 0x320e <__ftoa_engine+0x6>
    320c:	27 e0       	ldi	r18, 0x07	; 7
    320e:	33 27       	eor	r19, r19
    3210:	da 01       	movw	r26, r20
    3212:	99 0f       	add	r25, r25
    3214:	31 1d       	adc	r19, r1
    3216:	87 fd       	sbrc	r24, 7
    3218:	91 60       	ori	r25, 0x01	; 1
    321a:	00 96       	adiw	r24, 0x00	; 0
    321c:	61 05       	cpc	r22, r1
    321e:	71 05       	cpc	r23, r1
    3220:	39 f4       	brne	.+14     	; 0x3230 <__ftoa_engine+0x28>
    3222:	32 60       	ori	r19, 0x02	; 2
    3224:	2e 5f       	subi	r18, 0xFE	; 254
    3226:	3d 93       	st	X+, r19
    3228:	30 e3       	ldi	r19, 0x30	; 48
    322a:	2a 95       	dec	r18
    322c:	e1 f7       	brne	.-8      	; 0x3226 <__ftoa_engine+0x1e>
    322e:	08 95       	ret
    3230:	9f 3f       	cpi	r25, 0xFF	; 255
    3232:	30 f0       	brcs	.+12     	; 0x3240 <__ftoa_engine+0x38>
    3234:	80 38       	cpi	r24, 0x80	; 128
    3236:	71 05       	cpc	r23, r1
    3238:	61 05       	cpc	r22, r1
    323a:	09 f0       	breq	.+2      	; 0x323e <__ftoa_engine+0x36>
    323c:	3c 5f       	subi	r19, 0xFC	; 252
    323e:	3c 5f       	subi	r19, 0xFC	; 252
    3240:	3d 93       	st	X+, r19
    3242:	91 30       	cpi	r25, 0x01	; 1
    3244:	08 f0       	brcs	.+2      	; 0x3248 <__ftoa_engine+0x40>
    3246:	80 68       	ori	r24, 0x80	; 128
    3248:	91 1d       	adc	r25, r1
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	1f 93       	push	r17
    3250:	0f 93       	push	r16
    3252:	ff 92       	push	r15
    3254:	ef 92       	push	r14
    3256:	19 2f       	mov	r17, r25
    3258:	98 7f       	andi	r25, 0xF8	; 248
    325a:	96 95       	lsr	r25
    325c:	e9 2f       	mov	r30, r25
    325e:	96 95       	lsr	r25
    3260:	96 95       	lsr	r25
    3262:	e9 0f       	add	r30, r25
    3264:	ff 27       	eor	r31, r31
    3266:	e2 55       	subi	r30, 0x52	; 82
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	99 27       	eor	r25, r25
    326c:	33 27       	eor	r19, r19
    326e:	ee 24       	eor	r14, r14
    3270:	ff 24       	eor	r15, r15
    3272:	a7 01       	movw	r20, r14
    3274:	e7 01       	movw	r28, r14
    3276:	05 90       	lpm	r0, Z+
    3278:	08 94       	sec
    327a:	07 94       	ror	r0
    327c:	28 f4       	brcc	.+10     	; 0x3288 <__ftoa_engine+0x80>
    327e:	36 0f       	add	r19, r22
    3280:	e7 1e       	adc	r14, r23
    3282:	f8 1e       	adc	r15, r24
    3284:	49 1f       	adc	r20, r25
    3286:	51 1d       	adc	r21, r1
    3288:	66 0f       	add	r22, r22
    328a:	77 1f       	adc	r23, r23
    328c:	88 1f       	adc	r24, r24
    328e:	99 1f       	adc	r25, r25
    3290:	06 94       	lsr	r0
    3292:	a1 f7       	brne	.-24     	; 0x327c <__ftoa_engine+0x74>
    3294:	05 90       	lpm	r0, Z+
    3296:	07 94       	ror	r0
    3298:	28 f4       	brcc	.+10     	; 0x32a4 <__ftoa_engine+0x9c>
    329a:	e7 0e       	add	r14, r23
    329c:	f8 1e       	adc	r15, r24
    329e:	49 1f       	adc	r20, r25
    32a0:	56 1f       	adc	r21, r22
    32a2:	c1 1d       	adc	r28, r1
    32a4:	77 0f       	add	r23, r23
    32a6:	88 1f       	adc	r24, r24
    32a8:	99 1f       	adc	r25, r25
    32aa:	66 1f       	adc	r22, r22
    32ac:	06 94       	lsr	r0
    32ae:	a1 f7       	brne	.-24     	; 0x3298 <__ftoa_engine+0x90>
    32b0:	05 90       	lpm	r0, Z+
    32b2:	07 94       	ror	r0
    32b4:	28 f4       	brcc	.+10     	; 0x32c0 <__ftoa_engine+0xb8>
    32b6:	f8 0e       	add	r15, r24
    32b8:	49 1f       	adc	r20, r25
    32ba:	56 1f       	adc	r21, r22
    32bc:	c7 1f       	adc	r28, r23
    32be:	d1 1d       	adc	r29, r1
    32c0:	88 0f       	add	r24, r24
    32c2:	99 1f       	adc	r25, r25
    32c4:	66 1f       	adc	r22, r22
    32c6:	77 1f       	adc	r23, r23
    32c8:	06 94       	lsr	r0
    32ca:	a1 f7       	brne	.-24     	; 0x32b4 <__ftoa_engine+0xac>
    32cc:	05 90       	lpm	r0, Z+
    32ce:	07 94       	ror	r0
    32d0:	20 f4       	brcc	.+8      	; 0x32da <__ftoa_engine+0xd2>
    32d2:	49 0f       	add	r20, r25
    32d4:	56 1f       	adc	r21, r22
    32d6:	c7 1f       	adc	r28, r23
    32d8:	d8 1f       	adc	r29, r24
    32da:	99 0f       	add	r25, r25
    32dc:	66 1f       	adc	r22, r22
    32de:	77 1f       	adc	r23, r23
    32e0:	88 1f       	adc	r24, r24
    32e2:	06 94       	lsr	r0
    32e4:	a9 f7       	brne	.-22     	; 0x32d0 <__ftoa_engine+0xc8>
    32e6:	84 91       	lpm	r24, Z+
    32e8:	10 95       	com	r17
    32ea:	17 70       	andi	r17, 0x07	; 7
    32ec:	41 f0       	breq	.+16     	; 0x32fe <__ftoa_engine+0xf6>
    32ee:	d6 95       	lsr	r29
    32f0:	c7 95       	ror	r28
    32f2:	57 95       	ror	r21
    32f4:	47 95       	ror	r20
    32f6:	f7 94       	ror	r15
    32f8:	e7 94       	ror	r14
    32fa:	1a 95       	dec	r17
    32fc:	c1 f7       	brne	.-16     	; 0x32ee <__ftoa_engine+0xe6>
    32fe:	e4 e5       	ldi	r30, 0x54	; 84
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	68 94       	set
    3304:	15 90       	lpm	r1, Z+
    3306:	15 91       	lpm	r17, Z+
    3308:	35 91       	lpm	r19, Z+
    330a:	65 91       	lpm	r22, Z+
    330c:	95 91       	lpm	r25, Z+
    330e:	05 90       	lpm	r0, Z+
    3310:	7f e2       	ldi	r23, 0x2F	; 47
    3312:	73 95       	inc	r23
    3314:	e1 18       	sub	r14, r1
    3316:	f1 0a       	sbc	r15, r17
    3318:	43 0b       	sbc	r20, r19
    331a:	56 0b       	sbc	r21, r22
    331c:	c9 0b       	sbc	r28, r25
    331e:	d0 09       	sbc	r29, r0
    3320:	c0 f7       	brcc	.-16     	; 0x3312 <__ftoa_engine+0x10a>
    3322:	e1 0c       	add	r14, r1
    3324:	f1 1e       	adc	r15, r17
    3326:	43 1f       	adc	r20, r19
    3328:	56 1f       	adc	r21, r22
    332a:	c9 1f       	adc	r28, r25
    332c:	d0 1d       	adc	r29, r0
    332e:	7e f4       	brtc	.+30     	; 0x334e <__ftoa_engine+0x146>
    3330:	70 33       	cpi	r23, 0x30	; 48
    3332:	11 f4       	brne	.+4      	; 0x3338 <__ftoa_engine+0x130>
    3334:	8a 95       	dec	r24
    3336:	e6 cf       	rjmp	.-52     	; 0x3304 <__ftoa_engine+0xfc>
    3338:	e8 94       	clt
    333a:	01 50       	subi	r16, 0x01	; 1
    333c:	30 f0       	brcs	.+12     	; 0x334a <__ftoa_engine+0x142>
    333e:	08 0f       	add	r16, r24
    3340:	0a f4       	brpl	.+2      	; 0x3344 <__ftoa_engine+0x13c>
    3342:	00 27       	eor	r16, r16
    3344:	02 17       	cp	r16, r18
    3346:	08 f4       	brcc	.+2      	; 0x334a <__ftoa_engine+0x142>
    3348:	20 2f       	mov	r18, r16
    334a:	23 95       	inc	r18
    334c:	02 2f       	mov	r16, r18
    334e:	7a 33       	cpi	r23, 0x3A	; 58
    3350:	28 f0       	brcs	.+10     	; 0x335c <__ftoa_engine+0x154>
    3352:	79 e3       	ldi	r23, 0x39	; 57
    3354:	7d 93       	st	X+, r23
    3356:	2a 95       	dec	r18
    3358:	e9 f7       	brne	.-6      	; 0x3354 <__ftoa_engine+0x14c>
    335a:	10 c0       	rjmp	.+32     	; 0x337c <__ftoa_engine+0x174>
    335c:	7d 93       	st	X+, r23
    335e:	2a 95       	dec	r18
    3360:	89 f6       	brne	.-94     	; 0x3304 <__ftoa_engine+0xfc>
    3362:	06 94       	lsr	r0
    3364:	97 95       	ror	r25
    3366:	67 95       	ror	r22
    3368:	37 95       	ror	r19
    336a:	17 95       	ror	r17
    336c:	17 94       	ror	r1
    336e:	e1 18       	sub	r14, r1
    3370:	f1 0a       	sbc	r15, r17
    3372:	43 0b       	sbc	r20, r19
    3374:	56 0b       	sbc	r21, r22
    3376:	c9 0b       	sbc	r28, r25
    3378:	d0 09       	sbc	r29, r0
    337a:	98 f0       	brcs	.+38     	; 0x33a2 <__ftoa_engine+0x19a>
    337c:	23 95       	inc	r18
    337e:	7e 91       	ld	r23, -X
    3380:	73 95       	inc	r23
    3382:	7a 33       	cpi	r23, 0x3A	; 58
    3384:	08 f0       	brcs	.+2      	; 0x3388 <__ftoa_engine+0x180>
    3386:	70 e3       	ldi	r23, 0x30	; 48
    3388:	7c 93       	st	X, r23
    338a:	20 13       	cpse	r18, r16
    338c:	b8 f7       	brcc	.-18     	; 0x337c <__ftoa_engine+0x174>
    338e:	7e 91       	ld	r23, -X
    3390:	70 61       	ori	r23, 0x10	; 16
    3392:	7d 93       	st	X+, r23
    3394:	30 f0       	brcs	.+12     	; 0x33a2 <__ftoa_engine+0x19a>
    3396:	83 95       	inc	r24
    3398:	71 e3       	ldi	r23, 0x31	; 49
    339a:	7d 93       	st	X+, r23
    339c:	70 e3       	ldi	r23, 0x30	; 48
    339e:	2a 95       	dec	r18
    33a0:	e1 f7       	brne	.-8      	; 0x339a <__ftoa_engine+0x192>
    33a2:	11 24       	eor	r1, r1
    33a4:	ef 90       	pop	r14
    33a6:	ff 90       	pop	r15
    33a8:	0f 91       	pop	r16
    33aa:	1f 91       	pop	r17
    33ac:	cf 91       	pop	r28
    33ae:	df 91       	pop	r29
    33b0:	99 27       	eor	r25, r25
    33b2:	87 fd       	sbrc	r24, 7
    33b4:	90 95       	com	r25
    33b6:	08 95       	ret

000033b8 <strrev>:
    33b8:	dc 01       	movw	r26, r24
    33ba:	fc 01       	movw	r30, r24
    33bc:	67 2f       	mov	r22, r23
    33be:	71 91       	ld	r23, Z+
    33c0:	77 23       	and	r23, r23
    33c2:	e1 f7       	brne	.-8      	; 0x33bc <strrev+0x4>
    33c4:	32 97       	sbiw	r30, 0x02	; 2
    33c6:	04 c0       	rjmp	.+8      	; 0x33d0 <strrev+0x18>
    33c8:	7c 91       	ld	r23, X
    33ca:	6d 93       	st	X+, r22
    33cc:	70 83       	st	Z, r23
    33ce:	62 91       	ld	r22, -Z
    33d0:	ae 17       	cp	r26, r30
    33d2:	bf 07       	cpc	r27, r31
    33d4:	c8 f3       	brcs	.-14     	; 0x33c8 <strrev+0x10>
    33d6:	08 95       	ret

000033d8 <__udivmodhi4>:
    33d8:	aa 1b       	sub	r26, r26
    33da:	bb 1b       	sub	r27, r27
    33dc:	51 e1       	ldi	r21, 0x11	; 17
    33de:	07 c0       	rjmp	.+14     	; 0x33ee <__udivmodhi4_ep>

000033e0 <__udivmodhi4_loop>:
    33e0:	aa 1f       	adc	r26, r26
    33e2:	bb 1f       	adc	r27, r27
    33e4:	a6 17       	cp	r26, r22
    33e6:	b7 07       	cpc	r27, r23
    33e8:	10 f0       	brcs	.+4      	; 0x33ee <__udivmodhi4_ep>
    33ea:	a6 1b       	sub	r26, r22
    33ec:	b7 0b       	sbc	r27, r23

000033ee <__udivmodhi4_ep>:
    33ee:	88 1f       	adc	r24, r24
    33f0:	99 1f       	adc	r25, r25
    33f2:	5a 95       	dec	r21
    33f4:	a9 f7       	brne	.-22     	; 0x33e0 <__udivmodhi4_loop>
    33f6:	80 95       	com	r24
    33f8:	90 95       	com	r25
    33fa:	bc 01       	movw	r22, r24
    33fc:	cd 01       	movw	r24, r26
    33fe:	08 95       	ret

00003400 <_exit>:
    3400:	f8 94       	cli

00003402 <__stop_program>:
    3402:	ff cf       	rjmp	.-2      	; 0x3402 <__stop_program>
