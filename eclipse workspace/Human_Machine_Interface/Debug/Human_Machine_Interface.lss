
Human_Machine_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e24  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  00002e24  00002e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027c0  00000000  00000000  00002f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000106e  00000000  00000000  00005730  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000679e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000068de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008697  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009582  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a71d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000aeeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      10:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      14:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      18:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      1c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      20:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      24:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      28:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      2c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      30:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      34:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__vector_13>
      38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      3c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      40:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      44:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      48:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      4c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      50:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__pack_f+0xca>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x172>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1f8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <__bad_interrupt>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x3e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e4 e2       	ldi	r30, 0x24	; 36
     162:	fe e2       	ldi	r31, 0x2E	; 46
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a8 33       	cpi	r26, 0x38	; 56
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>
     170:	0e 94 21 11 	call	0x2242	; 0x2242 <main>
     174:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <_exit>

00000178 <__bad_interrupt>:
     178:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017c <__fixunssfsi>:
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	7b 01       	movw	r14, r22
     186:	8c 01       	movw	r16, r24
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	5f e4       	ldi	r21, 0x4F	; 79
     190:	0e 94 be 03 	call	0x77c	; 0x77c <__gesf2>
     194:	88 23       	and	r24, r24
     196:	8c f0       	brlt	.+34     	; 0x1ba <__fixunssfsi+0x3e>
     198:	c8 01       	movw	r24, r16
     19a:	b7 01       	movw	r22, r14
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 36 02 	call	0x46c	; 0x46c <__subsf3>
     1a8:	0e 94 1e 04 	call	0x83c	; 0x83c <__fixsfsi>
     1ac:	9b 01       	movw	r18, r22
     1ae:	ac 01       	movw	r20, r24
     1b0:	20 50       	subi	r18, 0x00	; 0
     1b2:	30 40       	sbci	r19, 0x00	; 0
     1b4:	40 40       	sbci	r20, 0x00	; 0
     1b6:	50 48       	sbci	r21, 0x80	; 128
     1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <__fixunssfsi+0x4a>
     1ba:	c8 01       	movw	r24, r16
     1bc:	b7 01       	movw	r22, r14
     1be:	0e 94 1e 04 	call	0x83c	; 0x83c <__fixsfsi>
     1c2:	9b 01       	movw	r18, r22
     1c4:	ac 01       	movw	r20, r24
     1c6:	b9 01       	movw	r22, r18
     1c8:	ca 01       	movw	r24, r20
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	08 95       	ret

000001d4 <_fpadd_parts>:
     1d4:	a0 e0       	ldi	r26, 0x00	; 0
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	e0 ef       	ldi	r30, 0xF0	; 240
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__prologue_saves__>
     1e0:	dc 01       	movw	r26, r24
     1e2:	2b 01       	movw	r4, r22
     1e4:	fa 01       	movw	r30, r20
     1e6:	9c 91       	ld	r25, X
     1e8:	92 30       	cpi	r25, 0x02	; 2
     1ea:	08 f4       	brcc	.+2      	; 0x1ee <_fpadd_parts+0x1a>
     1ec:	39 c1       	rjmp	.+626    	; 0x460 <_fpadd_parts+0x28c>
     1ee:	eb 01       	movw	r28, r22
     1f0:	88 81       	ld	r24, Y
     1f2:	82 30       	cpi	r24, 0x02	; 2
     1f4:	08 f4       	brcc	.+2      	; 0x1f8 <_fpadd_parts+0x24>
     1f6:	33 c1       	rjmp	.+614    	; 0x45e <_fpadd_parts+0x28a>
     1f8:	94 30       	cpi	r25, 0x04	; 4
     1fa:	69 f4       	brne	.+26     	; 0x216 <_fpadd_parts+0x42>
     1fc:	84 30       	cpi	r24, 0x04	; 4
     1fe:	09 f0       	breq	.+2      	; 0x202 <_fpadd_parts+0x2e>
     200:	2f c1       	rjmp	.+606    	; 0x460 <_fpadd_parts+0x28c>
     202:	11 96       	adiw	r26, 0x01	; 1
     204:	9c 91       	ld	r25, X
     206:	11 97       	sbiw	r26, 0x01	; 1
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	98 17       	cp	r25, r24
     20c:	09 f4       	brne	.+2      	; 0x210 <_fpadd_parts+0x3c>
     20e:	28 c1       	rjmp	.+592    	; 0x460 <_fpadd_parts+0x28c>
     210:	a8 e2       	ldi	r26, 0x28	; 40
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	25 c1       	rjmp	.+586    	; 0x460 <_fpadd_parts+0x28c>
     216:	84 30       	cpi	r24, 0x04	; 4
     218:	09 f4       	brne	.+2      	; 0x21c <_fpadd_parts+0x48>
     21a:	21 c1       	rjmp	.+578    	; 0x45e <_fpadd_parts+0x28a>
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	a9 f4       	brne	.+42     	; 0x24a <_fpadd_parts+0x76>
     220:	92 30       	cpi	r25, 0x02	; 2
     222:	09 f0       	breq	.+2      	; 0x226 <_fpadd_parts+0x52>
     224:	1d c1       	rjmp	.+570    	; 0x460 <_fpadd_parts+0x28c>
     226:	9a 01       	movw	r18, r20
     228:	ad 01       	movw	r20, r26
     22a:	88 e0       	ldi	r24, 0x08	; 8
     22c:	ea 01       	movw	r28, r20
     22e:	09 90       	ld	r0, Y+
     230:	ae 01       	movw	r20, r28
     232:	e9 01       	movw	r28, r18
     234:	09 92       	st	Y+, r0
     236:	9e 01       	movw	r18, r28
     238:	81 50       	subi	r24, 0x01	; 1
     23a:	c1 f7       	brne	.-16     	; 0x22c <_fpadd_parts+0x58>
     23c:	e2 01       	movw	r28, r4
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	9c 91       	ld	r25, X
     244:	89 23       	and	r24, r25
     246:	81 83       	std	Z+1, r24	; 0x01
     248:	08 c1       	rjmp	.+528    	; 0x45a <_fpadd_parts+0x286>
     24a:	92 30       	cpi	r25, 0x02	; 2
     24c:	09 f4       	brne	.+2      	; 0x250 <_fpadd_parts+0x7c>
     24e:	07 c1       	rjmp	.+526    	; 0x45e <_fpadd_parts+0x28a>
     250:	12 96       	adiw	r26, 0x02	; 2
     252:	2d 90       	ld	r2, X+
     254:	3c 90       	ld	r3, X
     256:	13 97       	sbiw	r26, 0x03	; 3
     258:	eb 01       	movw	r28, r22
     25a:	8a 81       	ldd	r24, Y+2	; 0x02
     25c:	9b 81       	ldd	r25, Y+3	; 0x03
     25e:	14 96       	adiw	r26, 0x04	; 4
     260:	ad 90       	ld	r10, X+
     262:	bd 90       	ld	r11, X+
     264:	cd 90       	ld	r12, X+
     266:	dc 90       	ld	r13, X
     268:	17 97       	sbiw	r26, 0x07	; 7
     26a:	ec 80       	ldd	r14, Y+4	; 0x04
     26c:	fd 80       	ldd	r15, Y+5	; 0x05
     26e:	0e 81       	ldd	r16, Y+6	; 0x06
     270:	1f 81       	ldd	r17, Y+7	; 0x07
     272:	91 01       	movw	r18, r2
     274:	28 1b       	sub	r18, r24
     276:	39 0b       	sbc	r19, r25
     278:	b9 01       	movw	r22, r18
     27a:	37 ff       	sbrs	r19, 7
     27c:	04 c0       	rjmp	.+8      	; 0x286 <_fpadd_parts+0xb2>
     27e:	66 27       	eor	r22, r22
     280:	77 27       	eor	r23, r23
     282:	62 1b       	sub	r22, r18
     284:	73 0b       	sbc	r23, r19
     286:	60 32       	cpi	r22, 0x20	; 32
     288:	71 05       	cpc	r23, r1
     28a:	0c f0       	brlt	.+2      	; 0x28e <_fpadd_parts+0xba>
     28c:	61 c0       	rjmp	.+194    	; 0x350 <_fpadd_parts+0x17c>
     28e:	12 16       	cp	r1, r18
     290:	13 06       	cpc	r1, r19
     292:	6c f5       	brge	.+90     	; 0x2ee <_fpadd_parts+0x11a>
     294:	37 01       	movw	r6, r14
     296:	48 01       	movw	r8, r16
     298:	06 2e       	mov	r0, r22
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <_fpadd_parts+0xd0>
     29c:	96 94       	lsr	r9
     29e:	87 94       	ror	r8
     2a0:	77 94       	ror	r7
     2a2:	67 94       	ror	r6
     2a4:	0a 94       	dec	r0
     2a6:	d2 f7       	brpl	.-12     	; 0x29c <_fpadd_parts+0xc8>
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	04 c0       	rjmp	.+8      	; 0x2ba <_fpadd_parts+0xe6>
     2b2:	22 0f       	add	r18, r18
     2b4:	33 1f       	adc	r19, r19
     2b6:	44 1f       	adc	r20, r20
     2b8:	55 1f       	adc	r21, r21
     2ba:	6a 95       	dec	r22
     2bc:	d2 f7       	brpl	.-12     	; 0x2b2 <_fpadd_parts+0xde>
     2be:	21 50       	subi	r18, 0x01	; 1
     2c0:	30 40       	sbci	r19, 0x00	; 0
     2c2:	40 40       	sbci	r20, 0x00	; 0
     2c4:	50 40       	sbci	r21, 0x00	; 0
     2c6:	2e 21       	and	r18, r14
     2c8:	3f 21       	and	r19, r15
     2ca:	40 23       	and	r20, r16
     2cc:	51 23       	and	r21, r17
     2ce:	21 15       	cp	r18, r1
     2d0:	31 05       	cpc	r19, r1
     2d2:	41 05       	cpc	r20, r1
     2d4:	51 05       	cpc	r21, r1
     2d6:	21 f0       	breq	.+8      	; 0x2e0 <_fpadd_parts+0x10c>
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	79 01       	movw	r14, r18
     2e2:	8a 01       	movw	r16, r20
     2e4:	e6 28       	or	r14, r6
     2e6:	f7 28       	or	r15, r7
     2e8:	08 29       	or	r16, r8
     2ea:	19 29       	or	r17, r9
     2ec:	3c c0       	rjmp	.+120    	; 0x366 <_fpadd_parts+0x192>
     2ee:	23 2b       	or	r18, r19
     2f0:	d1 f1       	breq	.+116    	; 0x366 <_fpadd_parts+0x192>
     2f2:	26 0e       	add	r2, r22
     2f4:	37 1e       	adc	r3, r23
     2f6:	35 01       	movw	r6, r10
     2f8:	46 01       	movw	r8, r12
     2fa:	06 2e       	mov	r0, r22
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <_fpadd_parts+0x132>
     2fe:	96 94       	lsr	r9
     300:	87 94       	ror	r8
     302:	77 94       	ror	r7
     304:	67 94       	ror	r6
     306:	0a 94       	dec	r0
     308:	d2 f7       	brpl	.-12     	; 0x2fe <_fpadd_parts+0x12a>
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	04 c0       	rjmp	.+8      	; 0x31c <_fpadd_parts+0x148>
     314:	22 0f       	add	r18, r18
     316:	33 1f       	adc	r19, r19
     318:	44 1f       	adc	r20, r20
     31a:	55 1f       	adc	r21, r21
     31c:	6a 95       	dec	r22
     31e:	d2 f7       	brpl	.-12     	; 0x314 <_fpadd_parts+0x140>
     320:	21 50       	subi	r18, 0x01	; 1
     322:	30 40       	sbci	r19, 0x00	; 0
     324:	40 40       	sbci	r20, 0x00	; 0
     326:	50 40       	sbci	r21, 0x00	; 0
     328:	2a 21       	and	r18, r10
     32a:	3b 21       	and	r19, r11
     32c:	4c 21       	and	r20, r12
     32e:	5d 21       	and	r21, r13
     330:	21 15       	cp	r18, r1
     332:	31 05       	cpc	r19, r1
     334:	41 05       	cpc	r20, r1
     336:	51 05       	cpc	r21, r1
     338:	21 f0       	breq	.+8      	; 0x342 <_fpadd_parts+0x16e>
     33a:	21 e0       	ldi	r18, 0x01	; 1
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	59 01       	movw	r10, r18
     344:	6a 01       	movw	r12, r20
     346:	a6 28       	or	r10, r6
     348:	b7 28       	or	r11, r7
     34a:	c8 28       	or	r12, r8
     34c:	d9 28       	or	r13, r9
     34e:	0b c0       	rjmp	.+22     	; 0x366 <_fpadd_parts+0x192>
     350:	82 15       	cp	r24, r2
     352:	93 05       	cpc	r25, r3
     354:	2c f0       	brlt	.+10     	; 0x360 <_fpadd_parts+0x18c>
     356:	1c 01       	movw	r2, r24
     358:	aa 24       	eor	r10, r10
     35a:	bb 24       	eor	r11, r11
     35c:	65 01       	movw	r12, r10
     35e:	03 c0       	rjmp	.+6      	; 0x366 <_fpadd_parts+0x192>
     360:	ee 24       	eor	r14, r14
     362:	ff 24       	eor	r15, r15
     364:	87 01       	movw	r16, r14
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	9c 91       	ld	r25, X
     36a:	d2 01       	movw	r26, r4
     36c:	11 96       	adiw	r26, 0x01	; 1
     36e:	8c 91       	ld	r24, X
     370:	98 17       	cp	r25, r24
     372:	09 f4       	brne	.+2      	; 0x376 <_fpadd_parts+0x1a2>
     374:	45 c0       	rjmp	.+138    	; 0x400 <_fpadd_parts+0x22c>
     376:	99 23       	and	r25, r25
     378:	39 f0       	breq	.+14     	; 0x388 <_fpadd_parts+0x1b4>
     37a:	a8 01       	movw	r20, r16
     37c:	97 01       	movw	r18, r14
     37e:	2a 19       	sub	r18, r10
     380:	3b 09       	sbc	r19, r11
     382:	4c 09       	sbc	r20, r12
     384:	5d 09       	sbc	r21, r13
     386:	06 c0       	rjmp	.+12     	; 0x394 <_fpadd_parts+0x1c0>
     388:	a6 01       	movw	r20, r12
     38a:	95 01       	movw	r18, r10
     38c:	2e 19       	sub	r18, r14
     38e:	3f 09       	sbc	r19, r15
     390:	40 0b       	sbc	r20, r16
     392:	51 0b       	sbc	r21, r17
     394:	57 fd       	sbrc	r21, 7
     396:	08 c0       	rjmp	.+16     	; 0x3a8 <_fpadd_parts+0x1d4>
     398:	11 82       	std	Z+1, r1	; 0x01
     39a:	33 82       	std	Z+3, r3	; 0x03
     39c:	22 82       	std	Z+2, r2	; 0x02
     39e:	24 83       	std	Z+4, r18	; 0x04
     3a0:	35 83       	std	Z+5, r19	; 0x05
     3a2:	46 83       	std	Z+6, r20	; 0x06
     3a4:	57 83       	std	Z+7, r21	; 0x07
     3a6:	1d c0       	rjmp	.+58     	; 0x3e2 <_fpadd_parts+0x20e>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	81 83       	std	Z+1, r24	; 0x01
     3ac:	33 82       	std	Z+3, r3	; 0x03
     3ae:	22 82       	std	Z+2, r2	; 0x02
     3b0:	88 27       	eor	r24, r24
     3b2:	99 27       	eor	r25, r25
     3b4:	dc 01       	movw	r26, r24
     3b6:	82 1b       	sub	r24, r18
     3b8:	93 0b       	sbc	r25, r19
     3ba:	a4 0b       	sbc	r26, r20
     3bc:	b5 0b       	sbc	r27, r21
     3be:	84 83       	std	Z+4, r24	; 0x04
     3c0:	95 83       	std	Z+5, r25	; 0x05
     3c2:	a6 83       	std	Z+6, r26	; 0x06
     3c4:	b7 83       	std	Z+7, r27	; 0x07
     3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <_fpadd_parts+0x20e>
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	44 1f       	adc	r20, r20
     3ce:	55 1f       	adc	r21, r21
     3d0:	24 83       	std	Z+4, r18	; 0x04
     3d2:	35 83       	std	Z+5, r19	; 0x05
     3d4:	46 83       	std	Z+6, r20	; 0x06
     3d6:	57 83       	std	Z+7, r21	; 0x07
     3d8:	82 81       	ldd	r24, Z+2	; 0x02
     3da:	93 81       	ldd	r25, Z+3	; 0x03
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	93 83       	std	Z+3, r25	; 0x03
     3e0:	82 83       	std	Z+2, r24	; 0x02
     3e2:	24 81       	ldd	r18, Z+4	; 0x04
     3e4:	35 81       	ldd	r19, Z+5	; 0x05
     3e6:	46 81       	ldd	r20, Z+6	; 0x06
     3e8:	57 81       	ldd	r21, Z+7	; 0x07
     3ea:	da 01       	movw	r26, r20
     3ec:	c9 01       	movw	r24, r18
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	a1 09       	sbc	r26, r1
     3f2:	b1 09       	sbc	r27, r1
     3f4:	8f 5f       	subi	r24, 0xFF	; 255
     3f6:	9f 4f       	sbci	r25, 0xFF	; 255
     3f8:	af 4f       	sbci	r26, 0xFF	; 255
     3fa:	bf 43       	sbci	r27, 0x3F	; 63
     3fc:	28 f3       	brcs	.-54     	; 0x3c8 <_fpadd_parts+0x1f4>
     3fe:	0b c0       	rjmp	.+22     	; 0x416 <_fpadd_parts+0x242>
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	33 82       	std	Z+3, r3	; 0x03
     404:	22 82       	std	Z+2, r2	; 0x02
     406:	ea 0c       	add	r14, r10
     408:	fb 1c       	adc	r15, r11
     40a:	0c 1d       	adc	r16, r12
     40c:	1d 1d       	adc	r17, r13
     40e:	e4 82       	std	Z+4, r14	; 0x04
     410:	f5 82       	std	Z+5, r15	; 0x05
     412:	06 83       	std	Z+6, r16	; 0x06
     414:	17 83       	std	Z+7, r17	; 0x07
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	80 83       	st	Z, r24
     41a:	24 81       	ldd	r18, Z+4	; 0x04
     41c:	35 81       	ldd	r19, Z+5	; 0x05
     41e:	46 81       	ldd	r20, Z+6	; 0x06
     420:	57 81       	ldd	r21, Z+7	; 0x07
     422:	57 ff       	sbrs	r21, 7
     424:	1a c0       	rjmp	.+52     	; 0x45a <_fpadd_parts+0x286>
     426:	c9 01       	movw	r24, r18
     428:	aa 27       	eor	r26, r26
     42a:	97 fd       	sbrc	r25, 7
     42c:	a0 95       	com	r26
     42e:	ba 2f       	mov	r27, r26
     430:	81 70       	andi	r24, 0x01	; 1
     432:	90 70       	andi	r25, 0x00	; 0
     434:	a0 70       	andi	r26, 0x00	; 0
     436:	b0 70       	andi	r27, 0x00	; 0
     438:	56 95       	lsr	r21
     43a:	47 95       	ror	r20
     43c:	37 95       	ror	r19
     43e:	27 95       	ror	r18
     440:	82 2b       	or	r24, r18
     442:	93 2b       	or	r25, r19
     444:	a4 2b       	or	r26, r20
     446:	b5 2b       	or	r27, r21
     448:	84 83       	std	Z+4, r24	; 0x04
     44a:	95 83       	std	Z+5, r25	; 0x05
     44c:	a6 83       	std	Z+6, r26	; 0x06
     44e:	b7 83       	std	Z+7, r27	; 0x07
     450:	82 81       	ldd	r24, Z+2	; 0x02
     452:	93 81       	ldd	r25, Z+3	; 0x03
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	93 83       	std	Z+3, r25	; 0x03
     458:	82 83       	std	Z+2, r24	; 0x02
     45a:	df 01       	movw	r26, r30
     45c:	01 c0       	rjmp	.+2      	; 0x460 <_fpadd_parts+0x28c>
     45e:	d2 01       	movw	r26, r4
     460:	cd 01       	movw	r24, r26
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	e2 e1       	ldi	r30, 0x12	; 18
     468:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__epilogue_restores__>

0000046c <__subsf3>:
     46c:	a0 e2       	ldi	r26, 0x20	; 32
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	ec e3       	ldi	r30, 0x3C	; 60
     472:	f2 e0       	ldi	r31, 0x02	; 2
     474:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__+0x18>
     478:	69 83       	std	Y+1, r22	; 0x01
     47a:	7a 83       	std	Y+2, r23	; 0x02
     47c:	8b 83       	std	Y+3, r24	; 0x03
     47e:	9c 83       	std	Y+4, r25	; 0x04
     480:	2d 83       	std	Y+5, r18	; 0x05
     482:	3e 83       	std	Y+6, r19	; 0x06
     484:	4f 83       	std	Y+7, r20	; 0x07
     486:	58 87       	std	Y+8, r21	; 0x08
     488:	e9 e0       	ldi	r30, 0x09	; 9
     48a:	ee 2e       	mov	r14, r30
     48c:	f1 2c       	mov	r15, r1
     48e:	ec 0e       	add	r14, r28
     490:	fd 1e       	adc	r15, r29
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	b7 01       	movw	r22, r14
     498:	0e 94 47 05 	call	0xa8e	; 0xa8e <__unpack_f>
     49c:	8e 01       	movw	r16, r28
     49e:	0f 5e       	subi	r16, 0xEF	; 239
     4a0:	1f 4f       	sbci	r17, 0xFF	; 255
     4a2:	ce 01       	movw	r24, r28
     4a4:	05 96       	adiw	r24, 0x05	; 5
     4a6:	b8 01       	movw	r22, r16
     4a8:	0e 94 47 05 	call	0xa8e	; 0xa8e <__unpack_f>
     4ac:	8a 89       	ldd	r24, Y+18	; 0x12
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	89 27       	eor	r24, r25
     4b2:	8a 8b       	std	Y+18, r24	; 0x12
     4b4:	c7 01       	movw	r24, r14
     4b6:	b8 01       	movw	r22, r16
     4b8:	ae 01       	movw	r20, r28
     4ba:	47 5e       	subi	r20, 0xE7	; 231
     4bc:	5f 4f       	sbci	r21, 0xFF	; 255
     4be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_fpadd_parts>
     4c2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__pack_f>
     4c6:	a0 96       	adiw	r28, 0x20	; 32
     4c8:	e6 e0       	ldi	r30, 0x06	; 6
     4ca:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__+0x18>

000004ce <__addsf3>:
     4ce:	a0 e2       	ldi	r26, 0x20	; 32
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	ed e6       	ldi	r30, 0x6D	; 109
     4d4:	f2 e0       	ldi	r31, 0x02	; 2
     4d6:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__+0x18>
     4da:	69 83       	std	Y+1, r22	; 0x01
     4dc:	7a 83       	std	Y+2, r23	; 0x02
     4de:	8b 83       	std	Y+3, r24	; 0x03
     4e0:	9c 83       	std	Y+4, r25	; 0x04
     4e2:	2d 83       	std	Y+5, r18	; 0x05
     4e4:	3e 83       	std	Y+6, r19	; 0x06
     4e6:	4f 83       	std	Y+7, r20	; 0x07
     4e8:	58 87       	std	Y+8, r21	; 0x08
     4ea:	f9 e0       	ldi	r31, 0x09	; 9
     4ec:	ef 2e       	mov	r14, r31
     4ee:	f1 2c       	mov	r15, r1
     4f0:	ec 0e       	add	r14, r28
     4f2:	fd 1e       	adc	r15, r29
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	b7 01       	movw	r22, r14
     4fa:	0e 94 47 05 	call	0xa8e	; 0xa8e <__unpack_f>
     4fe:	8e 01       	movw	r16, r28
     500:	0f 5e       	subi	r16, 0xEF	; 239
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	ce 01       	movw	r24, r28
     506:	05 96       	adiw	r24, 0x05	; 5
     508:	b8 01       	movw	r22, r16
     50a:	0e 94 47 05 	call	0xa8e	; 0xa8e <__unpack_f>
     50e:	c7 01       	movw	r24, r14
     510:	b8 01       	movw	r22, r16
     512:	ae 01       	movw	r20, r28
     514:	47 5e       	subi	r20, 0xE7	; 231
     516:	5f 4f       	sbci	r21, 0xFF	; 255
     518:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_fpadd_parts>
     51c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__pack_f>
     520:	a0 96       	adiw	r28, 0x20	; 32
     522:	e6 e0       	ldi	r30, 0x06	; 6
     524:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__+0x18>

00000528 <__mulsf3>:
     528:	a0 e2       	ldi	r26, 0x20	; 32
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	ea e9       	ldi	r30, 0x9A	; 154
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__prologue_saves__>
     534:	69 83       	std	Y+1, r22	; 0x01
     536:	7a 83       	std	Y+2, r23	; 0x02
     538:	8b 83       	std	Y+3, r24	; 0x03
     53a:	9c 83       	std	Y+4, r25	; 0x04
     53c:	2d 83       	std	Y+5, r18	; 0x05
     53e:	3e 83       	std	Y+6, r19	; 0x06
     540:	4f 83       	std	Y+7, r20	; 0x07
     542:	58 87       	std	Y+8, r21	; 0x08
     544:	ce 01       	movw	r24, r28
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	be 01       	movw	r22, r28
     54a:	67 5f       	subi	r22, 0xF7	; 247
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	0e 94 47 05 	call	0xa8e	; 0xa8e <__unpack_f>
     552:	ce 01       	movw	r24, r28
     554:	05 96       	adiw	r24, 0x05	; 5
     556:	be 01       	movw	r22, r28
     558:	6f 5e       	subi	r22, 0xEF	; 239
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	0e 94 47 05 	call	0xa8e	; 0xa8e <__unpack_f>
     560:	99 85       	ldd	r25, Y+9	; 0x09
     562:	92 30       	cpi	r25, 0x02	; 2
     564:	88 f0       	brcs	.+34     	; 0x588 <__mulsf3+0x60>
     566:	89 89       	ldd	r24, Y+17	; 0x11
     568:	82 30       	cpi	r24, 0x02	; 2
     56a:	c8 f0       	brcs	.+50     	; 0x59e <__mulsf3+0x76>
     56c:	94 30       	cpi	r25, 0x04	; 4
     56e:	19 f4       	brne	.+6      	; 0x576 <__mulsf3+0x4e>
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	51 f4       	brne	.+20     	; 0x588 <__mulsf3+0x60>
     574:	04 c0       	rjmp	.+8      	; 0x57e <__mulsf3+0x56>
     576:	84 30       	cpi	r24, 0x04	; 4
     578:	29 f4       	brne	.+10     	; 0x584 <__mulsf3+0x5c>
     57a:	92 30       	cpi	r25, 0x02	; 2
     57c:	81 f4       	brne	.+32     	; 0x59e <__mulsf3+0x76>
     57e:	88 e2       	ldi	r24, 0x28	; 40
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	c6 c0       	rjmp	.+396    	; 0x710 <__mulsf3+0x1e8>
     584:	92 30       	cpi	r25, 0x02	; 2
     586:	49 f4       	brne	.+18     	; 0x59a <__mulsf3+0x72>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	9a 85       	ldd	r25, Y+10	; 0x0a
     58c:	8a 89       	ldd	r24, Y+18	; 0x12
     58e:	98 13       	cpse	r25, r24
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	2a 87       	std	Y+10, r18	; 0x0a
     594:	ce 01       	movw	r24, r28
     596:	09 96       	adiw	r24, 0x09	; 9
     598:	bb c0       	rjmp	.+374    	; 0x710 <__mulsf3+0x1e8>
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	49 f4       	brne	.+18     	; 0x5b0 <__mulsf3+0x88>
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a2:	8a 89       	ldd	r24, Y+18	; 0x12
     5a4:	98 13       	cpse	r25, r24
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	2a 8b       	std	Y+18, r18	; 0x12
     5aa:	ce 01       	movw	r24, r28
     5ac:	41 96       	adiw	r24, 0x11	; 17
     5ae:	b0 c0       	rjmp	.+352    	; 0x710 <__mulsf3+0x1e8>
     5b0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5b2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5b4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5b6:	58 88       	ldd	r5, Y+16	; 0x10
     5b8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ba:	7e 88       	ldd	r7, Y+22	; 0x16
     5bc:	8f 88       	ldd	r8, Y+23	; 0x17
     5be:	98 8c       	ldd	r9, Y+24	; 0x18
     5c0:	ee 24       	eor	r14, r14
     5c2:	ff 24       	eor	r15, r15
     5c4:	87 01       	movw	r16, r14
     5c6:	aa 24       	eor	r10, r10
     5c8:	bb 24       	eor	r11, r11
     5ca:	65 01       	movw	r12, r10
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	e0 e0       	ldi	r30, 0x00	; 0
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	c1 01       	movw	r24, r2
     5da:	81 70       	andi	r24, 0x01	; 1
     5dc:	90 70       	andi	r25, 0x00	; 0
     5de:	89 2b       	or	r24, r25
     5e0:	e9 f0       	breq	.+58     	; 0x61c <__mulsf3+0xf4>
     5e2:	e6 0c       	add	r14, r6
     5e4:	f7 1c       	adc	r15, r7
     5e6:	08 1d       	adc	r16, r8
     5e8:	19 1d       	adc	r17, r9
     5ea:	9a 01       	movw	r18, r20
     5ec:	ab 01       	movw	r20, r22
     5ee:	2a 0d       	add	r18, r10
     5f0:	3b 1d       	adc	r19, r11
     5f2:	4c 1d       	adc	r20, r12
     5f4:	5d 1d       	adc	r21, r13
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e0       	ldi	r26, 0x00	; 0
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	e6 14       	cp	r14, r6
     600:	f7 04       	cpc	r15, r7
     602:	08 05       	cpc	r16, r8
     604:	19 05       	cpc	r17, r9
     606:	20 f4       	brcc	.+8      	; 0x610 <__mulsf3+0xe8>
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	a0 e0       	ldi	r26, 0x00	; 0
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	ba 01       	movw	r22, r20
     612:	a9 01       	movw	r20, r18
     614:	48 0f       	add	r20, r24
     616:	59 1f       	adc	r21, r25
     618:	6a 1f       	adc	r22, r26
     61a:	7b 1f       	adc	r23, r27
     61c:	aa 0c       	add	r10, r10
     61e:	bb 1c       	adc	r11, r11
     620:	cc 1c       	adc	r12, r12
     622:	dd 1c       	adc	r13, r13
     624:	97 fe       	sbrs	r9, 7
     626:	08 c0       	rjmp	.+16     	; 0x638 <__mulsf3+0x110>
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	a8 2a       	or	r10, r24
     632:	b9 2a       	or	r11, r25
     634:	ca 2a       	or	r12, r26
     636:	db 2a       	or	r13, r27
     638:	31 96       	adiw	r30, 0x01	; 1
     63a:	e0 32       	cpi	r30, 0x20	; 32
     63c:	f1 05       	cpc	r31, r1
     63e:	49 f0       	breq	.+18     	; 0x652 <__mulsf3+0x12a>
     640:	66 0c       	add	r6, r6
     642:	77 1c       	adc	r7, r7
     644:	88 1c       	adc	r8, r8
     646:	99 1c       	adc	r9, r9
     648:	56 94       	lsr	r5
     64a:	47 94       	ror	r4
     64c:	37 94       	ror	r3
     64e:	27 94       	ror	r2
     650:	c3 cf       	rjmp	.-122    	; 0x5d8 <__mulsf3+0xb0>
     652:	fa 85       	ldd	r31, Y+10	; 0x0a
     654:	ea 89       	ldd	r30, Y+18	; 0x12
     656:	2b 89       	ldd	r18, Y+19	; 0x13
     658:	3c 89       	ldd	r19, Y+20	; 0x14
     65a:	8b 85       	ldd	r24, Y+11	; 0x0b
     65c:	9c 85       	ldd	r25, Y+12	; 0x0c
     65e:	28 0f       	add	r18, r24
     660:	39 1f       	adc	r19, r25
     662:	2e 5f       	subi	r18, 0xFE	; 254
     664:	3f 4f       	sbci	r19, 0xFF	; 255
     666:	17 c0       	rjmp	.+46     	; 0x696 <__mulsf3+0x16e>
     668:	ca 01       	movw	r24, r20
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	90 70       	andi	r25, 0x00	; 0
     66e:	89 2b       	or	r24, r25
     670:	61 f0       	breq	.+24     	; 0x68a <__mulsf3+0x162>
     672:	16 95       	lsr	r17
     674:	07 95       	ror	r16
     676:	f7 94       	ror	r15
     678:	e7 94       	ror	r14
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	a0 e0       	ldi	r26, 0x00	; 0
     680:	b0 e8       	ldi	r27, 0x80	; 128
     682:	e8 2a       	or	r14, r24
     684:	f9 2a       	or	r15, r25
     686:	0a 2b       	or	r16, r26
     688:	1b 2b       	or	r17, r27
     68a:	76 95       	lsr	r23
     68c:	67 95       	ror	r22
     68e:	57 95       	ror	r21
     690:	47 95       	ror	r20
     692:	2f 5f       	subi	r18, 0xFF	; 255
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	77 fd       	sbrc	r23, 7
     698:	e7 cf       	rjmp	.-50     	; 0x668 <__mulsf3+0x140>
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <__mulsf3+0x18c>
     69c:	44 0f       	add	r20, r20
     69e:	55 1f       	adc	r21, r21
     6a0:	66 1f       	adc	r22, r22
     6a2:	77 1f       	adc	r23, r23
     6a4:	17 fd       	sbrc	r17, 7
     6a6:	41 60       	ori	r20, 0x01	; 1
     6a8:	ee 0c       	add	r14, r14
     6aa:	ff 1c       	adc	r15, r15
     6ac:	00 1f       	adc	r16, r16
     6ae:	11 1f       	adc	r17, r17
     6b0:	21 50       	subi	r18, 0x01	; 1
     6b2:	30 40       	sbci	r19, 0x00	; 0
     6b4:	40 30       	cpi	r20, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	59 07       	cpc	r21, r25
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	69 07       	cpc	r22, r25
     6be:	90 e4       	ldi	r25, 0x40	; 64
     6c0:	79 07       	cpc	r23, r25
     6c2:	60 f3       	brcs	.-40     	; 0x69c <__mulsf3+0x174>
     6c4:	2b 8f       	std	Y+27, r18	; 0x1b
     6c6:	3c 8f       	std	Y+28, r19	; 0x1c
     6c8:	db 01       	movw	r26, r22
     6ca:	ca 01       	movw	r24, r20
     6cc:	8f 77       	andi	r24, 0x7F	; 127
     6ce:	90 70       	andi	r25, 0x00	; 0
     6d0:	a0 70       	andi	r26, 0x00	; 0
     6d2:	b0 70       	andi	r27, 0x00	; 0
     6d4:	80 34       	cpi	r24, 0x40	; 64
     6d6:	91 05       	cpc	r25, r1
     6d8:	a1 05       	cpc	r26, r1
     6da:	b1 05       	cpc	r27, r1
     6dc:	61 f4       	brne	.+24     	; 0x6f6 <__mulsf3+0x1ce>
     6de:	47 fd       	sbrc	r20, 7
     6e0:	0a c0       	rjmp	.+20     	; 0x6f6 <__mulsf3+0x1ce>
     6e2:	e1 14       	cp	r14, r1
     6e4:	f1 04       	cpc	r15, r1
     6e6:	01 05       	cpc	r16, r1
     6e8:	11 05       	cpc	r17, r1
     6ea:	29 f0       	breq	.+10     	; 0x6f6 <__mulsf3+0x1ce>
     6ec:	40 5c       	subi	r20, 0xC0	; 192
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	6f 4f       	sbci	r22, 0xFF	; 255
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	40 78       	andi	r20, 0x80	; 128
     6f6:	1a 8e       	std	Y+26, r1	; 0x1a
     6f8:	fe 17       	cp	r31, r30
     6fa:	11 f0       	breq	.+4      	; 0x700 <__mulsf3+0x1d8>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	8a 8f       	std	Y+26, r24	; 0x1a
     700:	4d 8f       	std	Y+29, r20	; 0x1d
     702:	5e 8f       	std	Y+30, r21	; 0x1e
     704:	6f 8f       	std	Y+31, r22	; 0x1f
     706:	78 a3       	std	Y+32, r23	; 0x20
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	89 8f       	std	Y+25, r24	; 0x19
     70c:	ce 01       	movw	r24, r28
     70e:	49 96       	adiw	r24, 0x19	; 25
     710:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__pack_f>
     714:	a0 96       	adiw	r28, 0x20	; 32
     716:	e2 e1       	ldi	r30, 0x12	; 18
     718:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__epilogue_restores__>

0000071c <__gtsf2>:
     71c:	a8 e1       	ldi	r26, 0x18	; 24
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e4 e9       	ldi	r30, 0x94	; 148
     722:	f3 e0       	ldi	r31, 0x03	; 3
     724:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__+0x18>
     728:	69 83       	std	Y+1, r22	; 0x01
     72a:	7a 83       	std	Y+2, r23	; 0x02
     72c:	8b 83       	std	Y+3, r24	; 0x03
     72e:	9c 83       	std	Y+4, r25	; 0x04
     730:	2d 83       	std	Y+5, r18	; 0x05
     732:	3e 83       	std	Y+6, r19	; 0x06
     734:	4f 83       	std	Y+7, r20	; 0x07
     736:	58 87       	std	Y+8, r21	; 0x08
     738:	89 e0       	ldi	r24, 0x09	; 9
     73a:	e8 2e       	mov	r14, r24
     73c:	f1 2c       	mov	r15, r1
     73e:	ec 0e       	add	r14, r28
     740:	fd 1e       	adc	r15, r29
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	b7 01       	movw	r22, r14
     748:	0e 94 47 05 	call	0xa8e	; 0xa8e <__unpack_f>
     74c:	8e 01       	movw	r16, r28
     74e:	0f 5e       	subi	r16, 0xEF	; 239
     750:	1f 4f       	sbci	r17, 0xFF	; 255
     752:	ce 01       	movw	r24, r28
     754:	05 96       	adiw	r24, 0x05	; 5
     756:	b8 01       	movw	r22, r16
     758:	0e 94 47 05 	call	0xa8e	; 0xa8e <__unpack_f>
     75c:	89 85       	ldd	r24, Y+9	; 0x09
     75e:	82 30       	cpi	r24, 0x02	; 2
     760:	40 f0       	brcs	.+16     	; 0x772 <__gtsf2+0x56>
     762:	89 89       	ldd	r24, Y+17	; 0x11
     764:	82 30       	cpi	r24, 0x02	; 2
     766:	28 f0       	brcs	.+10     	; 0x772 <__gtsf2+0x56>
     768:	c7 01       	movw	r24, r14
     76a:	b8 01       	movw	r22, r16
     76c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__fpcmp_parts_f>
     770:	01 c0       	rjmp	.+2      	; 0x774 <__gtsf2+0x58>
     772:	8f ef       	ldi	r24, 0xFF	; 255
     774:	68 96       	adiw	r28, 0x18	; 24
     776:	e6 e0       	ldi	r30, 0x06	; 6
     778:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__+0x18>

0000077c <__gesf2>:
     77c:	a8 e1       	ldi	r26, 0x18	; 24
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	e4 ec       	ldi	r30, 0xC4	; 196
     782:	f3 e0       	ldi	r31, 0x03	; 3
     784:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__+0x18>
     788:	69 83       	std	Y+1, r22	; 0x01
     78a:	7a 83       	std	Y+2, r23	; 0x02
     78c:	8b 83       	std	Y+3, r24	; 0x03
     78e:	9c 83       	std	Y+4, r25	; 0x04
     790:	2d 83       	std	Y+5, r18	; 0x05
     792:	3e 83       	std	Y+6, r19	; 0x06
     794:	4f 83       	std	Y+7, r20	; 0x07
     796:	58 87       	std	Y+8, r21	; 0x08
     798:	89 e0       	ldi	r24, 0x09	; 9
     79a:	e8 2e       	mov	r14, r24
     79c:	f1 2c       	mov	r15, r1
     79e:	ec 0e       	add	r14, r28
     7a0:	fd 1e       	adc	r15, r29
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	b7 01       	movw	r22, r14
     7a8:	0e 94 47 05 	call	0xa8e	; 0xa8e <__unpack_f>
     7ac:	8e 01       	movw	r16, r28
     7ae:	0f 5e       	subi	r16, 0xEF	; 239
     7b0:	1f 4f       	sbci	r17, 0xFF	; 255
     7b2:	ce 01       	movw	r24, r28
     7b4:	05 96       	adiw	r24, 0x05	; 5
     7b6:	b8 01       	movw	r22, r16
     7b8:	0e 94 47 05 	call	0xa8e	; 0xa8e <__unpack_f>
     7bc:	89 85       	ldd	r24, Y+9	; 0x09
     7be:	82 30       	cpi	r24, 0x02	; 2
     7c0:	40 f0       	brcs	.+16     	; 0x7d2 <__gesf2+0x56>
     7c2:	89 89       	ldd	r24, Y+17	; 0x11
     7c4:	82 30       	cpi	r24, 0x02	; 2
     7c6:	28 f0       	brcs	.+10     	; 0x7d2 <__gesf2+0x56>
     7c8:	c7 01       	movw	r24, r14
     7ca:	b8 01       	movw	r22, r16
     7cc:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__fpcmp_parts_f>
     7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <__gesf2+0x58>
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	68 96       	adiw	r28, 0x18	; 24
     7d6:	e6 e0       	ldi	r30, 0x06	; 6
     7d8:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__+0x18>

000007dc <__ltsf2>:
     7dc:	a8 e1       	ldi	r26, 0x18	; 24
     7de:	b0 e0       	ldi	r27, 0x00	; 0
     7e0:	e4 ef       	ldi	r30, 0xF4	; 244
     7e2:	f3 e0       	ldi	r31, 0x03	; 3
     7e4:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__+0x18>
     7e8:	69 83       	std	Y+1, r22	; 0x01
     7ea:	7a 83       	std	Y+2, r23	; 0x02
     7ec:	8b 83       	std	Y+3, r24	; 0x03
     7ee:	9c 83       	std	Y+4, r25	; 0x04
     7f0:	2d 83       	std	Y+5, r18	; 0x05
     7f2:	3e 83       	std	Y+6, r19	; 0x06
     7f4:	4f 83       	std	Y+7, r20	; 0x07
     7f6:	58 87       	std	Y+8, r21	; 0x08
     7f8:	89 e0       	ldi	r24, 0x09	; 9
     7fa:	e8 2e       	mov	r14, r24
     7fc:	f1 2c       	mov	r15, r1
     7fe:	ec 0e       	add	r14, r28
     800:	fd 1e       	adc	r15, r29
     802:	ce 01       	movw	r24, r28
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	b7 01       	movw	r22, r14
     808:	0e 94 47 05 	call	0xa8e	; 0xa8e <__unpack_f>
     80c:	8e 01       	movw	r16, r28
     80e:	0f 5e       	subi	r16, 0xEF	; 239
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	ce 01       	movw	r24, r28
     814:	05 96       	adiw	r24, 0x05	; 5
     816:	b8 01       	movw	r22, r16
     818:	0e 94 47 05 	call	0xa8e	; 0xa8e <__unpack_f>
     81c:	89 85       	ldd	r24, Y+9	; 0x09
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	40 f0       	brcs	.+16     	; 0x832 <__ltsf2+0x56>
     822:	89 89       	ldd	r24, Y+17	; 0x11
     824:	82 30       	cpi	r24, 0x02	; 2
     826:	28 f0       	brcs	.+10     	; 0x832 <__ltsf2+0x56>
     828:	c7 01       	movw	r24, r14
     82a:	b8 01       	movw	r22, r16
     82c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__fpcmp_parts_f>
     830:	01 c0       	rjmp	.+2      	; 0x834 <__ltsf2+0x58>
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	68 96       	adiw	r28, 0x18	; 24
     836:	e6 e0       	ldi	r30, 0x06	; 6
     838:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__+0x18>

0000083c <__fixsfsi>:
     83c:	ac e0       	ldi	r26, 0x0C	; 12
     83e:	b0 e0       	ldi	r27, 0x00	; 0
     840:	e4 e2       	ldi	r30, 0x24	; 36
     842:	f4 e0       	ldi	r31, 0x04	; 4
     844:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__prologue_saves__+0x20>
     848:	69 83       	std	Y+1, r22	; 0x01
     84a:	7a 83       	std	Y+2, r23	; 0x02
     84c:	8b 83       	std	Y+3, r24	; 0x03
     84e:	9c 83       	std	Y+4, r25	; 0x04
     850:	ce 01       	movw	r24, r28
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	be 01       	movw	r22, r28
     856:	6b 5f       	subi	r22, 0xFB	; 251
     858:	7f 4f       	sbci	r23, 0xFF	; 255
     85a:	0e 94 47 05 	call	0xa8e	; 0xa8e <__unpack_f>
     85e:	8d 81       	ldd	r24, Y+5	; 0x05
     860:	82 30       	cpi	r24, 0x02	; 2
     862:	61 f1       	breq	.+88     	; 0x8bc <__stack+0x5d>
     864:	82 30       	cpi	r24, 0x02	; 2
     866:	50 f1       	brcs	.+84     	; 0x8bc <__stack+0x5d>
     868:	84 30       	cpi	r24, 0x04	; 4
     86a:	21 f4       	brne	.+8      	; 0x874 <__stack+0x15>
     86c:	8e 81       	ldd	r24, Y+6	; 0x06
     86e:	88 23       	and	r24, r24
     870:	51 f1       	breq	.+84     	; 0x8c6 <__stack+0x67>
     872:	2e c0       	rjmp	.+92     	; 0x8d0 <__stack+0x71>
     874:	2f 81       	ldd	r18, Y+7	; 0x07
     876:	38 85       	ldd	r19, Y+8	; 0x08
     878:	37 fd       	sbrc	r19, 7
     87a:	20 c0       	rjmp	.+64     	; 0x8bc <__stack+0x5d>
     87c:	6e 81       	ldd	r22, Y+6	; 0x06
     87e:	2f 31       	cpi	r18, 0x1F	; 31
     880:	31 05       	cpc	r19, r1
     882:	1c f0       	brlt	.+6      	; 0x88a <__stack+0x2b>
     884:	66 23       	and	r22, r22
     886:	f9 f0       	breq	.+62     	; 0x8c6 <__stack+0x67>
     888:	23 c0       	rjmp	.+70     	; 0x8d0 <__stack+0x71>
     88a:	8e e1       	ldi	r24, 0x1E	; 30
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	82 1b       	sub	r24, r18
     890:	93 0b       	sbc	r25, r19
     892:	29 85       	ldd	r18, Y+9	; 0x09
     894:	3a 85       	ldd	r19, Y+10	; 0x0a
     896:	4b 85       	ldd	r20, Y+11	; 0x0b
     898:	5c 85       	ldd	r21, Y+12	; 0x0c
     89a:	04 c0       	rjmp	.+8      	; 0x8a4 <__stack+0x45>
     89c:	56 95       	lsr	r21
     89e:	47 95       	ror	r20
     8a0:	37 95       	ror	r19
     8a2:	27 95       	ror	r18
     8a4:	8a 95       	dec	r24
     8a6:	d2 f7       	brpl	.-12     	; 0x89c <__stack+0x3d>
     8a8:	66 23       	and	r22, r22
     8aa:	b1 f0       	breq	.+44     	; 0x8d8 <__stack+0x79>
     8ac:	50 95       	com	r21
     8ae:	40 95       	com	r20
     8b0:	30 95       	com	r19
     8b2:	21 95       	neg	r18
     8b4:	3f 4f       	sbci	r19, 0xFF	; 255
     8b6:	4f 4f       	sbci	r20, 0xFF	; 255
     8b8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ba:	0e c0       	rjmp	.+28     	; 0x8d8 <__stack+0x79>
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	09 c0       	rjmp	.+18     	; 0x8d8 <__stack+0x79>
     8c6:	2f ef       	ldi	r18, 0xFF	; 255
     8c8:	3f ef       	ldi	r19, 0xFF	; 255
     8ca:	4f ef       	ldi	r20, 0xFF	; 255
     8cc:	5f e7       	ldi	r21, 0x7F	; 127
     8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <__stack+0x79>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	50 e8       	ldi	r21, 0x80	; 128
     8d8:	b9 01       	movw	r22, r18
     8da:	ca 01       	movw	r24, r20
     8dc:	2c 96       	adiw	r28, 0x0c	; 12
     8de:	e2 e0       	ldi	r30, 0x02	; 2
     8e0:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__epilogue_restores__+0x20>

000008e4 <__pack_f>:
     8e4:	df 92       	push	r13
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	fc 01       	movw	r30, r24
     8f0:	e4 80       	ldd	r14, Z+4	; 0x04
     8f2:	f5 80       	ldd	r15, Z+5	; 0x05
     8f4:	06 81       	ldd	r16, Z+6	; 0x06
     8f6:	17 81       	ldd	r17, Z+7	; 0x07
     8f8:	d1 80       	ldd	r13, Z+1	; 0x01
     8fa:	80 81       	ld	r24, Z
     8fc:	82 30       	cpi	r24, 0x02	; 2
     8fe:	48 f4       	brcc	.+18     	; 0x912 <__pack_f+0x2e>
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	a0 e1       	ldi	r26, 0x10	; 16
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	e8 2a       	or	r14, r24
     90a:	f9 2a       	or	r15, r25
     90c:	0a 2b       	or	r16, r26
     90e:	1b 2b       	or	r17, r27
     910:	a5 c0       	rjmp	.+330    	; 0xa5c <__pack_f+0x178>
     912:	84 30       	cpi	r24, 0x04	; 4
     914:	09 f4       	brne	.+2      	; 0x918 <__pack_f+0x34>
     916:	9f c0       	rjmp	.+318    	; 0xa56 <__pack_f+0x172>
     918:	82 30       	cpi	r24, 0x02	; 2
     91a:	21 f4       	brne	.+8      	; 0x924 <__pack_f+0x40>
     91c:	ee 24       	eor	r14, r14
     91e:	ff 24       	eor	r15, r15
     920:	87 01       	movw	r16, r14
     922:	05 c0       	rjmp	.+10     	; 0x92e <__pack_f+0x4a>
     924:	e1 14       	cp	r14, r1
     926:	f1 04       	cpc	r15, r1
     928:	01 05       	cpc	r16, r1
     92a:	11 05       	cpc	r17, r1
     92c:	19 f4       	brne	.+6      	; 0x934 <__pack_f+0x50>
     92e:	e0 e0       	ldi	r30, 0x00	; 0
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	96 c0       	rjmp	.+300    	; 0xa60 <__pack_f+0x17c>
     934:	62 81       	ldd	r22, Z+2	; 0x02
     936:	73 81       	ldd	r23, Z+3	; 0x03
     938:	9f ef       	ldi	r25, 0xFF	; 255
     93a:	62 38       	cpi	r22, 0x82	; 130
     93c:	79 07       	cpc	r23, r25
     93e:	0c f0       	brlt	.+2      	; 0x942 <__pack_f+0x5e>
     940:	5b c0       	rjmp	.+182    	; 0x9f8 <__pack_f+0x114>
     942:	22 e8       	ldi	r18, 0x82	; 130
     944:	3f ef       	ldi	r19, 0xFF	; 255
     946:	26 1b       	sub	r18, r22
     948:	37 0b       	sbc	r19, r23
     94a:	2a 31       	cpi	r18, 0x1A	; 26
     94c:	31 05       	cpc	r19, r1
     94e:	2c f0       	brlt	.+10     	; 0x95a <__pack_f+0x76>
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	2a c0       	rjmp	.+84     	; 0x9ae <__pack_f+0xca>
     95a:	b8 01       	movw	r22, r16
     95c:	a7 01       	movw	r20, r14
     95e:	02 2e       	mov	r0, r18
     960:	04 c0       	rjmp	.+8      	; 0x96a <__pack_f+0x86>
     962:	76 95       	lsr	r23
     964:	67 95       	ror	r22
     966:	57 95       	ror	r21
     968:	47 95       	ror	r20
     96a:	0a 94       	dec	r0
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__pack_f+0x7e>
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e0       	ldi	r26, 0x00	; 0
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	04 c0       	rjmp	.+8      	; 0x980 <__pack_f+0x9c>
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	aa 1f       	adc	r26, r26
     97e:	bb 1f       	adc	r27, r27
     980:	2a 95       	dec	r18
     982:	d2 f7       	brpl	.-12     	; 0x978 <__pack_f+0x94>
     984:	01 97       	sbiw	r24, 0x01	; 1
     986:	a1 09       	sbc	r26, r1
     988:	b1 09       	sbc	r27, r1
     98a:	8e 21       	and	r24, r14
     98c:	9f 21       	and	r25, r15
     98e:	a0 23       	and	r26, r16
     990:	b1 23       	and	r27, r17
     992:	00 97       	sbiw	r24, 0x00	; 0
     994:	a1 05       	cpc	r26, r1
     996:	b1 05       	cpc	r27, r1
     998:	21 f0       	breq	.+8      	; 0x9a2 <__pack_f+0xbe>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	a0 e0       	ldi	r26, 0x00	; 0
     9a0:	b0 e0       	ldi	r27, 0x00	; 0
     9a2:	9a 01       	movw	r18, r20
     9a4:	ab 01       	movw	r20, r22
     9a6:	28 2b       	or	r18, r24
     9a8:	39 2b       	or	r19, r25
     9aa:	4a 2b       	or	r20, r26
     9ac:	5b 2b       	or	r21, r27
     9ae:	da 01       	movw	r26, r20
     9b0:	c9 01       	movw	r24, r18
     9b2:	8f 77       	andi	r24, 0x7F	; 127
     9b4:	90 70       	andi	r25, 0x00	; 0
     9b6:	a0 70       	andi	r26, 0x00	; 0
     9b8:	b0 70       	andi	r27, 0x00	; 0
     9ba:	80 34       	cpi	r24, 0x40	; 64
     9bc:	91 05       	cpc	r25, r1
     9be:	a1 05       	cpc	r26, r1
     9c0:	b1 05       	cpc	r27, r1
     9c2:	39 f4       	brne	.+14     	; 0x9d2 <__pack_f+0xee>
     9c4:	27 ff       	sbrs	r18, 7
     9c6:	09 c0       	rjmp	.+18     	; 0x9da <__pack_f+0xf6>
     9c8:	20 5c       	subi	r18, 0xC0	; 192
     9ca:	3f 4f       	sbci	r19, 0xFF	; 255
     9cc:	4f 4f       	sbci	r20, 0xFF	; 255
     9ce:	5f 4f       	sbci	r21, 0xFF	; 255
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0xf6>
     9d2:	21 5c       	subi	r18, 0xC1	; 193
     9d4:	3f 4f       	sbci	r19, 0xFF	; 255
     9d6:	4f 4f       	sbci	r20, 0xFF	; 255
     9d8:	5f 4f       	sbci	r21, 0xFF	; 255
     9da:	e0 e0       	ldi	r30, 0x00	; 0
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	20 30       	cpi	r18, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	3a 07       	cpc	r19, r26
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	4a 07       	cpc	r20, r26
     9e8:	a0 e4       	ldi	r26, 0x40	; 64
     9ea:	5a 07       	cpc	r21, r26
     9ec:	10 f0       	brcs	.+4      	; 0x9f2 <__pack_f+0x10e>
     9ee:	e1 e0       	ldi	r30, 0x01	; 1
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	79 01       	movw	r14, r18
     9f4:	8a 01       	movw	r16, r20
     9f6:	27 c0       	rjmp	.+78     	; 0xa46 <__pack_f+0x162>
     9f8:	60 38       	cpi	r22, 0x80	; 128
     9fa:	71 05       	cpc	r23, r1
     9fc:	64 f5       	brge	.+88     	; 0xa56 <__pack_f+0x172>
     9fe:	fb 01       	movw	r30, r22
     a00:	e1 58       	subi	r30, 0x81	; 129
     a02:	ff 4f       	sbci	r31, 0xFF	; 255
     a04:	d8 01       	movw	r26, r16
     a06:	c7 01       	movw	r24, r14
     a08:	8f 77       	andi	r24, 0x7F	; 127
     a0a:	90 70       	andi	r25, 0x00	; 0
     a0c:	a0 70       	andi	r26, 0x00	; 0
     a0e:	b0 70       	andi	r27, 0x00	; 0
     a10:	80 34       	cpi	r24, 0x40	; 64
     a12:	91 05       	cpc	r25, r1
     a14:	a1 05       	cpc	r26, r1
     a16:	b1 05       	cpc	r27, r1
     a18:	39 f4       	brne	.+14     	; 0xa28 <__pack_f+0x144>
     a1a:	e7 fe       	sbrs	r14, 7
     a1c:	0d c0       	rjmp	.+26     	; 0xa38 <__pack_f+0x154>
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 e0       	ldi	r26, 0x00	; 0
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	04 c0       	rjmp	.+8      	; 0xa30 <__pack_f+0x14c>
     a28:	8f e3       	ldi	r24, 0x3F	; 63
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	a0 e0       	ldi	r26, 0x00	; 0
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	e8 0e       	add	r14, r24
     a32:	f9 1e       	adc	r15, r25
     a34:	0a 1f       	adc	r16, r26
     a36:	1b 1f       	adc	r17, r27
     a38:	17 ff       	sbrs	r17, 7
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <__pack_f+0x162>
     a3c:	16 95       	lsr	r17
     a3e:	07 95       	ror	r16
     a40:	f7 94       	ror	r15
     a42:	e7 94       	ror	r14
     a44:	31 96       	adiw	r30, 0x01	; 1
     a46:	87 e0       	ldi	r24, 0x07	; 7
     a48:	16 95       	lsr	r17
     a4a:	07 95       	ror	r16
     a4c:	f7 94       	ror	r15
     a4e:	e7 94       	ror	r14
     a50:	8a 95       	dec	r24
     a52:	d1 f7       	brne	.-12     	; 0xa48 <__pack_f+0x164>
     a54:	05 c0       	rjmp	.+10     	; 0xa60 <__pack_f+0x17c>
     a56:	ee 24       	eor	r14, r14
     a58:	ff 24       	eor	r15, r15
     a5a:	87 01       	movw	r16, r14
     a5c:	ef ef       	ldi	r30, 0xFF	; 255
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	6e 2f       	mov	r22, r30
     a62:	67 95       	ror	r22
     a64:	66 27       	eor	r22, r22
     a66:	67 95       	ror	r22
     a68:	90 2f       	mov	r25, r16
     a6a:	9f 77       	andi	r25, 0x7F	; 127
     a6c:	d7 94       	ror	r13
     a6e:	dd 24       	eor	r13, r13
     a70:	d7 94       	ror	r13
     a72:	8e 2f       	mov	r24, r30
     a74:	86 95       	lsr	r24
     a76:	49 2f       	mov	r20, r25
     a78:	46 2b       	or	r20, r22
     a7a:	58 2f       	mov	r21, r24
     a7c:	5d 29       	or	r21, r13
     a7e:	b7 01       	movw	r22, r14
     a80:	ca 01       	movw	r24, r20
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	df 90       	pop	r13
     a8c:	08 95       	ret

00000a8e <__unpack_f>:
     a8e:	fc 01       	movw	r30, r24
     a90:	db 01       	movw	r26, r22
     a92:	40 81       	ld	r20, Z
     a94:	51 81       	ldd	r21, Z+1	; 0x01
     a96:	22 81       	ldd	r18, Z+2	; 0x02
     a98:	62 2f       	mov	r22, r18
     a9a:	6f 77       	andi	r22, 0x7F	; 127
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	22 1f       	adc	r18, r18
     aa0:	22 27       	eor	r18, r18
     aa2:	22 1f       	adc	r18, r18
     aa4:	93 81       	ldd	r25, Z+3	; 0x03
     aa6:	89 2f       	mov	r24, r25
     aa8:	88 0f       	add	r24, r24
     aaa:	82 2b       	or	r24, r18
     aac:	28 2f       	mov	r18, r24
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	99 1f       	adc	r25, r25
     ab2:	99 27       	eor	r25, r25
     ab4:	99 1f       	adc	r25, r25
     ab6:	11 96       	adiw	r26, 0x01	; 1
     ab8:	9c 93       	st	X, r25
     aba:	11 97       	sbiw	r26, 0x01	; 1
     abc:	21 15       	cp	r18, r1
     abe:	31 05       	cpc	r19, r1
     ac0:	a9 f5       	brne	.+106    	; 0xb2c <__unpack_f+0x9e>
     ac2:	41 15       	cp	r20, r1
     ac4:	51 05       	cpc	r21, r1
     ac6:	61 05       	cpc	r22, r1
     ac8:	71 05       	cpc	r23, r1
     aca:	11 f4       	brne	.+4      	; 0xad0 <__unpack_f+0x42>
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	37 c0       	rjmp	.+110    	; 0xb3e <__unpack_f+0xb0>
     ad0:	82 e8       	ldi	r24, 0x82	; 130
     ad2:	9f ef       	ldi	r25, 0xFF	; 255
     ad4:	13 96       	adiw	r26, 0x03	; 3
     ad6:	9c 93       	st	X, r25
     ad8:	8e 93       	st	-X, r24
     ada:	12 97       	sbiw	r26, 0x02	; 2
     adc:	9a 01       	movw	r18, r20
     ade:	ab 01       	movw	r20, r22
     ae0:	67 e0       	ldi	r22, 0x07	; 7
     ae2:	22 0f       	add	r18, r18
     ae4:	33 1f       	adc	r19, r19
     ae6:	44 1f       	adc	r20, r20
     ae8:	55 1f       	adc	r21, r21
     aea:	6a 95       	dec	r22
     aec:	d1 f7       	brne	.-12     	; 0xae2 <__unpack_f+0x54>
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	8c 93       	st	X, r24
     af2:	0d c0       	rjmp	.+26     	; 0xb0e <__unpack_f+0x80>
     af4:	22 0f       	add	r18, r18
     af6:	33 1f       	adc	r19, r19
     af8:	44 1f       	adc	r20, r20
     afa:	55 1f       	adc	r21, r21
     afc:	12 96       	adiw	r26, 0x02	; 2
     afe:	8d 91       	ld	r24, X+
     b00:	9c 91       	ld	r25, X
     b02:	13 97       	sbiw	r26, 0x03	; 3
     b04:	01 97       	sbiw	r24, 0x01	; 1
     b06:	13 96       	adiw	r26, 0x03	; 3
     b08:	9c 93       	st	X, r25
     b0a:	8e 93       	st	-X, r24
     b0c:	12 97       	sbiw	r26, 0x02	; 2
     b0e:	20 30       	cpi	r18, 0x00	; 0
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	38 07       	cpc	r19, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	48 07       	cpc	r20, r24
     b18:	80 e4       	ldi	r24, 0x40	; 64
     b1a:	58 07       	cpc	r21, r24
     b1c:	58 f3       	brcs	.-42     	; 0xaf4 <__unpack_f+0x66>
     b1e:	14 96       	adiw	r26, 0x04	; 4
     b20:	2d 93       	st	X+, r18
     b22:	3d 93       	st	X+, r19
     b24:	4d 93       	st	X+, r20
     b26:	5c 93       	st	X, r21
     b28:	17 97       	sbiw	r26, 0x07	; 7
     b2a:	08 95       	ret
     b2c:	2f 3f       	cpi	r18, 0xFF	; 255
     b2e:	31 05       	cpc	r19, r1
     b30:	79 f4       	brne	.+30     	; 0xb50 <__unpack_f+0xc2>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	19 f4       	brne	.+6      	; 0xb42 <__unpack_f+0xb4>
     b3c:	84 e0       	ldi	r24, 0x04	; 4
     b3e:	8c 93       	st	X, r24
     b40:	08 95       	ret
     b42:	64 ff       	sbrs	r22, 4
     b44:	03 c0       	rjmp	.+6      	; 0xb4c <__unpack_f+0xbe>
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	8c 93       	st	X, r24
     b4a:	12 c0       	rjmp	.+36     	; 0xb70 <__unpack_f+0xe2>
     b4c:	1c 92       	st	X, r1
     b4e:	10 c0       	rjmp	.+32     	; 0xb70 <__unpack_f+0xe2>
     b50:	2f 57       	subi	r18, 0x7F	; 127
     b52:	30 40       	sbci	r19, 0x00	; 0
     b54:	13 96       	adiw	r26, 0x03	; 3
     b56:	3c 93       	st	X, r19
     b58:	2e 93       	st	-X, r18
     b5a:	12 97       	sbiw	r26, 0x02	; 2
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	87 e0       	ldi	r24, 0x07	; 7
     b62:	44 0f       	add	r20, r20
     b64:	55 1f       	adc	r21, r21
     b66:	66 1f       	adc	r22, r22
     b68:	77 1f       	adc	r23, r23
     b6a:	8a 95       	dec	r24
     b6c:	d1 f7       	brne	.-12     	; 0xb62 <__unpack_f+0xd4>
     b6e:	70 64       	ori	r23, 0x40	; 64
     b70:	14 96       	adiw	r26, 0x04	; 4
     b72:	4d 93       	st	X+, r20
     b74:	5d 93       	st	X+, r21
     b76:	6d 93       	st	X+, r22
     b78:	7c 93       	st	X, r23
     b7a:	17 97       	sbiw	r26, 0x07	; 7
     b7c:	08 95       	ret

00000b7e <__fpcmp_parts_f>:
     b7e:	1f 93       	push	r17
     b80:	dc 01       	movw	r26, r24
     b82:	fb 01       	movw	r30, r22
     b84:	9c 91       	ld	r25, X
     b86:	92 30       	cpi	r25, 0x02	; 2
     b88:	08 f4       	brcc	.+2      	; 0xb8c <__fpcmp_parts_f+0xe>
     b8a:	47 c0       	rjmp	.+142    	; 0xc1a <__fpcmp_parts_f+0x9c>
     b8c:	80 81       	ld	r24, Z
     b8e:	82 30       	cpi	r24, 0x02	; 2
     b90:	08 f4       	brcc	.+2      	; 0xb94 <__fpcmp_parts_f+0x16>
     b92:	43 c0       	rjmp	.+134    	; 0xc1a <__fpcmp_parts_f+0x9c>
     b94:	94 30       	cpi	r25, 0x04	; 4
     b96:	51 f4       	brne	.+20     	; 0xbac <__fpcmp_parts_f+0x2e>
     b98:	11 96       	adiw	r26, 0x01	; 1
     b9a:	1c 91       	ld	r17, X
     b9c:	84 30       	cpi	r24, 0x04	; 4
     b9e:	99 f5       	brne	.+102    	; 0xc06 <__fpcmp_parts_f+0x88>
     ba0:	81 81       	ldd	r24, Z+1	; 0x01
     ba2:	68 2f       	mov	r22, r24
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	61 1b       	sub	r22, r17
     ba8:	71 09       	sbc	r23, r1
     baa:	3f c0       	rjmp	.+126    	; 0xc2a <__fpcmp_parts_f+0xac>
     bac:	84 30       	cpi	r24, 0x04	; 4
     bae:	21 f0       	breq	.+8      	; 0xbb8 <__fpcmp_parts_f+0x3a>
     bb0:	92 30       	cpi	r25, 0x02	; 2
     bb2:	31 f4       	brne	.+12     	; 0xbc0 <__fpcmp_parts_f+0x42>
     bb4:	82 30       	cpi	r24, 0x02	; 2
     bb6:	b9 f1       	breq	.+110    	; 0xc26 <__fpcmp_parts_f+0xa8>
     bb8:	81 81       	ldd	r24, Z+1	; 0x01
     bba:	88 23       	and	r24, r24
     bbc:	89 f1       	breq	.+98     	; 0xc20 <__fpcmp_parts_f+0xa2>
     bbe:	2d c0       	rjmp	.+90     	; 0xc1a <__fpcmp_parts_f+0x9c>
     bc0:	11 96       	adiw	r26, 0x01	; 1
     bc2:	1c 91       	ld	r17, X
     bc4:	11 97       	sbiw	r26, 0x01	; 1
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	f1 f0       	breq	.+60     	; 0xc06 <__fpcmp_parts_f+0x88>
     bca:	81 81       	ldd	r24, Z+1	; 0x01
     bcc:	18 17       	cp	r17, r24
     bce:	d9 f4       	brne	.+54     	; 0xc06 <__fpcmp_parts_f+0x88>
     bd0:	12 96       	adiw	r26, 0x02	; 2
     bd2:	2d 91       	ld	r18, X+
     bd4:	3c 91       	ld	r19, X
     bd6:	13 97       	sbiw	r26, 0x03	; 3
     bd8:	82 81       	ldd	r24, Z+2	; 0x02
     bda:	93 81       	ldd	r25, Z+3	; 0x03
     bdc:	82 17       	cp	r24, r18
     bde:	93 07       	cpc	r25, r19
     be0:	94 f0       	brlt	.+36     	; 0xc06 <__fpcmp_parts_f+0x88>
     be2:	28 17       	cp	r18, r24
     be4:	39 07       	cpc	r19, r25
     be6:	bc f0       	brlt	.+46     	; 0xc16 <__fpcmp_parts_f+0x98>
     be8:	14 96       	adiw	r26, 0x04	; 4
     bea:	8d 91       	ld	r24, X+
     bec:	9d 91       	ld	r25, X+
     bee:	0d 90       	ld	r0, X+
     bf0:	bc 91       	ld	r27, X
     bf2:	a0 2d       	mov	r26, r0
     bf4:	24 81       	ldd	r18, Z+4	; 0x04
     bf6:	35 81       	ldd	r19, Z+5	; 0x05
     bf8:	46 81       	ldd	r20, Z+6	; 0x06
     bfa:	57 81       	ldd	r21, Z+7	; 0x07
     bfc:	28 17       	cp	r18, r24
     bfe:	39 07       	cpc	r19, r25
     c00:	4a 07       	cpc	r20, r26
     c02:	5b 07       	cpc	r21, r27
     c04:	18 f4       	brcc	.+6      	; 0xc0c <__fpcmp_parts_f+0x8e>
     c06:	11 23       	and	r17, r17
     c08:	41 f0       	breq	.+16     	; 0xc1a <__fpcmp_parts_f+0x9c>
     c0a:	0a c0       	rjmp	.+20     	; 0xc20 <__fpcmp_parts_f+0xa2>
     c0c:	82 17       	cp	r24, r18
     c0e:	93 07       	cpc	r25, r19
     c10:	a4 07       	cpc	r26, r20
     c12:	b5 07       	cpc	r27, r21
     c14:	40 f4       	brcc	.+16     	; 0xc26 <__fpcmp_parts_f+0xa8>
     c16:	11 23       	and	r17, r17
     c18:	19 f0       	breq	.+6      	; 0xc20 <__fpcmp_parts_f+0xa2>
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	05 c0       	rjmp	.+10     	; 0xc2a <__fpcmp_parts_f+0xac>
     c20:	6f ef       	ldi	r22, 0xFF	; 255
     c22:	7f ef       	ldi	r23, 0xFF	; 255
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <__fpcmp_parts_f+0xac>
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	cb 01       	movw	r24, r22
     c2c:	1f 91       	pop	r17
     c2e:	08 95       	ret

00000c30 <__vector_13>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(USART_RXC_vect){
     c30:	1f 92       	push	r1
     c32:	0f 92       	push	r0
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	0f 92       	push	r0
     c38:	11 24       	eor	r1, r1
     c3a:	8f 93       	push	r24
     c3c:	ef 93       	push	r30
     c3e:	ff 93       	push	r31
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
	g_uartRcvData = UDR;
     c48:	ec e2       	ldi	r30, 0x2C	; 44
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	80 93 30 01 	sts	0x0130, r24
}
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	8f 91       	pop	r24
     c5c:	0f 90       	pop	r0
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	0f 90       	pop	r0
     c62:	1f 90       	pop	r1
     c64:	18 95       	reti

00000c66 <UART_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void UART_init(){
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <UART_init+0x6>
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62

	uint16 ubrr_value = 0;
     c70:	1a 82       	std	Y+2, r1	; 0x02
     c72:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRA, U2X);		/* : Double the USART Transmission Speed */
     c74:	ab e2       	ldi	r26, 0x2B	; 43
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	eb e2       	ldi	r30, 0x2B	; 43
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	82 60       	ori	r24, 0x02	; 2
     c80:	8c 93       	st	X, r24

	SET_BIT(UCSRB, RXCIE);		/* RX Complete Interrupt Enable */
     c82:	aa e2       	ldi	r26, 0x2A	; 42
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	ea e2       	ldi	r30, 0x2A	; 42
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	80 68       	ori	r24, 0x80	; 128
     c8e:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);		/* Transmitter Enable*/
     c90:	aa e2       	ldi	r26, 0x2A	; 42
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	ea e2       	ldi	r30, 0x2A	; 42
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	88 60       	ori	r24, 0x08	; 8
     c9c:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);		/* Receiver Enable */
     c9e:	aa e2       	ldi	r26, 0x2A	; 42
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	ea e2       	ldi	r30, 0x2A	; 42
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	80 61       	ori	r24, 0x10	; 16
     caa:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC, UMSEL);	/* USART Mode Select 0 -> async, 1 -> sync*/
     cac:	a0 e4       	ldi	r26, 0x40	; 64
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e0 e4       	ldi	r30, 0x40	; 64
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	8f 7b       	andi	r24, 0xBF	; 191
     cb8:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);		/* UCSZ1:0: Character Size */
     cba:	a0 e4       	ldi	r26, 0x40	; 64
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e0 e4       	ldi	r30, 0x40	; 64
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	84 60       	ori	r24, 0x04	; 4
     cc6:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);		/* UCSZ1:0: 11 -> 8-bit */
     cc8:	a0 e4       	ldi	r26, 0x40	; 64
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e0 e4       	ldi	r30, 0x40	; 64
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	82 60       	ori	r24, 0x02	; 2
     cd4:	8c 93       	st	X, r24


	ubrr_value = (uint16)(( F_CPU / ( BAUDRATE * 8UL )) - 1 );
     cd6:	87 e6       	ldi	r24, 0x67	; 103
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	9a 83       	std	Y+2, r25	; 0x02
     cdc:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = (ubrr_value >> 8) & (0x0F);
     cde:	e0 e4       	ldi	r30, 0x40	; 64
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	89 2f       	mov	r24, r25
     ce8:	99 27       	eor	r25, r25
     cea:	8f 70       	andi	r24, 0x0F	; 15
     cec:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     cee:	e9 e2       	ldi	r30, 0x29	; 41
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	80 83       	st	Z, r24
}
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <UART_sendCharacter>:

void UART_sendCharacter(uint8 data){
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	0f 92       	push	r0
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
     d0c:	eb e2       	ldi	r30, 0x2B	; 43
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	88 2f       	mov	r24, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	80 72       	andi	r24, 0x20	; 32
     d18:	90 70       	andi	r25, 0x00	; 0
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	b9 f3       	breq	.-18     	; 0xd0c <UART_sendCharacter+0xc>
	UDR = data;
     d1e:	ec e2       	ldi	r30, 0x2C	; 44
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	80 83       	st	Z, r24
}
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <UART_sendArray>:

void UART_sendArray(uint8 *str, uint8 str_size){
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <UART_sendArray+0x6>
     d34:	00 d0       	rcall	.+0      	; 0xd36 <UART_sendArray+0x8>
     d36:	0f 92       	push	r0
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	9c 83       	std	Y+4, r25	; 0x04
     d3e:	8b 83       	std	Y+3, r24	; 0x03
     d40:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < str_size; i++){
     d42:	1a 82       	std	Y+2, r1	; 0x02
     d44:	19 82       	std	Y+1, r1	; 0x01
     d46:	19 c0       	rjmp	.+50     	; 0xd7a <UART_sendArray+0x4c>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
     d48:	eb e2       	ldi	r30, 0x2B	; 43
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	80 72       	andi	r24, 0x20	; 32
     d54:	90 70       	andi	r25, 0x00	; 0
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	b9 f3       	breq	.-18     	; 0xd48 <UART_sendArray+0x1a>
		UDR = str[i];
     d5a:	ac e2       	ldi	r26, 0x2C	; 44
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	29 81       	ldd	r18, Y+1	; 0x01
     d60:	3a 81       	ldd	r19, Y+2	; 0x02
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	fc 01       	movw	r30, r24
     d68:	e2 0f       	add	r30, r18
     d6a:	f3 1f       	adc	r31, r19
     d6c:	80 81       	ld	r24, Z
     d6e:	8c 93       	st	X, r24
	UDR = data;
}

void UART_sendArray(uint8 *str, uint8 str_size){

	for(int i = 0; i < str_size; i++){
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	01 96       	adiw	r24, 0x01	; 1
     d76:	9a 83       	std	Y+2, r25	; 0x02
     d78:	89 83       	std	Y+1, r24	; 0x01
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	82 17       	cp	r24, r18
     d86:	93 07       	cpc	r25, r19
     d88:	fc f2       	brlt	.-66     	; 0xd48 <UART_sendArray+0x1a>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
		UDR = str[i];
	}

}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <UART_rcvCharacter>:

uint8 UART_rcvCharacter(){
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	while( BIT_IS_CLEAR(UCSRA, RXC) ){}
     da2:	eb e2       	ldi	r30, 0x2B	; 43
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	88 23       	and	r24, r24
     daa:	dc f7       	brge	.-10     	; 0xda2 <UART_rcvCharacter+0x8>
	return UDR;
     dac:	ec e2       	ldi	r30, 0x2C	; 44
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <GPIO_setupPinDirection>:
 *******************************************************************************/



void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <GPIO_setupPinDirection+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <GPIO_setupPinDirection+0x8>
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	89 83       	std	Y+1, r24	; 0x01
     dc8:	6a 83       	std	Y+2, r22	; 0x02
     dca:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	88 30       	cpi	r24, 0x08	; 8
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <GPIO_setupPinDirection+0x1c>
     dd2:	d5 c0       	rjmp	.+426    	; 0xf7e <GPIO_setupPinDirection+0x1c6>
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	84 30       	cpi	r24, 0x04	; 4
     dd8:	08 f0       	brcs	.+2      	; 0xddc <GPIO_setupPinDirection+0x24>
     dda:	d1 c0       	rjmp	.+418    	; 0xf7e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	3d 83       	std	Y+5, r19	; 0x05
     de4:	2c 83       	std	Y+4, r18	; 0x04
     de6:	8c 81       	ldd	r24, Y+4	; 0x04
     de8:	9d 81       	ldd	r25, Y+5	; 0x05
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	91 05       	cpc	r25, r1
     dee:	09 f4       	brne	.+2      	; 0xdf2 <GPIO_setupPinDirection+0x3a>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <GPIO_setupPinDirection+0xc0>
     df2:	2c 81       	ldd	r18, Y+4	; 0x04
     df4:	3d 81       	ldd	r19, Y+5	; 0x05
     df6:	22 30       	cpi	r18, 0x02	; 2
     df8:	31 05       	cpc	r19, r1
     dfa:	2c f4       	brge	.+10     	; 0xe06 <GPIO_setupPinDirection+0x4e>
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	9d 81       	ldd	r25, Y+5	; 0x05
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	71 f0       	breq	.+28     	; 0xe20 <GPIO_setupPinDirection+0x68>
     e04:	bc c0       	rjmp	.+376    	; 0xf7e <GPIO_setupPinDirection+0x1c6>
     e06:	2c 81       	ldd	r18, Y+4	; 0x04
     e08:	3d 81       	ldd	r19, Y+5	; 0x05
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	09 f4       	brne	.+2      	; 0xe12 <GPIO_setupPinDirection+0x5a>
     e10:	5f c0       	rjmp	.+190    	; 0xed0 <GPIO_setupPinDirection+0x118>
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	9d 81       	ldd	r25, Y+5	; 0x05
     e16:	83 30       	cpi	r24, 0x03	; 3
     e18:	91 05       	cpc	r25, r1
     e1a:	09 f4       	brne	.+2      	; 0xe1e <GPIO_setupPinDirection+0x66>
     e1c:	85 c0       	rjmp	.+266    	; 0xf28 <GPIO_setupPinDirection+0x170>
     e1e:	af c0       	rjmp	.+350    	; 0xf7e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	a1 f4       	brne	.+40     	; 0xe4e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e26:	aa e3       	ldi	r26, 0x3A	; 58
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ea e3       	ldi	r30, 0x3A	; 58
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <GPIO_setupPinDirection+0x8c>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <GPIO_setupPinDirection+0x88>
     e48:	84 2b       	or	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	98 c0       	rjmp	.+304    	; 0xf7e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e4e:	aa e3       	ldi	r26, 0x3A	; 58
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ea e3       	ldi	r30, 0x3A	; 58
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <GPIO_setupPinDirection+0xb4>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <GPIO_setupPinDirection+0xb0>
     e70:	80 95       	com	r24
     e72:	84 23       	and	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	83 c0       	rjmp	.+262    	; 0xf7e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	a1 f4       	brne	.+40     	; 0xea6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e7e:	a7 e3       	ldi	r26, 0x37	; 55
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e7 e3       	ldi	r30, 0x37	; 55
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <GPIO_setupPinDirection+0xe4>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <GPIO_setupPinDirection+0xe0>
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	6c c0       	rjmp	.+216    	; 0xf7e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     ea6:	a7 e3       	ldi	r26, 0x37	; 55
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e7 e3       	ldi	r30, 0x37	; 55
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <GPIO_setupPinDirection+0x10c>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <GPIO_setupPinDirection+0x108>
     ec8:	80 95       	com	r24
     eca:	84 23       	and	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	57 c0       	rjmp	.+174    	; 0xf7e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	a1 f4       	brne	.+40     	; 0xefe <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     ed6:	a4 e3       	ldi	r26, 0x34	; 52
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e4 e3       	ldi	r30, 0x34	; 52
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <GPIO_setupPinDirection+0x13c>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <GPIO_setupPinDirection+0x138>
     ef8:	84 2b       	or	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	40 c0       	rjmp	.+128    	; 0xf7e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     efe:	a4 e3       	ldi	r26, 0x34	; 52
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e4 e3       	ldi	r30, 0x34	; 52
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <GPIO_setupPinDirection+0x164>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <GPIO_setupPinDirection+0x160>
     f20:	80 95       	com	r24
     f22:	84 23       	and	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	2b c0       	rjmp	.+86     	; 0xf7e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	a1 f4       	brne	.+40     	; 0xf56 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f2e:	a1 e3       	ldi	r26, 0x31	; 49
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e1 e3       	ldi	r30, 0x31	; 49
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <GPIO_setupPinDirection+0x194>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <GPIO_setupPinDirection+0x190>
     f50:	84 2b       	or	r24, r20
     f52:	8c 93       	st	X, r24
     f54:	14 c0       	rjmp	.+40     	; 0xf7e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f56:	a1 e3       	ldi	r26, 0x31	; 49
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e1 e3       	ldi	r30, 0x31	; 49
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <GPIO_setupPinDirection+0x1bc>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <GPIO_setupPinDirection+0x1b8>
     f78:	80 95       	com	r24
     f7a:	84 23       	and	r24, r20
     f7c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <GPIO_writePin+0x6>
     f94:	00 d0       	rcall	.+0      	; 0xf96 <GPIO_writePin+0x8>
     f96:	0f 92       	push	r0
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	6a 83       	std	Y+2, r22	; 0x02
     fa0:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	88 30       	cpi	r24, 0x08	; 8
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <GPIO_writePin+0x1c>
     fa8:	d5 c0       	rjmp	.+426    	; 0x1154 <GPIO_writePin+0x1c6>
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	84 30       	cpi	r24, 0x04	; 4
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <GPIO_writePin+0x24>
     fb0:	d1 c0       	rjmp	.+418    	; 0x1154 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	3d 83       	std	Y+5, r19	; 0x05
     fba:	2c 83       	std	Y+4, r18	; 0x04
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	9d 81       	ldd	r25, Y+5	; 0x05
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	91 05       	cpc	r25, r1
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <GPIO_writePin+0x3a>
     fc6:	43 c0       	rjmp	.+134    	; 0x104e <GPIO_writePin+0xc0>
     fc8:	2c 81       	ldd	r18, Y+4	; 0x04
     fca:	3d 81       	ldd	r19, Y+5	; 0x05
     fcc:	22 30       	cpi	r18, 0x02	; 2
     fce:	31 05       	cpc	r19, r1
     fd0:	2c f4       	brge	.+10     	; 0xfdc <GPIO_writePin+0x4e>
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	9d 81       	ldd	r25, Y+5	; 0x05
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	71 f0       	breq	.+28     	; 0xff6 <GPIO_writePin+0x68>
     fda:	bc c0       	rjmp	.+376    	; 0x1154 <GPIO_writePin+0x1c6>
     fdc:	2c 81       	ldd	r18, Y+4	; 0x04
     fde:	3d 81       	ldd	r19, Y+5	; 0x05
     fe0:	22 30       	cpi	r18, 0x02	; 2
     fe2:	31 05       	cpc	r19, r1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <GPIO_writePin+0x5a>
     fe6:	5f c0       	rjmp	.+190    	; 0x10a6 <GPIO_writePin+0x118>
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <GPIO_writePin+0x66>
     ff2:	85 c0       	rjmp	.+266    	; 0x10fe <GPIO_writePin+0x170>
     ff4:	af c0       	rjmp	.+350    	; 0x1154 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	a1 f4       	brne	.+40     	; 0x1024 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ffc:	ab e3       	ldi	r26, 0x3B	; 59
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	eb e3       	ldi	r30, 0x3B	; 59
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <GPIO_writePin+0x8c>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <GPIO_writePin+0x88>
    101e:	84 2b       	or	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	98 c0       	rjmp	.+304    	; 0x1154 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1024:	ab e3       	ldi	r26, 0x3B	; 59
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	eb e3       	ldi	r30, 0x3B	; 59
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <GPIO_writePin+0xb4>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <GPIO_writePin+0xb0>
    1046:	80 95       	com	r24
    1048:	84 23       	and	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	83 c0       	rjmp	.+262    	; 0x1154 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	a1 f4       	brne	.+40     	; 0x107c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1054:	a8 e3       	ldi	r26, 0x38	; 56
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e8 e3       	ldi	r30, 0x38	; 56
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <GPIO_writePin+0xe4>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <GPIO_writePin+0xe0>
    1076:	84 2b       	or	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	6c c0       	rjmp	.+216    	; 0x1154 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    107c:	a8 e3       	ldi	r26, 0x38	; 56
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e8 e3       	ldi	r30, 0x38	; 56
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <GPIO_writePin+0x10c>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <GPIO_writePin+0x108>
    109e:	80 95       	com	r24
    10a0:	84 23       	and	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	57 c0       	rjmp	.+174    	; 0x1154 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	a1 f4       	brne	.+40     	; 0x10d4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    10ac:	a5 e3       	ldi	r26, 0x35	; 53
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e5 e3       	ldi	r30, 0x35	; 53
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <GPIO_writePin+0x13c>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <GPIO_writePin+0x138>
    10ce:	84 2b       	or	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	40 c0       	rjmp	.+128    	; 0x1154 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    10d4:	a5 e3       	ldi	r26, 0x35	; 53
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e5 e3       	ldi	r30, 0x35	; 53
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <GPIO_writePin+0x164>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <GPIO_writePin+0x160>
    10f6:	80 95       	com	r24
    10f8:	84 23       	and	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	2b c0       	rjmp	.+86     	; 0x1154 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	a1 f4       	brne	.+40     	; 0x112c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1104:	a2 e3       	ldi	r26, 0x32	; 50
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e2 e3       	ldi	r30, 0x32	; 50
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <GPIO_writePin+0x194>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <GPIO_writePin+0x190>
    1126:	84 2b       	or	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	14 c0       	rjmp	.+40     	; 0x1154 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    112c:	a2 e3       	ldi	r26, 0x32	; 50
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e2 e3       	ldi	r30, 0x32	; 50
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <GPIO_writePin+0x1bc>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <GPIO_writePin+0x1b8>
    114e:	80 95       	com	r24
    1150:	84 23       	and	r24, r20
    1152:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	00 d0       	rcall	.+0      	; 0x116a <GPIO_readPin+0x6>
    116a:	00 d0       	rcall	.+0      	; 0x116c <GPIO_readPin+0x8>
    116c:	0f 92       	push	r0
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	8a 83       	std	Y+2, r24	; 0x02
    1174:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1176:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	88 30       	cpi	r24, 0x08	; 8
    117c:	08 f0       	brcs	.+2      	; 0x1180 <GPIO_readPin+0x1c>
    117e:	84 c0       	rjmp	.+264    	; 0x1288 <GPIO_readPin+0x124>
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	84 30       	cpi	r24, 0x04	; 4
    1184:	08 f0       	brcs	.+2      	; 0x1188 <GPIO_readPin+0x24>
    1186:	80 c0       	rjmp	.+256    	; 0x1288 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3d 83       	std	Y+5, r19	; 0x05
    1190:	2c 83       	std	Y+4, r18	; 0x04
    1192:	4c 81       	ldd	r20, Y+4	; 0x04
    1194:	5d 81       	ldd	r21, Y+5	; 0x05
    1196:	41 30       	cpi	r20, 0x01	; 1
    1198:	51 05       	cpc	r21, r1
    119a:	79 f1       	breq	.+94     	; 0x11fa <GPIO_readPin+0x96>
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	82 30       	cpi	r24, 0x02	; 2
    11a2:	91 05       	cpc	r25, r1
    11a4:	34 f4       	brge	.+12     	; 0x11b2 <GPIO_readPin+0x4e>
    11a6:	2c 81       	ldd	r18, Y+4	; 0x04
    11a8:	3d 81       	ldd	r19, Y+5	; 0x05
    11aa:	21 15       	cp	r18, r1
    11ac:	31 05       	cpc	r19, r1
    11ae:	69 f0       	breq	.+26     	; 0x11ca <GPIO_readPin+0x66>
    11b0:	6b c0       	rjmp	.+214    	; 0x1288 <GPIO_readPin+0x124>
    11b2:	4c 81       	ldd	r20, Y+4	; 0x04
    11b4:	5d 81       	ldd	r21, Y+5	; 0x05
    11b6:	42 30       	cpi	r20, 0x02	; 2
    11b8:	51 05       	cpc	r21, r1
    11ba:	b9 f1       	breq	.+110    	; 0x122a <GPIO_readPin+0xc6>
    11bc:	8c 81       	ldd	r24, Y+4	; 0x04
    11be:	9d 81       	ldd	r25, Y+5	; 0x05
    11c0:	83 30       	cpi	r24, 0x03	; 3
    11c2:	91 05       	cpc	r25, r1
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <GPIO_readPin+0x64>
    11c6:	49 c0       	rjmp	.+146    	; 0x125a <GPIO_readPin+0xf6>
    11c8:	5f c0       	rjmp	.+190    	; 0x1288 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    11ca:	e9 e3       	ldi	r30, 0x39	; 57
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a9 01       	movw	r20, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <GPIO_readPin+0x7e>
    11de:	55 95       	asr	r21
    11e0:	47 95       	ror	r20
    11e2:	8a 95       	dec	r24
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <GPIO_readPin+0x7a>
    11e6:	ca 01       	movw	r24, r20
    11e8:	81 70       	andi	r24, 0x01	; 1
    11ea:	90 70       	andi	r25, 0x00	; 0
    11ec:	88 23       	and	r24, r24
    11ee:	19 f0       	breq	.+6      	; 0x11f6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	49 c0       	rjmp	.+146    	; 0x1288 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11f6:	19 82       	std	Y+1, r1	; 0x01
    11f8:	47 c0       	rjmp	.+142    	; 0x1288 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    11fa:	e6 e3       	ldi	r30, 0x36	; 54
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <GPIO_readPin+0xae>
    120e:	55 95       	asr	r21
    1210:	47 95       	ror	r20
    1212:	8a 95       	dec	r24
    1214:	e2 f7       	brpl	.-8      	; 0x120e <GPIO_readPin+0xaa>
    1216:	ca 01       	movw	r24, r20
    1218:	81 70       	andi	r24, 0x01	; 1
    121a:	90 70       	andi	r25, 0x00	; 0
    121c:	88 23       	and	r24, r24
    121e:	19 f0       	breq	.+6      	; 0x1226 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	31 c0       	rjmp	.+98     	; 0x1288 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1226:	19 82       	std	Y+1, r1	; 0x01
    1228:	2f c0       	rjmp	.+94     	; 0x1288 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    122a:	e3 e3       	ldi	r30, 0x33	; 51
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a9 01       	movw	r20, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <GPIO_readPin+0xde>
    123e:	55 95       	asr	r21
    1240:	47 95       	ror	r20
    1242:	8a 95       	dec	r24
    1244:	e2 f7       	brpl	.-8      	; 0x123e <GPIO_readPin+0xda>
    1246:	ca 01       	movw	r24, r20
    1248:	81 70       	andi	r24, 0x01	; 1
    124a:	90 70       	andi	r25, 0x00	; 0
    124c:	88 23       	and	r24, r24
    124e:	19 f0       	breq	.+6      	; 0x1256 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	19 c0       	rjmp	.+50     	; 0x1288 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1256:	19 82       	std	Y+1, r1	; 0x01
    1258:	17 c0       	rjmp	.+46     	; 0x1288 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    125a:	e0 e3       	ldi	r30, 0x30	; 48
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a9 01       	movw	r20, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <GPIO_readPin+0x10e>
    126e:	55 95       	asr	r21
    1270:	47 95       	ror	r20
    1272:	8a 95       	dec	r24
    1274:	e2 f7       	brpl	.-8      	; 0x126e <GPIO_readPin+0x10a>
    1276:	ca 01       	movw	r24, r20
    1278:	81 70       	andi	r24, 0x01	; 1
    127a:	90 70       	andi	r25, 0x00	; 0
    127c:	88 23       	and	r24, r24
    127e:	19 f0       	breq	.+6      	; 0x1286 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	01 c0       	rjmp	.+2      	; 0x1288 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1286:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1288:	89 81       	ldd	r24, Y+1	; 0x01
}
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <GPIO_togglePin>:
void GPIO_togglePin(uint8 port_num, uint8 pin_num){
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <GPIO_togglePin+0x6>
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <GPIO_togglePin+0x8>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	6a 83       	std	Y+2, r22	; 0x02


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	88 30       	cpi	r24, 0x08	; 8
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <GPIO_togglePin+0x18>
    12b0:	72 c0       	rjmp	.+228    	; 0x1396 <GPIO_togglePin+0xfc>
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	84 30       	cpi	r24, 0x04	; 4
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <GPIO_togglePin+0x20>
    12b8:	6e c0       	rjmp	.+220    	; 0x1396 <GPIO_togglePin+0xfc>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3c 83       	std	Y+4, r19	; 0x04
    12c2:	2b 83       	std	Y+3, r18	; 0x03
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	49 f1       	breq	.+82     	; 0x1320 <GPIO_togglePin+0x86>
    12ce:	2b 81       	ldd	r18, Y+3	; 0x03
    12d0:	3c 81       	ldd	r19, Y+4	; 0x04
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <GPIO_togglePin+0x48>
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	61 f0       	breq	.+24     	; 0x12f8 <GPIO_togglePin+0x5e>
    12e0:	5a c0       	rjmp	.+180    	; 0x1396 <GPIO_togglePin+0xfc>
    12e2:	2b 81       	ldd	r18, Y+3	; 0x03
    12e4:	3c 81       	ldd	r19, Y+4	; 0x04
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	71 f1       	breq	.+92     	; 0x1348 <GPIO_togglePin+0xae>
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	91 05       	cpc	r25, r1
    12f4:	e9 f1       	breq	.+122    	; 0x1370 <GPIO_togglePin+0xd6>
    12f6:	4f c0       	rjmp	.+158    	; 0x1396 <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA, pin_num);
    12f8:	ab e3       	ldi	r26, 0x3B	; 59
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	eb e3       	ldi	r30, 0x3B	; 59
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <GPIO_togglePin+0x7c>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <GPIO_togglePin+0x78>
    131a:	84 27       	eor	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	3b c0       	rjmp	.+118    	; 0x1396 <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB, pin_num);
    1320:	a8 e3       	ldi	r26, 0x38	; 56
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e8 e3       	ldi	r30, 0x38	; 56
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <GPIO_togglePin+0xa4>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <GPIO_togglePin+0xa0>
    1342:	84 27       	eor	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	27 c0       	rjmp	.+78     	; 0x1396 <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC, pin_num);
    1348:	a5 e3       	ldi	r26, 0x35	; 53
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e5 e3       	ldi	r30, 0x35	; 53
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 2e       	mov	r0, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <GPIO_togglePin+0xcc>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	0a 94       	dec	r0
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <GPIO_togglePin+0xc8>
    136a:	84 27       	eor	r24, r20
    136c:	8c 93       	st	X, r24
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD, pin_num);
    1370:	a2 e3       	ldi	r26, 0x32	; 50
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e2 e3       	ldi	r30, 0x32	; 50
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <GPIO_togglePin+0xf4>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <GPIO_togglePin+0xf0>
    1392:	84 27       	eor	r24, r20
    1394:	8c 93       	st	X, r24
			break;
		}
	}
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <GPIO_setupPortDirection+0x6>
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <GPIO_setupPortDirection+0x8>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	84 30       	cpi	r24, 0x04	; 4
    13b8:	90 f5       	brcc	.+100    	; 0x141e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3c 83       	std	Y+4, r19	; 0x04
    13c2:	2b 83       	std	Y+3, r18	; 0x03
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	91 05       	cpc	r25, r1
    13cc:	d1 f0       	breq	.+52     	; 0x1402 <GPIO_setupPortDirection+0x5e>
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	3c 81       	ldd	r19, Y+4	; 0x04
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <GPIO_setupPortDirection+0x3e>
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	9c 81       	ldd	r25, Y+4	; 0x04
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	61 f0       	breq	.+24     	; 0x13f8 <GPIO_setupPortDirection+0x54>
    13e0:	1e c0       	rjmp	.+60     	; 0x141e <GPIO_setupPortDirection+0x7a>
    13e2:	2b 81       	ldd	r18, Y+3	; 0x03
    13e4:	3c 81       	ldd	r19, Y+4	; 0x04
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	81 f0       	breq	.+32     	; 0x140c <GPIO_setupPortDirection+0x68>
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	9c 81       	ldd	r25, Y+4	; 0x04
    13f0:	83 30       	cpi	r24, 0x03	; 3
    13f2:	91 05       	cpc	r25, r1
    13f4:	81 f0       	breq	.+32     	; 0x1416 <GPIO_setupPortDirection+0x72>
    13f6:	13 c0       	rjmp	.+38     	; 0x141e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13f8:	ea e3       	ldi	r30, 0x3A	; 58
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	80 83       	st	Z, r24
    1400:	0e c0       	rjmp	.+28     	; 0x141e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1402:	e7 e3       	ldi	r30, 0x37	; 55
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	80 83       	st	Z, r24
    140a:	09 c0       	rjmp	.+18     	; 0x141e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    140c:	e4 e3       	ldi	r30, 0x34	; 52
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	80 83       	st	Z, r24
    1414:	04 c0       	rjmp	.+8      	; 0x141e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1416:	e1 e3       	ldi	r30, 0x31	; 49
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	80 83       	st	Z, r24
			break;
		}
	}
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value){
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	00 d0       	rcall	.+0      	; 0x1432 <GPIO_writePort+0x6>
    1432:	00 d0       	rcall	.+0      	; 0x1434 <GPIO_writePort+0x8>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	90 f5       	brcc	.+100    	; 0x14a6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3c 83       	std	Y+4, r19	; 0x04
    144a:	2b 83       	std	Y+3, r18	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 05       	cpc	r25, r1
    1454:	d1 f0       	breq	.+52     	; 0x148a <GPIO_writePort+0x5e>
    1456:	2b 81       	ldd	r18, Y+3	; 0x03
    1458:	3c 81       	ldd	r19, Y+4	; 0x04
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	2c f4       	brge	.+10     	; 0x146a <GPIO_writePort+0x3e>
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	61 f0       	breq	.+24     	; 0x1480 <GPIO_writePort+0x54>
    1468:	1e c0       	rjmp	.+60     	; 0x14a6 <GPIO_writePort+0x7a>
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	81 f0       	breq	.+32     	; 0x1494 <GPIO_writePort+0x68>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	91 05       	cpc	r25, r1
    147c:	81 f0       	breq	.+32     	; 0x149e <GPIO_writePort+0x72>
    147e:	13 c0       	rjmp	.+38     	; 0x14a6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1480:	eb e3       	ldi	r30, 0x3B	; 59
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	80 83       	st	Z, r24
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    148a:	e8 e3       	ldi	r30, 0x38	; 56
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	80 83       	st	Z, r24
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1494:	e5 e3       	ldi	r30, 0x35	; 53
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	80 83       	st	Z, r24
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    149e:	e2 e3       	ldi	r30, 0x32	; 50
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	80 83       	st	Z, r24
			break;
		}
	}
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num){
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <GPIO_readPort+0x6>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <GPIO_readPort+0x8>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
    14c2:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	84 30       	cpi	r24, 0x04	; 4
    14c8:	90 f5       	brcc	.+100    	; 0x152e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3c 83       	std	Y+4, r19	; 0x04
    14d2:	2b 83       	std	Y+3, r18	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	d1 f0       	breq	.+52     	; 0x1512 <GPIO_readPort+0x5e>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <GPIO_readPort+0x3e>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	61 f0       	breq	.+24     	; 0x1508 <GPIO_readPort+0x54>
    14f0:	1e c0       	rjmp	.+60     	; 0x152e <GPIO_readPort+0x7a>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	81 f0       	breq	.+32     	; 0x151c <GPIO_readPort+0x68>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	81 f0       	breq	.+32     	; 0x1526 <GPIO_readPort+0x72>
    1506:	13 c0       	rjmp	.+38     	; 0x152e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1508:	e9 e3       	ldi	r30, 0x39	; 57
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	0e c0       	rjmp	.+28     	; 0x152e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1512:	e6 e3       	ldi	r30, 0x36	; 54
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	09 c0       	rjmp	.+18     	; 0x152e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    151c:	e3 e3       	ldi	r30, 0x33	; 51
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	04 c0       	rjmp	.+8      	; 0x152e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1526:	e0 e3       	ldi	r30, 0x30	; 48
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    152e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <LCD_init>:
#include "lcd.h"
#include "../../MCAL/gpio/gpio.h"
#include <util/delay.h>


void LCD_init(){
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	2e 97       	sbiw	r28, 0x0e	; 14
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_RS_PORT, LCD_RS_PIN, PIN_OUTPUT);
    1552:	83 e0       	ldi	r24, 0x03	; 3
    1554:	66 e0       	ldi	r22, 0x06	; 6
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT, LCD_E_PIN, PIN_OUTPUT);
    155c:	83 e0       	ldi	r24, 0x03	; 3
    155e:	67 e0       	ldi	r22, 0x07	; 7
    1560:	41 e0       	ldi	r20, 0x01	; 1
    1562:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <GPIO_setupPinDirection>
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a0 ea       	ldi	r26, 0xA0	; 160
    156c:	b1 e4       	ldi	r27, 0x41	; 65
    156e:	8b 87       	std	Y+11, r24	; 0x0b
    1570:	9c 87       	std	Y+12, r25	; 0x0c
    1572:	ad 87       	std	Y+13, r26	; 0x0d
    1574:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1576:	6b 85       	ldd	r22, Y+11	; 0x0b
    1578:	7c 85       	ldd	r23, Y+12	; 0x0c
    157a:	8d 85       	ldd	r24, Y+13	; 0x0d
    157c:	9e 85       	ldd	r25, Y+14	; 0x0e
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4a ef       	ldi	r20, 0xFA	; 250
    1584:	54 e4       	ldi	r21, 0x44	; 68
    1586:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	8f 83       	std	Y+7, r24	; 0x07
    1590:	98 87       	std	Y+8, r25	; 0x08
    1592:	a9 87       	std	Y+9, r26	; 0x09
    1594:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1596:	6f 81       	ldd	r22, Y+7	; 0x07
    1598:	78 85       	ldd	r23, Y+8	; 0x08
    159a:	89 85       	ldd	r24, Y+9	; 0x09
    159c:	9a 85       	ldd	r25, Y+10	; 0x0a
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ltsf2>
    15aa:	88 23       	and	r24, r24
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <LCD_init+0x7a>
		__ticks = 1;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9e 83       	std	Y+6, r25	; 0x06
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	3f c0       	rjmp	.+126    	; 0x1636 <LCD_init+0xf8>
	else if (__tmp > 65535)
    15b8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ba:	78 85       	ldd	r23, Y+8	; 0x08
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	3f ef       	ldi	r19, 0xFF	; 255
    15c4:	4f e7       	ldi	r20, 0x7F	; 127
    15c6:	57 e4       	ldi	r21, 0x47	; 71
    15c8:	0e 94 8e 03 	call	0x71c	; 0x71c <__gtsf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	4c f5       	brge	.+82     	; 0x1622 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e2       	ldi	r20, 0x20	; 32
    15de:	51 e4       	ldi	r21, 0x41	; 65
    15e0:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	bc 01       	movw	r22, r24
    15ea:	cd 01       	movw	r24, r26
    15ec:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9e 83       	std	Y+6, r25	; 0x06
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	0f c0       	rjmp	.+30     	; 0x1618 <LCD_init+0xda>
    15fa:	88 ec       	ldi	r24, 0xC8	; 200
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	9c 83       	std	Y+4, r25	; 0x04
    1600:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <LCD_init+0xc8>
    160a:	9c 83       	std	Y+4, r25	; 0x04
    160c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	9e 81       	ldd	r25, Y+6	; 0x06
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	69 f7       	brne	.-38     	; 0x15fa <LCD_init+0xbc>
    1620:	14 c0       	rjmp	.+40     	; 0x164a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1622:	6f 81       	ldd	r22, Y+7	; 0x07
    1624:	78 85       	ldd	r23, Y+8	; 0x08
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	9e 83       	std	Y+6, r25	; 0x06
    1634:	8d 83       	std	Y+5, r24	; 0x05
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	9a 81       	ldd	r25, Y+2	; 0x02
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <LCD_init+0x104>
    1646:	9a 83       	std	Y+2, r25	; 0x02
    1648:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	6f ef       	ldi	r22, 0xFF	; 255
    164e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_CMD_2_LINES_8BITS_MODE);
    1652:	88 e3       	ldi	r24, 0x38	; 56
    1654:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CMD_DISPLAY_ON_CURSOR_OF);
    1658:	8c e0       	ldi	r24, 0x0C	; 12
    165a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LCD_sendCommand>
	LCD_sendCommand(LCD_CMD_CLEAR);
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LCD_sendCommand>

}
    1664:	2e 96       	adiw	r28, 0x0e	; 14
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	de bf       	out	0x3e, r29	; 62
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	cd bf       	out	0x3d, r28	; 61
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command){
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	e9 97       	sbiw	r28, 0x39	; 57
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	89 af       	std	Y+57, r24	; 0x39
	//Clear RS
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    168c:	83 e0       	ldi	r24, 0x03	; 3
    168e:	66 e0       	ldi	r22, 0x06	; 6
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	0e 94 c7 07 	call	0xf8e	; 0xf8e <GPIO_writePin>
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	a0 e8       	ldi	r26, 0x80	; 128
    169c:	bf e3       	ldi	r27, 0x3F	; 63
    169e:	8d ab       	std	Y+53, r24	; 0x35
    16a0:	9e ab       	std	Y+54, r25	; 0x36
    16a2:	af ab       	std	Y+55, r26	; 0x37
    16a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a6:	6d a9       	ldd	r22, Y+53	; 0x35
    16a8:	7e a9       	ldd	r23, Y+54	; 0x36
    16aa:	8f a9       	ldd	r24, Y+55	; 0x37
    16ac:	98 ad       	ldd	r25, Y+56	; 0x38
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	4a ef       	ldi	r20, 0xFA	; 250
    16b4:	54 e4       	ldi	r21, 0x44	; 68
    16b6:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	89 ab       	std	Y+49, r24	; 0x31
    16c0:	9a ab       	std	Y+50, r25	; 0x32
    16c2:	ab ab       	std	Y+51, r26	; 0x33
    16c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16c6:	69 a9       	ldd	r22, Y+49	; 0x31
    16c8:	7a a9       	ldd	r23, Y+50	; 0x32
    16ca:	8b a9       	ldd	r24, Y+51	; 0x33
    16cc:	9c a9       	ldd	r25, Y+52	; 0x34
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e8       	ldi	r20, 0x80	; 128
    16d4:	5f e3       	ldi	r21, 0x3F	; 63
    16d6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ltsf2>
    16da:	88 23       	and	r24, r24
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <LCD_sendCommand+0x72>
		__ticks = 1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	98 ab       	std	Y+48, r25	; 0x30
    16e4:	8f a7       	std	Y+47, r24	; 0x2f
    16e6:	3f c0       	rjmp	.+126    	; 0x1766 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    16e8:	69 a9       	ldd	r22, Y+49	; 0x31
    16ea:	7a a9       	ldd	r23, Y+50	; 0x32
    16ec:	8b a9       	ldd	r24, Y+51	; 0x33
    16ee:	9c a9       	ldd	r25, Y+52	; 0x34
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	3f ef       	ldi	r19, 0xFF	; 255
    16f4:	4f e7       	ldi	r20, 0x7F	; 127
    16f6:	57 e4       	ldi	r21, 0x47	; 71
    16f8:	0e 94 8e 03 	call	0x71c	; 0x71c <__gtsf2>
    16fc:	18 16       	cp	r1, r24
    16fe:	4c f5       	brge	.+82     	; 0x1752 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1700:	6d a9       	ldd	r22, Y+53	; 0x35
    1702:	7e a9       	ldd	r23, Y+54	; 0x36
    1704:	8f a9       	ldd	r24, Y+55	; 0x37
    1706:	98 ad       	ldd	r25, Y+56	; 0x38
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e2       	ldi	r20, 0x20	; 32
    170e:	51 e4       	ldi	r21, 0x41	; 65
    1710:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	bc 01       	movw	r22, r24
    171a:	cd 01       	movw	r24, r26
    171c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	98 ab       	std	Y+48, r25	; 0x30
    1726:	8f a7       	std	Y+47, r24	; 0x2f
    1728:	0f c0       	rjmp	.+30     	; 0x1748 <LCD_sendCommand+0xd2>
    172a:	88 ec       	ldi	r24, 0xC8	; 200
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9e a7       	std	Y+46, r25	; 0x2e
    1730:	8d a7       	std	Y+45, r24	; 0x2d
    1732:	8d a5       	ldd	r24, Y+45	; 0x2d
    1734:	9e a5       	ldd	r25, Y+46	; 0x2e
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <LCD_sendCommand+0xc0>
    173a:	9e a7       	std	Y+46, r25	; 0x2e
    173c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1740:	98 a9       	ldd	r25, Y+48	; 0x30
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	98 ab       	std	Y+48, r25	; 0x30
    1746:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1748:	8f a5       	ldd	r24, Y+47	; 0x2f
    174a:	98 a9       	ldd	r25, Y+48	; 0x30
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	69 f7       	brne	.-38     	; 0x172a <LCD_sendCommand+0xb4>
    1750:	14 c0       	rjmp	.+40     	; 0x177a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1752:	69 a9       	ldd	r22, Y+49	; 0x31
    1754:	7a a9       	ldd	r23, Y+50	; 0x32
    1756:	8b a9       	ldd	r24, Y+51	; 0x33
    1758:	9c a9       	ldd	r25, Y+52	; 0x34
    175a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	98 ab       	std	Y+48, r25	; 0x30
    1764:	8f a7       	std	Y+47, r24	; 0x2f
    1766:	8f a5       	ldd	r24, Y+47	; 0x2f
    1768:	98 a9       	ldd	r25, Y+48	; 0x30
    176a:	9c a7       	std	Y+44, r25	; 0x2c
    176c:	8b a7       	std	Y+43, r24	; 0x2b
    176e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1770:	9c a5       	ldd	r25, Y+44	; 0x2c
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <LCD_sendCommand+0xfc>
    1776:	9c a7       	std	Y+44, r25	; 0x2c
    1778:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	//SET E
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    177a:	83 e0       	ldi	r24, 0x03	; 3
    177c:	67 e0       	ldi	r22, 0x07	; 7
    177e:	41 e0       	ldi	r20, 0x01	; 1
    1780:	0e 94 c7 07 	call	0xf8e	; 0xf8e <GPIO_writePin>
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a0 e8       	ldi	r26, 0x80	; 128
    178a:	bf e3       	ldi	r27, 0x3F	; 63
    178c:	8f a3       	std	Y+39, r24	; 0x27
    178e:	98 a7       	std	Y+40, r25	; 0x28
    1790:	a9 a7       	std	Y+41, r26	; 0x29
    1792:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1794:	6f a1       	ldd	r22, Y+39	; 0x27
    1796:	78 a5       	ldd	r23, Y+40	; 0x28
    1798:	89 a5       	ldd	r24, Y+41	; 0x29
    179a:	9a a5       	ldd	r25, Y+42	; 0x2a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	4a ef       	ldi	r20, 0xFA	; 250
    17a2:	54 e4       	ldi	r21, 0x44	; 68
    17a4:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	8b a3       	std	Y+35, r24	; 0x23
    17ae:	9c a3       	std	Y+36, r25	; 0x24
    17b0:	ad a3       	std	Y+37, r26	; 0x25
    17b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17b4:	6b a1       	ldd	r22, Y+35	; 0x23
    17b6:	7c a1       	ldd	r23, Y+36	; 0x24
    17b8:	8d a1       	ldd	r24, Y+37	; 0x25
    17ba:	9e a1       	ldd	r25, Y+38	; 0x26
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e8       	ldi	r20, 0x80	; 128
    17c2:	5f e3       	ldi	r21, 0x3F	; 63
    17c4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ltsf2>
    17c8:	88 23       	and	r24, r24
    17ca:	2c f4       	brge	.+10     	; 0x17d6 <LCD_sendCommand+0x160>
		__ticks = 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	9a a3       	std	Y+34, r25	; 0x22
    17d2:	89 a3       	std	Y+33, r24	; 0x21
    17d4:	3f c0       	rjmp	.+126    	; 0x1854 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    17d6:	6b a1       	ldd	r22, Y+35	; 0x23
    17d8:	7c a1       	ldd	r23, Y+36	; 0x24
    17da:	8d a1       	ldd	r24, Y+37	; 0x25
    17dc:	9e a1       	ldd	r25, Y+38	; 0x26
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	3f ef       	ldi	r19, 0xFF	; 255
    17e2:	4f e7       	ldi	r20, 0x7F	; 127
    17e4:	57 e4       	ldi	r21, 0x47	; 71
    17e6:	0e 94 8e 03 	call	0x71c	; 0x71c <__gtsf2>
    17ea:	18 16       	cp	r1, r24
    17ec:	4c f5       	brge	.+82     	; 0x1840 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ee:	6f a1       	ldd	r22, Y+39	; 0x27
    17f0:	78 a5       	ldd	r23, Y+40	; 0x28
    17f2:	89 a5       	ldd	r24, Y+41	; 0x29
    17f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e2       	ldi	r20, 0x20	; 32
    17fc:	51 e4       	ldi	r21, 0x41	; 65
    17fe:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	bc 01       	movw	r22, r24
    1808:	cd 01       	movw	r24, r26
    180a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	9a a3       	std	Y+34, r25	; 0x22
    1814:	89 a3       	std	Y+33, r24	; 0x21
    1816:	0f c0       	rjmp	.+30     	; 0x1836 <LCD_sendCommand+0x1c0>
    1818:	88 ec       	ldi	r24, 0xC8	; 200
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	98 a3       	std	Y+32, r25	; 0x20
    181e:	8f 8f       	std	Y+31, r24	; 0x1f
    1820:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1822:	98 a1       	ldd	r25, Y+32	; 0x20
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <LCD_sendCommand+0x1ae>
    1828:	98 a3       	std	Y+32, r25	; 0x20
    182a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182c:	89 a1       	ldd	r24, Y+33	; 0x21
    182e:	9a a1       	ldd	r25, Y+34	; 0x22
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	9a a3       	std	Y+34, r25	; 0x22
    1834:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1836:	89 a1       	ldd	r24, Y+33	; 0x21
    1838:	9a a1       	ldd	r25, Y+34	; 0x22
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	69 f7       	brne	.-38     	; 0x1818 <LCD_sendCommand+0x1a2>
    183e:	14 c0       	rjmp	.+40     	; 0x1868 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1840:	6b a1       	ldd	r22, Y+35	; 0x23
    1842:	7c a1       	ldd	r23, Y+36	; 0x24
    1844:	8d a1       	ldd	r24, Y+37	; 0x25
    1846:	9e a1       	ldd	r25, Y+38	; 0x26
    1848:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	9a a3       	std	Y+34, r25	; 0x22
    1852:	89 a3       	std	Y+33, r24	; 0x21
    1854:	89 a1       	ldd	r24, Y+33	; 0x21
    1856:	9a a1       	ldd	r25, Y+34	; 0x22
    1858:	9e 8f       	std	Y+30, r25	; 0x1e
    185a:	8d 8f       	std	Y+29, r24	; 0x1d
    185c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    185e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <LCD_sendCommand+0x1ea>
    1864:	9e 8f       	std	Y+30, r25	; 0x1e
    1866:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);


	GPIO_writePort(LCD_DATA_PORT, command);
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	69 ad       	ldd	r22, Y+57	; 0x39
    186c:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_writePort>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a0 e8       	ldi	r26, 0x80	; 128
    1876:	bf e3       	ldi	r27, 0x3F	; 63
    1878:	89 8f       	std	Y+25, r24	; 0x19
    187a:	9a 8f       	std	Y+26, r25	; 0x1a
    187c:	ab 8f       	std	Y+27, r26	; 0x1b
    187e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1880:	69 8d       	ldd	r22, Y+25	; 0x19
    1882:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1884:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1886:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	4a ef       	ldi	r20, 0xFA	; 250
    188e:	54 e4       	ldi	r21, 0x44	; 68
    1890:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	8d 8b       	std	Y+21, r24	; 0x15
    189a:	9e 8b       	std	Y+22, r25	; 0x16
    189c:	af 8b       	std	Y+23, r26	; 0x17
    189e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18a0:	6d 89       	ldd	r22, Y+21	; 0x15
    18a2:	7e 89       	ldd	r23, Y+22	; 0x16
    18a4:	8f 89       	ldd	r24, Y+23	; 0x17
    18a6:	98 8d       	ldd	r25, Y+24	; 0x18
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	5f e3       	ldi	r21, 0x3F	; 63
    18b0:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ltsf2>
    18b4:	88 23       	and	r24, r24
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <LCD_sendCommand+0x24c>
		__ticks = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9c 8b       	std	Y+20, r25	; 0x14
    18be:	8b 8b       	std	Y+19, r24	; 0x13
    18c0:	3f c0       	rjmp	.+126    	; 0x1940 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    18c2:	6d 89       	ldd	r22, Y+21	; 0x15
    18c4:	7e 89       	ldd	r23, Y+22	; 0x16
    18c6:	8f 89       	ldd	r24, Y+23	; 0x17
    18c8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	3f ef       	ldi	r19, 0xFF	; 255
    18ce:	4f e7       	ldi	r20, 0x7F	; 127
    18d0:	57 e4       	ldi	r21, 0x47	; 71
    18d2:	0e 94 8e 03 	call	0x71c	; 0x71c <__gtsf2>
    18d6:	18 16       	cp	r1, r24
    18d8:	4c f5       	brge	.+82     	; 0x192c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18da:	69 8d       	ldd	r22, Y+25	; 0x19
    18dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e2       	ldi	r20, 0x20	; 32
    18e8:	51 e4       	ldi	r21, 0x41	; 65
    18ea:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9c 8b       	std	Y+20, r25	; 0x14
    1900:	8b 8b       	std	Y+19, r24	; 0x13
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <LCD_sendCommand+0x2ac>
    1904:	88 ec       	ldi	r24, 0xC8	; 200
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9a 8b       	std	Y+18, r25	; 0x12
    190a:	89 8b       	std	Y+17, r24	; 0x11
    190c:	89 89       	ldd	r24, Y+17	; 0x11
    190e:	9a 89       	ldd	r25, Y+18	; 0x12
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <LCD_sendCommand+0x29a>
    1914:	9a 8b       	std	Y+18, r25	; 0x12
    1916:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1918:	8b 89       	ldd	r24, Y+19	; 0x13
    191a:	9c 89       	ldd	r25, Y+20	; 0x14
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	9c 8b       	std	Y+20, r25	; 0x14
    1920:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	69 f7       	brne	.-38     	; 0x1904 <LCD_sendCommand+0x28e>
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	6d 89       	ldd	r22, Y+21	; 0x15
    192e:	7e 89       	ldd	r23, Y+22	; 0x16
    1930:	8f 89       	ldd	r24, Y+23	; 0x17
    1932:	98 8d       	ldd	r25, Y+24	; 0x18
    1934:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9c 8b       	std	Y+20, r25	; 0x14
    193e:	8b 8b       	std	Y+19, r24	; 0x13
    1940:	8b 89       	ldd	r24, Y+19	; 0x13
    1942:	9c 89       	ldd	r25, Y+20	; 0x14
    1944:	98 8b       	std	Y+16, r25	; 0x10
    1946:	8f 87       	std	Y+15, r24	; 0x0f
    1948:	8f 85       	ldd	r24, Y+15	; 0x0f
    194a:	98 89       	ldd	r25, Y+16	; 0x10
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <LCD_sendCommand+0x2d6>
    1950:	98 8b       	std	Y+16, r25	; 0x10
    1952:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	//CLEAR E
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    1954:	83 e0       	ldi	r24, 0x03	; 3
    1956:	67 e0       	ldi	r22, 0x07	; 7
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <GPIO_writePin>
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	a0 e8       	ldi	r26, 0x80	; 128
    1964:	bf e3       	ldi	r27, 0x3F	; 63
    1966:	8b 87       	std	Y+11, r24	; 0x0b
    1968:	9c 87       	std	Y+12, r25	; 0x0c
    196a:	ad 87       	std	Y+13, r26	; 0x0d
    196c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1970:	7c 85       	ldd	r23, Y+12	; 0x0c
    1972:	8d 85       	ldd	r24, Y+13	; 0x0d
    1974:	9e 85       	ldd	r25, Y+14	; 0x0e
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	4a ef       	ldi	r20, 0xFA	; 250
    197c:	54 e4       	ldi	r21, 0x44	; 68
    197e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	8f 83       	std	Y+7, r24	; 0x07
    1988:	98 87       	std	Y+8, r25	; 0x08
    198a:	a9 87       	std	Y+9, r26	; 0x09
    198c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    198e:	6f 81       	ldd	r22, Y+7	; 0x07
    1990:	78 85       	ldd	r23, Y+8	; 0x08
    1992:	89 85       	ldd	r24, Y+9	; 0x09
    1994:	9a 85       	ldd	r25, Y+10	; 0x0a
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e8       	ldi	r20, 0x80	; 128
    199c:	5f e3       	ldi	r21, 0x3F	; 63
    199e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ltsf2>
    19a2:	88 23       	and	r24, r24
    19a4:	2c f4       	brge	.+10     	; 0x19b0 <LCD_sendCommand+0x33a>
		__ticks = 1;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9e 83       	std	Y+6, r25	; 0x06
    19ac:	8d 83       	std	Y+5, r24	; 0x05
    19ae:	3f c0       	rjmp	.+126    	; 0x1a2e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	3f ef       	ldi	r19, 0xFF	; 255
    19bc:	4f e7       	ldi	r20, 0x7F	; 127
    19be:	57 e4       	ldi	r21, 0x47	; 71
    19c0:	0e 94 8e 03 	call	0x71c	; 0x71c <__gtsf2>
    19c4:	18 16       	cp	r1, r24
    19c6:	4c f5       	brge	.+82     	; 0x1a1a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    19cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e2       	ldi	r20, 0x20	; 32
    19d6:	51 e4       	ldi	r21, 0x41	; 65
    19d8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	9e 83       	std	Y+6, r25	; 0x06
    19ee:	8d 83       	std	Y+5, r24	; 0x05
    19f0:	0f c0       	rjmp	.+30     	; 0x1a10 <LCD_sendCommand+0x39a>
    19f2:	88 ec       	ldi	r24, 0xC8	; 200
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9c 83       	std	Y+4, r25	; 0x04
    19f8:	8b 83       	std	Y+3, r24	; 0x03
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	9c 81       	ldd	r25, Y+4	; 0x04
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <LCD_sendCommand+0x388>
    1a02:	9c 83       	std	Y+4, r25	; 0x04
    1a04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a06:	8d 81       	ldd	r24, Y+5	; 0x05
    1a08:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	9e 83       	std	Y+6, r25	; 0x06
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	9e 81       	ldd	r25, Y+6	; 0x06
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	69 f7       	brne	.-38     	; 0x19f2 <LCD_sendCommand+0x37c>
    1a18:	14 c0       	rjmp	.+40     	; 0x1a42 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1c:	78 85       	ldd	r23, Y+8	; 0x08
    1a1e:	89 85       	ldd	r24, Y+9	; 0x09
    1a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a22:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9e 83       	std	Y+6, r25	; 0x06
    1a2c:	8d 83       	std	Y+5, r24	; 0x05
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	9e 81       	ldd	r25, Y+6	; 0x06
    1a32:	9a 83       	std	Y+2, r25	; 0x02
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <LCD_sendCommand+0x3c4>
    1a3e:	9a 83       	std	Y+2, r25	; 0x02
    1a40:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);

}
    1a42:	e9 96       	adiw	r28, 0x39	; 57
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 character){
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	e9 97       	sbiw	r28, 0x39	; 57
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	89 af       	std	Y+57, r24	; 0x39
	//Set RS
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
    1a6a:	83 e0       	ldi	r24, 0x03	; 3
    1a6c:	66 e0       	ldi	r22, 0x06	; 6
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	0e 94 c7 07 	call	0xf8e	; 0xf8e <GPIO_writePin>
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a0 e8       	ldi	r26, 0x80	; 128
    1a7a:	bf e3       	ldi	r27, 0x3F	; 63
    1a7c:	8d ab       	std	Y+53, r24	; 0x35
    1a7e:	9e ab       	std	Y+54, r25	; 0x36
    1a80:	af ab       	std	Y+55, r26	; 0x37
    1a82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a84:	6d a9       	ldd	r22, Y+53	; 0x35
    1a86:	7e a9       	ldd	r23, Y+54	; 0x36
    1a88:	8f a9       	ldd	r24, Y+55	; 0x37
    1a8a:	98 ad       	ldd	r25, Y+56	; 0x38
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	4a ef       	ldi	r20, 0xFA	; 250
    1a92:	54 e4       	ldi	r21, 0x44	; 68
    1a94:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	89 ab       	std	Y+49, r24	; 0x31
    1a9e:	9a ab       	std	Y+50, r25	; 0x32
    1aa0:	ab ab       	std	Y+51, r26	; 0x33
    1aa2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aa4:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa6:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa8:	8b a9       	ldd	r24, Y+51	; 0x33
    1aaa:	9c a9       	ldd	r25, Y+52	; 0x34
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e8       	ldi	r20, 0x80	; 128
    1ab2:	5f e3       	ldi	r21, 0x3F	; 63
    1ab4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ltsf2>
    1ab8:	88 23       	and	r24, r24
    1aba:	2c f4       	brge	.+10     	; 0x1ac6 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	98 ab       	std	Y+48, r25	; 0x30
    1ac2:	8f a7       	std	Y+47, r24	; 0x2f
    1ac4:	3f c0       	rjmp	.+126    	; 0x1b44 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1ac6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aca:	8b a9       	ldd	r24, Y+51	; 0x33
    1acc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	3f ef       	ldi	r19, 0xFF	; 255
    1ad2:	4f e7       	ldi	r20, 0x7F	; 127
    1ad4:	57 e4       	ldi	r21, 0x47	; 71
    1ad6:	0e 94 8e 03 	call	0x71c	; 0x71c <__gtsf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	4c f5       	brge	.+82     	; 0x1b30 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ade:	6d a9       	ldd	r22, Y+53	; 0x35
    1ae0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ae2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e2       	ldi	r20, 0x20	; 32
    1aec:	51 e4       	ldi	r21, 0x41	; 65
    1aee:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	bc 01       	movw	r22, r24
    1af8:	cd 01       	movw	r24, r26
    1afa:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	98 ab       	std	Y+48, r25	; 0x30
    1b04:	8f a7       	std	Y+47, r24	; 0x2f
    1b06:	0f c0       	rjmp	.+30     	; 0x1b26 <LCD_displayCharacter+0xd2>
    1b08:	88 ec       	ldi	r24, 0xC8	; 200
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9e a7       	std	Y+46, r25	; 0x2e
    1b0e:	8d a7       	std	Y+45, r24	; 0x2d
    1b10:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b12:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <LCD_displayCharacter+0xc0>
    1b18:	9e a7       	std	Y+46, r25	; 0x2e
    1b1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	98 ab       	std	Y+48, r25	; 0x30
    1b24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b28:	98 a9       	ldd	r25, Y+48	; 0x30
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	69 f7       	brne	.-38     	; 0x1b08 <LCD_displayCharacter+0xb4>
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b30:	69 a9       	ldd	r22, Y+49	; 0x31
    1b32:	7a a9       	ldd	r23, Y+50	; 0x32
    1b34:	8b a9       	ldd	r24, Y+51	; 0x33
    1b36:	9c a9       	ldd	r25, Y+52	; 0x34
    1b38:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	98 ab       	std	Y+48, r25	; 0x30
    1b42:	8f a7       	std	Y+47, r24	; 0x2f
    1b44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b46:	98 a9       	ldd	r25, Y+48	; 0x30
    1b48:	9c a7       	std	Y+44, r25	; 0x2c
    1b4a:	8b a7       	std	Y+43, r24	; 0x2b
    1b4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <LCD_displayCharacter+0xfc>
    1b54:	9c a7       	std	Y+44, r25	; 0x2c
    1b56:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	//SET E
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    1b58:	83 e0       	ldi	r24, 0x03	; 3
    1b5a:	67 e0       	ldi	r22, 0x07	; 7
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <GPIO_writePin>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a0 e8       	ldi	r26, 0x80	; 128
    1b68:	bf e3       	ldi	r27, 0x3F	; 63
    1b6a:	8f a3       	std	Y+39, r24	; 0x27
    1b6c:	98 a7       	std	Y+40, r25	; 0x28
    1b6e:	a9 a7       	std	Y+41, r26	; 0x29
    1b70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b72:	6f a1       	ldd	r22, Y+39	; 0x27
    1b74:	78 a5       	ldd	r23, Y+40	; 0x28
    1b76:	89 a5       	ldd	r24, Y+41	; 0x29
    1b78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	4a ef       	ldi	r20, 0xFA	; 250
    1b80:	54 e4       	ldi	r21, 0x44	; 68
    1b82:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	8b a3       	std	Y+35, r24	; 0x23
    1b8c:	9c a3       	std	Y+36, r25	; 0x24
    1b8e:	ad a3       	std	Y+37, r26	; 0x25
    1b90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b92:	6b a1       	ldd	r22, Y+35	; 0x23
    1b94:	7c a1       	ldd	r23, Y+36	; 0x24
    1b96:	8d a1       	ldd	r24, Y+37	; 0x25
    1b98:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e8       	ldi	r20, 0x80	; 128
    1ba0:	5f e3       	ldi	r21, 0x3F	; 63
    1ba2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ltsf2>
    1ba6:	88 23       	and	r24, r24
    1ba8:	2c f4       	brge	.+10     	; 0x1bb4 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9a a3       	std	Y+34, r25	; 0x22
    1bb0:	89 a3       	std	Y+33, r24	; 0x21
    1bb2:	3f c0       	rjmp	.+126    	; 0x1c32 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1bb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bba:	9e a1       	ldd	r25, Y+38	; 0x26
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	3f ef       	ldi	r19, 0xFF	; 255
    1bc0:	4f e7       	ldi	r20, 0x7F	; 127
    1bc2:	57 e4       	ldi	r21, 0x47	; 71
    1bc4:	0e 94 8e 03 	call	0x71c	; 0x71c <__gtsf2>
    1bc8:	18 16       	cp	r1, r24
    1bca:	4c f5       	brge	.+82     	; 0x1c1e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bcc:	6f a1       	ldd	r22, Y+39	; 0x27
    1bce:	78 a5       	ldd	r23, Y+40	; 0x28
    1bd0:	89 a5       	ldd	r24, Y+41	; 0x29
    1bd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e2       	ldi	r20, 0x20	; 32
    1bda:	51 e4       	ldi	r21, 0x41	; 65
    1bdc:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	bc 01       	movw	r22, r24
    1be6:	cd 01       	movw	r24, r26
    1be8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	9a a3       	std	Y+34, r25	; 0x22
    1bf2:	89 a3       	std	Y+33, r24	; 0x21
    1bf4:	0f c0       	rjmp	.+30     	; 0x1c14 <LCD_displayCharacter+0x1c0>
    1bf6:	88 ec       	ldi	r24, 0xC8	; 200
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	98 a3       	std	Y+32, r25	; 0x20
    1bfc:	8f 8f       	std	Y+31, r24	; 0x1f
    1bfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c00:	98 a1       	ldd	r25, Y+32	; 0x20
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <LCD_displayCharacter+0x1ae>
    1c06:	98 a3       	std	Y+32, r25	; 0x20
    1c08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	9a a3       	std	Y+34, r25	; 0x22
    1c12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c14:	89 a1       	ldd	r24, Y+33	; 0x21
    1c16:	9a a1       	ldd	r25, Y+34	; 0x22
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	69 f7       	brne	.-38     	; 0x1bf6 <LCD_displayCharacter+0x1a2>
    1c1c:	14 c0       	rjmp	.+40     	; 0x1c46 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c20:	7c a1       	ldd	r23, Y+36	; 0x24
    1c22:	8d a1       	ldd	r24, Y+37	; 0x25
    1c24:	9e a1       	ldd	r25, Y+38	; 0x26
    1c26:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9a a3       	std	Y+34, r25	; 0x22
    1c30:	89 a3       	std	Y+33, r24	; 0x21
    1c32:	89 a1       	ldd	r24, Y+33	; 0x21
    1c34:	9a a1       	ldd	r25, Y+34	; 0x22
    1c36:	9e 8f       	std	Y+30, r25	; 0x1e
    1c38:	8d 8f       	std	Y+29, r24	; 0x1d
    1c3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <LCD_displayCharacter+0x1ea>
    1c42:	9e 8f       	std	Y+30, r25	; 0x1e
    1c44:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);


	GPIO_writePort(LCD_DATA_PORT, character);
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	69 ad       	ldd	r22, Y+57	; 0x39
    1c4a:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_writePort>
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	a0 e8       	ldi	r26, 0x80	; 128
    1c54:	bf e3       	ldi	r27, 0x3F	; 63
    1c56:	89 8f       	std	Y+25, r24	; 0x19
    1c58:	9a 8f       	std	Y+26, r25	; 0x1a
    1c5a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	4a ef       	ldi	r20, 0xFA	; 250
    1c6c:	54 e4       	ldi	r21, 0x44	; 68
    1c6e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	8d 8b       	std	Y+21, r24	; 0x15
    1c78:	9e 8b       	std	Y+22, r25	; 0x16
    1c7a:	af 8b       	std	Y+23, r26	; 0x17
    1c7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c80:	7e 89       	ldd	r23, Y+22	; 0x16
    1c82:	8f 89       	ldd	r24, Y+23	; 0x17
    1c84:	98 8d       	ldd	r25, Y+24	; 0x18
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e8       	ldi	r20, 0x80	; 128
    1c8c:	5f e3       	ldi	r21, 0x3F	; 63
    1c8e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ltsf2>
    1c92:	88 23       	and	r24, r24
    1c94:	2c f4       	brge	.+10     	; 0x1ca0 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	9c 8b       	std	Y+20, r25	; 0x14
    1c9c:	8b 8b       	std	Y+19, r24	; 0x13
    1c9e:	3f c0       	rjmp	.+126    	; 0x1d1e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1ca0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	3f ef       	ldi	r19, 0xFF	; 255
    1cac:	4f e7       	ldi	r20, 0x7F	; 127
    1cae:	57 e4       	ldi	r21, 0x47	; 71
    1cb0:	0e 94 8e 03 	call	0x71c	; 0x71c <__gtsf2>
    1cb4:	18 16       	cp	r1, r24
    1cb6:	4c f5       	brge	.+82     	; 0x1d0a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e2       	ldi	r20, 0x20	; 32
    1cc6:	51 e4       	ldi	r21, 0x41	; 65
    1cc8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	bc 01       	movw	r22, r24
    1cd2:	cd 01       	movw	r24, r26
    1cd4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9c 8b       	std	Y+20, r25	; 0x14
    1cde:	8b 8b       	std	Y+19, r24	; 0x13
    1ce0:	0f c0       	rjmp	.+30     	; 0x1d00 <LCD_displayCharacter+0x2ac>
    1ce2:	88 ec       	ldi	r24, 0xC8	; 200
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	9a 8b       	std	Y+18, r25	; 0x12
    1ce8:	89 8b       	std	Y+17, r24	; 0x11
    1cea:	89 89       	ldd	r24, Y+17	; 0x11
    1cec:	9a 89       	ldd	r25, Y+18	; 0x12
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <LCD_displayCharacter+0x29a>
    1cf2:	9a 8b       	std	Y+18, r25	; 0x12
    1cf4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	9c 8b       	std	Y+20, r25	; 0x14
    1cfe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d00:	8b 89       	ldd	r24, Y+19	; 0x13
    1d02:	9c 89       	ldd	r25, Y+20	; 0x14
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	69 f7       	brne	.-38     	; 0x1ce2 <LCD_displayCharacter+0x28e>
    1d08:	14 c0       	rjmp	.+40     	; 0x1d32 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d10:	98 8d       	ldd	r25, Y+24	; 0x18
    1d12:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9c 8b       	std	Y+20, r25	; 0x14
    1d1c:	8b 8b       	std	Y+19, r24	; 0x13
    1d1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d20:	9c 89       	ldd	r25, Y+20	; 0x14
    1d22:	98 8b       	std	Y+16, r25	; 0x10
    1d24:	8f 87       	std	Y+15, r24	; 0x0f
    1d26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d28:	98 89       	ldd	r25, Y+16	; 0x10
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <LCD_displayCharacter+0x2d6>
    1d2e:	98 8b       	std	Y+16, r25	; 0x10
    1d30:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	//CLEAR E
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    1d32:	83 e0       	ldi	r24, 0x03	; 3
    1d34:	67 e0       	ldi	r22, 0x07	; 7
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	0e 94 c7 07 	call	0xf8e	; 0xf8e <GPIO_writePin>
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	a0 e8       	ldi	r26, 0x80	; 128
    1d42:	bf e3       	ldi	r27, 0x3F	; 63
    1d44:	8b 87       	std	Y+11, r24	; 0x0b
    1d46:	9c 87       	std	Y+12, r25	; 0x0c
    1d48:	ad 87       	std	Y+13, r26	; 0x0d
    1d4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4a ef       	ldi	r20, 0xFA	; 250
    1d5a:	54 e4       	ldi	r21, 0x44	; 68
    1d5c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	8f 83       	std	Y+7, r24	; 0x07
    1d66:	98 87       	std	Y+8, r25	; 0x08
    1d68:	a9 87       	std	Y+9, r26	; 0x09
    1d6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6e:	78 85       	ldd	r23, Y+8	; 0x08
    1d70:	89 85       	ldd	r24, Y+9	; 0x09
    1d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f e3       	ldi	r21, 0x3F	; 63
    1d7c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ltsf2>
    1d80:	88 23       	and	r24, r24
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
    1d8c:	3f c0       	rjmp	.+126    	; 0x1e0c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d90:	78 85       	ldd	r23, Y+8	; 0x08
    1d92:	89 85       	ldd	r24, Y+9	; 0x09
    1d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	3f ef       	ldi	r19, 0xFF	; 255
    1d9a:	4f e7       	ldi	r20, 0x7F	; 127
    1d9c:	57 e4       	ldi	r21, 0x47	; 71
    1d9e:	0e 94 8e 03 	call	0x71c	; 0x71c <__gtsf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	4c f5       	brge	.+82     	; 0x1df8 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e2       	ldi	r20, 0x20	; 32
    1db4:	51 e4       	ldi	r21, 0x41	; 65
    1db6:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
    1dce:	0f c0       	rjmp	.+30     	; 0x1dee <LCD_displayCharacter+0x39a>
    1dd0:	88 ec       	ldi	r24, 0xC8	; 200
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9c 83       	std	Y+4, r25	; 0x04
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <LCD_displayCharacter+0x388>
    1de0:	9c 83       	std	Y+4, r25	; 0x04
    1de2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de4:	8d 81       	ldd	r24, Y+5	; 0x05
    1de6:	9e 81       	ldd	r25, Y+6	; 0x06
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	9e 83       	std	Y+6, r25	; 0x06
    1dec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	9e 81       	ldd	r25, Y+6	; 0x06
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	69 f7       	brne	.-38     	; 0x1dd0 <LCD_displayCharacter+0x37c>
    1df6:	14 c0       	rjmp	.+40     	; 0x1e20 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfa:	78 85       	ldd	r23, Y+8	; 0x08
    1dfc:	89 85       	ldd	r24, Y+9	; 0x09
    1dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e00:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9e 83       	std	Y+6, r25	; 0x06
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e10:	9a 83       	std	Y+2, r25	; 0x02
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	9a 81       	ldd	r25, Y+2	; 0x02
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_displayCharacter+0x3c4>
    1e1c:	9a 83       	std	Y+2, r25	; 0x02
    1e1e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);

}
    1e20:	e9 96       	adiw	r28, 0x39	; 57
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <LCD_displayString>:
void LCD_displayString(const char *str){
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <LCD_displayString+0x6>
    1e38:	0f 92       	push	r0
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	9b 83       	std	Y+3, r25	; 0x03
    1e40:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e42:	19 82       	std	Y+1, r1	; 0x01
    1e44:	0e c0       	rjmp	.+28     	; 0x1e62 <LCD_displayString+0x30>
	while(str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e50:	fc 01       	movw	r30, r24
    1e52:	e2 0f       	add	r30, r18
    1e54:	f3 1f       	adc	r31, r19
    1e56:	80 81       	ld	r24, Z
    1e58:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <LCD_displayCharacter>
		i++;
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	8f 5f       	subi	r24, 0xFF	; 255
    1e60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
void LCD_displayString(const char *str){
	uint8 i = 0;
	while(str[i] != '\0')
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	e2 0f       	add	r30, r18
    1e70:	f3 1f       	adc	r31, r19
    1e72:	80 81       	ld	r24, Z
    1e74:	88 23       	and	r24, r24
    1e76:	39 f7       	brne	.-50     	; 0x1e46 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row, uint8 col){
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <LCD_moveCursor+0x6>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <LCD_moveCursor+0x8>
    1e8c:	0f 92       	push	r0
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	8a 83       	std	Y+2, r24	; 0x02
    1e94:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	3d 83       	std	Y+5, r19	; 0x05
    1e9e:	2c 83       	std	Y+4, r18	; 0x04
    1ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	c1 f0       	breq	.+48     	; 0x1eda <LCD_moveCursor+0x56>
    1eaa:	2c 81       	ldd	r18, Y+4	; 0x04
    1eac:	3d 81       	ldd	r19, Y+5	; 0x05
    1eae:	22 30       	cpi	r18, 0x02	; 2
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	2c f4       	brge	.+10     	; 0x1ebe <LCD_moveCursor+0x3a>
    1eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	61 f0       	breq	.+24     	; 0x1ed4 <LCD_moveCursor+0x50>
    1ebc:	19 c0       	rjmp	.+50     	; 0x1ef0 <LCD_moveCursor+0x6c>
    1ebe:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec2:	22 30       	cpi	r18, 0x02	; 2
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	69 f0       	breq	.+26     	; 0x1ee2 <LCD_moveCursor+0x5e>
    1ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ecc:	83 30       	cpi	r24, 0x03	; 3
    1ece:	91 05       	cpc	r25, r1
    1ed0:	61 f0       	breq	.+24     	; 0x1eea <LCD_moveCursor+0x66>
    1ed2:	0e c0       	rjmp	.+28     	; 0x1ef0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	0b c0       	rjmp	.+22     	; 0x1ef0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	80 5c       	subi	r24, 0xC0	; 192
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	07 c0       	rjmp	.+14     	; 0x1ef0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	80 5f       	subi	r24, 0xF0	; 240
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	80 5b       	subi	r24, 0xB0	; 176
    1eee:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	LCD_sendCommand(lcd_memory_address | LCD_CMD_FORCE_CURSOR_BEGINNING_1STLINE);
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	80 68       	ori	r24, 0x80	; 128
    1ef4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LCD_sendCommand>
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *str){
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <LCD_displayStringRowColumn+0x6>
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <LCD_displayStringRowColumn+0x8>
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	6a 83       	std	Y+2, r22	; 0x02
    1f18:	5c 83       	std	Y+4, r21	; 0x04
    1f1a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	6a 81       	ldd	r22, Y+2	; 0x02
    1f20:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_moveCursor>
	LCD_displayString(str);
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	9c 81       	ldd	r25, Y+4	; 0x04
    1f28:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <LCD_clearScreen>:
void LCD_clearScreen(void){
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CMD_CLEAR);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LCD_sendCommand>
}
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <LCD_integerToString>:
void LCD_integerToString(int number){
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	62 97       	sbiw	r28, 0x12	; 18
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	9a 8b       	std	Y+18, r25	; 0x12
    1f64:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(number,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1f66:	89 89       	ldd	r24, Y+17	; 0x11
    1f68:	9a 89       	ldd	r25, Y+18	; 0x12
    1f6a:	9e 01       	movw	r18, r28
    1f6c:	2f 5f       	subi	r18, 0xFF	; 255
    1f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f70:	b9 01       	movw	r22, r18
    1f72:	4a e0       	ldi	r20, 0x0A	; 10
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	0e 94 91 14 	call	0x2922	; 0x2922 <itoa>
	LCD_displayString(buff); /* Display the string */
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
}
    1f82:	62 96       	adiw	r28, 0x12	; 18
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <LCD_floatToString>:

void LCD_floatToString(float number){
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	64 97       	sbiw	r28, 0x14	; 20
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	69 8b       	std	Y+17, r22	; 0x11
    1fae:	7a 8b       	std	Y+18, r23	; 0x12
    1fb0:	8b 8b       	std	Y+19, r24	; 0x13
    1fb2:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16]; /* String to hold the ascii result */
	dtostrf(number, 3, 2, buff);
    1fb4:	89 89       	ldd	r24, Y+17	; 0x11
    1fb6:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb8:	ab 89       	ldd	r26, Y+19	; 0x13
    1fba:	bc 89       	ldd	r27, Y+20	; 0x14
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	43 e0       	ldi	r20, 0x03	; 3
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	22 e0       	ldi	r18, 0x02	; 2
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	fe 01       	movw	r30, r28
    1fca:	31 96       	adiw	r30, 0x01	; 1
    1fcc:	8f 01       	movw	r16, r30
    1fce:	0e 94 70 14 	call	0x28e0	; 0x28e0 <dtostrf>
	LCD_displayString(buff); /* Display the string */
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
}
    1fda:	64 96       	adiw	r28, 0x14	; 20
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	1f 91       	pop	r17
    1fec:	0f 91       	pop	r16
    1fee:	08 95       	ret

00001ff0 <KEYPAD_getPressedKey>:
//	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
//#endif
//}

uint8 KEYPAD_getPressedKey(void)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <KEYPAD_getPressedKey+0x6>
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	60 e0       	ldi	r22, 0x00	; 0
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	61 e0       	ldi	r22, 0x01	; 1
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	62 e0       	ldi	r22, 0x02	; 2
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	63 e0       	ldi	r22, 0x03	; 3
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	64 e0       	ldi	r22, 0x04	; 4
    2026:	40 e0       	ldi	r20, 0x00	; 0
    2028:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	65 e0       	ldi	r22, 0x05	; 5
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	66 e0       	ldi	r22, 0x06	; 6
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <GPIO_setupPinDirection>

	PORTA |= 0xf0;
    2040:	ab e3       	ldi	r26, 0x3B	; 59
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	eb e3       	ldi	r30, 0x3B	; 59
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	80 6f       	ori	r24, 0xF0	; 240
    204c:	8c 93       	st	X, r24

#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	67 e0       	ldi	r22, 0x07	; 7
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2058:	19 82       	std	Y+1, r1	; 0x01
    205a:	35 c0       	rjmp	.+106    	; 0x20c6 <KEYPAD_getPressedKey+0xd6>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	69 81       	ldd	r22, Y+1	; 0x01
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	69 81       	ldd	r22, Y+1	; 0x01
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2070:	1a 82       	std	Y+2, r1	; 0x02
    2072:	1e c0       	rjmp	.+60     	; 0x20b0 <KEYPAD_getPressedKey+0xc0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	98 2f       	mov	r25, r24
    2078:	9c 5f       	subi	r25, 0xFC	; 252
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	69 2f       	mov	r22, r25
    207e:	0e 94 b2 08 	call	0x1164	; 0x1164 <GPIO_readPin>
    2082:	88 23       	and	r24, r24
    2084:	91 f4       	brne	.+36     	; 0x20aa <KEYPAD_getPressedKey+0xba>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	98 2f       	mov	r25, r24
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	89 0f       	add	r24, r25
    209a:	8f 5f       	subi	r24, 0xFF	; 255
    209c:	0e 94 67 10 	call	0x20ce	; 0x20ce <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	8f 5f       	subi	r24, 0xFF	; 255
    20ae:	8a 83       	std	Y+2, r24	; 0x02
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	84 30       	cpi	r24, 0x04	; 4
    20b4:	f8 f2       	brcs	.-66     	; 0x2074 <KEYPAD_getPressedKey+0x84>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	69 81       	ldd	r22, Y+1	; 0x01
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	84 30       	cpi	r24, 0x04	; 4
    20ca:	40 f2       	brcs	.-112    	; 0x205c <KEYPAD_getPressedKey+0x6c>
    20cc:	c5 cf       	rjmp	.-118    	; 0x2058 <KEYPAD_getPressedKey+0x68>

000020ce <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    20dc:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	3c 83       	std	Y+4, r19	; 0x04
    20e6:	2b 83       	std	Y+3, r18	; 0x03
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	88 30       	cpi	r24, 0x08	; 8
    20ee:	91 05       	cpc	r25, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    20f2:	70 c0       	rjmp	.+224    	; 0x21d4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    20f4:	2b 81       	ldd	r18, Y+3	; 0x03
    20f6:	3c 81       	ldd	r19, Y+4	; 0x04
    20f8:	29 30       	cpi	r18, 0x09	; 9
    20fa:	31 05       	cpc	r19, r1
    20fc:	5c f5       	brge	.+86     	; 0x2154 <KEYPAD_4x4_adjustKeyNumber+0x86>
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	9c 81       	ldd	r25, Y+4	; 0x04
    2102:	84 30       	cpi	r24, 0x04	; 4
    2104:	91 05       	cpc	r25, r1
    2106:	09 f4       	brne	.+2      	; 0x210a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2108:	59 c0       	rjmp	.+178    	; 0x21bc <KEYPAD_4x4_adjustKeyNumber+0xee>
    210a:	2b 81       	ldd	r18, Y+3	; 0x03
    210c:	3c 81       	ldd	r19, Y+4	; 0x04
    210e:	25 30       	cpi	r18, 0x05	; 5
    2110:	31 05       	cpc	r19, r1
    2112:	9c f4       	brge	.+38     	; 0x213a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	82 30       	cpi	r24, 0x02	; 2
    211a:	91 05       	cpc	r25, r1
    211c:	09 f4       	brne	.+2      	; 0x2120 <KEYPAD_4x4_adjustKeyNumber+0x52>
    211e:	48 c0       	rjmp	.+144    	; 0x21b0 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2120:	2b 81       	ldd	r18, Y+3	; 0x03
    2122:	3c 81       	ldd	r19, Y+4	; 0x04
    2124:	23 30       	cpi	r18, 0x03	; 3
    2126:	31 05       	cpc	r19, r1
    2128:	0c f0       	brlt	.+2      	; 0x212c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    212a:	45 c0       	rjmp	.+138    	; 0x21b6 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	9c 81       	ldd	r25, Y+4	; 0x04
    2130:	81 30       	cpi	r24, 0x01	; 1
    2132:	91 05       	cpc	r25, r1
    2134:	09 f4       	brne	.+2      	; 0x2138 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2136:	39 c0       	rjmp	.+114    	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2138:	68 c0       	rjmp	.+208    	; 0x220a <KEYPAD_4x4_adjustKeyNumber+0x13c>
    213a:	2b 81       	ldd	r18, Y+3	; 0x03
    213c:	3c 81       	ldd	r19, Y+4	; 0x04
    213e:	26 30       	cpi	r18, 0x06	; 6
    2140:	31 05       	cpc	r19, r1
    2142:	09 f4       	brne	.+2      	; 0x2146 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2144:	41 c0       	rjmp	.+130    	; 0x21c8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	87 30       	cpi	r24, 0x07	; 7
    214c:	91 05       	cpc	r25, r1
    214e:	0c f0       	brlt	.+2      	; 0x2152 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2150:	3e c0       	rjmp	.+124    	; 0x21ce <KEYPAD_4x4_adjustKeyNumber+0x100>
    2152:	37 c0       	rjmp	.+110    	; 0x21c2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2154:	2b 81       	ldd	r18, Y+3	; 0x03
    2156:	3c 81       	ldd	r19, Y+4	; 0x04
    2158:	2c 30       	cpi	r18, 0x0C	; 12
    215a:	31 05       	cpc	r19, r1
    215c:	09 f4       	brne	.+2      	; 0x2160 <KEYPAD_4x4_adjustKeyNumber+0x92>
    215e:	46 c0       	rjmp	.+140    	; 0x21ec <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	8d 30       	cpi	r24, 0x0D	; 13
    2166:	91 05       	cpc	r25, r1
    2168:	5c f4       	brge	.+22     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    216a:	2b 81       	ldd	r18, Y+3	; 0x03
    216c:	3c 81       	ldd	r19, Y+4	; 0x04
    216e:	2a 30       	cpi	r18, 0x0A	; 10
    2170:	31 05       	cpc	r19, r1
    2172:	b1 f1       	breq	.+108    	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	9c 81       	ldd	r25, Y+4	; 0x04
    2178:	8b 30       	cpi	r24, 0x0B	; 11
    217a:	91 05       	cpc	r25, r1
    217c:	a4 f5       	brge	.+104    	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    217e:	2d c0       	rjmp	.+90     	; 0x21da <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2180:	2b 81       	ldd	r18, Y+3	; 0x03
    2182:	3c 81       	ldd	r19, Y+4	; 0x04
    2184:	2e 30       	cpi	r18, 0x0E	; 14
    2186:	31 05       	cpc	r19, r1
    2188:	b9 f1       	breq	.+110    	; 0x21f8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	9c 81       	ldd	r25, Y+4	; 0x04
    218e:	8e 30       	cpi	r24, 0x0E	; 14
    2190:	91 05       	cpc	r25, r1
    2192:	7c f1       	brlt	.+94     	; 0x21f2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2194:	2b 81       	ldd	r18, Y+3	; 0x03
    2196:	3c 81       	ldd	r19, Y+4	; 0x04
    2198:	2f 30       	cpi	r18, 0x0F	; 15
    219a:	31 05       	cpc	r19, r1
    219c:	81 f1       	breq	.+96     	; 0x21fe <KEYPAD_4x4_adjustKeyNumber+0x130>
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	9c 81       	ldd	r25, Y+4	; 0x04
    21a2:	80 31       	cpi	r24, 0x10	; 16
    21a4:	91 05       	cpc	r25, r1
    21a6:	71 f1       	breq	.+92     	; 0x2204 <KEYPAD_4x4_adjustKeyNumber+0x136>
    21a8:	30 c0       	rjmp	.+96     	; 0x220a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    21aa:	87 e3       	ldi	r24, 0x37	; 55
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	2f c0       	rjmp	.+94     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    21b0:	88 e3       	ldi	r24, 0x38	; 56
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	2c c0       	rjmp	.+88     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    21b6:	89 e3       	ldi	r24, 0x39	; 57
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	29 c0       	rjmp	.+82     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    21bc:	85 e2       	ldi	r24, 0x25	; 37
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	26 c0       	rjmp	.+76     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    21c2:	84 e3       	ldi	r24, 0x34	; 52
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	23 c0       	rjmp	.+70     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    21c8:	85 e3       	ldi	r24, 0x35	; 53
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	20 c0       	rjmp	.+64     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    21ce:	86 e3       	ldi	r24, 0x36	; 54
    21d0:	89 83       	std	Y+1, r24	; 0x01
    21d2:	1d c0       	rjmp	.+58     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    21d4:	8a e2       	ldi	r24, 0x2A	; 42
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	1a c0       	rjmp	.+52     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 9: keypad_button = '1';
    21da:	81 e3       	ldi	r24, 0x31	; 49
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	17 c0       	rjmp	.+46     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    21e0:	82 e3       	ldi	r24, 0x32	; 50
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    21e6:	83 e3       	ldi	r24, 0x33	; 51
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	11 c0       	rjmp	.+34     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    21ec:	8d e2       	ldi	r24, 0x2D	; 45
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	0e c0       	rjmp	.+28     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    21f2:	8d e0       	ldi	r24, 0x0D	; 13
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	0b c0       	rjmp	.+22     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 14: keypad_button = '0';
    21f8:	80 e3       	ldi	r24, 0x30	; 48
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	08 c0       	rjmp	.+16     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    21fe:	8d e3       	ldi	r24, 0x3D	; 61
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	05 c0       	rjmp	.+10     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2204:	8b e2       	ldi	r24, 0x2B	; 43
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	02 c0       	rjmp	.+4      	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    220e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <setup>:

#define PASSWORD_SIZE 6

//#define F_CPU 8000000UL

void setup(){
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    2226:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_init>
//	KEYPAD_init();
	UART_init();
    222a:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_init>

	DDRB |= ( 1 << 7);
    222e:	a7 e3       	ldi	r26, 0x37	; 55
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e7 e3       	ldi	r30, 0x37	; 55
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	80 68       	ori	r24, 0x80	; 128
    223a:	8c 93       	st	X, r24
}
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <main>:

void readAndSendPassword();

void main(void){
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	ae 97       	sbiw	r28, 0x2e	; 46
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	de bf       	out	0x3e, r29	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	cd bf       	out	0x3d, r28	; 61

	uint8 response = 'w';
    2256:	87 e7       	ldi	r24, 0x77	; 119
    2258:	8e a7       	std	Y+46, r24	; 0x2e
	setup();
    225a:	0e 94 0f 11 	call	0x221e	; 0x221e <setup>

	LCD_displayString("System loading...");
    225e:	80 e6       	ldi	r24, 0x60	; 96
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
	LCD_moveCursor(1,0);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_moveCursor>
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	aa e7       	ldi	r26, 0x7A	; 122
    2274:	b4 e4       	ldi	r27, 0x44	; 68
    2276:	8f a3       	std	Y+39, r24	; 0x27
    2278:	98 a7       	std	Y+40, r25	; 0x28
    227a:	a9 a7       	std	Y+41, r26	; 0x29
    227c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227e:	6f a1       	ldd	r22, Y+39	; 0x27
    2280:	78 a5       	ldd	r23, Y+40	; 0x28
    2282:	89 a5       	ldd	r24, Y+41	; 0x29
    2284:	9a a5       	ldd	r25, Y+42	; 0x2a
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	4a ef       	ldi	r20, 0xFA	; 250
    228c:	54 e4       	ldi	r21, 0x44	; 68
    228e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8b a3       	std	Y+35, r24	; 0x23
    2298:	9c a3       	std	Y+36, r25	; 0x24
    229a:	ad a3       	std	Y+37, r26	; 0x25
    229c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    229e:	6b a1       	ldd	r22, Y+35	; 0x23
    22a0:	7c a1       	ldd	r23, Y+36	; 0x24
    22a2:	8d a1       	ldd	r24, Y+37	; 0x25
    22a4:	9e a1       	ldd	r25, Y+38	; 0x26
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e8       	ldi	r20, 0x80	; 128
    22ac:	5f e3       	ldi	r21, 0x3F	; 63
    22ae:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ltsf2>
    22b2:	88 23       	and	r24, r24
    22b4:	2c f4       	brge	.+10     	; 0x22c0 <main+0x7e>
		__ticks = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9a a3       	std	Y+34, r25	; 0x22
    22bc:	89 a3       	std	Y+33, r24	; 0x21
    22be:	3f c0       	rjmp	.+126    	; 0x233e <main+0xfc>
	else if (__tmp > 65535)
    22c0:	6b a1       	ldd	r22, Y+35	; 0x23
    22c2:	7c a1       	ldd	r23, Y+36	; 0x24
    22c4:	8d a1       	ldd	r24, Y+37	; 0x25
    22c6:	9e a1       	ldd	r25, Y+38	; 0x26
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	3f ef       	ldi	r19, 0xFF	; 255
    22cc:	4f e7       	ldi	r20, 0x7F	; 127
    22ce:	57 e4       	ldi	r21, 0x47	; 71
    22d0:	0e 94 8e 03 	call	0x71c	; 0x71c <__gtsf2>
    22d4:	18 16       	cp	r1, r24
    22d6:	4c f5       	brge	.+82     	; 0x232a <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d8:	6f a1       	ldd	r22, Y+39	; 0x27
    22da:	78 a5       	ldd	r23, Y+40	; 0x28
    22dc:	89 a5       	ldd	r24, Y+41	; 0x29
    22de:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e2       	ldi	r20, 0x20	; 32
    22e6:	51 e4       	ldi	r21, 0x41	; 65
    22e8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	bc 01       	movw	r22, r24
    22f2:	cd 01       	movw	r24, r26
    22f4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9a a3       	std	Y+34, r25	; 0x22
    22fe:	89 a3       	std	Y+33, r24	; 0x21
    2300:	0f c0       	rjmp	.+30     	; 0x2320 <main+0xde>
    2302:	88 ec       	ldi	r24, 0xC8	; 200
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	98 a3       	std	Y+32, r25	; 0x20
    2308:	8f 8f       	std	Y+31, r24	; 0x1f
    230a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    230c:	98 a1       	ldd	r25, Y+32	; 0x20
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <main+0xcc>
    2312:	98 a3       	std	Y+32, r25	; 0x20
    2314:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2316:	89 a1       	ldd	r24, Y+33	; 0x21
    2318:	9a a1       	ldd	r25, Y+34	; 0x22
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	9a a3       	std	Y+34, r25	; 0x22
    231e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2320:	89 a1       	ldd	r24, Y+33	; 0x21
    2322:	9a a1       	ldd	r25, Y+34	; 0x22
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	69 f7       	brne	.-38     	; 0x2302 <main+0xc0>
    2328:	14 c0       	rjmp	.+40     	; 0x2352 <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232a:	6b a1       	ldd	r22, Y+35	; 0x23
    232c:	7c a1       	ldd	r23, Y+36	; 0x24
    232e:	8d a1       	ldd	r24, Y+37	; 0x25
    2330:	9e a1       	ldd	r25, Y+38	; 0x26
    2332:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9a a3       	std	Y+34, r25	; 0x22
    233c:	89 a3       	std	Y+33, r24	; 0x21
    233e:	89 a1       	ldd	r24, Y+33	; 0x21
    2340:	9a a1       	ldd	r25, Y+34	; 0x22
    2342:	9e 8f       	std	Y+30, r25	; 0x1e
    2344:	8d 8f       	std	Y+29, r24	; 0x1d
    2346:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2348:	9e 8d       	ldd	r25, Y+30	; 0x1e
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <main+0x108>
    234e:	9e 8f       	std	Y+30, r25	; 0x1e
    2350:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1000); /* delay 1 sec to be sure that both ECU MCU is running */

restart:
	LCD_clearScreen();
    2352:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <LCD_clearScreen>

	do{
		UART_sendCharacter('p');
    2356:	80 e7       	ldi	r24, 0x70	; 112
    2358:	0e 94 80 06 	call	0xd00	; 0xd00 <UART_sendCharacter>
		LCD_displayString("plz enter pass: ");
    235c:	82 e7       	ldi	r24, 0x72	; 114
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
		LCD_moveCursor(1,0);
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_moveCursor>
		readAndSendPassword();
    236c:	0e 94 5f 13 	call	0x26be	; 0x26be <readAndSendPassword>
		LCD_clearScreen();
    2370:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <LCD_clearScreen>

		LCD_displayString("plz re-enter the");
    2374:	83 e8       	ldi	r24, 0x83	; 131
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
		LCD_moveCursor(1,0);
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_moveCursor>
		LCD_displayString("same pass:");
    2384:	84 e9       	ldi	r24, 0x94	; 148
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
		readAndSendPassword();
    238c:	0e 94 5f 13 	call	0x26be	; 0x26be <readAndSendPassword>
		LCD_clearScreen();
    2390:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <LCD_clearScreen>

		LCD_displayString("checking password");
    2394:	8f e9       	ldi	r24, 0x9F	; 159
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
		response = UART_rcvCharacter();
    239c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <UART_rcvCharacter>
    23a0:	8e a7       	std	Y+46, r24	; 0x2e
		LCD_clearScreen();
    23a2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <LCD_clearScreen>



		if(response == 't')
    23a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    23a8:	84 37       	cpi	r24, 0x74	; 116
    23aa:	69 f4       	brne	.+26     	; 0x23c6 <main+0x184>
		{

			LCD_displayString("Password Saved");
    23ac:	81 eb       	ldi	r24, 0xB1	; 177
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
			LCD_moveCursor(1,0);
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_moveCursor>
			LCD_displayString("Successfully");
    23bc:	80 ec       	ldi	r24, 0xC0	; 192
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <main+0x1a2>
		}
		else if(response == 'f'){
    23c6:	8e a5       	ldd	r24, Y+46	; 0x2e
    23c8:	86 36       	cpi	r24, 0x66	; 102
    23ca:	61 f4       	brne	.+24     	; 0x23e4 <main+0x1a2>

			LCD_displayString("Different");
    23cc:	8d ec       	ldi	r24, 0xCD	; 205
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
			LCD_moveCursor(1,0);
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_moveCursor>
			LCD_displayString("passwords");
    23dc:	87 ed       	ldi	r24, 0xD7	; 215
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	aa ef       	ldi	r26, 0xFA	; 250
    23ea:	b4 e4       	ldi	r27, 0x44	; 68
    23ec:	89 8f       	std	Y+25, r24	; 0x19
    23ee:	9a 8f       	std	Y+26, r25	; 0x1a
    23f0:	ab 8f       	std	Y+27, r26	; 0x1b
    23f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f4:	69 8d       	ldd	r22, Y+25	; 0x19
    23f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	4a ef       	ldi	r20, 0xFA	; 250
    2402:	54 e4       	ldi	r21, 0x44	; 68
    2404:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	8d 8b       	std	Y+21, r24	; 0x15
    240e:	9e 8b       	std	Y+22, r25	; 0x16
    2410:	af 8b       	std	Y+23, r26	; 0x17
    2412:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2414:	6d 89       	ldd	r22, Y+21	; 0x15
    2416:	7e 89       	ldd	r23, Y+22	; 0x16
    2418:	8f 89       	ldd	r24, Y+23	; 0x17
    241a:	98 8d       	ldd	r25, Y+24	; 0x18
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 e8       	ldi	r20, 0x80	; 128
    2422:	5f e3       	ldi	r21, 0x3F	; 63
    2424:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ltsf2>
    2428:	88 23       	and	r24, r24
    242a:	2c f4       	brge	.+10     	; 0x2436 <main+0x1f4>
		__ticks = 1;
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	9c 8b       	std	Y+20, r25	; 0x14
    2432:	8b 8b       	std	Y+19, r24	; 0x13
    2434:	3f c0       	rjmp	.+126    	; 0x24b4 <main+0x272>
	else if (__tmp > 65535)
    2436:	6d 89       	ldd	r22, Y+21	; 0x15
    2438:	7e 89       	ldd	r23, Y+22	; 0x16
    243a:	8f 89       	ldd	r24, Y+23	; 0x17
    243c:	98 8d       	ldd	r25, Y+24	; 0x18
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	3f ef       	ldi	r19, 0xFF	; 255
    2442:	4f e7       	ldi	r20, 0x7F	; 127
    2444:	57 e4       	ldi	r21, 0x47	; 71
    2446:	0e 94 8e 03 	call	0x71c	; 0x71c <__gtsf2>
    244a:	18 16       	cp	r1, r24
    244c:	4c f5       	brge	.+82     	; 0x24a0 <main+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    244e:	69 8d       	ldd	r22, Y+25	; 0x19
    2450:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2452:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2454:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e2       	ldi	r20, 0x20	; 32
    245c:	51 e4       	ldi	r21, 0x41	; 65
    245e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	bc 01       	movw	r22, r24
    2468:	cd 01       	movw	r24, r26
    246a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	9c 8b       	std	Y+20, r25	; 0x14
    2474:	8b 8b       	std	Y+19, r24	; 0x13
    2476:	0f c0       	rjmp	.+30     	; 0x2496 <main+0x254>
    2478:	88 ec       	ldi	r24, 0xC8	; 200
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9a 8b       	std	Y+18, r25	; 0x12
    247e:	89 8b       	std	Y+17, r24	; 0x11
    2480:	89 89       	ldd	r24, Y+17	; 0x11
    2482:	9a 89       	ldd	r25, Y+18	; 0x12
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <main+0x242>
    2488:	9a 8b       	std	Y+18, r25	; 0x12
    248a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248c:	8b 89       	ldd	r24, Y+19	; 0x13
    248e:	9c 89       	ldd	r25, Y+20	; 0x14
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	9c 8b       	std	Y+20, r25	; 0x14
    2494:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2496:	8b 89       	ldd	r24, Y+19	; 0x13
    2498:	9c 89       	ldd	r25, Y+20	; 0x14
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	69 f7       	brne	.-38     	; 0x2478 <main+0x236>
    249e:	14 c0       	rjmp	.+40     	; 0x24c8 <main+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a0:	6d 89       	ldd	r22, Y+21	; 0x15
    24a2:	7e 89       	ldd	r23, Y+22	; 0x16
    24a4:	8f 89       	ldd	r24, Y+23	; 0x17
    24a6:	98 8d       	ldd	r25, Y+24	; 0x18
    24a8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	9c 8b       	std	Y+20, r25	; 0x14
    24b2:	8b 8b       	std	Y+19, r24	; 0x13
    24b4:	8b 89       	ldd	r24, Y+19	; 0x13
    24b6:	9c 89       	ldd	r25, Y+20	; 0x14
    24b8:	98 8b       	std	Y+16, r25	; 0x10
    24ba:	8f 87       	std	Y+15, r24	; 0x0f
    24bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    24be:	98 89       	ldd	r25, Y+16	; 0x10
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <main+0x27e>
    24c4:	98 8b       	std	Y+16, r25	; 0x10
    24c6:	8f 87       	std	Y+15, r24	; 0x0f
		}
		_delay_ms(2000);
		LCD_clearScreen();
    24c8:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <LCD_clearScreen>

	}while(response == 'f');
    24cc:	8e a5       	ldd	r24, Y+46	; 0x2e
    24ce:	86 36       	cpi	r24, 0x66	; 102
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <main+0x292>
    24d2:	41 cf       	rjmp	.-382    	; 0x2356 <main+0x114>


screen:

	LCD_clearScreen();
    24d4:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <LCD_clearScreen>
	LCD_displayString("+ : open door");
    24d8:	81 ee       	ldi	r24, 0xE1	; 225
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
	LCD_moveCursor(1,0);
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	60 e0       	ldi	r22, 0x00	; 0
    24e4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_moveCursor>
	LCD_displayString("- : change pass");
    24e8:	8f ee       	ldi	r24, 0xEF	; 239
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>

	uint8 key = KEYPAD_getPressedKey();
    24f0:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <KEYPAD_getPressedKey>
    24f4:	8d a7       	std	Y+45, r24	; 0x2d
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	aa e7       	ldi	r26, 0x7A	; 122
    24fc:	b3 e4       	ldi	r27, 0x43	; 67
    24fe:	8b 87       	std	Y+11, r24	; 0x0b
    2500:	9c 87       	std	Y+12, r25	; 0x0c
    2502:	ad 87       	std	Y+13, r26	; 0x0d
    2504:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2506:	6b 85       	ldd	r22, Y+11	; 0x0b
    2508:	7c 85       	ldd	r23, Y+12	; 0x0c
    250a:	8d 85       	ldd	r24, Y+13	; 0x0d
    250c:	9e 85       	ldd	r25, Y+14	; 0x0e
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	4a ef       	ldi	r20, 0xFA	; 250
    2514:	54 e4       	ldi	r21, 0x44	; 68
    2516:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	8f 83       	std	Y+7, r24	; 0x07
    2520:	98 87       	std	Y+8, r25	; 0x08
    2522:	a9 87       	std	Y+9, r26	; 0x09
    2524:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2526:	6f 81       	ldd	r22, Y+7	; 0x07
    2528:	78 85       	ldd	r23, Y+8	; 0x08
    252a:	89 85       	ldd	r24, Y+9	; 0x09
    252c:	9a 85       	ldd	r25, Y+10	; 0x0a
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	2c f4       	brge	.+10     	; 0x2548 <main+0x306>
		__ticks = 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9e 83       	std	Y+6, r25	; 0x06
    2544:	8d 83       	std	Y+5, r24	; 0x05
    2546:	3f c0       	rjmp	.+126    	; 0x25c6 <main+0x384>
	else if (__tmp > 65535)
    2548:	6f 81       	ldd	r22, Y+7	; 0x07
    254a:	78 85       	ldd	r23, Y+8	; 0x08
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	3f ef       	ldi	r19, 0xFF	; 255
    2554:	4f e7       	ldi	r20, 0x7F	; 127
    2556:	57 e4       	ldi	r21, 0x47	; 71
    2558:	0e 94 8e 03 	call	0x71c	; 0x71c <__gtsf2>
    255c:	18 16       	cp	r1, r24
    255e:	4c f5       	brge	.+82     	; 0x25b2 <main+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	6b 85       	ldd	r22, Y+11	; 0x0b
    2562:	7c 85       	ldd	r23, Y+12	; 0x0c
    2564:	8d 85       	ldd	r24, Y+13	; 0x0d
    2566:	9e 85       	ldd	r25, Y+14	; 0x0e
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e2       	ldi	r20, 0x20	; 32
    256e:	51 e4       	ldi	r21, 0x41	; 65
    2570:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	9e 83       	std	Y+6, r25	; 0x06
    2586:	8d 83       	std	Y+5, r24	; 0x05
    2588:	0f c0       	rjmp	.+30     	; 0x25a8 <main+0x366>
    258a:	88 ec       	ldi	r24, 0xC8	; 200
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9c 83       	std	Y+4, r25	; 0x04
    2590:	8b 83       	std	Y+3, r24	; 0x03
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <main+0x354>
    259a:	9c 83       	std	Y+4, r25	; 0x04
    259c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259e:	8d 81       	ldd	r24, Y+5	; 0x05
    25a0:	9e 81       	ldd	r25, Y+6	; 0x06
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a8:	8d 81       	ldd	r24, Y+5	; 0x05
    25aa:	9e 81       	ldd	r25, Y+6	; 0x06
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	69 f7       	brne	.-38     	; 0x258a <main+0x348>
    25b0:	14 c0       	rjmp	.+40     	; 0x25da <main+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b2:	6f 81       	ldd	r22, Y+7	; 0x07
    25b4:	78 85       	ldd	r23, Y+8	; 0x08
    25b6:	89 85       	ldd	r24, Y+9	; 0x09
    25b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ba:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9e 83       	std	Y+6, r25	; 0x06
    25c4:	8d 83       	std	Y+5, r24	; 0x05
    25c6:	8d 81       	ldd	r24, Y+5	; 0x05
    25c8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	9a 81       	ldd	r25, Y+2	; 0x02
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <main+0x390>
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);/* it needs at least 200ms to work properly*/
	LCD_clearScreen();
    25da:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <LCD_clearScreen>

	if( key == '+' ){
    25de:	8d a5       	ldd	r24, Y+45	; 0x2d
    25e0:	8b 32       	cpi	r24, 0x2B	; 43
    25e2:	c1 f5       	brne	.+112    	; 0x2654 <main+0x412>
		response = ' ';
    25e4:	80 e2       	ldi	r24, 0x20	; 32
    25e6:	8e a7       	std	Y+46, r24	; 0x2e
    25e8:	2d c0       	rjmp	.+90     	; 0x2644 <main+0x402>
		while(response != 't'){
			UART_sendCharacter('+');
    25ea:	8b e2       	ldi	r24, 0x2B	; 43
    25ec:	0e 94 80 06 	call	0xd00	; 0xd00 <UART_sendCharacter>
			LCD_displayString("plz enter pass: ");
    25f0:	82 e7       	ldi	r24, 0x72	; 114
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
			LCD_moveCursor(1,0);
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_moveCursor>
			readAndSendPassword();
    2600:	0e 94 5f 13 	call	0x26be	; 0x26be <readAndSendPassword>
			LCD_clearScreen();
    2604:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <LCD_clearScreen>

			response = UART_rcvCharacter();
    2608:	0e 94 cd 06 	call	0xd9a	; 0xd9a <UART_rcvCharacter>
    260c:	8e a7       	std	Y+46, r24	; 0x2e
			if(response == 't'){
    260e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2610:	84 37       	cpi	r24, 0x74	; 116
    2612:	51 f4       	brne	.+20     	; 0x2628 <main+0x3e6>
				LCD_displayString("Motor is moving");
    2614:	8f ef       	ldi	r24, 0xFF	; 255
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
				response = UART_rcvCharacter();
    261c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <UART_rcvCharacter>
    2620:	8e a7       	std	Y+46, r24	; 0x2e
				LCD_clearScreen();
    2622:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <LCD_clearScreen>
    2626:	11 c0       	rjmp	.+34     	; 0x264a <main+0x408>
				break;
			}

			if(response == 'b'){
    2628:	8e a5       	ldd	r24, Y+46	; 0x2e
    262a:	82 36       	cpi	r24, 0x62	; 98
    262c:	59 f4       	brne	.+22     	; 0x2644 <main+0x402>
				LCD_displayString("Alert");
    262e:	8f e0       	ldi	r24, 0x0F	; 15
    2630:	91 e0       	ldi	r25, 0x01	; 1
    2632:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
				PORTB |= ( 1 << 7 );
    2636:	a8 e3       	ldi	r26, 0x38	; 56
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e8 e3       	ldi	r30, 0x38	; 56
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	80 68       	ori	r24, 0x80	; 128
    2642:	8c 93       	st	X, r24
	_delay_ms(250);/* it needs at least 200ms to work properly*/
	LCD_clearScreen();

	if( key == '+' ){
		response = ' ';
		while(response != 't'){
    2644:	8e a5       	ldd	r24, Y+46	; 0x2e
    2646:	84 37       	cpi	r24, 0x74	; 116
    2648:	81 f6       	brne	.-96     	; 0x25ea <main+0x3a8>
				PORTB |= ( 1 << 7 );
//				break;
			}
		}

		if(response == 'f')
    264a:	8e a5       	ldd	r24, Y+46	; 0x2e
    264c:	86 36       	cpi	r24, 0x66	; 102
    264e:	09 f4       	brne	.+2      	; 0x2652 <main+0x410>
    2650:	41 cf       	rjmp	.-382    	; 0x24d4 <main+0x292>
    2652:	2c c0       	rjmp	.+88     	; 0x26ac <main+0x46a>
			goto screen;
	}else if( key == '-' ){
    2654:	8d a5       	ldd	r24, Y+45	; 0x2d
    2656:	8d 32       	cpi	r24, 0x2D	; 45
    2658:	49 f5       	brne	.+82     	; 0x26ac <main+0x46a>
		for(int i = 1; i <=3; i++){
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9c a7       	std	Y+44, r25	; 0x2c
    2660:	8b a7       	std	Y+43, r24	; 0x2b
    2662:	1a c0       	rjmp	.+52     	; 0x2698 <main+0x456>
			UART_sendCharacter('-');
    2664:	8d e2       	ldi	r24, 0x2D	; 45
    2666:	0e 94 80 06 	call	0xd00	; 0xd00 <UART_sendCharacter>
			LCD_displayString("-)plz enter pass: ");
    266a:	85 e1       	ldi	r24, 0x15	; 21
    266c:	91 e0       	ldi	r25, 0x01	; 1
    266e:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_displayString>
			LCD_moveCursor(1,0);
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_moveCursor>
			readAndSendPassword();
    267a:	0e 94 5f 13 	call	0x26be	; 0x26be <readAndSendPassword>
			response = UART_rcvCharacter();
    267e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <UART_rcvCharacter>
    2682:	8e a7       	std	Y+46, r24	; 0x2e
			if(response == 't')
    2684:	8e a5       	ldd	r24, Y+46	; 0x2e
    2686:	84 37       	cpi	r24, 0x74	; 116
    2688:	61 f0       	breq	.+24     	; 0x26a2 <main+0x460>
				break;
			LCD_clearScreen();
    268a:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <LCD_clearScreen>
		}

		if(response == 'f')
			goto screen;
	}else if( key == '-' ){
		for(int i = 1; i <=3; i++){
    268e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2690:	9c a5       	ldd	r25, Y+44	; 0x2c
    2692:	01 96       	adiw	r24, 0x01	; 1
    2694:	9c a7       	std	Y+44, r25	; 0x2c
    2696:	8b a7       	std	Y+43, r24	; 0x2b
    2698:	8b a5       	ldd	r24, Y+43	; 0x2b
    269a:	9c a5       	ldd	r25, Y+44	; 0x2c
    269c:	84 30       	cpi	r24, 0x04	; 4
    269e:	91 05       	cpc	r25, r1
    26a0:	0c f3       	brlt	.-62     	; 0x2664 <main+0x422>
			response = UART_rcvCharacter();
			if(response == 't')
				break;
			LCD_clearScreen();
		}
		if(response == 'f')
    26a2:	8e a5       	ldd	r24, Y+46	; 0x2e
    26a4:	86 36       	cpi	r24, 0x66	; 102
    26a6:	09 f4       	brne	.+2      	; 0x26aa <main+0x468>
    26a8:	15 cf       	rjmp	.-470    	; 0x24d4 <main+0x292>
    26aa:	53 ce       	rjmp	.-858    	; 0x2352 <main+0x110>
			goto screen;
		goto restart;
	}
}
    26ac:	ae 96       	adiw	r28, 0x2e	; 46
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <readAndSendPassword>:


void readAndSendPassword(){
    26be:	0f 93       	push	r16
    26c0:	1f 93       	push	r17
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	6a 97       	sbiw	r28, 0x1a	; 26
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61

	uint8 password[PASSWORD_SIZE] = {'=', '=', '=', '=', '=', '='};			/* password that store 5 chars and \0 */
    26d6:	ce 01       	movw	r24, r28
    26d8:	40 96       	adiw	r24, 0x10	; 16
    26da:	9f 8b       	std	Y+23, r25	; 0x17
    26dc:	8e 8b       	std	Y+22, r24	; 0x16
    26de:	e1 e3       	ldi	r30, 0x31	; 49
    26e0:	f1 e0       	ldi	r31, 0x01	; 1
    26e2:	f9 8f       	std	Y+25, r31	; 0x19
    26e4:	e8 8f       	std	Y+24, r30	; 0x18
    26e6:	f6 e0       	ldi	r31, 0x06	; 6
    26e8:	fa 8f       	std	Y+26, r31	; 0x1a
    26ea:	e8 8d       	ldd	r30, Y+24	; 0x18
    26ec:	f9 8d       	ldd	r31, Y+25	; 0x19
    26ee:	00 80       	ld	r0, Z
    26f0:	88 8d       	ldd	r24, Y+24	; 0x18
    26f2:	99 8d       	ldd	r25, Y+25	; 0x19
    26f4:	01 96       	adiw	r24, 0x01	; 1
    26f6:	99 8f       	std	Y+25, r25	; 0x19
    26f8:	88 8f       	std	Y+24, r24	; 0x18
    26fa:	ee 89       	ldd	r30, Y+22	; 0x16
    26fc:	ff 89       	ldd	r31, Y+23	; 0x17
    26fe:	00 82       	st	Z, r0
    2700:	8e 89       	ldd	r24, Y+22	; 0x16
    2702:	9f 89       	ldd	r25, Y+23	; 0x17
    2704:	01 96       	adiw	r24, 0x01	; 1
    2706:	9f 8b       	std	Y+23, r25	; 0x17
    2708:	8e 8b       	std	Y+22, r24	; 0x16
    270a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    270c:	91 50       	subi	r25, 0x01	; 1
    270e:	9a 8f       	std	Y+26, r25	; 0x1a
    2710:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2712:	ee 23       	and	r30, r30
    2714:	51 f7       	brne	.-44     	; 0x26ea <readAndSendPassword+0x2c>
	uint8 password_index = 0;
    2716:	1f 86       	std	Y+15, r1	; 0x0f

	for(;;){
		password[password_index] = KEYPAD_getPressedKey();
    2718:	8f 85       	ldd	r24, Y+15	; 0x0f
    271a:	08 2f       	mov	r16, r24
    271c:	10 e0       	ldi	r17, 0x00	; 0
    271e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <KEYPAD_getPressedKey>
    2722:	28 2f       	mov	r18, r24
    2724:	ce 01       	movw	r24, r28
    2726:	40 96       	adiw	r24, 0x10	; 16
    2728:	fc 01       	movw	r30, r24
    272a:	e0 0f       	add	r30, r16
    272c:	f1 1f       	adc	r31, r17
    272e:	20 83       	st	Z, r18
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	aa e7       	ldi	r26, 0x7A	; 122
    2736:	b3 e4       	ldi	r27, 0x43	; 67
    2738:	8b 87       	std	Y+11, r24	; 0x0b
    273a:	9c 87       	std	Y+12, r25	; 0x0c
    273c:	ad 87       	std	Y+13, r26	; 0x0d
    273e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2740:	6b 85       	ldd	r22, Y+11	; 0x0b
    2742:	7c 85       	ldd	r23, Y+12	; 0x0c
    2744:	8d 85       	ldd	r24, Y+13	; 0x0d
    2746:	9e 85       	ldd	r25, Y+14	; 0x0e
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	4a ef       	ldi	r20, 0xFA	; 250
    274e:	54 e4       	ldi	r21, 0x44	; 68
    2750:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	8f 83       	std	Y+7, r24	; 0x07
    275a:	98 87       	std	Y+8, r25	; 0x08
    275c:	a9 87       	std	Y+9, r26	; 0x09
    275e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2760:	6f 81       	ldd	r22, Y+7	; 0x07
    2762:	78 85       	ldd	r23, Y+8	; 0x08
    2764:	89 85       	ldd	r24, Y+9	; 0x09
    2766:	9a 85       	ldd	r25, Y+10	; 0x0a
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e8       	ldi	r20, 0x80	; 128
    276e:	5f e3       	ldi	r21, 0x3F	; 63
    2770:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ltsf2>
    2774:	88 23       	and	r24, r24
    2776:	2c f4       	brge	.+10     	; 0x2782 <readAndSendPassword+0xc4>
		__ticks = 1;
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	3f c0       	rjmp	.+126    	; 0x2800 <readAndSendPassword+0x142>
	else if (__tmp > 65535)
    2782:	6f 81       	ldd	r22, Y+7	; 0x07
    2784:	78 85       	ldd	r23, Y+8	; 0x08
    2786:	89 85       	ldd	r24, Y+9	; 0x09
    2788:	9a 85       	ldd	r25, Y+10	; 0x0a
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	3f ef       	ldi	r19, 0xFF	; 255
    278e:	4f e7       	ldi	r20, 0x7F	; 127
    2790:	57 e4       	ldi	r21, 0x47	; 71
    2792:	0e 94 8e 03 	call	0x71c	; 0x71c <__gtsf2>
    2796:	18 16       	cp	r1, r24
    2798:	4c f5       	brge	.+82     	; 0x27ec <readAndSendPassword+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279a:	6b 85       	ldd	r22, Y+11	; 0x0b
    279c:	7c 85       	ldd	r23, Y+12	; 0x0c
    279e:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e2       	ldi	r20, 0x20	; 32
    27a8:	51 e4       	ldi	r21, 0x41	; 65
    27aa:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	9e 83       	std	Y+6, r25	; 0x06
    27c0:	8d 83       	std	Y+5, r24	; 0x05
    27c2:	0f c0       	rjmp	.+30     	; 0x27e2 <readAndSendPassword+0x124>
    27c4:	88 ec       	ldi	r24, 0xC8	; 200
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	9c 83       	std	Y+4, r25	; 0x04
    27ca:	8b 83       	std	Y+3, r24	; 0x03
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	9c 81       	ldd	r25, Y+4	; 0x04
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <readAndSendPassword+0x112>
    27d4:	9c 83       	std	Y+4, r25	; 0x04
    27d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	9e 81       	ldd	r25, Y+6	; 0x06
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e2:	8d 81       	ldd	r24, Y+5	; 0x05
    27e4:	9e 81       	ldd	r25, Y+6	; 0x06
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	69 f7       	brne	.-38     	; 0x27c4 <readAndSendPassword+0x106>
    27ea:	14 c0       	rjmp	.+40     	; 0x2814 <readAndSendPassword+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ec:	6f 81       	ldd	r22, Y+7	; 0x07
    27ee:	78 85       	ldd	r23, Y+8	; 0x08
    27f0:	89 85       	ldd	r24, Y+9	; 0x09
    27f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	9e 83       	std	Y+6, r25	; 0x06
    27fe:	8d 83       	std	Y+5, r24	; 0x05
    2800:	8d 81       	ldd	r24, Y+5	; 0x05
    2802:	9e 81       	ldd	r25, Y+6	; 0x06
    2804:	9a 83       	std	Y+2, r25	; 0x02
    2806:	89 83       	std	Y+1, r24	; 0x01
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <readAndSendPassword+0x14e>
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);/* it needs at least 200ms to work properly*/

		if(password[password_index] == '=' ){ /* if user pressed Enter */
    2814:	8f 85       	ldd	r24, Y+15	; 0x0f
    2816:	28 2f       	mov	r18, r24
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	ce 01       	movw	r24, r28
    281c:	40 96       	adiw	r24, 0x10	; 16
    281e:	fc 01       	movw	r30, r24
    2820:	e2 0f       	add	r30, r18
    2822:	f3 1f       	adc	r31, r19
    2824:	80 81       	ld	r24, Z
    2826:	8d 33       	cpi	r24, 0x3D	; 61
    2828:	c9 f4       	brne	.+50     	; 0x285c <readAndSendPassword+0x19e>
			password[password_index] = '\0';
    282a:	8f 85       	ldd	r24, Y+15	; 0x0f
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	ce 01       	movw	r24, r28
    2832:	40 96       	adiw	r24, 0x10	; 16
    2834:	fc 01       	movw	r30, r24
    2836:	e2 0f       	add	r30, r18
    2838:	f3 1f       	adc	r31, r19
    283a:	10 82       	st	Z, r1
			LCD_displayCharacter('*');
			password_index++;
		}
	}

	UART_sendArray(password, PASSWORD_SIZE); /*TODO UART should not used in app layer*/
    283c:	ce 01       	movw	r24, r28
    283e:	40 96       	adiw	r24, 0x10	; 16
    2840:	66 e0       	ldi	r22, 0x06	; 6
    2842:	0e 94 97 06 	call	0xd2e	; 0xd2e <UART_sendArray>

}
    2846:	6a 96       	adiw	r28, 0x1a	; 26
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	08 95       	ret

		if(password[password_index] == '=' ){ /* if user pressed Enter */
			password[password_index] = '\0';
			break;
		}
		else if(password_index <= 4){ /* index 4 indicates that 5 numbers have been entered*/
    285c:	8f 85       	ldd	r24, Y+15	; 0x0f
    285e:	85 30       	cpi	r24, 0x05	; 5
    2860:	08 f0       	brcs	.+2      	; 0x2864 <readAndSendPassword+0x1a6>
    2862:	5a cf       	rjmp	.-332    	; 0x2718 <readAndSendPassword+0x5a>
			LCD_displayCharacter('*');
    2864:	8a e2       	ldi	r24, 0x2A	; 42
    2866:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <LCD_displayCharacter>
			password_index++;
    286a:	8f 85       	ldd	r24, Y+15	; 0x0f
    286c:	8f 5f       	subi	r24, 0xFF	; 255
    286e:	8f 87       	std	Y+15, r24	; 0x0f
    2870:	53 cf       	rjmp	.-346    	; 0x2718 <readAndSendPassword+0x5a>

00002872 <__prologue_saves__>:
    2872:	2f 92       	push	r2
    2874:	3f 92       	push	r3
    2876:	4f 92       	push	r4
    2878:	5f 92       	push	r5
    287a:	6f 92       	push	r6
    287c:	7f 92       	push	r7
    287e:	8f 92       	push	r8
    2880:	9f 92       	push	r9
    2882:	af 92       	push	r10
    2884:	bf 92       	push	r11
    2886:	cf 92       	push	r12
    2888:	df 92       	push	r13
    288a:	ef 92       	push	r14
    288c:	ff 92       	push	r15
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	ca 1b       	sub	r28, r26
    289c:	db 0b       	sbc	r29, r27
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	09 94       	ijmp

000028aa <__epilogue_restores__>:
    28aa:	2a 88       	ldd	r2, Y+18	; 0x12
    28ac:	39 88       	ldd	r3, Y+17	; 0x11
    28ae:	48 88       	ldd	r4, Y+16	; 0x10
    28b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    28b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    28b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    28b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    28b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    28ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    28bc:	b9 84       	ldd	r11, Y+9	; 0x09
    28be:	c8 84       	ldd	r12, Y+8	; 0x08
    28c0:	df 80       	ldd	r13, Y+7	; 0x07
    28c2:	ee 80       	ldd	r14, Y+6	; 0x06
    28c4:	fd 80       	ldd	r15, Y+5	; 0x05
    28c6:	0c 81       	ldd	r16, Y+4	; 0x04
    28c8:	1b 81       	ldd	r17, Y+3	; 0x03
    28ca:	aa 81       	ldd	r26, Y+2	; 0x02
    28cc:	b9 81       	ldd	r27, Y+1	; 0x01
    28ce:	ce 0f       	add	r28, r30
    28d0:	d1 1d       	adc	r29, r1
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	ed 01       	movw	r28, r26
    28de:	08 95       	ret

000028e0 <dtostrf>:
    28e0:	ef 92       	push	r14
    28e2:	ff 92       	push	r15
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	f2 2f       	mov	r31, r18
    28ea:	f0 2e       	mov	r15, r16
    28ec:	47 fd       	sbrc	r20, 7
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <dtostrf+0x14>
    28f0:	e4 e0       	ldi	r30, 0x04	; 4
    28f2:	01 c0       	rjmp	.+2      	; 0x28f6 <dtostrf+0x16>
    28f4:	e4 e1       	ldi	r30, 0x14	; 20
    28f6:	24 2f       	mov	r18, r20
    28f8:	33 27       	eor	r19, r19
    28fa:	27 fd       	sbrc	r18, 7
    28fc:	30 95       	com	r19
    28fe:	37 ff       	sbrs	r19, 7
    2900:	03 c0       	rjmp	.+6      	; 0x2908 <dtostrf+0x28>
    2902:	30 95       	com	r19
    2904:	21 95       	neg	r18
    2906:	3f 4f       	sbci	r19, 0xFF	; 255
    2908:	4f 2d       	mov	r20, r15
    290a:	51 2f       	mov	r21, r17
    290c:	0f 2f       	mov	r16, r31
    290e:	ee 2e       	mov	r14, r30
    2910:	0e 94 b2 14 	call	0x2964	; 0x2964 <dtoa_prf>
    2914:	8f 2d       	mov	r24, r15
    2916:	91 2f       	mov	r25, r17
    2918:	1f 91       	pop	r17
    291a:	0f 91       	pop	r16
    291c:	ff 90       	pop	r15
    291e:	ef 90       	pop	r14
    2920:	08 95       	ret

00002922 <itoa>:
    2922:	fb 01       	movw	r30, r22
    2924:	9f 01       	movw	r18, r30
    2926:	e8 94       	clt
    2928:	42 30       	cpi	r20, 0x02	; 2
    292a:	c4 f0       	brlt	.+48     	; 0x295c <itoa+0x3a>
    292c:	45 32       	cpi	r20, 0x25	; 37
    292e:	b4 f4       	brge	.+44     	; 0x295c <itoa+0x3a>
    2930:	4a 30       	cpi	r20, 0x0A	; 10
    2932:	29 f4       	brne	.+10     	; 0x293e <itoa+0x1c>
    2934:	97 fb       	bst	r25, 7
    2936:	1e f4       	brtc	.+6      	; 0x293e <itoa+0x1c>
    2938:	90 95       	com	r25
    293a:	81 95       	neg	r24
    293c:	9f 4f       	sbci	r25, 0xFF	; 255
    293e:	64 2f       	mov	r22, r20
    2940:	77 27       	eor	r23, r23
    2942:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__udivmodhi4>
    2946:	80 5d       	subi	r24, 0xD0	; 208
    2948:	8a 33       	cpi	r24, 0x3A	; 58
    294a:	0c f0       	brlt	.+2      	; 0x294e <itoa+0x2c>
    294c:	89 5d       	subi	r24, 0xD9	; 217
    294e:	81 93       	st	Z+, r24
    2950:	cb 01       	movw	r24, r22
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	a1 f7       	brne	.-24     	; 0x293e <itoa+0x1c>
    2956:	16 f4       	brtc	.+4      	; 0x295c <itoa+0x3a>
    2958:	5d e2       	ldi	r21, 0x2D	; 45
    295a:	51 93       	st	Z+, r21
    295c:	10 82       	st	Z, r1
    295e:	c9 01       	movw	r24, r18
    2960:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <strrev>

00002964 <dtoa_prf>:
    2964:	a9 e0       	ldi	r26, 0x09	; 9
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	e8 eb       	ldi	r30, 0xB8	; 184
    296a:	f4 e1       	ldi	r31, 0x14	; 20
    296c:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x8>
    2970:	6a 01       	movw	r12, r20
    2972:	12 2f       	mov	r17, r18
    2974:	a0 2e       	mov	r10, r16
    2976:	be 2c       	mov	r11, r14
    2978:	2b e3       	ldi	r18, 0x3B	; 59
    297a:	20 17       	cp	r18, r16
    297c:	18 f4       	brcc	.+6      	; 0x2984 <dtoa_prf+0x20>
    297e:	2c e3       	ldi	r18, 0x3C	; 60
    2980:	92 2e       	mov	r9, r18
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <dtoa_prf+0x24>
    2984:	90 2e       	mov	r9, r16
    2986:	93 94       	inc	r9
    2988:	ae 01       	movw	r20, r28
    298a:	4f 5f       	subi	r20, 0xFF	; 255
    298c:	5f 4f       	sbci	r21, 0xFF	; 255
    298e:	27 e0       	ldi	r18, 0x07	; 7
    2990:	09 2d       	mov	r16, r9
    2992:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__ftoa_engine>
    2996:	bc 01       	movw	r22, r24
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	e8 2e       	mov	r14, r24
    299c:	ff 24       	eor	r15, r15
    299e:	c7 01       	movw	r24, r14
    29a0:	89 70       	andi	r24, 0x09	; 9
    29a2:	90 70       	andi	r25, 0x00	; 0
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	11 f4       	brne	.+4      	; 0x29ac <dtoa_prf+0x48>
    29a8:	ad e2       	ldi	r26, 0x2D	; 45
    29aa:	09 c0       	rjmp	.+18     	; 0x29be <dtoa_prf+0x5a>
    29ac:	b1 fe       	sbrs	r11, 1
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <dtoa_prf+0x50>
    29b0:	ab e2       	ldi	r26, 0x2B	; 43
    29b2:	05 c0       	rjmp	.+10     	; 0x29be <dtoa_prf+0x5a>
    29b4:	b0 fc       	sbrc	r11, 0
    29b6:	02 c0       	rjmp	.+4      	; 0x29bc <dtoa_prf+0x58>
    29b8:	a0 e0       	ldi	r26, 0x00	; 0
    29ba:	01 c0       	rjmp	.+2      	; 0x29be <dtoa_prf+0x5a>
    29bc:	a0 e2       	ldi	r26, 0x20	; 32
    29be:	e3 fe       	sbrs	r14, 3
    29c0:	3b c0       	rjmp	.+118    	; 0x2a38 <dtoa_prf+0xd4>
    29c2:	aa 23       	and	r26, r26
    29c4:	11 f4       	brne	.+4      	; 0x29ca <dtoa_prf+0x66>
    29c6:	23 e0       	ldi	r18, 0x03	; 3
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <dtoa_prf+0x68>
    29ca:	24 e0       	ldi	r18, 0x04	; 4
    29cc:	21 17       	cp	r18, r17
    29ce:	10 f0       	brcs	.+4      	; 0x29d4 <dtoa_prf+0x70>
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <dtoa_prf+0x74>
    29d4:	12 1b       	sub	r17, r18
    29d6:	21 2f       	mov	r18, r17
    29d8:	eb 2c       	mov	r14, r11
    29da:	b4 fe       	sbrs	r11, 4
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <dtoa_prf+0x7e>
    29de:	32 2f       	mov	r19, r18
    29e0:	0a c0       	rjmp	.+20     	; 0x29f6 <dtoa_prf+0x92>
    29e2:	f6 01       	movw	r30, r12
    29e4:	32 2f       	mov	r19, r18
    29e6:	80 e2       	ldi	r24, 0x20	; 32
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <dtoa_prf+0x8a>
    29ea:	81 93       	st	Z+, r24
    29ec:	31 50       	subi	r19, 0x01	; 1
    29ee:	33 23       	and	r19, r19
    29f0:	e1 f7       	brne	.-8      	; 0x29ea <dtoa_prf+0x86>
    29f2:	c2 0e       	add	r12, r18
    29f4:	d1 1c       	adc	r13, r1
    29f6:	aa 23       	and	r26, r26
    29f8:	19 f0       	breq	.+6      	; 0x2a00 <dtoa_prf+0x9c>
    29fa:	f6 01       	movw	r30, r12
    29fc:	a1 93       	st	Z+, r26
    29fe:	6f 01       	movw	r12, r30
    2a00:	f6 01       	movw	r30, r12
    2a02:	31 96       	adiw	r30, 0x01	; 1
    2a04:	e2 fe       	sbrs	r14, 2
    2a06:	05 c0       	rjmp	.+10     	; 0x2a12 <dtoa_prf+0xae>
    2a08:	9e e4       	ldi	r25, 0x4E	; 78
    2a0a:	d6 01       	movw	r26, r12
    2a0c:	9c 93       	st	X, r25
    2a0e:	81 e4       	ldi	r24, 0x41	; 65
    2a10:	04 c0       	rjmp	.+8      	; 0x2a1a <dtoa_prf+0xb6>
    2a12:	9e e6       	ldi	r25, 0x6E	; 110
    2a14:	d6 01       	movw	r26, r12
    2a16:	9c 93       	st	X, r25
    2a18:	81 e6       	ldi	r24, 0x61	; 97
    2a1a:	11 96       	adiw	r26, 0x01	; 1
    2a1c:	8c 93       	st	X, r24
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	32 96       	adiw	r30, 0x02	; 2
    2a22:	df 01       	movw	r26, r30
    2a24:	83 2f       	mov	r24, r19
    2a26:	90 e2       	ldi	r25, 0x20	; 32
    2a28:	02 c0       	rjmp	.+4      	; 0x2a2e <dtoa_prf+0xca>
    2a2a:	9d 93       	st	X+, r25
    2a2c:	81 50       	subi	r24, 0x01	; 1
    2a2e:	88 23       	and	r24, r24
    2a30:	e1 f7       	brne	.-8      	; 0x2a2a <dtoa_prf+0xc6>
    2a32:	e3 0f       	add	r30, r19
    2a34:	f1 1d       	adc	r31, r1
    2a36:	40 c0       	rjmp	.+128    	; 0x2ab8 <dtoa_prf+0x154>
    2a38:	e2 fe       	sbrs	r14, 2
    2a3a:	42 c0       	rjmp	.+132    	; 0x2ac0 <dtoa_prf+0x15c>
    2a3c:	aa 23       	and	r26, r26
    2a3e:	11 f4       	brne	.+4      	; 0x2a44 <dtoa_prf+0xe0>
    2a40:	23 e0       	ldi	r18, 0x03	; 3
    2a42:	01 c0       	rjmp	.+2      	; 0x2a46 <dtoa_prf+0xe2>
    2a44:	24 e0       	ldi	r18, 0x04	; 4
    2a46:	21 17       	cp	r18, r17
    2a48:	10 f0       	brcs	.+4      	; 0x2a4e <dtoa_prf+0xea>
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <dtoa_prf+0xee>
    2a4e:	12 1b       	sub	r17, r18
    2a50:	21 2f       	mov	r18, r17
    2a52:	eb 2c       	mov	r14, r11
    2a54:	b4 fe       	sbrs	r11, 4
    2a56:	02 c0       	rjmp	.+4      	; 0x2a5c <dtoa_prf+0xf8>
    2a58:	92 2f       	mov	r25, r18
    2a5a:	0a c0       	rjmp	.+20     	; 0x2a70 <dtoa_prf+0x10c>
    2a5c:	f6 01       	movw	r30, r12
    2a5e:	92 2f       	mov	r25, r18
    2a60:	80 e2       	ldi	r24, 0x20	; 32
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <dtoa_prf+0x104>
    2a64:	81 93       	st	Z+, r24
    2a66:	91 50       	subi	r25, 0x01	; 1
    2a68:	99 23       	and	r25, r25
    2a6a:	e1 f7       	brne	.-8      	; 0x2a64 <dtoa_prf+0x100>
    2a6c:	c2 0e       	add	r12, r18
    2a6e:	d1 1c       	adc	r13, r1
    2a70:	aa 23       	and	r26, r26
    2a72:	19 f0       	breq	.+6      	; 0x2a7a <dtoa_prf+0x116>
    2a74:	f6 01       	movw	r30, r12
    2a76:	a1 93       	st	Z+, r26
    2a78:	6f 01       	movw	r12, r30
    2a7a:	f6 01       	movw	r30, r12
    2a7c:	31 96       	adiw	r30, 0x01	; 1
    2a7e:	e2 fe       	sbrs	r14, 2
    2a80:	08 c0       	rjmp	.+16     	; 0x2a92 <dtoa_prf+0x12e>
    2a82:	89 e4       	ldi	r24, 0x49	; 73
    2a84:	d6 01       	movw	r26, r12
    2a86:	8c 93       	st	X, r24
    2a88:	8e e4       	ldi	r24, 0x4E	; 78
    2a8a:	11 96       	adiw	r26, 0x01	; 1
    2a8c:	8c 93       	st	X, r24
    2a8e:	86 e4       	ldi	r24, 0x46	; 70
    2a90:	07 c0       	rjmp	.+14     	; 0x2aa0 <dtoa_prf+0x13c>
    2a92:	89 e6       	ldi	r24, 0x69	; 105
    2a94:	d6 01       	movw	r26, r12
    2a96:	8c 93       	st	X, r24
    2a98:	8e e6       	ldi	r24, 0x6E	; 110
    2a9a:	11 96       	adiw	r26, 0x01	; 1
    2a9c:	8c 93       	st	X, r24
    2a9e:	86 e6       	ldi	r24, 0x66	; 102
    2aa0:	81 83       	std	Z+1, r24	; 0x01
    2aa2:	32 96       	adiw	r30, 0x02	; 2
    2aa4:	df 01       	movw	r26, r30
    2aa6:	89 2f       	mov	r24, r25
    2aa8:	20 e2       	ldi	r18, 0x20	; 32
    2aaa:	02 c0       	rjmp	.+4      	; 0x2ab0 <dtoa_prf+0x14c>
    2aac:	2d 93       	st	X+, r18
    2aae:	81 50       	subi	r24, 0x01	; 1
    2ab0:	88 23       	and	r24, r24
    2ab2:	e1 f7       	brne	.-8      	; 0x2aac <dtoa_prf+0x148>
    2ab4:	e9 0f       	add	r30, r25
    2ab6:	f1 1d       	adc	r31, r1
    2ab8:	10 82       	st	Z, r1
    2aba:	2e ef       	ldi	r18, 0xFE	; 254
    2abc:	3f ef       	ldi	r19, 0xFF	; 255
    2abe:	af c0       	rjmp	.+350    	; 0x2c1e <dtoa_prf+0x2ba>
    2ac0:	16 16       	cp	r1, r22
    2ac2:	17 06       	cpc	r1, r23
    2ac4:	1c f0       	brlt	.+6      	; 0x2acc <dtoa_prf+0x168>
    2ac6:	41 e0       	ldi	r20, 0x01	; 1
    2ac8:	50 e0       	ldi	r21, 0x00	; 0
    2aca:	03 c0       	rjmp	.+6      	; 0x2ad2 <dtoa_prf+0x16e>
    2acc:	ab 01       	movw	r20, r22
    2ace:	4f 5f       	subi	r20, 0xFF	; 255
    2ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ad2:	aa 20       	and	r10, r10
    2ad4:	19 f4       	brne	.+6      	; 0x2adc <dtoa_prf+0x178>
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	03 c0       	rjmp	.+6      	; 0x2ae2 <dtoa_prf+0x17e>
    2adc:	8a 2d       	mov	r24, r10
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	01 96       	adiw	r24, 0x01	; 1
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	aa 23       	and	r26, r26
    2ae8:	11 f0       	breq	.+4      	; 0x2aee <dtoa_prf+0x18a>
    2aea:	21 e0       	ldi	r18, 0x01	; 1
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	24 0f       	add	r18, r20
    2af0:	35 1f       	adc	r19, r21
    2af2:	28 0f       	add	r18, r24
    2af4:	39 1f       	adc	r19, r25
    2af6:	81 2f       	mov	r24, r17
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	28 17       	cp	r18, r24
    2afc:	39 07       	cpc	r19, r25
    2afe:	14 f0       	brlt	.+4      	; 0x2b04 <dtoa_prf+0x1a0>
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <dtoa_prf+0x1a4>
    2b04:	12 1b       	sub	r17, r18
    2b06:	21 2f       	mov	r18, r17
    2b08:	4b 2d       	mov	r20, r11
    2b0a:	50 e0       	ldi	r21, 0x00	; 0
    2b0c:	ca 01       	movw	r24, r20
    2b0e:	80 71       	andi	r24, 0x10	; 16
    2b10:	90 70       	andi	r25, 0x00	; 0
    2b12:	b4 fc       	sbrc	r11, 4
    2b14:	0d c0       	rjmp	.+26     	; 0x2b30 <dtoa_prf+0x1cc>
    2b16:	b3 fc       	sbrc	r11, 3
    2b18:	0b c0       	rjmp	.+22     	; 0x2b30 <dtoa_prf+0x1cc>
    2b1a:	f6 01       	movw	r30, r12
    2b1c:	32 2f       	mov	r19, r18
    2b1e:	40 e2       	ldi	r20, 0x20	; 32
    2b20:	02 c0       	rjmp	.+4      	; 0x2b26 <dtoa_prf+0x1c2>
    2b22:	41 93       	st	Z+, r20
    2b24:	31 50       	subi	r19, 0x01	; 1
    2b26:	33 23       	and	r19, r19
    2b28:	e1 f7       	brne	.-8      	; 0x2b22 <dtoa_prf+0x1be>
    2b2a:	c2 0e       	add	r12, r18
    2b2c:	d1 1c       	adc	r13, r1
    2b2e:	01 c0       	rjmp	.+2      	; 0x2b32 <dtoa_prf+0x1ce>
    2b30:	32 2f       	mov	r19, r18
    2b32:	aa 23       	and	r26, r26
    2b34:	19 f0       	breq	.+6      	; 0x2b3c <dtoa_prf+0x1d8>
    2b36:	f6 01       	movw	r30, r12
    2b38:	a1 93       	st	Z+, r26
    2b3a:	6f 01       	movw	r12, r30
    2b3c:	89 2b       	or	r24, r25
    2b3e:	11 f0       	breq	.+4      	; 0x2b44 <dtoa_prf+0x1e0>
    2b40:	13 2f       	mov	r17, r19
    2b42:	0a c0       	rjmp	.+20     	; 0x2b58 <dtoa_prf+0x1f4>
    2b44:	f6 01       	movw	r30, r12
    2b46:	13 2f       	mov	r17, r19
    2b48:	80 e3       	ldi	r24, 0x30	; 48
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <dtoa_prf+0x1ec>
    2b4c:	81 93       	st	Z+, r24
    2b4e:	11 50       	subi	r17, 0x01	; 1
    2b50:	11 23       	and	r17, r17
    2b52:	e1 f7       	brne	.-8      	; 0x2b4c <dtoa_prf+0x1e8>
    2b54:	c3 0e       	add	r12, r19
    2b56:	d1 1c       	adc	r13, r1
    2b58:	09 2d       	mov	r16, r9
    2b5a:	06 0f       	add	r16, r22
    2b5c:	ba 80       	ldd	r11, Y+2	; 0x02
    2b5e:	90 e1       	ldi	r25, 0x10	; 16
    2b60:	89 2e       	mov	r8, r25
    2b62:	91 2c       	mov	r9, r1
    2b64:	8e 20       	and	r8, r14
    2b66:	9f 20       	and	r9, r15
    2b68:	e4 fe       	sbrs	r14, 4
    2b6a:	04 c0       	rjmp	.+8      	; 0x2b74 <dtoa_prf+0x210>
    2b6c:	f1 e3       	ldi	r31, 0x31	; 49
    2b6e:	bf 16       	cp	r11, r31
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <dtoa_prf+0x210>
    2b72:	01 50       	subi	r16, 0x01	; 1
    2b74:	10 16       	cp	r1, r16
    2b76:	14 f0       	brlt	.+4      	; 0x2b7c <dtoa_prf+0x218>
    2b78:	01 e0       	ldi	r16, 0x01	; 1
    2b7a:	03 c0       	rjmp	.+6      	; 0x2b82 <dtoa_prf+0x21e>
    2b7c:	09 30       	cpi	r16, 0x09	; 9
    2b7e:	08 f0       	brcs	.+2      	; 0x2b82 <dtoa_prf+0x21e>
    2b80:	08 e0       	ldi	r16, 0x08	; 8
    2b82:	9b 01       	movw	r18, r22
    2b84:	77 ff       	sbrs	r23, 7
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <dtoa_prf+0x228>
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	01 96       	adiw	r24, 0x01	; 1
    2b90:	82 1b       	sub	r24, r18
    2b92:	93 0b       	sbc	r25, r19
    2b94:	fe 01       	movw	r30, r28
    2b96:	31 96       	adiw	r30, 0x01	; 1
    2b98:	e8 0f       	add	r30, r24
    2b9a:	f9 1f       	adc	r31, r25
    2b9c:	8e e2       	ldi	r24, 0x2E	; 46
    2b9e:	f8 2e       	mov	r15, r24
    2ba0:	3b 01       	movw	r6, r22
    2ba2:	60 1a       	sub	r6, r16
    2ba4:	71 08       	sbc	r7, r1
    2ba6:	8a 2d       	mov	r24, r10
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	44 27       	eor	r20, r20
    2bac:	55 27       	eor	r21, r21
    2bae:	48 1b       	sub	r20, r24
    2bb0:	59 0b       	sbc	r21, r25
    2bb2:	8f ef       	ldi	r24, 0xFF	; 255
    2bb4:	2f 3f       	cpi	r18, 0xFF	; 255
    2bb6:	38 07       	cpc	r19, r24
    2bb8:	19 f4       	brne	.+6      	; 0x2bc0 <dtoa_prf+0x25c>
    2bba:	d6 01       	movw	r26, r12
    2bbc:	fd 92       	st	X+, r15
    2bbe:	6d 01       	movw	r12, r26
    2bc0:	62 17       	cp	r22, r18
    2bc2:	73 07       	cpc	r23, r19
    2bc4:	2c f0       	brlt	.+10     	; 0x2bd0 <dtoa_prf+0x26c>
    2bc6:	62 16       	cp	r6, r18
    2bc8:	73 06       	cpc	r7, r19
    2bca:	14 f4       	brge	.+4      	; 0x2bd0 <dtoa_prf+0x26c>
    2bcc:	80 81       	ld	r24, Z
    2bce:	01 c0       	rjmp	.+2      	; 0x2bd2 <dtoa_prf+0x26e>
    2bd0:	80 e3       	ldi	r24, 0x30	; 48
    2bd2:	21 50       	subi	r18, 0x01	; 1
    2bd4:	30 40       	sbci	r19, 0x00	; 0
    2bd6:	31 96       	adiw	r30, 0x01	; 1
    2bd8:	24 17       	cp	r18, r20
    2bda:	35 07       	cpc	r19, r21
    2bdc:	24 f0       	brlt	.+8      	; 0x2be6 <dtoa_prf+0x282>
    2bde:	d6 01       	movw	r26, r12
    2be0:	8d 93       	st	X+, r24
    2be2:	6d 01       	movw	r12, r26
    2be4:	e6 cf       	rjmp	.-52     	; 0x2bb2 <dtoa_prf+0x24e>
    2be6:	26 17       	cp	r18, r22
    2be8:	37 07       	cpc	r19, r23
    2bea:	49 f4       	brne	.+18     	; 0x2bfe <dtoa_prf+0x29a>
    2bec:	b5 e3       	ldi	r27, 0x35	; 53
    2bee:	bb 15       	cp	r27, r11
    2bf0:	28 f0       	brcs	.+10     	; 0x2bfc <dtoa_prf+0x298>
    2bf2:	bb 16       	cp	r11, r27
    2bf4:	21 f4       	brne	.+8      	; 0x2bfe <dtoa_prf+0x29a>
    2bf6:	81 14       	cp	r8, r1
    2bf8:	91 04       	cpc	r9, r1
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <dtoa_prf+0x29a>
    2bfc:	81 e3       	ldi	r24, 0x31	; 49
    2bfe:	f6 01       	movw	r30, r12
    2c00:	81 93       	st	Z+, r24
    2c02:	d6 01       	movw	r26, r12
    2c04:	81 2f       	mov	r24, r17
    2c06:	90 e2       	ldi	r25, 0x20	; 32
    2c08:	02 c0       	rjmp	.+4      	; 0x2c0e <dtoa_prf+0x2aa>
    2c0a:	9c 93       	st	X, r25
    2c0c:	81 50       	subi	r24, 0x01	; 1
    2c0e:	11 96       	adiw	r26, 0x01	; 1
    2c10:	88 23       	and	r24, r24
    2c12:	d9 f7       	brne	.-10     	; 0x2c0a <dtoa_prf+0x2a6>
    2c14:	e1 0f       	add	r30, r17
    2c16:	f1 1d       	adc	r31, r1
    2c18:	10 82       	st	Z, r1
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	c9 01       	movw	r24, r18
    2c20:	29 96       	adiw	r28, 0x09	; 9
    2c22:	ee e0       	ldi	r30, 0x0E	; 14
    2c24:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x8>

00002c28 <__ftoa_engine>:
    2c28:	28 30       	cpi	r18, 0x08	; 8
    2c2a:	08 f0       	brcs	.+2      	; 0x2c2e <__ftoa_engine+0x6>
    2c2c:	27 e0       	ldi	r18, 0x07	; 7
    2c2e:	33 27       	eor	r19, r19
    2c30:	da 01       	movw	r26, r20
    2c32:	99 0f       	add	r25, r25
    2c34:	31 1d       	adc	r19, r1
    2c36:	87 fd       	sbrc	r24, 7
    2c38:	91 60       	ori	r25, 0x01	; 1
    2c3a:	00 96       	adiw	r24, 0x00	; 0
    2c3c:	61 05       	cpc	r22, r1
    2c3e:	71 05       	cpc	r23, r1
    2c40:	39 f4       	brne	.+14     	; 0x2c50 <__ftoa_engine+0x28>
    2c42:	32 60       	ori	r19, 0x02	; 2
    2c44:	2e 5f       	subi	r18, 0xFE	; 254
    2c46:	3d 93       	st	X+, r19
    2c48:	30 e3       	ldi	r19, 0x30	; 48
    2c4a:	2a 95       	dec	r18
    2c4c:	e1 f7       	brne	.-8      	; 0x2c46 <__ftoa_engine+0x1e>
    2c4e:	08 95       	ret
    2c50:	9f 3f       	cpi	r25, 0xFF	; 255
    2c52:	30 f0       	brcs	.+12     	; 0x2c60 <__ftoa_engine+0x38>
    2c54:	80 38       	cpi	r24, 0x80	; 128
    2c56:	71 05       	cpc	r23, r1
    2c58:	61 05       	cpc	r22, r1
    2c5a:	09 f0       	breq	.+2      	; 0x2c5e <__ftoa_engine+0x36>
    2c5c:	3c 5f       	subi	r19, 0xFC	; 252
    2c5e:	3c 5f       	subi	r19, 0xFC	; 252
    2c60:	3d 93       	st	X+, r19
    2c62:	91 30       	cpi	r25, 0x01	; 1
    2c64:	08 f0       	brcs	.+2      	; 0x2c68 <__ftoa_engine+0x40>
    2c66:	80 68       	ori	r24, 0x80	; 128
    2c68:	91 1d       	adc	r25, r1
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	1f 93       	push	r17
    2c70:	0f 93       	push	r16
    2c72:	ff 92       	push	r15
    2c74:	ef 92       	push	r14
    2c76:	19 2f       	mov	r17, r25
    2c78:	98 7f       	andi	r25, 0xF8	; 248
    2c7a:	96 95       	lsr	r25
    2c7c:	e9 2f       	mov	r30, r25
    2c7e:	96 95       	lsr	r25
    2c80:	96 95       	lsr	r25
    2c82:	e9 0f       	add	r30, r25
    2c84:	ff 27       	eor	r31, r31
    2c86:	e2 55       	subi	r30, 0x52	; 82
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	99 27       	eor	r25, r25
    2c8c:	33 27       	eor	r19, r19
    2c8e:	ee 24       	eor	r14, r14
    2c90:	ff 24       	eor	r15, r15
    2c92:	a7 01       	movw	r20, r14
    2c94:	e7 01       	movw	r28, r14
    2c96:	05 90       	lpm	r0, Z+
    2c98:	08 94       	sec
    2c9a:	07 94       	ror	r0
    2c9c:	28 f4       	brcc	.+10     	; 0x2ca8 <__ftoa_engine+0x80>
    2c9e:	36 0f       	add	r19, r22
    2ca0:	e7 1e       	adc	r14, r23
    2ca2:	f8 1e       	adc	r15, r24
    2ca4:	49 1f       	adc	r20, r25
    2ca6:	51 1d       	adc	r21, r1
    2ca8:	66 0f       	add	r22, r22
    2caa:	77 1f       	adc	r23, r23
    2cac:	88 1f       	adc	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	06 94       	lsr	r0
    2cb2:	a1 f7       	brne	.-24     	; 0x2c9c <__ftoa_engine+0x74>
    2cb4:	05 90       	lpm	r0, Z+
    2cb6:	07 94       	ror	r0
    2cb8:	28 f4       	brcc	.+10     	; 0x2cc4 <__ftoa_engine+0x9c>
    2cba:	e7 0e       	add	r14, r23
    2cbc:	f8 1e       	adc	r15, r24
    2cbe:	49 1f       	adc	r20, r25
    2cc0:	56 1f       	adc	r21, r22
    2cc2:	c1 1d       	adc	r28, r1
    2cc4:	77 0f       	add	r23, r23
    2cc6:	88 1f       	adc	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	66 1f       	adc	r22, r22
    2ccc:	06 94       	lsr	r0
    2cce:	a1 f7       	brne	.-24     	; 0x2cb8 <__ftoa_engine+0x90>
    2cd0:	05 90       	lpm	r0, Z+
    2cd2:	07 94       	ror	r0
    2cd4:	28 f4       	brcc	.+10     	; 0x2ce0 <__ftoa_engine+0xb8>
    2cd6:	f8 0e       	add	r15, r24
    2cd8:	49 1f       	adc	r20, r25
    2cda:	56 1f       	adc	r21, r22
    2cdc:	c7 1f       	adc	r28, r23
    2cde:	d1 1d       	adc	r29, r1
    2ce0:	88 0f       	add	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	66 1f       	adc	r22, r22
    2ce6:	77 1f       	adc	r23, r23
    2ce8:	06 94       	lsr	r0
    2cea:	a1 f7       	brne	.-24     	; 0x2cd4 <__ftoa_engine+0xac>
    2cec:	05 90       	lpm	r0, Z+
    2cee:	07 94       	ror	r0
    2cf0:	20 f4       	brcc	.+8      	; 0x2cfa <__ftoa_engine+0xd2>
    2cf2:	49 0f       	add	r20, r25
    2cf4:	56 1f       	adc	r21, r22
    2cf6:	c7 1f       	adc	r28, r23
    2cf8:	d8 1f       	adc	r29, r24
    2cfa:	99 0f       	add	r25, r25
    2cfc:	66 1f       	adc	r22, r22
    2cfe:	77 1f       	adc	r23, r23
    2d00:	88 1f       	adc	r24, r24
    2d02:	06 94       	lsr	r0
    2d04:	a9 f7       	brne	.-22     	; 0x2cf0 <__ftoa_engine+0xc8>
    2d06:	84 91       	lpm	r24, Z+
    2d08:	10 95       	com	r17
    2d0a:	17 70       	andi	r17, 0x07	; 7
    2d0c:	41 f0       	breq	.+16     	; 0x2d1e <__ftoa_engine+0xf6>
    2d0e:	d6 95       	lsr	r29
    2d10:	c7 95       	ror	r28
    2d12:	57 95       	ror	r21
    2d14:	47 95       	ror	r20
    2d16:	f7 94       	ror	r15
    2d18:	e7 94       	ror	r14
    2d1a:	1a 95       	dec	r17
    2d1c:	c1 f7       	brne	.-16     	; 0x2d0e <__ftoa_engine+0xe6>
    2d1e:	e4 e5       	ldi	r30, 0x54	; 84
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	68 94       	set
    2d24:	15 90       	lpm	r1, Z+
    2d26:	15 91       	lpm	r17, Z+
    2d28:	35 91       	lpm	r19, Z+
    2d2a:	65 91       	lpm	r22, Z+
    2d2c:	95 91       	lpm	r25, Z+
    2d2e:	05 90       	lpm	r0, Z+
    2d30:	7f e2       	ldi	r23, 0x2F	; 47
    2d32:	73 95       	inc	r23
    2d34:	e1 18       	sub	r14, r1
    2d36:	f1 0a       	sbc	r15, r17
    2d38:	43 0b       	sbc	r20, r19
    2d3a:	56 0b       	sbc	r21, r22
    2d3c:	c9 0b       	sbc	r28, r25
    2d3e:	d0 09       	sbc	r29, r0
    2d40:	c0 f7       	brcc	.-16     	; 0x2d32 <__ftoa_engine+0x10a>
    2d42:	e1 0c       	add	r14, r1
    2d44:	f1 1e       	adc	r15, r17
    2d46:	43 1f       	adc	r20, r19
    2d48:	56 1f       	adc	r21, r22
    2d4a:	c9 1f       	adc	r28, r25
    2d4c:	d0 1d       	adc	r29, r0
    2d4e:	7e f4       	brtc	.+30     	; 0x2d6e <__ftoa_engine+0x146>
    2d50:	70 33       	cpi	r23, 0x30	; 48
    2d52:	11 f4       	brne	.+4      	; 0x2d58 <__ftoa_engine+0x130>
    2d54:	8a 95       	dec	r24
    2d56:	e6 cf       	rjmp	.-52     	; 0x2d24 <__ftoa_engine+0xfc>
    2d58:	e8 94       	clt
    2d5a:	01 50       	subi	r16, 0x01	; 1
    2d5c:	30 f0       	brcs	.+12     	; 0x2d6a <__ftoa_engine+0x142>
    2d5e:	08 0f       	add	r16, r24
    2d60:	0a f4       	brpl	.+2      	; 0x2d64 <__ftoa_engine+0x13c>
    2d62:	00 27       	eor	r16, r16
    2d64:	02 17       	cp	r16, r18
    2d66:	08 f4       	brcc	.+2      	; 0x2d6a <__ftoa_engine+0x142>
    2d68:	20 2f       	mov	r18, r16
    2d6a:	23 95       	inc	r18
    2d6c:	02 2f       	mov	r16, r18
    2d6e:	7a 33       	cpi	r23, 0x3A	; 58
    2d70:	28 f0       	brcs	.+10     	; 0x2d7c <__ftoa_engine+0x154>
    2d72:	79 e3       	ldi	r23, 0x39	; 57
    2d74:	7d 93       	st	X+, r23
    2d76:	2a 95       	dec	r18
    2d78:	e9 f7       	brne	.-6      	; 0x2d74 <__ftoa_engine+0x14c>
    2d7a:	10 c0       	rjmp	.+32     	; 0x2d9c <__ftoa_engine+0x174>
    2d7c:	7d 93       	st	X+, r23
    2d7e:	2a 95       	dec	r18
    2d80:	89 f6       	brne	.-94     	; 0x2d24 <__ftoa_engine+0xfc>
    2d82:	06 94       	lsr	r0
    2d84:	97 95       	ror	r25
    2d86:	67 95       	ror	r22
    2d88:	37 95       	ror	r19
    2d8a:	17 95       	ror	r17
    2d8c:	17 94       	ror	r1
    2d8e:	e1 18       	sub	r14, r1
    2d90:	f1 0a       	sbc	r15, r17
    2d92:	43 0b       	sbc	r20, r19
    2d94:	56 0b       	sbc	r21, r22
    2d96:	c9 0b       	sbc	r28, r25
    2d98:	d0 09       	sbc	r29, r0
    2d9a:	98 f0       	brcs	.+38     	; 0x2dc2 <__ftoa_engine+0x19a>
    2d9c:	23 95       	inc	r18
    2d9e:	7e 91       	ld	r23, -X
    2da0:	73 95       	inc	r23
    2da2:	7a 33       	cpi	r23, 0x3A	; 58
    2da4:	08 f0       	brcs	.+2      	; 0x2da8 <__ftoa_engine+0x180>
    2da6:	70 e3       	ldi	r23, 0x30	; 48
    2da8:	7c 93       	st	X, r23
    2daa:	20 13       	cpse	r18, r16
    2dac:	b8 f7       	brcc	.-18     	; 0x2d9c <__ftoa_engine+0x174>
    2dae:	7e 91       	ld	r23, -X
    2db0:	70 61       	ori	r23, 0x10	; 16
    2db2:	7d 93       	st	X+, r23
    2db4:	30 f0       	brcs	.+12     	; 0x2dc2 <__ftoa_engine+0x19a>
    2db6:	83 95       	inc	r24
    2db8:	71 e3       	ldi	r23, 0x31	; 49
    2dba:	7d 93       	st	X+, r23
    2dbc:	70 e3       	ldi	r23, 0x30	; 48
    2dbe:	2a 95       	dec	r18
    2dc0:	e1 f7       	brne	.-8      	; 0x2dba <__ftoa_engine+0x192>
    2dc2:	11 24       	eor	r1, r1
    2dc4:	ef 90       	pop	r14
    2dc6:	ff 90       	pop	r15
    2dc8:	0f 91       	pop	r16
    2dca:	1f 91       	pop	r17
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	99 27       	eor	r25, r25
    2dd2:	87 fd       	sbrc	r24, 7
    2dd4:	90 95       	com	r25
    2dd6:	08 95       	ret

00002dd8 <strrev>:
    2dd8:	dc 01       	movw	r26, r24
    2dda:	fc 01       	movw	r30, r24
    2ddc:	67 2f       	mov	r22, r23
    2dde:	71 91       	ld	r23, Z+
    2de0:	77 23       	and	r23, r23
    2de2:	e1 f7       	brne	.-8      	; 0x2ddc <strrev+0x4>
    2de4:	32 97       	sbiw	r30, 0x02	; 2
    2de6:	04 c0       	rjmp	.+8      	; 0x2df0 <strrev+0x18>
    2de8:	7c 91       	ld	r23, X
    2dea:	6d 93       	st	X+, r22
    2dec:	70 83       	st	Z, r23
    2dee:	62 91       	ld	r22, -Z
    2df0:	ae 17       	cp	r26, r30
    2df2:	bf 07       	cpc	r27, r31
    2df4:	c8 f3       	brcs	.-14     	; 0x2de8 <strrev+0x10>
    2df6:	08 95       	ret

00002df8 <__udivmodhi4>:
    2df8:	aa 1b       	sub	r26, r26
    2dfa:	bb 1b       	sub	r27, r27
    2dfc:	51 e1       	ldi	r21, 0x11	; 17
    2dfe:	07 c0       	rjmp	.+14     	; 0x2e0e <__udivmodhi4_ep>

00002e00 <__udivmodhi4_loop>:
    2e00:	aa 1f       	adc	r26, r26
    2e02:	bb 1f       	adc	r27, r27
    2e04:	a6 17       	cp	r26, r22
    2e06:	b7 07       	cpc	r27, r23
    2e08:	10 f0       	brcs	.+4      	; 0x2e0e <__udivmodhi4_ep>
    2e0a:	a6 1b       	sub	r26, r22
    2e0c:	b7 0b       	sbc	r27, r23

00002e0e <__udivmodhi4_ep>:
    2e0e:	88 1f       	adc	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	5a 95       	dec	r21
    2e14:	a9 f7       	brne	.-22     	; 0x2e00 <__udivmodhi4_loop>
    2e16:	80 95       	com	r24
    2e18:	90 95       	com	r25
    2e1a:	bc 01       	movw	r22, r24
    2e1c:	cd 01       	movw	r24, r26
    2e1e:	08 95       	ret

00002e20 <_exit>:
    2e20:	f8 94       	cli

00002e22 <__stop_program>:
    2e22:	ff cf       	rjmp	.-2      	; 0x2e22 <__stop_program>
