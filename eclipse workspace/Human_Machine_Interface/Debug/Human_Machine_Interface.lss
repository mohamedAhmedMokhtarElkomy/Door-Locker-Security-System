
Human_Machine_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d2  00800060  00003208  0000329c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800132  00800132  0000336e  2**0
                  ALLOC
  3 .stab         00002dd8  00000000  00000000  00003370  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001374  00000000  00000000  00006148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000074bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000075fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000776c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000093b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b050  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b43d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__vector_13>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__pack_f+0xba>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e8 e0       	ldi	r30, 0x08	; 8
     162:	f2 e3       	ldi	r31, 0x32	; 50
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a2 33       	cpi	r26, 0x32	; 50
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a2 e3       	ldi	r26, 0x32	; 50
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ac 33       	cpi	r26, 0x3C	; 60
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 cc 11 	call	0x2398	; 0x2398 <main>
     184:	0c 94 02 19 	jmp	0x3204	; 0x3204 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 c6 03 	call	0x78c	; 0x78c <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	ad e1       	ldi	r26, 0x1D	; 29
     222:	b1 e0       	ldi	r27, 0x01	; 1
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8d e1       	ldi	r24, 0x1D	; 29
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__>

0000072c <__gtsf2>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__prologue_saves__+0x18>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	89 e0       	ldi	r24, 0x09	; 9
     74a:	e8 2e       	mov	r14, r24
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     76c:	89 85       	ldd	r24, Y+9	; 0x09
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	40 f0       	brcs	.+16     	; 0x782 <__gtsf2+0x56>
     772:	89 89       	ldd	r24, Y+17	; 0x11
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	28 f0       	brcs	.+10     	; 0x782 <__gtsf2+0x56>
     778:	c7 01       	movw	r24, r14
     77a:	b8 01       	movw	r22, r16
     77c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     780:	01 c0       	rjmp	.+2      	; 0x784 <__gtsf2+0x58>
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	68 96       	adiw	r28, 0x18	; 24
     786:	e6 e0       	ldi	r30, 0x06	; 6
     788:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <__epilogue_restores__+0x18>

0000078c <__gesf2>:
     78c:	a8 e1       	ldi	r26, 0x18	; 24
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	ec ec       	ldi	r30, 0xCC	; 204
     792:	f3 e0       	ldi	r31, 0x03	; 3
     794:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__prologue_saves__+0x18>
     798:	69 83       	std	Y+1, r22	; 0x01
     79a:	7a 83       	std	Y+2, r23	; 0x02
     79c:	8b 83       	std	Y+3, r24	; 0x03
     79e:	9c 83       	std	Y+4, r25	; 0x04
     7a0:	2d 83       	std	Y+5, r18	; 0x05
     7a2:	3e 83       	std	Y+6, r19	; 0x06
     7a4:	4f 83       	std	Y+7, r20	; 0x07
     7a6:	58 87       	std	Y+8, r21	; 0x08
     7a8:	89 e0       	ldi	r24, 0x09	; 9
     7aa:	e8 2e       	mov	r14, r24
     7ac:	f1 2c       	mov	r15, r1
     7ae:	ec 0e       	add	r14, r28
     7b0:	fd 1e       	adc	r15, r29
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	b7 01       	movw	r22, r14
     7b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     7bc:	8e 01       	movw	r16, r28
     7be:	0f 5e       	subi	r16, 0xEF	; 239
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
     7c2:	ce 01       	movw	r24, r28
     7c4:	05 96       	adiw	r24, 0x05	; 5
     7c6:	b8 01       	movw	r22, r16
     7c8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     7cc:	89 85       	ldd	r24, Y+9	; 0x09
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	40 f0       	brcs	.+16     	; 0x7e2 <__gesf2+0x56>
     7d2:	89 89       	ldd	r24, Y+17	; 0x11
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	28 f0       	brcs	.+10     	; 0x7e2 <__gesf2+0x56>
     7d8:	c7 01       	movw	r24, r14
     7da:	b8 01       	movw	r22, r16
     7dc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <__gesf2+0x58>
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	68 96       	adiw	r28, 0x18	; 24
     7e6:	e6 e0       	ldi	r30, 0x06	; 6
     7e8:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <__epilogue_restores__+0x18>

000007ec <__ltsf2>:
     7ec:	a8 e1       	ldi	r26, 0x18	; 24
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	ec ef       	ldi	r30, 0xFC	; 252
     7f2:	f3 e0       	ldi	r31, 0x03	; 3
     7f4:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__prologue_saves__+0x18>
     7f8:	69 83       	std	Y+1, r22	; 0x01
     7fa:	7a 83       	std	Y+2, r23	; 0x02
     7fc:	8b 83       	std	Y+3, r24	; 0x03
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	2d 83       	std	Y+5, r18	; 0x05
     802:	3e 83       	std	Y+6, r19	; 0x06
     804:	4f 83       	std	Y+7, r20	; 0x07
     806:	58 87       	std	Y+8, r21	; 0x08
     808:	89 e0       	ldi	r24, 0x09	; 9
     80a:	e8 2e       	mov	r14, r24
     80c:	f1 2c       	mov	r15, r1
     80e:	ec 0e       	add	r14, r28
     810:	fd 1e       	adc	r15, r29
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	b7 01       	movw	r22, r14
     818:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     81c:	8e 01       	movw	r16, r28
     81e:	0f 5e       	subi	r16, 0xEF	; 239
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	ce 01       	movw	r24, r28
     824:	05 96       	adiw	r24, 0x05	; 5
     826:	b8 01       	movw	r22, r16
     828:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	40 f0       	brcs	.+16     	; 0x842 <__ltsf2+0x56>
     832:	89 89       	ldd	r24, Y+17	; 0x11
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	28 f0       	brcs	.+10     	; 0x842 <__ltsf2+0x56>
     838:	c7 01       	movw	r24, r14
     83a:	b8 01       	movw	r22, r16
     83c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     840:	01 c0       	rjmp	.+2      	; 0x844 <__ltsf2+0x58>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	68 96       	adiw	r28, 0x18	; 24
     846:	e6 e0       	ldi	r30, 0x06	; 6
     848:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <__epilogue_restores__+0x18>

0000084c <__fixsfsi>:
     84c:	ac e0       	ldi	r26, 0x0C	; 12
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	ec e2       	ldi	r30, 0x2C	; 44
     852:	f4 e0       	ldi	r31, 0x04	; 4
     854:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <__prologue_saves__+0x20>
     858:	69 83       	std	Y+1, r22	; 0x01
     85a:	7a 83       	std	Y+2, r23	; 0x02
     85c:	8b 83       	std	Y+3, r24	; 0x03
     85e:	9c 83       	std	Y+4, r25	; 0x04
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	be 01       	movw	r22, r28
     866:	6b 5f       	subi	r22, 0xFB	; 251
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	61 f1       	breq	.+88     	; 0x8cc <__stack+0x6d>
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	50 f1       	brcs	.+84     	; 0x8cc <__stack+0x6d>
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	21 f4       	brne	.+8      	; 0x884 <__stack+0x25>
     87c:	8e 81       	ldd	r24, Y+6	; 0x06
     87e:	88 23       	and	r24, r24
     880:	51 f1       	breq	.+84     	; 0x8d6 <__stack+0x77>
     882:	2e c0       	rjmp	.+92     	; 0x8e0 <__stack+0x81>
     884:	2f 81       	ldd	r18, Y+7	; 0x07
     886:	38 85       	ldd	r19, Y+8	; 0x08
     888:	37 fd       	sbrc	r19, 7
     88a:	20 c0       	rjmp	.+64     	; 0x8cc <__stack+0x6d>
     88c:	6e 81       	ldd	r22, Y+6	; 0x06
     88e:	2f 31       	cpi	r18, 0x1F	; 31
     890:	31 05       	cpc	r19, r1
     892:	1c f0       	brlt	.+6      	; 0x89a <__stack+0x3b>
     894:	66 23       	and	r22, r22
     896:	f9 f0       	breq	.+62     	; 0x8d6 <__stack+0x77>
     898:	23 c0       	rjmp	.+70     	; 0x8e0 <__stack+0x81>
     89a:	8e e1       	ldi	r24, 0x1E	; 30
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	82 1b       	sub	r24, r18
     8a0:	93 0b       	sbc	r25, r19
     8a2:	29 85       	ldd	r18, Y+9	; 0x09
     8a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a6:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a8:	5c 85       	ldd	r21, Y+12	; 0x0c
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	56 95       	lsr	r21
     8ae:	47 95       	ror	r20
     8b0:	37 95       	ror	r19
     8b2:	27 95       	ror	r18
     8b4:	8a 95       	dec	r24
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	66 23       	and	r22, r22
     8ba:	b1 f0       	breq	.+44     	; 0x8e8 <__stack+0x89>
     8bc:	50 95       	com	r21
     8be:	40 95       	com	r20
     8c0:	30 95       	com	r19
     8c2:	21 95       	neg	r18
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	4f 4f       	sbci	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <__stack+0x89>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <__stack+0x89>
     8d6:	2f ef       	ldi	r18, 0xFF	; 255
     8d8:	3f ef       	ldi	r19, 0xFF	; 255
     8da:	4f ef       	ldi	r20, 0xFF	; 255
     8dc:	5f e7       	ldi	r21, 0x7F	; 127
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <__stack+0x89>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e8       	ldi	r21, 0x80	; 128
     8e8:	b9 01       	movw	r22, r18
     8ea:	ca 01       	movw	r24, r20
     8ec:	2c 96       	adiw	r28, 0x0c	; 12
     8ee:	e2 e0       	ldi	r30, 0x02	; 2
     8f0:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <__epilogue_restores__+0x20>

000008f4 <__pack_f>:
     8f4:	df 92       	push	r13
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	fc 01       	movw	r30, r24
     900:	e4 80       	ldd	r14, Z+4	; 0x04
     902:	f5 80       	ldd	r15, Z+5	; 0x05
     904:	06 81       	ldd	r16, Z+6	; 0x06
     906:	17 81       	ldd	r17, Z+7	; 0x07
     908:	d1 80       	ldd	r13, Z+1	; 0x01
     90a:	80 81       	ld	r24, Z
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	48 f4       	brcc	.+18     	; 0x922 <__pack_f+0x2e>
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a0 e1       	ldi	r26, 0x10	; 16
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	e8 2a       	or	r14, r24
     91a:	f9 2a       	or	r15, r25
     91c:	0a 2b       	or	r16, r26
     91e:	1b 2b       	or	r17, r27
     920:	a5 c0       	rjmp	.+330    	; 0xa6c <__pack_f+0x178>
     922:	84 30       	cpi	r24, 0x04	; 4
     924:	09 f4       	brne	.+2      	; 0x928 <__pack_f+0x34>
     926:	9f c0       	rjmp	.+318    	; 0xa66 <__pack_f+0x172>
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	21 f4       	brne	.+8      	; 0x934 <__pack_f+0x40>
     92c:	ee 24       	eor	r14, r14
     92e:	ff 24       	eor	r15, r15
     930:	87 01       	movw	r16, r14
     932:	05 c0       	rjmp	.+10     	; 0x93e <__pack_f+0x4a>
     934:	e1 14       	cp	r14, r1
     936:	f1 04       	cpc	r15, r1
     938:	01 05       	cpc	r16, r1
     93a:	11 05       	cpc	r17, r1
     93c:	19 f4       	brne	.+6      	; 0x944 <__pack_f+0x50>
     93e:	e0 e0       	ldi	r30, 0x00	; 0
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	96 c0       	rjmp	.+300    	; 0xa70 <__pack_f+0x17c>
     944:	62 81       	ldd	r22, Z+2	; 0x02
     946:	73 81       	ldd	r23, Z+3	; 0x03
     948:	9f ef       	ldi	r25, 0xFF	; 255
     94a:	62 38       	cpi	r22, 0x82	; 130
     94c:	79 07       	cpc	r23, r25
     94e:	0c f0       	brlt	.+2      	; 0x952 <__pack_f+0x5e>
     950:	5b c0       	rjmp	.+182    	; 0xa08 <__pack_f+0x114>
     952:	22 e8       	ldi	r18, 0x82	; 130
     954:	3f ef       	ldi	r19, 0xFF	; 255
     956:	26 1b       	sub	r18, r22
     958:	37 0b       	sbc	r19, r23
     95a:	2a 31       	cpi	r18, 0x1A	; 26
     95c:	31 05       	cpc	r19, r1
     95e:	2c f0       	brlt	.+10     	; 0x96a <__pack_f+0x76>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	2a c0       	rjmp	.+84     	; 0x9be <__pack_f+0xca>
     96a:	b8 01       	movw	r22, r16
     96c:	a7 01       	movw	r20, r14
     96e:	02 2e       	mov	r0, r18
     970:	04 c0       	rjmp	.+8      	; 0x97a <__pack_f+0x86>
     972:	76 95       	lsr	r23
     974:	67 95       	ror	r22
     976:	57 95       	ror	r21
     978:	47 95       	ror	r20
     97a:	0a 94       	dec	r0
     97c:	d2 f7       	brpl	.-12     	; 0x972 <__pack_f+0x7e>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	a0 e0       	ldi	r26, 0x00	; 0
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	04 c0       	rjmp	.+8      	; 0x990 <__pack_f+0x9c>
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	aa 1f       	adc	r26, r26
     98e:	bb 1f       	adc	r27, r27
     990:	2a 95       	dec	r18
     992:	d2 f7       	brpl	.-12     	; 0x988 <__pack_f+0x94>
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	a1 09       	sbc	r26, r1
     998:	b1 09       	sbc	r27, r1
     99a:	8e 21       	and	r24, r14
     99c:	9f 21       	and	r25, r15
     99e:	a0 23       	and	r26, r16
     9a0:	b1 23       	and	r27, r17
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	21 f0       	breq	.+8      	; 0x9b2 <__pack_f+0xbe>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	9a 01       	movw	r18, r20
     9b4:	ab 01       	movw	r20, r22
     9b6:	28 2b       	or	r18, r24
     9b8:	39 2b       	or	r19, r25
     9ba:	4a 2b       	or	r20, r26
     9bc:	5b 2b       	or	r21, r27
     9be:	da 01       	movw	r26, r20
     9c0:	c9 01       	movw	r24, r18
     9c2:	8f 77       	andi	r24, 0x7F	; 127
     9c4:	90 70       	andi	r25, 0x00	; 0
     9c6:	a0 70       	andi	r26, 0x00	; 0
     9c8:	b0 70       	andi	r27, 0x00	; 0
     9ca:	80 34       	cpi	r24, 0x40	; 64
     9cc:	91 05       	cpc	r25, r1
     9ce:	a1 05       	cpc	r26, r1
     9d0:	b1 05       	cpc	r27, r1
     9d2:	39 f4       	brne	.+14     	; 0x9e2 <__pack_f+0xee>
     9d4:	27 ff       	sbrs	r18, 7
     9d6:	09 c0       	rjmp	.+18     	; 0x9ea <__pack_f+0xf6>
     9d8:	20 5c       	subi	r18, 0xC0	; 192
     9da:	3f 4f       	sbci	r19, 0xFF	; 255
     9dc:	4f 4f       	sbci	r20, 0xFF	; 255
     9de:	5f 4f       	sbci	r21, 0xFF	; 255
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__pack_f+0xf6>
     9e2:	21 5c       	subi	r18, 0xC1	; 193
     9e4:	3f 4f       	sbci	r19, 0xFF	; 255
     9e6:	4f 4f       	sbci	r20, 0xFF	; 255
     9e8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ea:	e0 e0       	ldi	r30, 0x00	; 0
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	20 30       	cpi	r18, 0x00	; 0
     9f0:	a0 e0       	ldi	r26, 0x00	; 0
     9f2:	3a 07       	cpc	r19, r26
     9f4:	a0 e0       	ldi	r26, 0x00	; 0
     9f6:	4a 07       	cpc	r20, r26
     9f8:	a0 e4       	ldi	r26, 0x40	; 64
     9fa:	5a 07       	cpc	r21, r26
     9fc:	10 f0       	brcs	.+4      	; 0xa02 <__pack_f+0x10e>
     9fe:	e1 e0       	ldi	r30, 0x01	; 1
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	79 01       	movw	r14, r18
     a04:	8a 01       	movw	r16, r20
     a06:	27 c0       	rjmp	.+78     	; 0xa56 <__pack_f+0x162>
     a08:	60 38       	cpi	r22, 0x80	; 128
     a0a:	71 05       	cpc	r23, r1
     a0c:	64 f5       	brge	.+88     	; 0xa66 <__pack_f+0x172>
     a0e:	fb 01       	movw	r30, r22
     a10:	e1 58       	subi	r30, 0x81	; 129
     a12:	ff 4f       	sbci	r31, 0xFF	; 255
     a14:	d8 01       	movw	r26, r16
     a16:	c7 01       	movw	r24, r14
     a18:	8f 77       	andi	r24, 0x7F	; 127
     a1a:	90 70       	andi	r25, 0x00	; 0
     a1c:	a0 70       	andi	r26, 0x00	; 0
     a1e:	b0 70       	andi	r27, 0x00	; 0
     a20:	80 34       	cpi	r24, 0x40	; 64
     a22:	91 05       	cpc	r25, r1
     a24:	a1 05       	cpc	r26, r1
     a26:	b1 05       	cpc	r27, r1
     a28:	39 f4       	brne	.+14     	; 0xa38 <__pack_f+0x144>
     a2a:	e7 fe       	sbrs	r14, 7
     a2c:	0d c0       	rjmp	.+26     	; 0xa48 <__pack_f+0x154>
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__pack_f+0x14c>
     a38:	8f e3       	ldi	r24, 0x3F	; 63
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	a0 e0       	ldi	r26, 0x00	; 0
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e8 0e       	add	r14, r24
     a42:	f9 1e       	adc	r15, r25
     a44:	0a 1f       	adc	r16, r26
     a46:	1b 1f       	adc	r17, r27
     a48:	17 ff       	sbrs	r17, 7
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <__pack_f+0x162>
     a4c:	16 95       	lsr	r17
     a4e:	07 95       	ror	r16
     a50:	f7 94       	ror	r15
     a52:	e7 94       	ror	r14
     a54:	31 96       	adiw	r30, 0x01	; 1
     a56:	87 e0       	ldi	r24, 0x07	; 7
     a58:	16 95       	lsr	r17
     a5a:	07 95       	ror	r16
     a5c:	f7 94       	ror	r15
     a5e:	e7 94       	ror	r14
     a60:	8a 95       	dec	r24
     a62:	d1 f7       	brne	.-12     	; 0xa58 <__pack_f+0x164>
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <__pack_f+0x17c>
     a66:	ee 24       	eor	r14, r14
     a68:	ff 24       	eor	r15, r15
     a6a:	87 01       	movw	r16, r14
     a6c:	ef ef       	ldi	r30, 0xFF	; 255
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	6e 2f       	mov	r22, r30
     a72:	67 95       	ror	r22
     a74:	66 27       	eor	r22, r22
     a76:	67 95       	ror	r22
     a78:	90 2f       	mov	r25, r16
     a7a:	9f 77       	andi	r25, 0x7F	; 127
     a7c:	d7 94       	ror	r13
     a7e:	dd 24       	eor	r13, r13
     a80:	d7 94       	ror	r13
     a82:	8e 2f       	mov	r24, r30
     a84:	86 95       	lsr	r24
     a86:	49 2f       	mov	r20, r25
     a88:	46 2b       	or	r20, r22
     a8a:	58 2f       	mov	r21, r24
     a8c:	5d 29       	or	r21, r13
     a8e:	b7 01       	movw	r22, r14
     a90:	ca 01       	movw	r24, r20
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	08 95       	ret

00000a9e <__unpack_f>:
     a9e:	fc 01       	movw	r30, r24
     aa0:	db 01       	movw	r26, r22
     aa2:	40 81       	ld	r20, Z
     aa4:	51 81       	ldd	r21, Z+1	; 0x01
     aa6:	22 81       	ldd	r18, Z+2	; 0x02
     aa8:	62 2f       	mov	r22, r18
     aaa:	6f 77       	andi	r22, 0x7F	; 127
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	22 1f       	adc	r18, r18
     ab0:	22 27       	eor	r18, r18
     ab2:	22 1f       	adc	r18, r18
     ab4:	93 81       	ldd	r25, Z+3	; 0x03
     ab6:	89 2f       	mov	r24, r25
     ab8:	88 0f       	add	r24, r24
     aba:	82 2b       	or	r24, r18
     abc:	28 2f       	mov	r18, r24
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	99 1f       	adc	r25, r25
     ac2:	99 27       	eor	r25, r25
     ac4:	99 1f       	adc	r25, r25
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	9c 93       	st	X, r25
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	21 15       	cp	r18, r1
     ace:	31 05       	cpc	r19, r1
     ad0:	a9 f5       	brne	.+106    	; 0xb3c <__unpack_f+0x9e>
     ad2:	41 15       	cp	r20, r1
     ad4:	51 05       	cpc	r21, r1
     ad6:	61 05       	cpc	r22, r1
     ad8:	71 05       	cpc	r23, r1
     ada:	11 f4       	brne	.+4      	; 0xae0 <__unpack_f+0x42>
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	37 c0       	rjmp	.+110    	; 0xb4e <__unpack_f+0xb0>
     ae0:	82 e8       	ldi	r24, 0x82	; 130
     ae2:	9f ef       	ldi	r25, 0xFF	; 255
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	9c 93       	st	X, r25
     ae8:	8e 93       	st	-X, r24
     aea:	12 97       	sbiw	r26, 0x02	; 2
     aec:	9a 01       	movw	r18, r20
     aee:	ab 01       	movw	r20, r22
     af0:	67 e0       	ldi	r22, 0x07	; 7
     af2:	22 0f       	add	r18, r18
     af4:	33 1f       	adc	r19, r19
     af6:	44 1f       	adc	r20, r20
     af8:	55 1f       	adc	r21, r21
     afa:	6a 95       	dec	r22
     afc:	d1 f7       	brne	.-12     	; 0xaf2 <__unpack_f+0x54>
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	8c 93       	st	X, r24
     b02:	0d c0       	rjmp	.+26     	; 0xb1e <__unpack_f+0x80>
     b04:	22 0f       	add	r18, r18
     b06:	33 1f       	adc	r19, r19
     b08:	44 1f       	adc	r20, r20
     b0a:	55 1f       	adc	r21, r21
     b0c:	12 96       	adiw	r26, 0x02	; 2
     b0e:	8d 91       	ld	r24, X+
     b10:	9c 91       	ld	r25, X
     b12:	13 97       	sbiw	r26, 0x03	; 3
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	13 96       	adiw	r26, 0x03	; 3
     b18:	9c 93       	st	X, r25
     b1a:	8e 93       	st	-X, r24
     b1c:	12 97       	sbiw	r26, 0x02	; 2
     b1e:	20 30       	cpi	r18, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	38 07       	cpc	r19, r24
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	48 07       	cpc	r20, r24
     b28:	80 e4       	ldi	r24, 0x40	; 64
     b2a:	58 07       	cpc	r21, r24
     b2c:	58 f3       	brcs	.-42     	; 0xb04 <__unpack_f+0x66>
     b2e:	14 96       	adiw	r26, 0x04	; 4
     b30:	2d 93       	st	X+, r18
     b32:	3d 93       	st	X+, r19
     b34:	4d 93       	st	X+, r20
     b36:	5c 93       	st	X, r21
     b38:	17 97       	sbiw	r26, 0x07	; 7
     b3a:	08 95       	ret
     b3c:	2f 3f       	cpi	r18, 0xFF	; 255
     b3e:	31 05       	cpc	r19, r1
     b40:	79 f4       	brne	.+30     	; 0xb60 <__unpack_f+0xc2>
     b42:	41 15       	cp	r20, r1
     b44:	51 05       	cpc	r21, r1
     b46:	61 05       	cpc	r22, r1
     b48:	71 05       	cpc	r23, r1
     b4a:	19 f4       	brne	.+6      	; 0xb52 <__unpack_f+0xb4>
     b4c:	84 e0       	ldi	r24, 0x04	; 4
     b4e:	8c 93       	st	X, r24
     b50:	08 95       	ret
     b52:	64 ff       	sbrs	r22, 4
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <__unpack_f+0xbe>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	8c 93       	st	X, r24
     b5a:	12 c0       	rjmp	.+36     	; 0xb80 <__unpack_f+0xe2>
     b5c:	1c 92       	st	X, r1
     b5e:	10 c0       	rjmp	.+32     	; 0xb80 <__unpack_f+0xe2>
     b60:	2f 57       	subi	r18, 0x7F	; 127
     b62:	30 40       	sbci	r19, 0x00	; 0
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	3c 93       	st	X, r19
     b68:	2e 93       	st	-X, r18
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	8c 93       	st	X, r24
     b70:	87 e0       	ldi	r24, 0x07	; 7
     b72:	44 0f       	add	r20, r20
     b74:	55 1f       	adc	r21, r21
     b76:	66 1f       	adc	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	8a 95       	dec	r24
     b7c:	d1 f7       	brne	.-12     	; 0xb72 <__unpack_f+0xd4>
     b7e:	70 64       	ori	r23, 0x40	; 64
     b80:	14 96       	adiw	r26, 0x04	; 4
     b82:	4d 93       	st	X+, r20
     b84:	5d 93       	st	X+, r21
     b86:	6d 93       	st	X+, r22
     b88:	7c 93       	st	X, r23
     b8a:	17 97       	sbiw	r26, 0x07	; 7
     b8c:	08 95       	ret

00000b8e <__fpcmp_parts_f>:
     b8e:	1f 93       	push	r17
     b90:	dc 01       	movw	r26, r24
     b92:	fb 01       	movw	r30, r22
     b94:	9c 91       	ld	r25, X
     b96:	92 30       	cpi	r25, 0x02	; 2
     b98:	08 f4       	brcc	.+2      	; 0xb9c <__fpcmp_parts_f+0xe>
     b9a:	47 c0       	rjmp	.+142    	; 0xc2a <__fpcmp_parts_f+0x9c>
     b9c:	80 81       	ld	r24, Z
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	08 f4       	brcc	.+2      	; 0xba4 <__fpcmp_parts_f+0x16>
     ba2:	43 c0       	rjmp	.+134    	; 0xc2a <__fpcmp_parts_f+0x9c>
     ba4:	94 30       	cpi	r25, 0x04	; 4
     ba6:	51 f4       	brne	.+20     	; 0xbbc <__fpcmp_parts_f+0x2e>
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	1c 91       	ld	r17, X
     bac:	84 30       	cpi	r24, 0x04	; 4
     bae:	99 f5       	brne	.+102    	; 0xc16 <__fpcmp_parts_f+0x88>
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	68 2f       	mov	r22, r24
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	61 1b       	sub	r22, r17
     bb8:	71 09       	sbc	r23, r1
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <__fpcmp_parts_f+0xac>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	21 f0       	breq	.+8      	; 0xbc8 <__fpcmp_parts_f+0x3a>
     bc0:	92 30       	cpi	r25, 0x02	; 2
     bc2:	31 f4       	brne	.+12     	; 0xbd0 <__fpcmp_parts_f+0x42>
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	b9 f1       	breq	.+110    	; 0xc36 <__fpcmp_parts_f+0xa8>
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	88 23       	and	r24, r24
     bcc:	89 f1       	breq	.+98     	; 0xc30 <__fpcmp_parts_f+0xa2>
     bce:	2d c0       	rjmp	.+90     	; 0xc2a <__fpcmp_parts_f+0x9c>
     bd0:	11 96       	adiw	r26, 0x01	; 1
     bd2:	1c 91       	ld	r17, X
     bd4:	11 97       	sbiw	r26, 0x01	; 1
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	f1 f0       	breq	.+60     	; 0xc16 <__fpcmp_parts_f+0x88>
     bda:	81 81       	ldd	r24, Z+1	; 0x01
     bdc:	18 17       	cp	r17, r24
     bde:	d9 f4       	brne	.+54     	; 0xc16 <__fpcmp_parts_f+0x88>
     be0:	12 96       	adiw	r26, 0x02	; 2
     be2:	2d 91       	ld	r18, X+
     be4:	3c 91       	ld	r19, X
     be6:	13 97       	sbiw	r26, 0x03	; 3
     be8:	82 81       	ldd	r24, Z+2	; 0x02
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	82 17       	cp	r24, r18
     bee:	93 07       	cpc	r25, r19
     bf0:	94 f0       	brlt	.+36     	; 0xc16 <__fpcmp_parts_f+0x88>
     bf2:	28 17       	cp	r18, r24
     bf4:	39 07       	cpc	r19, r25
     bf6:	bc f0       	brlt	.+46     	; 0xc26 <__fpcmp_parts_f+0x98>
     bf8:	14 96       	adiw	r26, 0x04	; 4
     bfa:	8d 91       	ld	r24, X+
     bfc:	9d 91       	ld	r25, X+
     bfe:	0d 90       	ld	r0, X+
     c00:	bc 91       	ld	r27, X
     c02:	a0 2d       	mov	r26, r0
     c04:	24 81       	ldd	r18, Z+4	; 0x04
     c06:	35 81       	ldd	r19, Z+5	; 0x05
     c08:	46 81       	ldd	r20, Z+6	; 0x06
     c0a:	57 81       	ldd	r21, Z+7	; 0x07
     c0c:	28 17       	cp	r18, r24
     c0e:	39 07       	cpc	r19, r25
     c10:	4a 07       	cpc	r20, r26
     c12:	5b 07       	cpc	r21, r27
     c14:	18 f4       	brcc	.+6      	; 0xc1c <__fpcmp_parts_f+0x8e>
     c16:	11 23       	and	r17, r17
     c18:	41 f0       	breq	.+16     	; 0xc2a <__fpcmp_parts_f+0x9c>
     c1a:	0a c0       	rjmp	.+20     	; 0xc30 <__fpcmp_parts_f+0xa2>
     c1c:	82 17       	cp	r24, r18
     c1e:	93 07       	cpc	r25, r19
     c20:	a4 07       	cpc	r26, r20
     c22:	b5 07       	cpc	r27, r21
     c24:	40 f4       	brcc	.+16     	; 0xc36 <__fpcmp_parts_f+0xa8>
     c26:	11 23       	and	r17, r17
     c28:	19 f0       	breq	.+6      	; 0xc30 <__fpcmp_parts_f+0xa2>
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <__fpcmp_parts_f+0xac>
     c30:	6f ef       	ldi	r22, 0xFF	; 255
     c32:	7f ef       	ldi	r23, 0xFF	; 255
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <__fpcmp_parts_f+0xac>
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	cb 01       	movw	r24, r22
     c3c:	1f 91       	pop	r17
     c3e:	08 95       	ret

00000c40 <__vector_13>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(USART_RXC_vect){
     c40:	1f 92       	push	r1
     c42:	0f 92       	push	r0
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	0f 92       	push	r0
     c48:	11 24       	eor	r1, r1
     c4a:	8f 93       	push	r24
     c4c:	ef 93       	push	r30
     c4e:	ff 93       	push	r31
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
	g_uartRcvData = UDR;
     c58:	ec e2       	ldi	r30, 0x2C	; 44
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	80 93 25 01 	sts	0x0125, r24
}
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	ff 91       	pop	r31
     c68:	ef 91       	pop	r30
     c6a:	8f 91       	pop	r24
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <UART_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void UART_init(){
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <UART_init+0x6>
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62

	uint16 ubrr_value = 0;
     c80:	1a 82       	std	Y+2, r1	; 0x02
     c82:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRA, U2X);		/* : Double the USART Transmission Speed */
     c84:	ab e2       	ldi	r26, 0x2B	; 43
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	eb e2       	ldi	r30, 0x2B	; 43
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	82 60       	ori	r24, 0x02	; 2
     c90:	8c 93       	st	X, r24

	SET_BIT(UCSRB, RXCIE);		/* RX Complete Interrupt Enable */
     c92:	aa e2       	ldi	r26, 0x2A	; 42
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ea e2       	ldi	r30, 0x2A	; 42
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 68       	ori	r24, 0x80	; 128
     c9e:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);		/* Transmitter Enable*/
     ca0:	aa e2       	ldi	r26, 0x2A	; 42
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	ea e2       	ldi	r30, 0x2A	; 42
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	88 60       	ori	r24, 0x08	; 8
     cac:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);		/* Receiver Enable */
     cae:	aa e2       	ldi	r26, 0x2A	; 42
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ea e2       	ldi	r30, 0x2A	; 42
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	80 61       	ori	r24, 0x10	; 16
     cba:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC, UMSEL);	/* USART Mode Select 0 -> async, 1 -> sync*/
     cbc:	a0 e4       	ldi	r26, 0x40	; 64
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e0 e4       	ldi	r30, 0x40	; 64
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	8f 7b       	andi	r24, 0xBF	; 191
     cc8:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);		/* UCSZ1:0: Character Size */
     cca:	a0 e4       	ldi	r26, 0x40	; 64
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e0 e4       	ldi	r30, 0x40	; 64
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	84 60       	ori	r24, 0x04	; 4
     cd6:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);		/* UCSZ1:0: 11 -> 8-bit */
     cd8:	a0 e4       	ldi	r26, 0x40	; 64
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e0 e4       	ldi	r30, 0x40	; 64
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	82 60       	ori	r24, 0x02	; 2
     ce4:	8c 93       	st	X, r24


	ubrr_value = (uint16)(( F_CPU / ( BAUDRATE * 8UL )) - 1 );
     ce6:	87 e6       	ldi	r24, 0x67	; 103
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = (ubrr_value >> 8) & (0x0F);
     cee:	e0 e4       	ldi	r30, 0x40	; 64
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	9a 81       	ldd	r25, Y+2	; 0x02
     cf6:	89 2f       	mov	r24, r25
     cf8:	99 27       	eor	r25, r25
     cfa:	8f 70       	andi	r24, 0x0F	; 15
     cfc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     cfe:	e9 e2       	ldi	r30, 0x29	; 41
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	80 83       	st	Z, r24
}
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <UART_sendCharacter>:

void UART_sendCharacter(uint8 data){
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
     d1c:	eb e2       	ldi	r30, 0x2B	; 43
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	88 2f       	mov	r24, r24
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	80 72       	andi	r24, 0x20	; 32
     d28:	90 70       	andi	r25, 0x00	; 0
     d2a:	00 97       	sbiw	r24, 0x00	; 0
     d2c:	b9 f3       	breq	.-18     	; 0xd1c <UART_sendCharacter+0xc>
	UDR = data;
     d2e:	ec e2       	ldi	r30, 0x2C	; 44
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	80 83       	st	Z, r24
}
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <UART_sendArray>:

void UART_sendArray(uint8 *str, uint8 str_size){
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <UART_sendArray+0x6>
     d44:	00 d0       	rcall	.+0      	; 0xd46 <UART_sendArray+0x8>
     d46:	0f 92       	push	r0
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	9c 83       	std	Y+4, r25	; 0x04
     d4e:	8b 83       	std	Y+3, r24	; 0x03
     d50:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < str_size; i++){
     d52:	1a 82       	std	Y+2, r1	; 0x02
     d54:	19 82       	std	Y+1, r1	; 0x01
     d56:	19 c0       	rjmp	.+50     	; 0xd8a <UART_sendArray+0x4c>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
     d58:	eb e2       	ldi	r30, 0x2B	; 43
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	80 72       	andi	r24, 0x20	; 32
     d64:	90 70       	andi	r25, 0x00	; 0
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	b9 f3       	breq	.-18     	; 0xd58 <UART_sendArray+0x1a>
		UDR = str[i];
     d6a:	ac e2       	ldi	r26, 0x2C	; 44
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	29 81       	ldd	r18, Y+1	; 0x01
     d70:	3a 81       	ldd	r19, Y+2	; 0x02
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	fc 01       	movw	r30, r24
     d78:	e2 0f       	add	r30, r18
     d7a:	f3 1f       	adc	r31, r19
     d7c:	80 81       	ld	r24, Z
     d7e:	8c 93       	st	X, r24
	UDR = data;
}

void UART_sendArray(uint8 *str, uint8 str_size){

	for(int i = 0; i < str_size; i++){
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	8d 81       	ldd	r24, Y+5	; 0x05
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	fc f2       	brlt	.-66     	; 0xd58 <UART_sendArray+0x1a>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
		UDR = str[i];
	}

}
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <UART_rcvCharacter>:

uint8 UART_rcvCharacter(){
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
	while( BIT_IS_CLEAR(UCSRA, RXC) ){}
     db2:	eb e2       	ldi	r30, 0x2B	; 43
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	88 23       	and	r24, r24
     dba:	dc f7       	brge	.-10     	; 0xdb2 <UART_rcvCharacter+0x8>
	return UDR;
     dbc:	ec e2       	ldi	r30, 0x2C	; 44
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
}
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <__vector_9>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(TIMER1_OVF_vect){
     dc8:	1f 92       	push	r1
     dca:	0f 92       	push	r0
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	0f 92       	push	r0
     dd0:	11 24       	eor	r1, r1
     dd2:	2f 93       	push	r18
     dd4:	3f 93       	push	r19
     dd6:	4f 93       	push	r20
     dd8:	5f 93       	push	r21
     dda:	6f 93       	push	r22
     ddc:	7f 93       	push	r23
     dde:	8f 93       	push	r24
     de0:	9f 93       	push	r25
     de2:	af 93       	push	r26
     de4:	bf 93       	push	r27
     de6:	ef 93       	push	r30
     de8:	ff 93       	push	r31
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62

	(*callBackFunction)();
     df2:	e0 91 3a 01 	lds	r30, 0x013A
     df6:	f0 91 3b 01 	lds	r31, 0x013B
     dfa:	09 95       	icall
	TCNT1 = tcnt1_value;
     dfc:	ec e4       	ldi	r30, 0x4C	; 76
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 91 32 01 	lds	r24, 0x0132
     e04:	90 91 33 01 	lds	r25, 0x0133
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	80 83       	st	Z, r24
}
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0f 90       	pop	r0
     e2e:	1f 90       	pop	r1
     e30:	18 95       	reti

00000e32 <Timer1_init>:


void Timer1_init(const ST_timer1_configType * Config_Ptr){
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	00 d0       	rcall	.+0      	; 0xe38 <Timer1_init+0x6>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	89 83       	std	Y+1, r24	; 0x01

	tcnt1_value = Config_Ptr->initial_value;
     e40:	e9 81       	ldd	r30, Y+1	; 0x01
     e42:	fa 81       	ldd	r31, Y+2	; 0x02
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	90 93 33 01 	sts	0x0133, r25
     e4c:	80 93 32 01 	sts	0x0132, r24


	TCNT1 = tcnt1_value;
     e50:	ec e4       	ldi	r30, 0x4C	; 76
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 91 32 01 	lds	r24, 0x0132
     e58:	90 91 33 01 	lds	r25, 0x0133
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	80 83       	st	Z, r24
	TCCR1B |= ( 0x07 & Config_Ptr->prescaler );
     e60:	ae e4       	ldi	r26, 0x4E	; 78
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ee e4       	ldi	r30, 0x4E	; 78
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	98 2f       	mov	r25, r24
     e6c:	e9 81       	ldd	r30, Y+1	; 0x01
     e6e:	fa 81       	ldd	r31, Y+2	; 0x02
     e70:	84 81       	ldd	r24, Z+4	; 0x04
     e72:	87 70       	andi	r24, 0x07	; 7
     e74:	89 2b       	or	r24, r25
     e76:	8c 93       	st	X, r24
	SET_BIT(TIMSK, TOIE1);	/* Overflow Interrupt Enable */
     e78:	a9 e5       	ldi	r26, 0x59	; 89
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e9 e5       	ldi	r30, 0x59	; 89
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	84 60       	ori	r24, 0x04	; 4
     e84:	8c 93       	st	X, r24


}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <Timer1_deInit>:
void Timer1_deInit(void){
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     e98:	ec e4       	ldi	r30, 0x4C	; 76
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	11 82       	std	Z+1, r1	; 0x01
     e9e:	10 82       	st	Z, r1
	TCCR1A = 0;
     ea0:	ef e4       	ldi	r30, 0x4F	; 79
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	10 82       	st	Z, r1
	TCCR1B = 0;
     ea6:	ee e4       	ldi	r30, 0x4E	; 78
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, TOIE1);
     eac:	a9 e5       	ldi	r26, 0x59	; 89
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e9 e5       	ldi	r30, 0x59	; 89
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8b 7f       	andi	r24, 0xFB	; 251
     eb8:	8c 93       	st	X, r24
}
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void)){
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <Timer1_setCallBack+0x6>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	89 83       	std	Y+1, r24	; 0x01

	callBackFunction = a_ptr;
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	90 93 3b 01 	sts	0x013B, r25
     ed6:	80 93 3a 01 	sts	0x013A, r24
}
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <GPIO_setupPinDirection>:
 *******************************************************************************/



void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	00 d0       	rcall	.+0      	; 0xeea <GPIO_setupPinDirection+0x6>
     eea:	00 d0       	rcall	.+0      	; 0xeec <GPIO_setupPinDirection+0x8>
     eec:	0f 92       	push	r0
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	6a 83       	std	Y+2, r22	; 0x02
     ef6:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	88 30       	cpi	r24, 0x08	; 8
     efc:	08 f0       	brcs	.+2      	; 0xf00 <GPIO_setupPinDirection+0x1c>
     efe:	d5 c0       	rjmp	.+426    	; 0x10aa <GPIO_setupPinDirection+0x1c6>
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	08 f0       	brcs	.+2      	; 0xf08 <GPIO_setupPinDirection+0x24>
     f06:	d1 c0       	rjmp	.+418    	; 0x10aa <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	3d 83       	std	Y+5, r19	; 0x05
     f10:	2c 83       	std	Y+4, r18	; 0x04
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	9d 81       	ldd	r25, Y+5	; 0x05
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	91 05       	cpc	r25, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <GPIO_setupPinDirection+0x3a>
     f1c:	43 c0       	rjmp	.+134    	; 0xfa4 <GPIO_setupPinDirection+0xc0>
     f1e:	2c 81       	ldd	r18, Y+4	; 0x04
     f20:	3d 81       	ldd	r19, Y+5	; 0x05
     f22:	22 30       	cpi	r18, 0x02	; 2
     f24:	31 05       	cpc	r19, r1
     f26:	2c f4       	brge	.+10     	; 0xf32 <GPIO_setupPinDirection+0x4e>
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	71 f0       	breq	.+28     	; 0xf4c <GPIO_setupPinDirection+0x68>
     f30:	bc c0       	rjmp	.+376    	; 0x10aa <GPIO_setupPinDirection+0x1c6>
     f32:	2c 81       	ldd	r18, Y+4	; 0x04
     f34:	3d 81       	ldd	r19, Y+5	; 0x05
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <GPIO_setupPinDirection+0x5a>
     f3c:	5f c0       	rjmp	.+190    	; 0xffc <GPIO_setupPinDirection+0x118>
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	9d 81       	ldd	r25, Y+5	; 0x05
     f42:	83 30       	cpi	r24, 0x03	; 3
     f44:	91 05       	cpc	r25, r1
     f46:	09 f4       	brne	.+2      	; 0xf4a <GPIO_setupPinDirection+0x66>
     f48:	85 c0       	rjmp	.+266    	; 0x1054 <GPIO_setupPinDirection+0x170>
     f4a:	af c0       	rjmp	.+350    	; 0x10aa <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	a1 f4       	brne	.+40     	; 0xf7a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f52:	aa e3       	ldi	r26, 0x3A	; 58
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ea e3       	ldi	r30, 0x3A	; 58
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_setupPinDirection+0x8c>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_setupPinDirection+0x88>
     f74:	84 2b       	or	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	98 c0       	rjmp	.+304    	; 0x10aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f7a:	aa e3       	ldi	r26, 0x3A	; 58
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	ea e3       	ldi	r30, 0x3A	; 58
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <GPIO_setupPinDirection+0xb4>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <GPIO_setupPinDirection+0xb0>
     f9c:	80 95       	com	r24
     f9e:	84 23       	and	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	83 c0       	rjmp	.+262    	; 0x10aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	a1 f4       	brne	.+40     	; 0xfd2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     faa:	a7 e3       	ldi	r26, 0x37	; 55
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e7 e3       	ldi	r30, 0x37	; 55
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <GPIO_setupPinDirection+0xe4>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <GPIO_setupPinDirection+0xe0>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	6c c0       	rjmp	.+216    	; 0x10aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     fd2:	a7 e3       	ldi	r26, 0x37	; 55
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e7 e3       	ldi	r30, 0x37	; 55
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_setupPinDirection+0x10c>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_setupPinDirection+0x108>
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	57 c0       	rjmp	.+174    	; 0x10aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	a1 f4       	brne	.+40     	; 0x102a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1002:	a4 e3       	ldi	r26, 0x34	; 52
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e4 e3       	ldi	r30, 0x34	; 52
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <GPIO_setupPinDirection+0x13c>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <GPIO_setupPinDirection+0x138>
    1024:	84 2b       	or	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	40 c0       	rjmp	.+128    	; 0x10aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    102a:	a4 e3       	ldi	r26, 0x34	; 52
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e4 e3       	ldi	r30, 0x34	; 52
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <GPIO_setupPinDirection+0x164>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <GPIO_setupPinDirection+0x160>
    104c:	80 95       	com	r24
    104e:	84 23       	and	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	2b c0       	rjmp	.+86     	; 0x10aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	a1 f4       	brne	.+40     	; 0x1082 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    105a:	a1 e3       	ldi	r26, 0x31	; 49
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e1 e3       	ldi	r30, 0x31	; 49
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <GPIO_setupPinDirection+0x194>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <GPIO_setupPinDirection+0x190>
    107c:	84 2b       	or	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	14 c0       	rjmp	.+40     	; 0x10aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1082:	a1 e3       	ldi	r26, 0x31	; 49
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e1 e3       	ldi	r30, 0x31	; 49
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <GPIO_setupPinDirection+0x1bc>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <GPIO_setupPinDirection+0x1b8>
    10a4:	80 95       	com	r24
    10a6:	84 23       	and	r24, r20
    10a8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <GPIO_writePin+0x6>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <GPIO_writePin+0x8>
    10c2:	0f 92       	push	r0
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	6a 83       	std	Y+2, r22	; 0x02
    10cc:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	88 30       	cpi	r24, 0x08	; 8
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <GPIO_writePin+0x1c>
    10d4:	d5 c0       	rjmp	.+426    	; 0x1280 <GPIO_writePin+0x1c6>
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	84 30       	cpi	r24, 0x04	; 4
    10da:	08 f0       	brcs	.+2      	; 0x10de <GPIO_writePin+0x24>
    10dc:	d1 c0       	rjmp	.+418    	; 0x1280 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3d 83       	std	Y+5, r19	; 0x05
    10e6:	2c 83       	std	Y+4, r18	; 0x04
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <GPIO_writePin+0x3a>
    10f2:	43 c0       	rjmp	.+134    	; 0x117a <GPIO_writePin+0xc0>
    10f4:	2c 81       	ldd	r18, Y+4	; 0x04
    10f6:	3d 81       	ldd	r19, Y+5	; 0x05
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	2c f4       	brge	.+10     	; 0x1108 <GPIO_writePin+0x4e>
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	71 f0       	breq	.+28     	; 0x1122 <GPIO_writePin+0x68>
    1106:	bc c0       	rjmp	.+376    	; 0x1280 <GPIO_writePin+0x1c6>
    1108:	2c 81       	ldd	r18, Y+4	; 0x04
    110a:	3d 81       	ldd	r19, Y+5	; 0x05
    110c:	22 30       	cpi	r18, 0x02	; 2
    110e:	31 05       	cpc	r19, r1
    1110:	09 f4       	brne	.+2      	; 0x1114 <GPIO_writePin+0x5a>
    1112:	5f c0       	rjmp	.+190    	; 0x11d2 <GPIO_writePin+0x118>
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	83 30       	cpi	r24, 0x03	; 3
    111a:	91 05       	cpc	r25, r1
    111c:	09 f4       	brne	.+2      	; 0x1120 <GPIO_writePin+0x66>
    111e:	85 c0       	rjmp	.+266    	; 0x122a <GPIO_writePin+0x170>
    1120:	af c0       	rjmp	.+350    	; 0x1280 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	a1 f4       	brne	.+40     	; 0x1150 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1128:	ab e3       	ldi	r26, 0x3B	; 59
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	eb e3       	ldi	r30, 0x3B	; 59
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <GPIO_writePin+0x8c>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <GPIO_writePin+0x88>
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	98 c0       	rjmp	.+304    	; 0x1280 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1150:	ab e3       	ldi	r26, 0x3B	; 59
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	eb e3       	ldi	r30, 0x3B	; 59
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <GPIO_writePin+0xb4>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <GPIO_writePin+0xb0>
    1172:	80 95       	com	r24
    1174:	84 23       	and	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	83 c0       	rjmp	.+262    	; 0x1280 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	a1 f4       	brne	.+40     	; 0x11a8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1180:	a8 e3       	ldi	r26, 0x38	; 56
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e8 e3       	ldi	r30, 0x38	; 56
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <GPIO_writePin+0xe4>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <GPIO_writePin+0xe0>
    11a2:	84 2b       	or	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	6c c0       	rjmp	.+216    	; 0x1280 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    11a8:	a8 e3       	ldi	r26, 0x38	; 56
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e8 e3       	ldi	r30, 0x38	; 56
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <GPIO_writePin+0x10c>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <GPIO_writePin+0x108>
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	57 c0       	rjmp	.+174    	; 0x1280 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	a1 f4       	brne	.+40     	; 0x1200 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11d8:	a5 e3       	ldi	r26, 0x35	; 53
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e5 e3       	ldi	r30, 0x35	; 53
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <GPIO_writePin+0x13c>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <GPIO_writePin+0x138>
    11fa:	84 2b       	or	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	40 c0       	rjmp	.+128    	; 0x1280 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1200:	a5 e3       	ldi	r26, 0x35	; 53
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e5 e3       	ldi	r30, 0x35	; 53
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <GPIO_writePin+0x164>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <GPIO_writePin+0x160>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	2b c0       	rjmp	.+86     	; 0x1280 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	a1 f4       	brne	.+40     	; 0x1258 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1230:	a2 e3       	ldi	r26, 0x32	; 50
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e2 e3       	ldi	r30, 0x32	; 50
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <GPIO_writePin+0x194>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <GPIO_writePin+0x190>
    1252:	84 2b       	or	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	14 c0       	rjmp	.+40     	; 0x1280 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1258:	a2 e3       	ldi	r26, 0x32	; 50
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e2 e3       	ldi	r30, 0x32	; 50
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <GPIO_writePin+0x1bc>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <GPIO_writePin+0x1b8>
    127a:	80 95       	com	r24
    127c:	84 23       	and	r24, r20
    127e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	00 d0       	rcall	.+0      	; 0x1296 <GPIO_readPin+0x6>
    1296:	00 d0       	rcall	.+0      	; 0x1298 <GPIO_readPin+0x8>
    1298:	0f 92       	push	r0
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    12a2:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	88 30       	cpi	r24, 0x08	; 8
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <GPIO_readPin+0x1c>
    12aa:	84 c0       	rjmp	.+264    	; 0x13b4 <GPIO_readPin+0x124>
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	84 30       	cpi	r24, 0x04	; 4
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <GPIO_readPin+0x24>
    12b2:	80 c0       	rjmp	.+256    	; 0x13b4 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	3d 83       	std	Y+5, r19	; 0x05
    12bc:	2c 83       	std	Y+4, r18	; 0x04
    12be:	4c 81       	ldd	r20, Y+4	; 0x04
    12c0:	5d 81       	ldd	r21, Y+5	; 0x05
    12c2:	41 30       	cpi	r20, 0x01	; 1
    12c4:	51 05       	cpc	r21, r1
    12c6:	79 f1       	breq	.+94     	; 0x1326 <GPIO_readPin+0x96>
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	9d 81       	ldd	r25, Y+5	; 0x05
    12cc:	82 30       	cpi	r24, 0x02	; 2
    12ce:	91 05       	cpc	r25, r1
    12d0:	34 f4       	brge	.+12     	; 0x12de <GPIO_readPin+0x4e>
    12d2:	2c 81       	ldd	r18, Y+4	; 0x04
    12d4:	3d 81       	ldd	r19, Y+5	; 0x05
    12d6:	21 15       	cp	r18, r1
    12d8:	31 05       	cpc	r19, r1
    12da:	69 f0       	breq	.+26     	; 0x12f6 <GPIO_readPin+0x66>
    12dc:	6b c0       	rjmp	.+214    	; 0x13b4 <GPIO_readPin+0x124>
    12de:	4c 81       	ldd	r20, Y+4	; 0x04
    12e0:	5d 81       	ldd	r21, Y+5	; 0x05
    12e2:	42 30       	cpi	r20, 0x02	; 2
    12e4:	51 05       	cpc	r21, r1
    12e6:	b9 f1       	breq	.+110    	; 0x1356 <GPIO_readPin+0xc6>
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	9d 81       	ldd	r25, Y+5	; 0x05
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	91 05       	cpc	r25, r1
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <GPIO_readPin+0x64>
    12f2:	49 c0       	rjmp	.+146    	; 0x1386 <GPIO_readPin+0xf6>
    12f4:	5f c0       	rjmp	.+190    	; 0x13b4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12f6:	e9 e3       	ldi	r30, 0x39	; 57
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	a9 01       	movw	r20, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <GPIO_readPin+0x7e>
    130a:	55 95       	asr	r21
    130c:	47 95       	ror	r20
    130e:	8a 95       	dec	r24
    1310:	e2 f7       	brpl	.-8      	; 0x130a <GPIO_readPin+0x7a>
    1312:	ca 01       	movw	r24, r20
    1314:	81 70       	andi	r24, 0x01	; 1
    1316:	90 70       	andi	r25, 0x00	; 0
    1318:	88 23       	and	r24, r24
    131a:	19 f0       	breq	.+6      	; 0x1322 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	49 c0       	rjmp	.+146    	; 0x13b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1322:	19 82       	std	Y+1, r1	; 0x01
    1324:	47 c0       	rjmp	.+142    	; 0x13b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1326:	e6 e3       	ldi	r30, 0x36	; 54
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	a9 01       	movw	r20, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <GPIO_readPin+0xae>
    133a:	55 95       	asr	r21
    133c:	47 95       	ror	r20
    133e:	8a 95       	dec	r24
    1340:	e2 f7       	brpl	.-8      	; 0x133a <GPIO_readPin+0xaa>
    1342:	ca 01       	movw	r24, r20
    1344:	81 70       	andi	r24, 0x01	; 1
    1346:	90 70       	andi	r25, 0x00	; 0
    1348:	88 23       	and	r24, r24
    134a:	19 f0       	breq	.+6      	; 0x1352 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	31 c0       	rjmp	.+98     	; 0x13b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1352:	19 82       	std	Y+1, r1	; 0x01
    1354:	2f c0       	rjmp	.+94     	; 0x13b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1356:	e3 e3       	ldi	r30, 0x33	; 51
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	a9 01       	movw	r20, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <GPIO_readPin+0xde>
    136a:	55 95       	asr	r21
    136c:	47 95       	ror	r20
    136e:	8a 95       	dec	r24
    1370:	e2 f7       	brpl	.-8      	; 0x136a <GPIO_readPin+0xda>
    1372:	ca 01       	movw	r24, r20
    1374:	81 70       	andi	r24, 0x01	; 1
    1376:	90 70       	andi	r25, 0x00	; 0
    1378:	88 23       	and	r24, r24
    137a:	19 f0       	breq	.+6      	; 0x1382 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	19 c0       	rjmp	.+50     	; 0x13b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1382:	19 82       	std	Y+1, r1	; 0x01
    1384:	17 c0       	rjmp	.+46     	; 0x13b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1386:	e0 e3       	ldi	r30, 0x30	; 48
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a9 01       	movw	r20, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <GPIO_readPin+0x10e>
    139a:	55 95       	asr	r21
    139c:	47 95       	ror	r20
    139e:	8a 95       	dec	r24
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <GPIO_readPin+0x10a>
    13a2:	ca 01       	movw	r24, r20
    13a4:	81 70       	andi	r24, 0x01	; 1
    13a6:	90 70       	andi	r25, 0x00	; 0
    13a8:	88 23       	and	r24, r24
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13b2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <GPIO_togglePin>:
void GPIO_togglePin(uint8 port_num, uint8 pin_num){
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <GPIO_togglePin+0x6>
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <GPIO_togglePin+0x8>
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	6a 83       	std	Y+2, r22	; 0x02


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	88 30       	cpi	r24, 0x08	; 8
    13da:	08 f0       	brcs	.+2      	; 0x13de <GPIO_togglePin+0x18>
    13dc:	72 c0       	rjmp	.+228    	; 0x14c2 <GPIO_togglePin+0xfc>
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	84 30       	cpi	r24, 0x04	; 4
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <GPIO_togglePin+0x20>
    13e4:	6e c0       	rjmp	.+220    	; 0x14c2 <GPIO_togglePin+0xfc>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	3c 83       	std	Y+4, r19	; 0x04
    13ee:	2b 83       	std	Y+3, r18	; 0x03
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	91 05       	cpc	r25, r1
    13f8:	49 f1       	breq	.+82     	; 0x144c <GPIO_togglePin+0x86>
    13fa:	2b 81       	ldd	r18, Y+3	; 0x03
    13fc:	3c 81       	ldd	r19, Y+4	; 0x04
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	2c f4       	brge	.+10     	; 0x140e <GPIO_togglePin+0x48>
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	61 f0       	breq	.+24     	; 0x1424 <GPIO_togglePin+0x5e>
    140c:	5a c0       	rjmp	.+180    	; 0x14c2 <GPIO_togglePin+0xfc>
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	71 f1       	breq	.+92     	; 0x1474 <GPIO_togglePin+0xae>
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	83 30       	cpi	r24, 0x03	; 3
    141e:	91 05       	cpc	r25, r1
    1420:	e9 f1       	breq	.+122    	; 0x149c <GPIO_togglePin+0xd6>
    1422:	4f c0       	rjmp	.+158    	; 0x14c2 <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA, pin_num);
    1424:	ab e3       	ldi	r26, 0x3B	; 59
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	eb e3       	ldi	r30, 0x3B	; 59
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <GPIO_togglePin+0x7c>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <GPIO_togglePin+0x78>
    1446:	84 27       	eor	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	3b c0       	rjmp	.+118    	; 0x14c2 <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB, pin_num);
    144c:	a8 e3       	ldi	r26, 0x38	; 56
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e8 e3       	ldi	r30, 0x38	; 56
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 2e       	mov	r0, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <GPIO_togglePin+0xa4>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <GPIO_togglePin+0xa0>
    146e:	84 27       	eor	r24, r20
    1470:	8c 93       	st	X, r24
    1472:	27 c0       	rjmp	.+78     	; 0x14c2 <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC, pin_num);
    1474:	a5 e3       	ldi	r26, 0x35	; 53
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e5 e3       	ldi	r30, 0x35	; 53
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <GPIO_togglePin+0xcc>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <GPIO_togglePin+0xc8>
    1496:	84 27       	eor	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	13 c0       	rjmp	.+38     	; 0x14c2 <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD, pin_num);
    149c:	a2 e3       	ldi	r26, 0x32	; 50
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e2 e3       	ldi	r30, 0x32	; 50
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <GPIO_togglePin+0xf4>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <GPIO_togglePin+0xf0>
    14be:	84 27       	eor	r24, r20
    14c0:	8c 93       	st	X, r24
			break;
		}
	}
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <GPIO_setupPortDirection+0x6>
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <GPIO_setupPortDirection+0x8>
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	90 f5       	brcc	.+100    	; 0x154a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	3c 83       	std	Y+4, r19	; 0x04
    14ee:	2b 83       	std	Y+3, r18	; 0x03
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	91 05       	cpc	r25, r1
    14f8:	d1 f0       	breq	.+52     	; 0x152e <GPIO_setupPortDirection+0x5e>
    14fa:	2b 81       	ldd	r18, Y+3	; 0x03
    14fc:	3c 81       	ldd	r19, Y+4	; 0x04
    14fe:	22 30       	cpi	r18, 0x02	; 2
    1500:	31 05       	cpc	r19, r1
    1502:	2c f4       	brge	.+10     	; 0x150e <GPIO_setupPortDirection+0x3e>
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	61 f0       	breq	.+24     	; 0x1524 <GPIO_setupPortDirection+0x54>
    150c:	1e c0       	rjmp	.+60     	; 0x154a <GPIO_setupPortDirection+0x7a>
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3c 81       	ldd	r19, Y+4	; 0x04
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	31 05       	cpc	r19, r1
    1516:	81 f0       	breq	.+32     	; 0x1538 <GPIO_setupPortDirection+0x68>
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	91 05       	cpc	r25, r1
    1520:	81 f0       	breq	.+32     	; 0x1542 <GPIO_setupPortDirection+0x72>
    1522:	13 c0       	rjmp	.+38     	; 0x154a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1524:	ea e3       	ldi	r30, 0x3A	; 58
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	80 83       	st	Z, r24
    152c:	0e c0       	rjmp	.+28     	; 0x154a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    152e:	e7 e3       	ldi	r30, 0x37	; 55
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	80 83       	st	Z, r24
    1536:	09 c0       	rjmp	.+18     	; 0x154a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1538:	e4 e3       	ldi	r30, 0x34	; 52
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	80 83       	st	Z, r24
    1540:	04 c0       	rjmp	.+8      	; 0x154a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1542:	e1 e3       	ldi	r30, 0x31	; 49
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	80 83       	st	Z, r24
			break;
		}
	}
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value){
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <GPIO_writePort+0x6>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <GPIO_writePort+0x8>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	84 30       	cpi	r24, 0x04	; 4
    156c:	90 f5       	brcc	.+100    	; 0x15d2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	3c 83       	std	Y+4, r19	; 0x04
    1576:	2b 83       	std	Y+3, r18	; 0x03
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	91 05       	cpc	r25, r1
    1580:	d1 f0       	breq	.+52     	; 0x15b6 <GPIO_writePort+0x5e>
    1582:	2b 81       	ldd	r18, Y+3	; 0x03
    1584:	3c 81       	ldd	r19, Y+4	; 0x04
    1586:	22 30       	cpi	r18, 0x02	; 2
    1588:	31 05       	cpc	r19, r1
    158a:	2c f4       	brge	.+10     	; 0x1596 <GPIO_writePort+0x3e>
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	61 f0       	breq	.+24     	; 0x15ac <GPIO_writePort+0x54>
    1594:	1e c0       	rjmp	.+60     	; 0x15d2 <GPIO_writePort+0x7a>
    1596:	2b 81       	ldd	r18, Y+3	; 0x03
    1598:	3c 81       	ldd	r19, Y+4	; 0x04
    159a:	22 30       	cpi	r18, 0x02	; 2
    159c:	31 05       	cpc	r19, r1
    159e:	81 f0       	breq	.+32     	; 0x15c0 <GPIO_writePort+0x68>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	83 30       	cpi	r24, 0x03	; 3
    15a6:	91 05       	cpc	r25, r1
    15a8:	81 f0       	breq	.+32     	; 0x15ca <GPIO_writePort+0x72>
    15aa:	13 c0       	rjmp	.+38     	; 0x15d2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15ac:	eb e3       	ldi	r30, 0x3B	; 59
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	80 83       	st	Z, r24
    15b4:	0e c0       	rjmp	.+28     	; 0x15d2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15b6:	e8 e3       	ldi	r30, 0x38	; 56
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	80 83       	st	Z, r24
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15c0:	e5 e3       	ldi	r30, 0x35	; 53
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	80 83       	st	Z, r24
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15ca:	e2 e3       	ldi	r30, 0x32	; 50
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	80 83       	st	Z, r24
			break;
		}
	}
}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num){
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <GPIO_readPort+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <GPIO_readPort+0x8>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
    15ee:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	84 30       	cpi	r24, 0x04	; 4
    15f4:	90 f5       	brcc	.+100    	; 0x165a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3c 83       	std	Y+4, r19	; 0x04
    15fe:	2b 83       	std	Y+3, r18	; 0x03
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	91 05       	cpc	r25, r1
    1608:	d1 f0       	breq	.+52     	; 0x163e <GPIO_readPort+0x5e>
    160a:	2b 81       	ldd	r18, Y+3	; 0x03
    160c:	3c 81       	ldd	r19, Y+4	; 0x04
    160e:	22 30       	cpi	r18, 0x02	; 2
    1610:	31 05       	cpc	r19, r1
    1612:	2c f4       	brge	.+10     	; 0x161e <GPIO_readPort+0x3e>
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	9c 81       	ldd	r25, Y+4	; 0x04
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	61 f0       	breq	.+24     	; 0x1634 <GPIO_readPort+0x54>
    161c:	1e c0       	rjmp	.+60     	; 0x165a <GPIO_readPort+0x7a>
    161e:	2b 81       	ldd	r18, Y+3	; 0x03
    1620:	3c 81       	ldd	r19, Y+4	; 0x04
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	81 f0       	breq	.+32     	; 0x1648 <GPIO_readPort+0x68>
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	91 05       	cpc	r25, r1
    1630:	81 f0       	breq	.+32     	; 0x1652 <GPIO_readPort+0x72>
    1632:	13 c0       	rjmp	.+38     	; 0x165a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1634:	e9 e3       	ldi	r30, 0x39	; 57
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	0e c0       	rjmp	.+28     	; 0x165a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    163e:	e6 e3       	ldi	r30, 0x36	; 54
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	09 c0       	rjmp	.+18     	; 0x165a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1648:	e3 e3       	ldi	r30, 0x33	; 51
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	04 c0       	rjmp	.+8      	; 0x165a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1652:	e0 e3       	ldi	r30, 0x30	; 48
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <LCD_init>:
#include "lcd.h"
#include "../../MCAL/gpio/gpio.h"
#include <util/delay.h>


void LCD_init(){
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	2e 97       	sbiw	r28, 0x0e	; 14
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_RS_PORT, LCD_RS_PIN, PIN_OUTPUT);
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	66 e0       	ldi	r22, 0x06	; 6
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT, LCD_E_PIN, PIN_OUTPUT);
    1688:	83 e0       	ldi	r24, 0x03	; 3
    168a:	67 e0       	ldi	r22, 0x07	; 7
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_setupPinDirection>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a0 ea       	ldi	r26, 0xA0	; 160
    1698:	b1 e4       	ldi	r27, 0x41	; 65
    169a:	8b 87       	std	Y+11, r24	; 0x0b
    169c:	9c 87       	std	Y+12, r25	; 0x0c
    169e:	ad 87       	std	Y+13, r26	; 0x0d
    16a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	4a ef       	ldi	r20, 0xFA	; 250
    16b0:	54 e4       	ldi	r21, 0x44	; 68
    16b2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	8f 83       	std	Y+7, r24	; 0x07
    16bc:	98 87       	std	Y+8, r25	; 0x08
    16be:	a9 87       	std	Y+9, r26	; 0x09
    16c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c2:	6f 81       	ldd	r22, Y+7	; 0x07
    16c4:	78 85       	ldd	r23, Y+8	; 0x08
    16c6:	89 85       	ldd	r24, Y+9	; 0x09
    16c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e8       	ldi	r20, 0x80	; 128
    16d0:	5f e3       	ldi	r21, 0x3F	; 63
    16d2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    16d6:	88 23       	and	r24, r24
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <LCD_init+0x7a>
		__ticks = 1;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	3f c0       	rjmp	.+126    	; 0x1762 <LCD_init+0xf8>
	else if (__tmp > 65535)
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	3f ef       	ldi	r19, 0xFF	; 255
    16f0:	4f e7       	ldi	r20, 0x7F	; 127
    16f2:	57 e4       	ldi	r21, 0x47	; 71
    16f4:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    16f8:	18 16       	cp	r1, r24
    16fa:	4c f5       	brge	.+82     	; 0x174e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1700:	8d 85       	ldd	r24, Y+13	; 0x0d
    1702:	9e 85       	ldd	r25, Y+14	; 0x0e
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e2       	ldi	r20, 0x20	; 32
    170a:	51 e4       	ldi	r21, 0x41	; 65
    170c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	8d 83       	std	Y+5, r24	; 0x05
    1724:	0f c0       	rjmp	.+30     	; 0x1744 <LCD_init+0xda>
    1726:	88 ec       	ldi	r24, 0xC8	; 200
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <LCD_init+0xc8>
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	9e 81       	ldd	r25, Y+6	; 0x06
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	69 f7       	brne	.-38     	; 0x1726 <LCD_init+0xbc>
    174c:	14 c0       	rjmp	.+40     	; 0x1776 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174e:	6f 81       	ldd	r22, Y+7	; 0x07
    1750:	78 85       	ldd	r23, Y+8	; 0x08
    1752:	89 85       	ldd	r24, Y+9	; 0x09
    1754:	9a 85       	ldd	r25, Y+10	; 0x0a
    1756:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <LCD_init+0x104>
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	6f ef       	ldi	r22, 0xFF	; 255
    177a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_CMD_2_LINES_8BITS_MODE);
    177e:	88 e3       	ldi	r24, 0x38	; 56
    1780:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CMD_DISPLAY_ON_CURSOR_OF);
    1784:	8c e0       	ldi	r24, 0x0C	; 12
    1786:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CMD_CLEAR);
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>

}
    1790:	2e 96       	adiw	r28, 0x0e	; 14
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command){
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	e9 97       	sbiw	r28, 0x39	; 57
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	89 af       	std	Y+57, r24	; 0x39
	//Clear RS
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    17b8:	83 e0       	ldi	r24, 0x03	; 3
    17ba:	66 e0       	ldi	r22, 0x06	; 6
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GPIO_writePin>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	a0 e8       	ldi	r26, 0x80	; 128
    17c8:	bf e3       	ldi	r27, 0x3F	; 63
    17ca:	8d ab       	std	Y+53, r24	; 0x35
    17cc:	9e ab       	std	Y+54, r25	; 0x36
    17ce:	af ab       	std	Y+55, r26	; 0x37
    17d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d2:	6d a9       	ldd	r22, Y+53	; 0x35
    17d4:	7e a9       	ldd	r23, Y+54	; 0x36
    17d6:	8f a9       	ldd	r24, Y+55	; 0x37
    17d8:	98 ad       	ldd	r25, Y+56	; 0x38
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a ef       	ldi	r20, 0xFA	; 250
    17e0:	54 e4       	ldi	r21, 0x44	; 68
    17e2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	89 ab       	std	Y+49, r24	; 0x31
    17ec:	9a ab       	std	Y+50, r25	; 0x32
    17ee:	ab ab       	std	Y+51, r26	; 0x33
    17f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17f2:	69 a9       	ldd	r22, Y+49	; 0x31
    17f4:	7a a9       	ldd	r23, Y+50	; 0x32
    17f6:	8b a9       	ldd	r24, Y+51	; 0x33
    17f8:	9c a9       	ldd	r25, Y+52	; 0x34
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e8       	ldi	r20, 0x80	; 128
    1800:	5f e3       	ldi	r21, 0x3F	; 63
    1802:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1806:	88 23       	and	r24, r24
    1808:	2c f4       	brge	.+10     	; 0x1814 <LCD_sendCommand+0x72>
		__ticks = 1;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	98 ab       	std	Y+48, r25	; 0x30
    1810:	8f a7       	std	Y+47, r24	; 0x2f
    1812:	3f c0       	rjmp	.+126    	; 0x1892 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1814:	69 a9       	ldd	r22, Y+49	; 0x31
    1816:	7a a9       	ldd	r23, Y+50	; 0x32
    1818:	8b a9       	ldd	r24, Y+51	; 0x33
    181a:	9c a9       	ldd	r25, Y+52	; 0x34
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	3f ef       	ldi	r19, 0xFF	; 255
    1820:	4f e7       	ldi	r20, 0x7F	; 127
    1822:	57 e4       	ldi	r21, 0x47	; 71
    1824:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1828:	18 16       	cp	r1, r24
    182a:	4c f5       	brge	.+82     	; 0x187e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182c:	6d a9       	ldd	r22, Y+53	; 0x35
    182e:	7e a9       	ldd	r23, Y+54	; 0x36
    1830:	8f a9       	ldd	r24, Y+55	; 0x37
    1832:	98 ad       	ldd	r25, Y+56	; 0x38
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e2       	ldi	r20, 0x20	; 32
    183a:	51 e4       	ldi	r21, 0x41	; 65
    183c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	98 ab       	std	Y+48, r25	; 0x30
    1852:	8f a7       	std	Y+47, r24	; 0x2f
    1854:	0f c0       	rjmp	.+30     	; 0x1874 <LCD_sendCommand+0xd2>
    1856:	88 ec       	ldi	r24, 0xC8	; 200
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	9e a7       	std	Y+46, r25	; 0x2e
    185c:	8d a7       	std	Y+45, r24	; 0x2d
    185e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1860:	9e a5       	ldd	r25, Y+46	; 0x2e
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <LCD_sendCommand+0xc0>
    1866:	9e a7       	std	Y+46, r25	; 0x2e
    1868:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186a:	8f a5       	ldd	r24, Y+47	; 0x2f
    186c:	98 a9       	ldd	r25, Y+48	; 0x30
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	98 ab       	std	Y+48, r25	; 0x30
    1872:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1874:	8f a5       	ldd	r24, Y+47	; 0x2f
    1876:	98 a9       	ldd	r25, Y+48	; 0x30
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	69 f7       	brne	.-38     	; 0x1856 <LCD_sendCommand+0xb4>
    187c:	14 c0       	rjmp	.+40     	; 0x18a6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187e:	69 a9       	ldd	r22, Y+49	; 0x31
    1880:	7a a9       	ldd	r23, Y+50	; 0x32
    1882:	8b a9       	ldd	r24, Y+51	; 0x33
    1884:	9c a9       	ldd	r25, Y+52	; 0x34
    1886:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	98 ab       	std	Y+48, r25	; 0x30
    1890:	8f a7       	std	Y+47, r24	; 0x2f
    1892:	8f a5       	ldd	r24, Y+47	; 0x2f
    1894:	98 a9       	ldd	r25, Y+48	; 0x30
    1896:	9c a7       	std	Y+44, r25	; 0x2c
    1898:	8b a7       	std	Y+43, r24	; 0x2b
    189a:	8b a5       	ldd	r24, Y+43	; 0x2b
    189c:	9c a5       	ldd	r25, Y+44	; 0x2c
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCD_sendCommand+0xfc>
    18a2:	9c a7       	std	Y+44, r25	; 0x2c
    18a4:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	//SET E
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    18a6:	83 e0       	ldi	r24, 0x03	; 3
    18a8:	67 e0       	ldi	r22, 0x07	; 7
    18aa:	41 e0       	ldi	r20, 0x01	; 1
    18ac:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GPIO_writePin>
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a0 e8       	ldi	r26, 0x80	; 128
    18b6:	bf e3       	ldi	r27, 0x3F	; 63
    18b8:	8f a3       	std	Y+39, r24	; 0x27
    18ba:	98 a7       	std	Y+40, r25	; 0x28
    18bc:	a9 a7       	std	Y+41, r26	; 0x29
    18be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c0:	6f a1       	ldd	r22, Y+39	; 0x27
    18c2:	78 a5       	ldd	r23, Y+40	; 0x28
    18c4:	89 a5       	ldd	r24, Y+41	; 0x29
    18c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	4a ef       	ldi	r20, 0xFA	; 250
    18ce:	54 e4       	ldi	r21, 0x44	; 68
    18d0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	8b a3       	std	Y+35, r24	; 0x23
    18da:	9c a3       	std	Y+36, r25	; 0x24
    18dc:	ad a3       	std	Y+37, r26	; 0x25
    18de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18e0:	6b a1       	ldd	r22, Y+35	; 0x23
    18e2:	7c a1       	ldd	r23, Y+36	; 0x24
    18e4:	8d a1       	ldd	r24, Y+37	; 0x25
    18e6:	9e a1       	ldd	r25, Y+38	; 0x26
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e8       	ldi	r20, 0x80	; 128
    18ee:	5f e3       	ldi	r21, 0x3F	; 63
    18f0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    18f4:	88 23       	and	r24, r24
    18f6:	2c f4       	brge	.+10     	; 0x1902 <LCD_sendCommand+0x160>
		__ticks = 1;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	9a a3       	std	Y+34, r25	; 0x22
    18fe:	89 a3       	std	Y+33, r24	; 0x21
    1900:	3f c0       	rjmp	.+126    	; 0x1980 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1902:	6b a1       	ldd	r22, Y+35	; 0x23
    1904:	7c a1       	ldd	r23, Y+36	; 0x24
    1906:	8d a1       	ldd	r24, Y+37	; 0x25
    1908:	9e a1       	ldd	r25, Y+38	; 0x26
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	3f ef       	ldi	r19, 0xFF	; 255
    190e:	4f e7       	ldi	r20, 0x7F	; 127
    1910:	57 e4       	ldi	r21, 0x47	; 71
    1912:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1916:	18 16       	cp	r1, r24
    1918:	4c f5       	brge	.+82     	; 0x196c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191a:	6f a1       	ldd	r22, Y+39	; 0x27
    191c:	78 a5       	ldd	r23, Y+40	; 0x28
    191e:	89 a5       	ldd	r24, Y+41	; 0x29
    1920:	9a a5       	ldd	r25, Y+42	; 0x2a
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e2       	ldi	r20, 0x20	; 32
    1928:	51 e4       	ldi	r21, 0x41	; 65
    192a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	9a a3       	std	Y+34, r25	; 0x22
    1940:	89 a3       	std	Y+33, r24	; 0x21
    1942:	0f c0       	rjmp	.+30     	; 0x1962 <LCD_sendCommand+0x1c0>
    1944:	88 ec       	ldi	r24, 0xC8	; 200
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	98 a3       	std	Y+32, r25	; 0x20
    194a:	8f 8f       	std	Y+31, r24	; 0x1f
    194c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    194e:	98 a1       	ldd	r25, Y+32	; 0x20
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <LCD_sendCommand+0x1ae>
    1954:	98 a3       	std	Y+32, r25	; 0x20
    1956:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1958:	89 a1       	ldd	r24, Y+33	; 0x21
    195a:	9a a1       	ldd	r25, Y+34	; 0x22
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	9a a3       	std	Y+34, r25	; 0x22
    1960:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1962:	89 a1       	ldd	r24, Y+33	; 0x21
    1964:	9a a1       	ldd	r25, Y+34	; 0x22
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	69 f7       	brne	.-38     	; 0x1944 <LCD_sendCommand+0x1a2>
    196a:	14 c0       	rjmp	.+40     	; 0x1994 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196c:	6b a1       	ldd	r22, Y+35	; 0x23
    196e:	7c a1       	ldd	r23, Y+36	; 0x24
    1970:	8d a1       	ldd	r24, Y+37	; 0x25
    1972:	9e a1       	ldd	r25, Y+38	; 0x26
    1974:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	9a a3       	std	Y+34, r25	; 0x22
    197e:	89 a3       	std	Y+33, r24	; 0x21
    1980:	89 a1       	ldd	r24, Y+33	; 0x21
    1982:	9a a1       	ldd	r25, Y+34	; 0x22
    1984:	9e 8f       	std	Y+30, r25	; 0x1e
    1986:	8d 8f       	std	Y+29, r24	; 0x1d
    1988:	8d 8d       	ldd	r24, Y+29	; 0x1d
    198a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <LCD_sendCommand+0x1ea>
    1990:	9e 8f       	std	Y+30, r25	; 0x1e
    1992:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);


	GPIO_writePort(LCD_DATA_PORT, command);
    1994:	82 e0       	ldi	r24, 0x02	; 2
    1996:	69 ad       	ldd	r22, Y+57	; 0x39
    1998:	0e 94 ac 0a 	call	0x1558	; 0x1558 <GPIO_writePort>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	a0 e8       	ldi	r26, 0x80	; 128
    19a2:	bf e3       	ldi	r27, 0x3F	; 63
    19a4:	89 8f       	std	Y+25, r24	; 0x19
    19a6:	9a 8f       	std	Y+26, r25	; 0x1a
    19a8:	ab 8f       	std	Y+27, r26	; 0x1b
    19aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ac:	69 8d       	ldd	r22, Y+25	; 0x19
    19ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a ef       	ldi	r20, 0xFA	; 250
    19ba:	54 e4       	ldi	r21, 0x44	; 68
    19bc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	8d 8b       	std	Y+21, r24	; 0x15
    19c6:	9e 8b       	std	Y+22, r25	; 0x16
    19c8:	af 8b       	std	Y+23, r26	; 0x17
    19ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19cc:	6d 89       	ldd	r22, Y+21	; 0x15
    19ce:	7e 89       	ldd	r23, Y+22	; 0x16
    19d0:	8f 89       	ldd	r24, Y+23	; 0x17
    19d2:	98 8d       	ldd	r25, Y+24	; 0x18
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e8       	ldi	r20, 0x80	; 128
    19da:	5f e3       	ldi	r21, 0x3F	; 63
    19dc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    19e0:	88 23       	and	r24, r24
    19e2:	2c f4       	brge	.+10     	; 0x19ee <LCD_sendCommand+0x24c>
		__ticks = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9c 8b       	std	Y+20, r25	; 0x14
    19ea:	8b 8b       	std	Y+19, r24	; 0x13
    19ec:	3f c0       	rjmp	.+126    	; 0x1a6c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    19ee:	6d 89       	ldd	r22, Y+21	; 0x15
    19f0:	7e 89       	ldd	r23, Y+22	; 0x16
    19f2:	8f 89       	ldd	r24, Y+23	; 0x17
    19f4:	98 8d       	ldd	r25, Y+24	; 0x18
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
    19fa:	4f e7       	ldi	r20, 0x7F	; 127
    19fc:	57 e4       	ldi	r21, 0x47	; 71
    19fe:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	4c f5       	brge	.+82     	; 0x1a58 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a06:	69 8d       	ldd	r22, Y+25	; 0x19
    1a08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e2       	ldi	r20, 0x20	; 32
    1a14:	51 e4       	ldi	r21, 0x41	; 65
    1a16:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9c 8b       	std	Y+20, r25	; 0x14
    1a2c:	8b 8b       	std	Y+19, r24	; 0x13
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <LCD_sendCommand+0x2ac>
    1a30:	88 ec       	ldi	r24, 0xC8	; 200
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9a 8b       	std	Y+18, r25	; 0x12
    1a36:	89 8b       	std	Y+17, r24	; 0x11
    1a38:	89 89       	ldd	r24, Y+17	; 0x11
    1a3a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_sendCommand+0x29a>
    1a40:	9a 8b       	std	Y+18, r25	; 0x12
    1a42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a44:	8b 89       	ldd	r24, Y+19	; 0x13
    1a46:	9c 89       	ldd	r25, Y+20	; 0x14
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	9c 8b       	std	Y+20, r25	; 0x14
    1a4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a50:	9c 89       	ldd	r25, Y+20	; 0x14
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	69 f7       	brne	.-38     	; 0x1a30 <LCD_sendCommand+0x28e>
    1a56:	14 c0       	rjmp	.+40     	; 0x1a80 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a58:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a60:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9c 8b       	std	Y+20, r25	; 0x14
    1a6a:	8b 8b       	std	Y+19, r24	; 0x13
    1a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a70:	98 8b       	std	Y+16, r25	; 0x10
    1a72:	8f 87       	std	Y+15, r24	; 0x0f
    1a74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a76:	98 89       	ldd	r25, Y+16	; 0x10
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <LCD_sendCommand+0x2d6>
    1a7c:	98 8b       	std	Y+16, r25	; 0x10
    1a7e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	//CLEAR E
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	67 e0       	ldi	r22, 0x07	; 7
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GPIO_writePin>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e8       	ldi	r26, 0x80	; 128
    1a90:	bf e3       	ldi	r27, 0x3F	; 63
    1a92:	8b 87       	std	Y+11, r24	; 0x0b
    1a94:	9c 87       	std	Y+12, r25	; 0x0c
    1a96:	ad 87       	std	Y+13, r26	; 0x0d
    1a98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4a ef       	ldi	r20, 0xFA	; 250
    1aa8:	54 e4       	ldi	r21, 0x44	; 68
    1aaa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	8f 83       	std	Y+7, r24	; 0x07
    1ab4:	98 87       	std	Y+8, r25	; 0x08
    1ab6:	a9 87       	std	Y+9, r26	; 0x09
    1ab8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aba:	6f 81       	ldd	r22, Y+7	; 0x07
    1abc:	78 85       	ldd	r23, Y+8	; 0x08
    1abe:	89 85       	ldd	r24, Y+9	; 0x09
    1ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <LCD_sendCommand+0x33a>
		__ticks = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	3f c0       	rjmp	.+126    	; 0x1b5a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1adc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ade:	78 85       	ldd	r23, Y+8	; 0x08
    1ae0:	89 85       	ldd	r24, Y+9	; 0x09
    1ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	57 e4       	ldi	r21, 0x47	; 71
    1aec:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1af0:	18 16       	cp	r1, r24
    1af2:	4c f5       	brge	.+82     	; 0x1b46 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <LCD_sendCommand+0x39a>
    1b1e:	88 ec       	ldi	r24, 0xC8	; 200
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9c 83       	std	Y+4, r25	; 0x04
    1b24:	8b 83       	std	Y+3, r24	; 0x03
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_sendCommand+0x388>
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	69 f7       	brne	.-38     	; 0x1b1e <LCD_sendCommand+0x37c>
    1b44:	14 c0       	rjmp	.+40     	; 0x1b6e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b46:	6f 81       	ldd	r22, Y+7	; 0x07
    1b48:	78 85       	ldd	r23, Y+8	; 0x08
    1b4a:	89 85       	ldd	r24, Y+9	; 0x09
    1b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <LCD_sendCommand+0x3c4>
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);

}
    1b6e:	e9 96       	adiw	r28, 0x39	; 57
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 character){
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	e9 97       	sbiw	r28, 0x39	; 57
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	89 af       	std	Y+57, r24	; 0x39
	//Set RS
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
    1b96:	83 e0       	ldi	r24, 0x03	; 3
    1b98:	66 e0       	ldi	r22, 0x06	; 6
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GPIO_writePin>
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	a0 e8       	ldi	r26, 0x80	; 128
    1ba6:	bf e3       	ldi	r27, 0x3F	; 63
    1ba8:	8d ab       	std	Y+53, r24	; 0x35
    1baa:	9e ab       	std	Y+54, r25	; 0x36
    1bac:	af ab       	std	Y+55, r26	; 0x37
    1bae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb0:	6d a9       	ldd	r22, Y+53	; 0x35
    1bb2:	7e a9       	ldd	r23, Y+54	; 0x36
    1bb4:	8f a9       	ldd	r24, Y+55	; 0x37
    1bb6:	98 ad       	ldd	r25, Y+56	; 0x38
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a ef       	ldi	r20, 0xFA	; 250
    1bbe:	54 e4       	ldi	r21, 0x44	; 68
    1bc0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	89 ab       	std	Y+49, r24	; 0x31
    1bca:	9a ab       	std	Y+50, r25	; 0x32
    1bcc:	ab ab       	std	Y+51, r26	; 0x33
    1bce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bd0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bd4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bd6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	2c f4       	brge	.+10     	; 0x1bf2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	98 ab       	std	Y+48, r25	; 0x30
    1bee:	8f a7       	std	Y+47, r24	; 0x2f
    1bf0:	3f c0       	rjmp	.+126    	; 0x1c70 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1bf2:	69 a9       	ldd	r22, Y+49	; 0x31
    1bf4:	7a a9       	ldd	r23, Y+50	; 0x32
    1bf6:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1c06:	18 16       	cp	r1, r24
    1c08:	4c f5       	brge	.+82     	; 0x1c5c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c0c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c0e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c10:	98 ad       	ldd	r25, Y+56	; 0x38
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	98 ab       	std	Y+48, r25	; 0x30
    1c30:	8f a7       	std	Y+47, r24	; 0x2f
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <LCD_displayCharacter+0xd2>
    1c34:	88 ec       	ldi	r24, 0xC8	; 200
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9e a7       	std	Y+46, r25	; 0x2e
    1c3a:	8d a7       	std	Y+45, r24	; 0x2d
    1c3c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c3e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <LCD_displayCharacter+0xc0>
    1c44:	9e a7       	std	Y+46, r25	; 0x2e
    1c46:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	98 ab       	std	Y+48, r25	; 0x30
    1c50:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c54:	98 a9       	ldd	r25, Y+48	; 0x30
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <LCD_displayCharacter+0xb4>
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c60:	8b a9       	ldd	r24, Y+51	; 0x33
    1c62:	9c a9       	ldd	r25, Y+52	; 0x34
    1c64:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	98 ab       	std	Y+48, r25	; 0x30
    1c6e:	8f a7       	std	Y+47, r24	; 0x2f
    1c70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c72:	98 a9       	ldd	r25, Y+48	; 0x30
    1c74:	9c a7       	std	Y+44, r25	; 0x2c
    1c76:	8b a7       	std	Y+43, r24	; 0x2b
    1c78:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_displayCharacter+0xfc>
    1c80:	9c a7       	std	Y+44, r25	; 0x2c
    1c82:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	//SET E
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    1c84:	83 e0       	ldi	r24, 0x03	; 3
    1c86:	67 e0       	ldi	r22, 0x07	; 7
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GPIO_writePin>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e8       	ldi	r26, 0x80	; 128
    1c94:	bf e3       	ldi	r27, 0x3F	; 63
    1c96:	8f a3       	std	Y+39, r24	; 0x27
    1c98:	98 a7       	std	Y+40, r25	; 0x28
    1c9a:	a9 a7       	std	Y+41, r26	; 0x29
    1c9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4a ef       	ldi	r20, 0xFA	; 250
    1cac:	54 e4       	ldi	r21, 0x44	; 68
    1cae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	8b a3       	std	Y+35, r24	; 0x23
    1cb8:	9c a3       	std	Y+36, r25	; 0x24
    1cba:	ad a3       	std	Y+37, r26	; 0x25
    1cbc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cbe:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9a a3       	std	Y+34, r25	; 0x22
    1cdc:	89 a3       	std	Y+33, r24	; 0x21
    1cde:	3f c0       	rjmp	.+126    	; 0x1d5e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1ce0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	4c f5       	brge	.+82     	; 0x1d4a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	6f a1       	ldd	r22, Y+39	; 0x27
    1cfa:	78 a5       	ldd	r23, Y+40	; 0x28
    1cfc:	89 a5       	ldd	r24, Y+41	; 0x29
    1cfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9a a3       	std	Y+34, r25	; 0x22
    1d1e:	89 a3       	std	Y+33, r24	; 0x21
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <LCD_displayCharacter+0x1c0>
    1d22:	88 ec       	ldi	r24, 0xC8	; 200
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	98 a3       	std	Y+32, r25	; 0x20
    1d28:	8f 8f       	std	Y+31, r24	; 0x1f
    1d2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d2c:	98 a1       	ldd	r25, Y+32	; 0x20
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_displayCharacter+0x1ae>
    1d32:	98 a3       	std	Y+32, r25	; 0x20
    1d34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	89 a1       	ldd	r24, Y+33	; 0x21
    1d38:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	9a a3       	std	Y+34, r25	; 0x22
    1d3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	89 a1       	ldd	r24, Y+33	; 0x21
    1d42:	9a a1       	ldd	r25, Y+34	; 0x22
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <LCD_displayCharacter+0x1a2>
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d50:	9e a1       	ldd	r25, Y+38	; 0x26
    1d52:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	9a a3       	std	Y+34, r25	; 0x22
    1d5c:	89 a3       	std	Y+33, r24	; 0x21
    1d5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d60:	9a a1       	ldd	r25, Y+34	; 0x22
    1d62:	9e 8f       	std	Y+30, r25	; 0x1e
    1d64:	8d 8f       	std	Y+29, r24	; 0x1d
    1d66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_displayCharacter+0x1ea>
    1d6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d70:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);


	GPIO_writePort(LCD_DATA_PORT, character);
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	69 ad       	ldd	r22, Y+57	; 0x39
    1d76:	0e 94 ac 0a 	call	0x1558	; 0x1558 <GPIO_writePort>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e8       	ldi	r26, 0x80	; 128
    1d80:	bf e3       	ldi	r27, 0x3F	; 63
    1d82:	89 8f       	std	Y+25, r24	; 0x19
    1d84:	9a 8f       	std	Y+26, r25	; 0x1a
    1d86:	ab 8f       	std	Y+27, r26	; 0x1b
    1d88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	4a ef       	ldi	r20, 0xFA	; 250
    1d98:	54 e4       	ldi	r21, 0x44	; 68
    1d9a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	8d 8b       	std	Y+21, r24	; 0x15
    1da4:	9e 8b       	std	Y+22, r25	; 0x16
    1da6:	af 8b       	std	Y+23, r26	; 0x17
    1da8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1daa:	6d 89       	ldd	r22, Y+21	; 0x15
    1dac:	7e 89       	ldd	r23, Y+22	; 0x16
    1dae:	8f 89       	ldd	r24, Y+23	; 0x17
    1db0:	98 8d       	ldd	r25, Y+24	; 0x18
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	2c f4       	brge	.+10     	; 0x1dcc <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	9c 8b       	std	Y+20, r25	; 0x14
    1dc8:	8b 8b       	std	Y+19, r24	; 0x13
    1dca:	3f c0       	rjmp	.+126    	; 0x1e4a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dce:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	4f e7       	ldi	r20, 0x7F	; 127
    1dda:	57 e4       	ldi	r21, 0x47	; 71
    1ddc:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1de0:	18 16       	cp	r1, r24
    1de2:	4c f5       	brge	.+82     	; 0x1e36 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de4:	69 8d       	ldd	r22, Y+25	; 0x19
    1de6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e2       	ldi	r20, 0x20	; 32
    1df2:	51 e4       	ldi	r21, 0x41	; 65
    1df4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9c 8b       	std	Y+20, r25	; 0x14
    1e0a:	8b 8b       	std	Y+19, r24	; 0x13
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <LCD_displayCharacter+0x2ac>
    1e0e:	88 ec       	ldi	r24, 0xC8	; 200
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9a 8b       	std	Y+18, r25	; 0x12
    1e14:	89 8b       	std	Y+17, r24	; 0x11
    1e16:	89 89       	ldd	r24, Y+17	; 0x11
    1e18:	9a 89       	ldd	r25, Y+18	; 0x12
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_displayCharacter+0x29a>
    1e1e:	9a 8b       	std	Y+18, r25	; 0x12
    1e20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e22:	8b 89       	ldd	r24, Y+19	; 0x13
    1e24:	9c 89       	ldd	r25, Y+20	; 0x14
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	9c 8b       	std	Y+20, r25	; 0x14
    1e2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	69 f7       	brne	.-38     	; 0x1e0e <LCD_displayCharacter+0x28e>
    1e34:	14 c0       	rjmp	.+40     	; 0x1e5e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e36:	6d 89       	ldd	r22, Y+21	; 0x15
    1e38:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	9c 8b       	std	Y+20, r25	; 0x14
    1e48:	8b 8b       	std	Y+19, r24	; 0x13
    1e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4e:	98 8b       	std	Y+16, r25	; 0x10
    1e50:	8f 87       	std	Y+15, r24	; 0x0f
    1e52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e54:	98 89       	ldd	r25, Y+16	; 0x10
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <LCD_displayCharacter+0x2d6>
    1e5a:	98 8b       	std	Y+16, r25	; 0x10
    1e5c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	//CLEAR E
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	67 e0       	ldi	r22, 0x07	; 7
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GPIO_writePin>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e8       	ldi	r26, 0x80	; 128
    1e6e:	bf e3       	ldi	r27, 0x3F	; 63
    1e70:	8b 87       	std	Y+11, r24	; 0x0b
    1e72:	9c 87       	std	Y+12, r25	; 0x0c
    1e74:	ad 87       	std	Y+13, r26	; 0x0d
    1e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a ef       	ldi	r20, 0xFA	; 250
    1e86:	54 e4       	ldi	r21, 0x44	; 68
    1e88:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8f 83       	std	Y+7, r24	; 0x07
    1e92:	98 87       	std	Y+8, r25	; 0x08
    1e94:	a9 87       	std	Y+9, r26	; 0x09
    1e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e98:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9a:	78 85       	ldd	r23, Y+8	; 0x08
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1eba:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebc:	78 85       	ldd	r23, Y+8	; 0x08
    1ebe:	89 85       	ldd	r24, Y+9	; 0x09
    1ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <LCD_displayCharacter+0x39a>
    1efc:	88 ec       	ldi	r24, 0xC8	; 200
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	9c 81       	ldd	r25, Y+4	; 0x04
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD_displayCharacter+0x388>
    1f0c:	9c 83       	std	Y+4, r25	; 0x04
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9e 83       	std	Y+6, r25	; 0x06
    1f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <LCD_displayCharacter+0x37c>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6f 81       	ldd	r22, Y+7	; 0x07
    1f26:	78 85       	ldd	r23, Y+8	; 0x08
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_displayCharacter+0x3c4>
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);

}
    1f4c:	e9 96       	adiw	r28, 0x39	; 57
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <LCD_displayString>:
void LCD_displayString(const char *str){
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <LCD_displayString+0x6>
    1f64:	0f 92       	push	r0
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	9b 83       	std	Y+3, r25	; 0x03
    1f6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f6e:	19 82       	std	Y+1, r1	; 0x01
    1f70:	0e c0       	rjmp	.+28     	; 0x1f8e <LCD_displayString+0x30>
	while(str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	e2 0f       	add	r30, r18
    1f80:	f3 1f       	adc	r31, r19
    1f82:	80 81       	ld	r24, Z
    1f84:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <LCD_displayCharacter>
		i++;
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	8f 5f       	subi	r24, 0xFF	; 255
    1f8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
void LCD_displayString(const char *str){
	uint8 i = 0;
	while(str[i] != '\0')
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	9b 81       	ldd	r25, Y+3	; 0x03
    1f98:	fc 01       	movw	r30, r24
    1f9a:	e2 0f       	add	r30, r18
    1f9c:	f3 1f       	adc	r31, r19
    1f9e:	80 81       	ld	r24, Z
    1fa0:	88 23       	and	r24, r24
    1fa2:	39 f7       	brne	.-50     	; 0x1f72 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row, uint8 col){
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <LCD_moveCursor+0x6>
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <LCD_moveCursor+0x8>
    1fb8:	0f 92       	push	r0
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	8a 83       	std	Y+2, r24	; 0x02
    1fc0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	3d 83       	std	Y+5, r19	; 0x05
    1fca:	2c 83       	std	Y+4, r18	; 0x04
    1fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fce:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	c1 f0       	breq	.+48     	; 0x2006 <LCD_moveCursor+0x56>
    1fd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fda:	22 30       	cpi	r18, 0x02	; 2
    1fdc:	31 05       	cpc	r19, r1
    1fde:	2c f4       	brge	.+10     	; 0x1fea <LCD_moveCursor+0x3a>
    1fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	61 f0       	breq	.+24     	; 0x2000 <LCD_moveCursor+0x50>
    1fe8:	19 c0       	rjmp	.+50     	; 0x201c <LCD_moveCursor+0x6c>
    1fea:	2c 81       	ldd	r18, Y+4	; 0x04
    1fec:	3d 81       	ldd	r19, Y+5	; 0x05
    1fee:	22 30       	cpi	r18, 0x02	; 2
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	69 f0       	breq	.+26     	; 0x200e <LCD_moveCursor+0x5e>
    1ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff8:	83 30       	cpi	r24, 0x03	; 3
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	61 f0       	breq	.+24     	; 0x2016 <LCD_moveCursor+0x66>
    1ffe:	0e c0       	rjmp	.+28     	; 0x201c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	0b c0       	rjmp	.+22     	; 0x201c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	80 5c       	subi	r24, 0xC0	; 192
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	07 c0       	rjmp	.+14     	; 0x201c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	80 5f       	subi	r24, 0xF0	; 240
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	03 c0       	rjmp	.+6      	; 0x201c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	80 5b       	subi	r24, 0xB0	; 176
    201a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	LCD_sendCommand(lcd_memory_address | LCD_CMD_FORCE_CURSOR_BEGINNING_1STLINE);
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	80 68       	ori	r24, 0x80	; 128
    2020:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>
}
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *str){
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	00 d0       	rcall	.+0      	; 0x203a <LCD_displayStringRowColumn+0x6>
    203a:	00 d0       	rcall	.+0      	; 0x203c <LCD_displayStringRowColumn+0x8>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	6a 83       	std	Y+2, r22	; 0x02
    2044:	5c 83       	std	Y+4, r21	; 0x04
    2046:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	6a 81       	ldd	r22, Y+2	; 0x02
    204c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
	LCD_displayString(str);
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
}
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <LCD_clearScreen>:
void LCD_clearScreen(void){
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CMD_CLEAR);
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>
}
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <LCD_integerToString>:
void LCD_integerToString(uint16 number){
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	62 97       	sbiw	r28, 0x12	; 18
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	9a 8b       	std	Y+18, r25	; 0x12
    2090:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(number,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2092:	89 89       	ldd	r24, Y+17	; 0x11
    2094:	9a 89       	ldd	r25, Y+18	; 0x12
    2096:	9e 01       	movw	r18, r28
    2098:	2f 5f       	subi	r18, 0xFF	; 255
    209a:	3f 4f       	sbci	r19, 0xFF	; 255
    209c:	b9 01       	movw	r22, r18
    209e:	4a e0       	ldi	r20, 0x0A	; 10
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	0e 94 83 16 	call	0x2d06	; 0x2d06 <itoa>
	LCD_displayString(buff); /* Display the string */
    20a6:	ce 01       	movw	r24, r28
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
}
    20ae:	62 96       	adiw	r28, 0x12	; 18
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <LCD_floatToString>:

void LCD_floatToString(float number){
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	64 97       	sbiw	r28, 0x14	; 20
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	69 8b       	std	Y+17, r22	; 0x11
    20da:	7a 8b       	std	Y+18, r23	; 0x12
    20dc:	8b 8b       	std	Y+19, r24	; 0x13
    20de:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16]; /* String to hold the ascii result */
	dtostrf(number, 3, 2, buff);
    20e0:	89 89       	ldd	r24, Y+17	; 0x11
    20e2:	9a 89       	ldd	r25, Y+18	; 0x12
    20e4:	ab 89       	ldd	r26, Y+19	; 0x13
    20e6:	bc 89       	ldd	r27, Y+20	; 0x14
    20e8:	bc 01       	movw	r22, r24
    20ea:	cd 01       	movw	r24, r26
    20ec:	43 e0       	ldi	r20, 0x03	; 3
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	22 e0       	ldi	r18, 0x02	; 2
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	fe 01       	movw	r30, r28
    20f6:	31 96       	adiw	r30, 0x01	; 1
    20f8:	8f 01       	movw	r16, r30
    20fa:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <dtostrf>
	LCD_displayString(buff); /* Display the string */
    20fe:	ce 01       	movw	r24, r28
    2100:	01 96       	adiw	r24, 0x01	; 1
    2102:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
}
    2106:	64 96       	adiw	r28, 0x14	; 20
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	1f 91       	pop	r17
    2118:	0f 91       	pop	r16
    211a:	08 95       	ret

0000211c <KEYPAD_getPressedKey>:
//	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
//#endif
//}

uint8 KEYPAD_getPressedKey(void)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <KEYPAD_getPressedKey+0x6>
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	40 e0       	ldi	r20, 0x00	; 0
    212c:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	61 e0       	ldi	r22, 0x01	; 1
    2134:	40 e0       	ldi	r20, 0x00	; 0
    2136:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	62 e0       	ldi	r22, 0x02	; 2
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	63 e0       	ldi	r22, 0x03	; 3
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	64 e0       	ldi	r22, 0x04	; 4
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	65 e0       	ldi	r22, 0x05	; 5
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	66 e0       	ldi	r22, 0x06	; 6
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_setupPinDirection>

	PORTA |= 0xf0;
    216c:	ab e3       	ldi	r26, 0x3B	; 59
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	eb e3       	ldi	r30, 0x3B	; 59
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	80 6f       	ori	r24, 0xF0	; 240
    2178:	8c 93       	st	X, r24

#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	67 e0       	ldi	r22, 0x07	; 7
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2184:	19 82       	std	Y+1, r1	; 0x01
    2186:	35 c0       	rjmp	.+106    	; 0x21f2 <KEYPAD_getPressedKey+0xd6>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	69 81       	ldd	r22, Y+1	; 0x01
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	69 81       	ldd	r22, Y+1	; 0x01
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    219c:	1a 82       	std	Y+2, r1	; 0x02
    219e:	1e c0       	rjmp	.+60     	; 0x21dc <KEYPAD_getPressedKey+0xc0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	98 2f       	mov	r25, r24
    21a4:	9c 5f       	subi	r25, 0xFC	; 252
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	69 2f       	mov	r22, r25
    21aa:	0e 94 48 09 	call	0x1290	; 0x1290 <GPIO_readPin>
    21ae:	88 23       	and	r24, r24
    21b0:	91 f4       	brne	.+36     	; 0x21d6 <KEYPAD_getPressedKey+0xba>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	98 2f       	mov	r25, r24
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	89 0f       	add	r24, r25
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}
}
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
    21da:	8a 83       	std	Y+2, r24	; 0x02
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	84 30       	cpi	r24, 0x04	; 4
    21e0:	f8 f2       	brcs	.-66     	; 0x21a0 <KEYPAD_getPressedKey+0x84>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	69 81       	ldd	r22, Y+1	; 0x01
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	8f 5f       	subi	r24, 0xFF	; 255
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	84 30       	cpi	r24, 0x04	; 4
    21f6:	40 f2       	brcs	.-112    	; 0x2188 <KEYPAD_getPressedKey+0x6c>
    21f8:	c5 cf       	rjmp	.-118    	; 0x2184 <KEYPAD_getPressedKey+0x68>

000021fa <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2200:	00 d0       	rcall	.+0      	; 0x2202 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2208:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	3c 83       	std	Y+4, r19	; 0x04
    2212:	2b 83       	std	Y+3, r18	; 0x03
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	88 30       	cpi	r24, 0x08	; 8
    221a:	91 05       	cpc	r25, r1
    221c:	09 f4       	brne	.+2      	; 0x2220 <KEYPAD_4x4_adjustKeyNumber+0x26>
    221e:	70 c0       	rjmp	.+224    	; 0x2300 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2220:	2b 81       	ldd	r18, Y+3	; 0x03
    2222:	3c 81       	ldd	r19, Y+4	; 0x04
    2224:	29 30       	cpi	r18, 0x09	; 9
    2226:	31 05       	cpc	r19, r1
    2228:	5c f5       	brge	.+86     	; 0x2280 <KEYPAD_4x4_adjustKeyNumber+0x86>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	84 30       	cpi	r24, 0x04	; 4
    2230:	91 05       	cpc	r25, r1
    2232:	09 f4       	brne	.+2      	; 0x2236 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2234:	59 c0       	rjmp	.+178    	; 0x22e8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2236:	2b 81       	ldd	r18, Y+3	; 0x03
    2238:	3c 81       	ldd	r19, Y+4	; 0x04
    223a:	25 30       	cpi	r18, 0x05	; 5
    223c:	31 05       	cpc	r19, r1
    223e:	9c f4       	brge	.+38     	; 0x2266 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	82 30       	cpi	r24, 0x02	; 2
    2246:	91 05       	cpc	r25, r1
    2248:	09 f4       	brne	.+2      	; 0x224c <KEYPAD_4x4_adjustKeyNumber+0x52>
    224a:	48 c0       	rjmp	.+144    	; 0x22dc <KEYPAD_4x4_adjustKeyNumber+0xe2>
    224c:	2b 81       	ldd	r18, Y+3	; 0x03
    224e:	3c 81       	ldd	r19, Y+4	; 0x04
    2250:	23 30       	cpi	r18, 0x03	; 3
    2252:	31 05       	cpc	r19, r1
    2254:	0c f0       	brlt	.+2      	; 0x2258 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2256:	45 c0       	rjmp	.+138    	; 0x22e2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	91 05       	cpc	r25, r1
    2260:	09 f4       	brne	.+2      	; 0x2264 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2262:	39 c0       	rjmp	.+114    	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2264:	68 c0       	rjmp	.+208    	; 0x2336 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    2266:	2b 81       	ldd	r18, Y+3	; 0x03
    2268:	3c 81       	ldd	r19, Y+4	; 0x04
    226a:	26 30       	cpi	r18, 0x06	; 6
    226c:	31 05       	cpc	r19, r1
    226e:	09 f4       	brne	.+2      	; 0x2272 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2270:	41 c0       	rjmp	.+130    	; 0x22f4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	87 30       	cpi	r24, 0x07	; 7
    2278:	91 05       	cpc	r25, r1
    227a:	0c f0       	brlt	.+2      	; 0x227e <KEYPAD_4x4_adjustKeyNumber+0x84>
    227c:	3e c0       	rjmp	.+124    	; 0x22fa <KEYPAD_4x4_adjustKeyNumber+0x100>
    227e:	37 c0       	rjmp	.+110    	; 0x22ee <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2280:	2b 81       	ldd	r18, Y+3	; 0x03
    2282:	3c 81       	ldd	r19, Y+4	; 0x04
    2284:	2c 30       	cpi	r18, 0x0C	; 12
    2286:	31 05       	cpc	r19, r1
    2288:	09 f4       	brne	.+2      	; 0x228c <KEYPAD_4x4_adjustKeyNumber+0x92>
    228a:	46 c0       	rjmp	.+140    	; 0x2318 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	8d 30       	cpi	r24, 0x0D	; 13
    2292:	91 05       	cpc	r25, r1
    2294:	5c f4       	brge	.+22     	; 0x22ac <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2296:	2b 81       	ldd	r18, Y+3	; 0x03
    2298:	3c 81       	ldd	r19, Y+4	; 0x04
    229a:	2a 30       	cpi	r18, 0x0A	; 10
    229c:	31 05       	cpc	r19, r1
    229e:	b1 f1       	breq	.+108    	; 0x230c <KEYPAD_4x4_adjustKeyNumber+0x112>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	8b 30       	cpi	r24, 0x0B	; 11
    22a6:	91 05       	cpc	r25, r1
    22a8:	a4 f5       	brge	.+104    	; 0x2312 <KEYPAD_4x4_adjustKeyNumber+0x118>
    22aa:	2d c0       	rjmp	.+90     	; 0x2306 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    22ac:	2b 81       	ldd	r18, Y+3	; 0x03
    22ae:	3c 81       	ldd	r19, Y+4	; 0x04
    22b0:	2e 30       	cpi	r18, 0x0E	; 14
    22b2:	31 05       	cpc	r19, r1
    22b4:	b9 f1       	breq	.+110    	; 0x2324 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ba:	8e 30       	cpi	r24, 0x0E	; 14
    22bc:	91 05       	cpc	r25, r1
    22be:	7c f1       	brlt	.+94     	; 0x231e <KEYPAD_4x4_adjustKeyNumber+0x124>
    22c0:	2b 81       	ldd	r18, Y+3	; 0x03
    22c2:	3c 81       	ldd	r19, Y+4	; 0x04
    22c4:	2f 30       	cpi	r18, 0x0F	; 15
    22c6:	31 05       	cpc	r19, r1
    22c8:	81 f1       	breq	.+96     	; 0x232a <KEYPAD_4x4_adjustKeyNumber+0x130>
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	9c 81       	ldd	r25, Y+4	; 0x04
    22ce:	80 31       	cpi	r24, 0x10	; 16
    22d0:	91 05       	cpc	r25, r1
    22d2:	71 f1       	breq	.+92     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x136>
    22d4:	30 c0       	rjmp	.+96     	; 0x2336 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    22d6:	87 e3       	ldi	r24, 0x37	; 55
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	2f c0       	rjmp	.+94     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    22dc:	88 e3       	ldi	r24, 0x38	; 56
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	2c c0       	rjmp	.+88     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    22e2:	89 e3       	ldi	r24, 0x39	; 57
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	29 c0       	rjmp	.+82     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    22e8:	85 e2       	ldi	r24, 0x25	; 37
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	26 c0       	rjmp	.+76     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    22ee:	84 e3       	ldi	r24, 0x34	; 52
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	23 c0       	rjmp	.+70     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    22f4:	85 e3       	ldi	r24, 0x35	; 53
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	20 c0       	rjmp	.+64     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    22fa:	86 e3       	ldi	r24, 0x36	; 54
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	1d c0       	rjmp	.+58     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2300:	8a e2       	ldi	r24, 0x2A	; 42
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	1a c0       	rjmp	.+52     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 9: keypad_button = '1';
    2306:	81 e3       	ldi	r24, 0x31	; 49
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	17 c0       	rjmp	.+46     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    230c:	82 e3       	ldi	r24, 0x32	; 50
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	14 c0       	rjmp	.+40     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    2312:	83 e3       	ldi	r24, 0x33	; 51
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	11 c0       	rjmp	.+34     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2318:	8d e2       	ldi	r24, 0x2D	; 45
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	0e c0       	rjmp	.+28     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    231e:	8d e0       	ldi	r24, 0x0D	; 13
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	0b c0       	rjmp	.+22     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 14: keypad_button = '0';
    2324:	80 e3       	ldi	r24, 0x30	; 48
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	08 c0       	rjmp	.+16     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    232a:	8d e3       	ldi	r24, 0x3D	; 61
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	05 c0       	rjmp	.+10     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2330:	8b e2       	ldi	r24, 0x2B	; 43
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	02 c0       	rjmp	.+4      	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    233a:	89 81       	ldd	r24, Y+1	; 0x01
}
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <handleTimer_callBack>:
ST_timer1_configType timer1_configType = {TIMER1_MAX_VALUE - TIMER1_ONE_SECOND_CLK_256_8M, TIMER1_MAX_VALUE, TIMER1_CLK_256, TIMER1_NORMAL};

uint16 seconds = 0;
uint8 timeFlag = 0;

void handleTimer_callBack(){
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
	seconds > 0 ? seconds-- : timeFlag++;
    2352:	80 91 37 01 	lds	r24, 0x0137
    2356:	90 91 38 01 	lds	r25, 0x0138
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	51 f0       	breq	.+20     	; 0x2372 <handleTimer_callBack+0x28>
    235e:	80 91 37 01 	lds	r24, 0x0137
    2362:	90 91 38 01 	lds	r25, 0x0138
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	90 93 38 01 	sts	0x0138, r25
    236c:	80 93 37 01 	sts	0x0137, r24
    2370:	05 c0       	rjmp	.+10     	; 0x237c <handleTimer_callBack+0x32>
    2372:	80 91 39 01 	lds	r24, 0x0139
    2376:	8f 5f       	subi	r24, 0xFF	; 255
    2378:	80 93 39 01 	sts	0x0139, r24
}
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <setup>:

void setup(){
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62


	LCD_init();
    238a:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_init>
//	KEYPAD_init();
	UART_init();
    238e:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_init>
//	Timer1_init(&timer1_configType);
//	Timer1_setCallBack(&handleTimer_callBack);
//	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
}
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <main>:


void readAndSendPassword();
void changePass();

void main(void){
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	ea 97       	sbiw	r28, 0x3a	; 58
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61

	setup();
    23ac:	0e 94 c1 11 	call	0x2382	; 0x2382 <setup>

	uint8 response = 'w';
    23b0:	87 e7       	ldi	r24, 0x77	; 119
    23b2:	8a af       	std	Y+58, r24	; 0x3a

	LCD_displayString("System loading...");
    23b4:	80 e6       	ldi	r24, 0x60	; 96
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
	LCD_moveCursor(1,0);
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	aa e7       	ldi	r26, 0x7A	; 122
    23ca:	b4 e4       	ldi	r27, 0x44	; 68
    23cc:	8d ab       	std	Y+53, r24	; 0x35
    23ce:	9e ab       	std	Y+54, r25	; 0x36
    23d0:	af ab       	std	Y+55, r26	; 0x37
    23d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d4:	6d a9       	ldd	r22, Y+53	; 0x35
    23d6:	7e a9       	ldd	r23, Y+54	; 0x36
    23d8:	8f a9       	ldd	r24, Y+55	; 0x37
    23da:	98 ad       	ldd	r25, Y+56	; 0x38
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	4a ef       	ldi	r20, 0xFA	; 250
    23e2:	54 e4       	ldi	r21, 0x44	; 68
    23e4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	89 ab       	std	Y+49, r24	; 0x31
    23ee:	9a ab       	std	Y+50, r25	; 0x32
    23f0:	ab ab       	std	Y+51, r26	; 0x33
    23f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23f4:	69 a9       	ldd	r22, Y+49	; 0x31
    23f6:	7a a9       	ldd	r23, Y+50	; 0x32
    23f8:	8b a9       	ldd	r24, Y+51	; 0x33
    23fa:	9c a9       	ldd	r25, Y+52	; 0x34
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e8       	ldi	r20, 0x80	; 128
    2402:	5f e3       	ldi	r21, 0x3F	; 63
    2404:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2408:	88 23       	and	r24, r24
    240a:	2c f4       	brge	.+10     	; 0x2416 <main+0x7e>
		__ticks = 1;
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	98 ab       	std	Y+48, r25	; 0x30
    2412:	8f a7       	std	Y+47, r24	; 0x2f
    2414:	3f c0       	rjmp	.+126    	; 0x2494 <main+0xfc>
	else if (__tmp > 65535)
    2416:	69 a9       	ldd	r22, Y+49	; 0x31
    2418:	7a a9       	ldd	r23, Y+50	; 0x32
    241a:	8b a9       	ldd	r24, Y+51	; 0x33
    241c:	9c a9       	ldd	r25, Y+52	; 0x34
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	3f ef       	ldi	r19, 0xFF	; 255
    2422:	4f e7       	ldi	r20, 0x7F	; 127
    2424:	57 e4       	ldi	r21, 0x47	; 71
    2426:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    242a:	18 16       	cp	r1, r24
    242c:	4c f5       	brge	.+82     	; 0x2480 <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242e:	6d a9       	ldd	r22, Y+53	; 0x35
    2430:	7e a9       	ldd	r23, Y+54	; 0x36
    2432:	8f a9       	ldd	r24, Y+55	; 0x37
    2434:	98 ad       	ldd	r25, Y+56	; 0x38
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e2       	ldi	r20, 0x20	; 32
    243c:	51 e4       	ldi	r21, 0x41	; 65
    243e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	bc 01       	movw	r22, r24
    2448:	cd 01       	movw	r24, r26
    244a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	98 ab       	std	Y+48, r25	; 0x30
    2454:	8f a7       	std	Y+47, r24	; 0x2f
    2456:	0f c0       	rjmp	.+30     	; 0x2476 <main+0xde>
    2458:	88 ec       	ldi	r24, 0xC8	; 200
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	9e a7       	std	Y+46, r25	; 0x2e
    245e:	8d a7       	std	Y+45, r24	; 0x2d
    2460:	8d a5       	ldd	r24, Y+45	; 0x2d
    2462:	9e a5       	ldd	r25, Y+46	; 0x2e
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <main+0xcc>
    2468:	9e a7       	std	Y+46, r25	; 0x2e
    246a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246c:	8f a5       	ldd	r24, Y+47	; 0x2f
    246e:	98 a9       	ldd	r25, Y+48	; 0x30
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	98 ab       	std	Y+48, r25	; 0x30
    2474:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2476:	8f a5       	ldd	r24, Y+47	; 0x2f
    2478:	98 a9       	ldd	r25, Y+48	; 0x30
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	69 f7       	brne	.-38     	; 0x2458 <main+0xc0>
    247e:	14 c0       	rjmp	.+40     	; 0x24a8 <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2480:	69 a9       	ldd	r22, Y+49	; 0x31
    2482:	7a a9       	ldd	r23, Y+50	; 0x32
    2484:	8b a9       	ldd	r24, Y+51	; 0x33
    2486:	9c a9       	ldd	r25, Y+52	; 0x34
    2488:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	98 ab       	std	Y+48, r25	; 0x30
    2492:	8f a7       	std	Y+47, r24	; 0x2f
    2494:	8f a5       	ldd	r24, Y+47	; 0x2f
    2496:	98 a9       	ldd	r25, Y+48	; 0x30
    2498:	9c a7       	std	Y+44, r25	; 0x2c
    249a:	8b a7       	std	Y+43, r24	; 0x2b
    249c:	8b a5       	ldd	r24, Y+43	; 0x2b
    249e:	9c a5       	ldd	r25, Y+44	; 0x2c
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <main+0x108>
    24a4:	9c a7       	std	Y+44, r25	; 0x2c
    24a6:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1000); /* delay 1 second to be sure that both ECU MCU is running */

	LCD_clearScreen();
    24a8:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>

	changePass();
    24ac:	0e 94 57 15 	call	0x2aae	; 0x2aae <changePass>

	while(1){
		LCD_clearScreen();
    24b0:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>
		LCD_displayString("+ : open door");
    24b4:	82 e7       	ldi	r24, 0x72	; 114
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
		LCD_moveCursor(1,0);
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
		LCD_displayString("- : change pass");
    24c4:	80 e8       	ldi	r24, 0x80	; 128
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>

		uint8 key = KEYPAD_getPressedKey();
    24cc:	0e 94 8e 10 	call	0x211c	; 0x211c <KEYPAD_getPressedKey>
    24d0:	89 af       	std	Y+57, r24	; 0x39
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	aa e7       	ldi	r26, 0x7A	; 122
    24d8:	b3 e4       	ldi	r27, 0x43	; 67
    24da:	8f a3       	std	Y+39, r24	; 0x27
    24dc:	98 a7       	std	Y+40, r25	; 0x28
    24de:	a9 a7       	std	Y+41, r26	; 0x29
    24e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e2:	6f a1       	ldd	r22, Y+39	; 0x27
    24e4:	78 a5       	ldd	r23, Y+40	; 0x28
    24e6:	89 a5       	ldd	r24, Y+41	; 0x29
    24e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	4a ef       	ldi	r20, 0xFA	; 250
    24f0:	54 e4       	ldi	r21, 0x44	; 68
    24f2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	8b a3       	std	Y+35, r24	; 0x23
    24fc:	9c a3       	std	Y+36, r25	; 0x24
    24fe:	ad a3       	std	Y+37, r26	; 0x25
    2500:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2502:	6b a1       	ldd	r22, Y+35	; 0x23
    2504:	7c a1       	ldd	r23, Y+36	; 0x24
    2506:	8d a1       	ldd	r24, Y+37	; 0x25
    2508:	9e a1       	ldd	r25, Y+38	; 0x26
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e8       	ldi	r20, 0x80	; 128
    2510:	5f e3       	ldi	r21, 0x3F	; 63
    2512:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2516:	88 23       	and	r24, r24
    2518:	2c f4       	brge	.+10     	; 0x2524 <main+0x18c>
		__ticks = 1;
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	9a a3       	std	Y+34, r25	; 0x22
    2520:	89 a3       	std	Y+33, r24	; 0x21
    2522:	3f c0       	rjmp	.+126    	; 0x25a2 <main+0x20a>
	else if (__tmp > 65535)
    2524:	6b a1       	ldd	r22, Y+35	; 0x23
    2526:	7c a1       	ldd	r23, Y+36	; 0x24
    2528:	8d a1       	ldd	r24, Y+37	; 0x25
    252a:	9e a1       	ldd	r25, Y+38	; 0x26
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	3f ef       	ldi	r19, 0xFF	; 255
    2530:	4f e7       	ldi	r20, 0x7F	; 127
    2532:	57 e4       	ldi	r21, 0x47	; 71
    2534:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2538:	18 16       	cp	r1, r24
    253a:	4c f5       	brge	.+82     	; 0x258e <main+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253c:	6f a1       	ldd	r22, Y+39	; 0x27
    253e:	78 a5       	ldd	r23, Y+40	; 0x28
    2540:	89 a5       	ldd	r24, Y+41	; 0x29
    2542:	9a a5       	ldd	r25, Y+42	; 0x2a
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e2       	ldi	r20, 0x20	; 32
    254a:	51 e4       	ldi	r21, 0x41	; 65
    254c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	bc 01       	movw	r22, r24
    2556:	cd 01       	movw	r24, r26
    2558:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	9a a3       	std	Y+34, r25	; 0x22
    2562:	89 a3       	std	Y+33, r24	; 0x21
    2564:	0f c0       	rjmp	.+30     	; 0x2584 <main+0x1ec>
    2566:	88 ec       	ldi	r24, 0xC8	; 200
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	98 a3       	std	Y+32, r25	; 0x20
    256c:	8f 8f       	std	Y+31, r24	; 0x1f
    256e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2570:	98 a1       	ldd	r25, Y+32	; 0x20
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <main+0x1da>
    2576:	98 a3       	std	Y+32, r25	; 0x20
    2578:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257a:	89 a1       	ldd	r24, Y+33	; 0x21
    257c:	9a a1       	ldd	r25, Y+34	; 0x22
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	9a a3       	std	Y+34, r25	; 0x22
    2582:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2584:	89 a1       	ldd	r24, Y+33	; 0x21
    2586:	9a a1       	ldd	r25, Y+34	; 0x22
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	69 f7       	brne	.-38     	; 0x2566 <main+0x1ce>
    258c:	14 c0       	rjmp	.+40     	; 0x25b6 <main+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258e:	6b a1       	ldd	r22, Y+35	; 0x23
    2590:	7c a1       	ldd	r23, Y+36	; 0x24
    2592:	8d a1       	ldd	r24, Y+37	; 0x25
    2594:	9e a1       	ldd	r25, Y+38	; 0x26
    2596:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	9a a3       	std	Y+34, r25	; 0x22
    25a0:	89 a3       	std	Y+33, r24	; 0x21
    25a2:	89 a1       	ldd	r24, Y+33	; 0x21
    25a4:	9a a1       	ldd	r25, Y+34	; 0x22
    25a6:	9e 8f       	std	Y+30, r25	; 0x1e
    25a8:	8d 8f       	std	Y+29, r24	; 0x1d
    25aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <main+0x216>
    25b2:	9e 8f       	std	Y+30, r25	; 0x1e
    25b4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(250);/* it needs at least 200ms to work properly*/
		LCD_clearScreen();
    25b6:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>

		if( key == '+' ){
    25ba:	89 ad       	ldd	r24, Y+57	; 0x39
    25bc:	8b 32       	cpi	r24, 0x2B	; 43
    25be:	b1 f5       	brne	.+108    	; 0x262c <main+0x294>

			response = 'f';
    25c0:	86 e6       	ldi	r24, 0x66	; 102
    25c2:	8a af       	std	Y+58, r24	; 0x3a
    25c4:	2f c0       	rjmp	.+94     	; 0x2624 <main+0x28c>

			while(response == 'f'){
				UART_sendCharacter('+');
    25c6:	8b e2       	ldi	r24, 0x2B	; 43
    25c8:	0e 94 88 06 	call	0xd10	; 0xd10 <UART_sendCharacter>
				LCD_displayString("plz enter pass: ");
    25cc:	80 e9       	ldi	r24, 0x90	; 144
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
				LCD_moveCursor(1,0);
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
				readAndSendPassword();
    25dc:	0e 94 7d 14 	call	0x28fa	; 0x28fa <readAndSendPassword>
				LCD_clearScreen();
    25e0:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>

				response = UART_rcvCharacter();
    25e4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UART_rcvCharacter>
    25e8:	8a af       	std	Y+58, r24	; 0x3a
				if(response == 'b'){
    25ea:	8a ad       	ldd	r24, Y+58	; 0x3a
    25ec:	82 36       	cpi	r24, 0x62	; 98
    25ee:	69 f4       	brne	.+26     	; 0x260a <main+0x272>
					LCD_clearScreen();
    25f0:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>
					LCD_displayString("ERROR");
    25f4:	81 ea       	ldi	r24, 0xA1	; 161
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
					seconds = 60;
    25fc:	8c e3       	ldi	r24, 0x3C	; 60
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	90 93 38 01 	sts	0x0138, r25
    2604:	80 93 37 01 	sts	0x0137, r24
    2608:	53 cf       	rjmp	.-346    	; 0x24b0 <main+0x118>
					break;
				}
				else if(response == 't'){
    260a:	8a ad       	ldd	r24, Y+58	; 0x3a
    260c:	84 37       	cpi	r24, 0x74	; 116
    260e:	51 f4       	brne	.+20     	; 0x2624 <main+0x28c>
					LCD_displayString("Motor is moving");
    2610:	87 ea       	ldi	r24, 0xA7	; 167
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
					//TODO delay here
					response = UART_rcvCharacter();
    2618:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UART_rcvCharacter>
    261c:	8a af       	std	Y+58, r24	; 0x3a
					LCD_clearScreen();
    261e:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>
    2622:	46 cf       	rjmp	.-372    	; 0x24b0 <main+0x118>

		if( key == '+' ){

			response = 'f';

			while(response == 'f'){
    2624:	8a ad       	ldd	r24, Y+58	; 0x3a
    2626:	86 36       	cpi	r24, 0x66	; 102
    2628:	71 f2       	breq	.-100    	; 0x25c6 <main+0x22e>
    262a:	42 cf       	rjmp	.-380    	; 0x24b0 <main+0x118>
					LCD_clearScreen();
					break;
				}
			}

		}else if( key == '-' ){
    262c:	89 ad       	ldd	r24, Y+57	; 0x39
    262e:	8d 32       	cpi	r24, 0x2D	; 45
    2630:	09 f0       	breq	.+2      	; 0x2634 <main+0x29c>
    2632:	3e cf       	rjmp	.-388    	; 0x24b0 <main+0x118>
			response = 'f';
    2634:	86 e6       	ldi	r24, 0x66	; 102
    2636:	8a af       	std	Y+58, r24	; 0x3a
    2638:	5b c1       	rjmp	.+694    	; 0x28f0 <main+0x558>
			while(response == 'f'){
				UART_sendCharacter('-');
    263a:	8d e2       	ldi	r24, 0x2D	; 45
    263c:	0e 94 88 06 	call	0xd10	; 0xd10 <UART_sendCharacter>
				LCD_displayString("plz enter pass: ");
    2640:	80 e9       	ldi	r24, 0x90	; 144
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
				LCD_moveCursor(1,0);
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	60 e0       	ldi	r22, 0x00	; 0
    264c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
				readAndSendPassword();
    2650:	0e 94 7d 14 	call	0x28fa	; 0x28fa <readAndSendPassword>
				LCD_clearScreen();
    2654:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>

				response = UART_rcvCharacter();
    2658:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UART_rcvCharacter>
    265c:	8a af       	std	Y+58, r24	; 0x3a

				if(response == 'b'){
    265e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2660:	82 36       	cpi	r24, 0x62	; 98
    2662:	49 f4       	brne	.+18     	; 0x2676 <main+0x2de>
					LCD_clearScreen();
    2664:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>
					LCD_displayString("ERROR");
    2668:	81 ea       	ldi	r24, 0xA1	; 161
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
					UART_rcvCharacter();
    2670:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UART_rcvCharacter>
    2674:	1d cf       	rjmp	.-454    	; 0x24b0 <main+0x118>
					break;
				}
				else if(response == 't'){
    2676:	8a ad       	ldd	r24, Y+58	; 0x3a
    2678:	84 37       	cpi	r24, 0x74	; 116
    267a:	09 f0       	breq	.+2      	; 0x267e <main+0x2e6>
    267c:	39 c1       	rjmp	.+626    	; 0x28f0 <main+0x558>
					LCD_displayString("correct");
    267e:	87 eb       	ldi	r24, 0xB7	; 183
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	aa e7       	ldi	r26, 0x7A	; 122
    268c:	b4 e4       	ldi	r27, 0x44	; 68
    268e:	89 8f       	std	Y+25, r24	; 0x19
    2690:	9a 8f       	std	Y+26, r25	; 0x1a
    2692:	ab 8f       	std	Y+27, r26	; 0x1b
    2694:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2696:	69 8d       	ldd	r22, Y+25	; 0x19
    2698:	7a 8d       	ldd	r23, Y+26	; 0x1a
    269a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a ef       	ldi	r20, 0xFA	; 250
    26a4:	54 e4       	ldi	r21, 0x44	; 68
    26a6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	8d 8b       	std	Y+21, r24	; 0x15
    26b0:	9e 8b       	std	Y+22, r25	; 0x16
    26b2:	af 8b       	std	Y+23, r26	; 0x17
    26b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26b6:	6d 89       	ldd	r22, Y+21	; 0x15
    26b8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ba:	8f 89       	ldd	r24, Y+23	; 0x17
    26bc:	98 8d       	ldd	r25, Y+24	; 0x18
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e8       	ldi	r20, 0x80	; 128
    26c4:	5f e3       	ldi	r21, 0x3F	; 63
    26c6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    26ca:	88 23       	and	r24, r24
    26cc:	2c f4       	brge	.+10     	; 0x26d8 <main+0x340>
		__ticks = 1;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9c 8b       	std	Y+20, r25	; 0x14
    26d4:	8b 8b       	std	Y+19, r24	; 0x13
    26d6:	3f c0       	rjmp	.+126    	; 0x2756 <main+0x3be>
	else if (__tmp > 65535)
    26d8:	6d 89       	ldd	r22, Y+21	; 0x15
    26da:	7e 89       	ldd	r23, Y+22	; 0x16
    26dc:	8f 89       	ldd	r24, Y+23	; 0x17
    26de:	98 8d       	ldd	r25, Y+24	; 0x18
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	3f ef       	ldi	r19, 0xFF	; 255
    26e4:	4f e7       	ldi	r20, 0x7F	; 127
    26e6:	57 e4       	ldi	r21, 0x47	; 71
    26e8:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    26ec:	18 16       	cp	r1, r24
    26ee:	4c f5       	brge	.+82     	; 0x2742 <main+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f0:	69 8d       	ldd	r22, Y+25	; 0x19
    26f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e2       	ldi	r20, 0x20	; 32
    26fe:	51 e4       	ldi	r21, 0x41	; 65
    2700:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9c 8b       	std	Y+20, r25	; 0x14
    2716:	8b 8b       	std	Y+19, r24	; 0x13
    2718:	0f c0       	rjmp	.+30     	; 0x2738 <main+0x3a0>
    271a:	88 ec       	ldi	r24, 0xC8	; 200
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9a 8b       	std	Y+18, r25	; 0x12
    2720:	89 8b       	std	Y+17, r24	; 0x11
    2722:	89 89       	ldd	r24, Y+17	; 0x11
    2724:	9a 89       	ldd	r25, Y+18	; 0x12
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <main+0x38e>
    272a:	9a 8b       	std	Y+18, r25	; 0x12
    272c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272e:	8b 89       	ldd	r24, Y+19	; 0x13
    2730:	9c 89       	ldd	r25, Y+20	; 0x14
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	9c 8b       	std	Y+20, r25	; 0x14
    2736:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2738:	8b 89       	ldd	r24, Y+19	; 0x13
    273a:	9c 89       	ldd	r25, Y+20	; 0x14
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	69 f7       	brne	.-38     	; 0x271a <main+0x382>
    2740:	14 c0       	rjmp	.+40     	; 0x276a <main+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2742:	6d 89       	ldd	r22, Y+21	; 0x15
    2744:	7e 89       	ldd	r23, Y+22	; 0x16
    2746:	8f 89       	ldd	r24, Y+23	; 0x17
    2748:	98 8d       	ldd	r25, Y+24	; 0x18
    274a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9c 8b       	std	Y+20, r25	; 0x14
    2754:	8b 8b       	std	Y+19, r24	; 0x13
    2756:	8b 89       	ldd	r24, Y+19	; 0x13
    2758:	9c 89       	ldd	r25, Y+20	; 0x14
    275a:	98 8b       	std	Y+16, r25	; 0x10
    275c:	8f 87       	std	Y+15, r24	; 0x0f
    275e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2760:	98 89       	ldd	r25, Y+16	; 0x10
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <main+0x3ca>
    2766:	98 8b       	std	Y+16, r25	; 0x10
    2768:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					LCD_clearScreen();
    276a:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>
					do{
						UART_sendCharacter('p');
    276e:	80 e7       	ldi	r24, 0x70	; 112
    2770:	0e 94 88 06 	call	0xd10	; 0xd10 <UART_sendCharacter>
						LCD_displayString("plz enter pass: ");
    2774:	80 e9       	ldi	r24, 0x90	; 144
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
						LCD_moveCursor(1,0);
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	60 e0       	ldi	r22, 0x00	; 0
    2780:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
						readAndSendPassword();
    2784:	0e 94 7d 14 	call	0x28fa	; 0x28fa <readAndSendPassword>
						LCD_clearScreen();
    2788:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>

						LCD_displayString("plz re-enter the");
    278c:	8f eb       	ldi	r24, 0xBF	; 191
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
						LCD_moveCursor(1,0);
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
						LCD_displayString("same pass:");
    279c:	80 ed       	ldi	r24, 0xD0	; 208
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
						readAndSendPassword();
    27a4:	0e 94 7d 14 	call	0x28fa	; 0x28fa <readAndSendPassword>
						LCD_clearScreen();
    27a8:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>

						LCD_displayString("checking password");
    27ac:	8b ed       	ldi	r24, 0xDB	; 219
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
						response = UART_rcvCharacter();
    27b4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UART_rcvCharacter>
    27b8:	8a af       	std	Y+58, r24	; 0x3a
						LCD_clearScreen();
    27ba:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>

						if(response == 't')
    27be:	8a ad       	ldd	r24, Y+58	; 0x3a
    27c0:	84 37       	cpi	r24, 0x74	; 116
    27c2:	69 f4       	brne	.+26     	; 0x27de <main+0x446>
						{

							LCD_displayString("Password Saved");
    27c4:	8d ee       	ldi	r24, 0xED	; 237
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
							LCD_moveCursor(1,0);
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	60 e0       	ldi	r22, 0x00	; 0
    27d0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
							LCD_displayString("Successfully");
    27d4:	8c ef       	ldi	r24, 0xFC	; 252
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
    27dc:	0f c0       	rjmp	.+30     	; 0x27fc <main+0x464>
						}
						else if(response == 'f'){
    27de:	8a ad       	ldd	r24, Y+58	; 0x3a
    27e0:	86 36       	cpi	r24, 0x66	; 102
    27e2:	61 f4       	brne	.+24     	; 0x27fc <main+0x464>

							LCD_displayString("Different");
    27e4:	89 e0       	ldi	r24, 0x09	; 9
    27e6:	91 e0       	ldi	r25, 0x01	; 1
    27e8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
							LCD_moveCursor(1,0);
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
							LCD_displayString("passwords");
    27f4:	83 e1       	ldi	r24, 0x13	; 19
    27f6:	91 e0       	ldi	r25, 0x01	; 1
    27f8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	aa ef       	ldi	r26, 0xFA	; 250
    2802:	b4 e4       	ldi	r27, 0x44	; 68
    2804:	8b 87       	std	Y+11, r24	; 0x0b
    2806:	9c 87       	std	Y+12, r25	; 0x0c
    2808:	ad 87       	std	Y+13, r26	; 0x0d
    280a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280c:	6b 85       	ldd	r22, Y+11	; 0x0b
    280e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2810:	8d 85       	ldd	r24, Y+13	; 0x0d
    2812:	9e 85       	ldd	r25, Y+14	; 0x0e
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	4a ef       	ldi	r20, 0xFA	; 250
    281a:	54 e4       	ldi	r21, 0x44	; 68
    281c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	8f 83       	std	Y+7, r24	; 0x07
    2826:	98 87       	std	Y+8, r25	; 0x08
    2828:	a9 87       	std	Y+9, r26	; 0x09
    282a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    282c:	6f 81       	ldd	r22, Y+7	; 0x07
    282e:	78 85       	ldd	r23, Y+8	; 0x08
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	9a 85       	ldd	r25, Y+10	; 0x0a
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e8       	ldi	r20, 0x80	; 128
    283a:	5f e3       	ldi	r21, 0x3F	; 63
    283c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2840:	88 23       	and	r24, r24
    2842:	2c f4       	brge	.+10     	; 0x284e <main+0x4b6>
		__ticks = 1;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	9e 83       	std	Y+6, r25	; 0x06
    284a:	8d 83       	std	Y+5, r24	; 0x05
    284c:	3f c0       	rjmp	.+126    	; 0x28cc <main+0x534>
	else if (__tmp > 65535)
    284e:	6f 81       	ldd	r22, Y+7	; 0x07
    2850:	78 85       	ldd	r23, Y+8	; 0x08
    2852:	89 85       	ldd	r24, Y+9	; 0x09
    2854:	9a 85       	ldd	r25, Y+10	; 0x0a
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	3f ef       	ldi	r19, 0xFF	; 255
    285a:	4f e7       	ldi	r20, 0x7F	; 127
    285c:	57 e4       	ldi	r21, 0x47	; 71
    285e:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2862:	18 16       	cp	r1, r24
    2864:	4c f5       	brge	.+82     	; 0x28b8 <main+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2866:	6b 85       	ldd	r22, Y+11	; 0x0b
    2868:	7c 85       	ldd	r23, Y+12	; 0x0c
    286a:	8d 85       	ldd	r24, Y+13	; 0x0d
    286c:	9e 85       	ldd	r25, Y+14	; 0x0e
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e2       	ldi	r20, 0x20	; 32
    2874:	51 e4       	ldi	r21, 0x41	; 65
    2876:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	8d 83       	std	Y+5, r24	; 0x05
    288e:	0f c0       	rjmp	.+30     	; 0x28ae <main+0x516>
    2890:	88 ec       	ldi	r24, 0xC8	; 200
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	9c 83       	std	Y+4, r25	; 0x04
    2896:	8b 83       	std	Y+3, r24	; 0x03
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <main+0x504>
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a4:	8d 81       	ldd	r24, Y+5	; 0x05
    28a6:	9e 81       	ldd	r25, Y+6	; 0x06
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ae:	8d 81       	ldd	r24, Y+5	; 0x05
    28b0:	9e 81       	ldd	r25, Y+6	; 0x06
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	69 f7       	brne	.-38     	; 0x2890 <main+0x4f8>
    28b6:	14 c0       	rjmp	.+40     	; 0x28e0 <main+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ba:	78 85       	ldd	r23, Y+8	; 0x08
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9e 83       	std	Y+6, r25	; 0x06
    28ca:	8d 83       	std	Y+5, r24	; 0x05
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	9a 83       	std	Y+2, r25	; 0x02
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <main+0x540>
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	89 83       	std	Y+1, r24	; 0x01
						}
						_delay_ms(2000);
						LCD_clearScreen();
    28e0:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>

					}while(response == 'f');
    28e4:	8a ad       	ldd	r24, Y+58	; 0x3a
    28e6:	86 36       	cpi	r24, 0x66	; 102
    28e8:	09 f4       	brne	.+2      	; 0x28ec <main+0x554>
    28ea:	41 cf       	rjmp	.-382    	; 0x276e <main+0x3d6>
					LCD_clearScreen();
    28ec:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>
				}
			}

		}else if( key == '-' ){
			response = 'f';
			while(response == 'f'){
    28f0:	8a ad       	ldd	r24, Y+58	; 0x3a
    28f2:	86 36       	cpi	r24, 0x66	; 102
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <main+0x560>
    28f6:	a1 ce       	rjmp	.-702    	; 0x263a <main+0x2a2>
    28f8:	db cd       	rjmp	.-1098   	; 0x24b0 <main+0x118>

000028fa <readAndSendPassword>:


}


void readAndSendPassword(){
    28fa:	0f 93       	push	r16
    28fc:	1f 93       	push	r17
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	6a 97       	sbiw	r28, 0x1a	; 26
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61

	uint8 password[PASSWORD_SIZE] = {'=', '=', '=', '=', '=', '='};			/* password that store 5 chars and \0 */
    2912:	ce 01       	movw	r24, r28
    2914:	40 96       	adiw	r24, 0x10	; 16
    2916:	9f 8b       	std	Y+23, r25	; 0x17
    2918:	8e 8b       	std	Y+22, r24	; 0x16
    291a:	ec e2       	ldi	r30, 0x2C	; 44
    291c:	f1 e0       	ldi	r31, 0x01	; 1
    291e:	f9 8f       	std	Y+25, r31	; 0x19
    2920:	e8 8f       	std	Y+24, r30	; 0x18
    2922:	f6 e0       	ldi	r31, 0x06	; 6
    2924:	fa 8f       	std	Y+26, r31	; 0x1a
    2926:	e8 8d       	ldd	r30, Y+24	; 0x18
    2928:	f9 8d       	ldd	r31, Y+25	; 0x19
    292a:	00 80       	ld	r0, Z
    292c:	88 8d       	ldd	r24, Y+24	; 0x18
    292e:	99 8d       	ldd	r25, Y+25	; 0x19
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	99 8f       	std	Y+25, r25	; 0x19
    2934:	88 8f       	std	Y+24, r24	; 0x18
    2936:	ee 89       	ldd	r30, Y+22	; 0x16
    2938:	ff 89       	ldd	r31, Y+23	; 0x17
    293a:	00 82       	st	Z, r0
    293c:	8e 89       	ldd	r24, Y+22	; 0x16
    293e:	9f 89       	ldd	r25, Y+23	; 0x17
    2940:	01 96       	adiw	r24, 0x01	; 1
    2942:	9f 8b       	std	Y+23, r25	; 0x17
    2944:	8e 8b       	std	Y+22, r24	; 0x16
    2946:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2948:	91 50       	subi	r25, 0x01	; 1
    294a:	9a 8f       	std	Y+26, r25	; 0x1a
    294c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    294e:	ee 23       	and	r30, r30
    2950:	51 f7       	brne	.-44     	; 0x2926 <readAndSendPassword+0x2c>
	uint8 password_index = 0;
    2952:	1f 86       	std	Y+15, r1	; 0x0f

	for(;;){
		password[password_index] = KEYPAD_getPressedKey();
    2954:	8f 85       	ldd	r24, Y+15	; 0x0f
    2956:	08 2f       	mov	r16, r24
    2958:	10 e0       	ldi	r17, 0x00	; 0
    295a:	0e 94 8e 10 	call	0x211c	; 0x211c <KEYPAD_getPressedKey>
    295e:	28 2f       	mov	r18, r24
    2960:	ce 01       	movw	r24, r28
    2962:	40 96       	adiw	r24, 0x10	; 16
    2964:	fc 01       	movw	r30, r24
    2966:	e0 0f       	add	r30, r16
    2968:	f1 1f       	adc	r31, r17
    296a:	20 83       	st	Z, r18
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	aa e7       	ldi	r26, 0x7A	; 122
    2972:	b3 e4       	ldi	r27, 0x43	; 67
    2974:	8b 87       	std	Y+11, r24	; 0x0b
    2976:	9c 87       	std	Y+12, r25	; 0x0c
    2978:	ad 87       	std	Y+13, r26	; 0x0d
    297a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297c:	6b 85       	ldd	r22, Y+11	; 0x0b
    297e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2980:	8d 85       	ldd	r24, Y+13	; 0x0d
    2982:	9e 85       	ldd	r25, Y+14	; 0x0e
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	4a ef       	ldi	r20, 0xFA	; 250
    298a:	54 e4       	ldi	r21, 0x44	; 68
    298c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	8f 83       	std	Y+7, r24	; 0x07
    2996:	98 87       	std	Y+8, r25	; 0x08
    2998:	a9 87       	std	Y+9, r26	; 0x09
    299a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    299c:	6f 81       	ldd	r22, Y+7	; 0x07
    299e:	78 85       	ldd	r23, Y+8	; 0x08
    29a0:	89 85       	ldd	r24, Y+9	; 0x09
    29a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e8       	ldi	r20, 0x80	; 128
    29aa:	5f e3       	ldi	r21, 0x3F	; 63
    29ac:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    29b0:	88 23       	and	r24, r24
    29b2:	2c f4       	brge	.+10     	; 0x29be <readAndSendPassword+0xc4>
		__ticks = 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9e 83       	std	Y+6, r25	; 0x06
    29ba:	8d 83       	std	Y+5, r24	; 0x05
    29bc:	3f c0       	rjmp	.+126    	; 0x2a3c <readAndSendPassword+0x142>
	else if (__tmp > 65535)
    29be:	6f 81       	ldd	r22, Y+7	; 0x07
    29c0:	78 85       	ldd	r23, Y+8	; 0x08
    29c2:	89 85       	ldd	r24, Y+9	; 0x09
    29c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f e7       	ldi	r20, 0x7F	; 127
    29cc:	57 e4       	ldi	r21, 0x47	; 71
    29ce:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	4c f5       	brge	.+82     	; 0x2a28 <readAndSendPassword+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29da:	8d 85       	ldd	r24, Y+13	; 0x0d
    29dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e2       	ldi	r20, 0x20	; 32
    29e4:	51 e4       	ldi	r21, 0x41	; 65
    29e6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9e 83       	std	Y+6, r25	; 0x06
    29fc:	8d 83       	std	Y+5, r24	; 0x05
    29fe:	0f c0       	rjmp	.+30     	; 0x2a1e <readAndSendPassword+0x124>
    2a00:	88 ec       	ldi	r24, 0xC8	; 200
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9c 83       	std	Y+4, r25	; 0x04
    2a06:	8b 83       	std	Y+3, r24	; 0x03
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <readAndSendPassword+0x112>
    2a10:	9c 83       	std	Y+4, r25	; 0x04
    2a12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	9e 83       	std	Y+6, r25	; 0x06
    2a1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	9e 81       	ldd	r25, Y+6	; 0x06
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	69 f7       	brne	.-38     	; 0x2a00 <readAndSendPassword+0x106>
    2a26:	14 c0       	rjmp	.+40     	; 0x2a50 <readAndSendPassword+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a28:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2a:	78 85       	ldd	r23, Y+8	; 0x08
    2a2c:	89 85       	ldd	r24, Y+9	; 0x09
    2a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a30:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a40:	9a 83       	std	Y+2, r25	; 0x02
    2a42:	89 83       	std	Y+1, r24	; 0x01
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	9a 81       	ldd	r25, Y+2	; 0x02
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <readAndSendPassword+0x14e>
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);/* it needs at least 200ms to work properly*/

		if(password[password_index] == '=' ){ /* if user pressed Enter */
    2a50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a52:	28 2f       	mov	r18, r24
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	ce 01       	movw	r24, r28
    2a58:	40 96       	adiw	r24, 0x10	; 16
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	e2 0f       	add	r30, r18
    2a5e:	f3 1f       	adc	r31, r19
    2a60:	80 81       	ld	r24, Z
    2a62:	8d 33       	cpi	r24, 0x3D	; 61
    2a64:	c9 f4       	brne	.+50     	; 0x2a98 <readAndSendPassword+0x19e>
			password[password_index] = '\0';
    2a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a68:	28 2f       	mov	r18, r24
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	40 96       	adiw	r24, 0x10	; 16
    2a70:	fc 01       	movw	r30, r24
    2a72:	e2 0f       	add	r30, r18
    2a74:	f3 1f       	adc	r31, r19
    2a76:	10 82       	st	Z, r1
			LCD_displayCharacter('*');
			password_index++;
		}
	}

	UART_sendArray(password, PASSWORD_SIZE); /*TODO UART should not used in app layer*/
    2a78:	ce 01       	movw	r24, r28
    2a7a:	40 96       	adiw	r24, 0x10	; 16
    2a7c:	66 e0       	ldi	r22, 0x06	; 6
    2a7e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <UART_sendArray>

}
    2a82:	6a 96       	adiw	r28, 0x1a	; 26
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	08 95       	ret

		if(password[password_index] == '=' ){ /* if user pressed Enter */
			password[password_index] = '\0';
			break;
		}
		else if(password_index <= 4){ /* index 4 indicates that 5 numbers have been entered*/
    2a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a9a:	85 30       	cpi	r24, 0x05	; 5
    2a9c:	08 f0       	brcs	.+2      	; 0x2aa0 <readAndSendPassword+0x1a6>
    2a9e:	5a cf       	rjmp	.-332    	; 0x2954 <readAndSendPassword+0x5a>
			LCD_displayCharacter('*');
    2aa0:	8a e2       	ldi	r24, 0x2A	; 42
    2aa2:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <LCD_displayCharacter>
			password_index++;
    2aa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aa8:	8f 5f       	subi	r24, 0xFF	; 255
    2aaa:	8f 87       	std	Y+15, r24	; 0x0f
    2aac:	53 cf       	rjmp	.-346    	; 0x2954 <readAndSendPassword+0x5a>

00002aae <changePass>:

	UART_sendArray(password, PASSWORD_SIZE); /*TODO UART should not used in app layer*/

}

void changePass(){
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	2f 97       	sbiw	r28, 0x0f	; 15
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61

	uint8 response = 'w';
    2ac2:	87 e7       	ldi	r24, 0x77	; 119
    2ac4:	8f 87       	std	Y+15, r24	; 0x0f

	do{
			UART_sendCharacter('p');
    2ac6:	80 e7       	ldi	r24, 0x70	; 112
    2ac8:	0e 94 88 06 	call	0xd10	; 0xd10 <UART_sendCharacter>
			LCD_displayString("plz enter pass: ");
    2acc:	80 e9       	ldi	r24, 0x90	; 144
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
			LCD_moveCursor(1,0);
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
			readAndSendPassword();
    2adc:	0e 94 7d 14 	call	0x28fa	; 0x28fa <readAndSendPassword>
			LCD_clearScreen();
    2ae0:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>

			LCD_displayString("plz re-enter the");
    2ae4:	8f eb       	ldi	r24, 0xBF	; 191
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
			LCD_moveCursor(1,0);
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	60 e0       	ldi	r22, 0x00	; 0
    2af0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
			LCD_displayString("same pass:");
    2af4:	80 ed       	ldi	r24, 0xD0	; 208
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
			readAndSendPassword();
    2afc:	0e 94 7d 14 	call	0x28fa	; 0x28fa <readAndSendPassword>
			LCD_clearScreen();
    2b00:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>

			LCD_displayString("checking password");
    2b04:	8b ed       	ldi	r24, 0xDB	; 219
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
			response = UART_rcvCharacter();
    2b0c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UART_rcvCharacter>
    2b10:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_clearScreen();
    2b12:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>



			if(response == 't')
    2b16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b18:	84 37       	cpi	r24, 0x74	; 116
    2b1a:	69 f4       	brne	.+26     	; 0x2b36 <changePass+0x88>
			{

				LCD_displayString("Password Saved");
    2b1c:	8d ee       	ldi	r24, 0xED	; 237
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
				LCD_moveCursor(1,0);
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	60 e0       	ldi	r22, 0x00	; 0
    2b28:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
				LCD_displayString("Successfully");
    2b2c:	8c ef       	ldi	r24, 0xFC	; 252
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
    2b34:	0f c0       	rjmp	.+30     	; 0x2b54 <changePass+0xa6>
			}
			else if(response == 'f'){
    2b36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b38:	86 36       	cpi	r24, 0x66	; 102
    2b3a:	61 f4       	brne	.+24     	; 0x2b54 <changePass+0xa6>

				LCD_displayString("Different");
    2b3c:	89 e0       	ldi	r24, 0x09	; 9
    2b3e:	91 e0       	ldi	r25, 0x01	; 1
    2b40:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
				LCD_moveCursor(1,0);
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	60 e0       	ldi	r22, 0x00	; 0
    2b48:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
				LCD_displayString("passwords");
    2b4c:	83 e1       	ldi	r24, 0x13	; 19
    2b4e:	91 e0       	ldi	r25, 0x01	; 1
    2b50:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	aa ef       	ldi	r26, 0xFA	; 250
    2b5a:	b4 e4       	ldi	r27, 0x44	; 68
    2b5c:	8b 87       	std	Y+11, r24	; 0x0b
    2b5e:	9c 87       	std	Y+12, r25	; 0x0c
    2b60:	ad 87       	std	Y+13, r26	; 0x0d
    2b62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	4a ef       	ldi	r20, 0xFA	; 250
    2b72:	54 e4       	ldi	r21, 0x44	; 68
    2b74:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8f 83       	std	Y+7, r24	; 0x07
    2b7e:	98 87       	std	Y+8, r25	; 0x08
    2b80:	a9 87       	std	Y+9, r26	; 0x09
    2b82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b84:	6f 81       	ldd	r22, Y+7	; 0x07
    2b86:	78 85       	ldd	r23, Y+8	; 0x08
    2b88:	89 85       	ldd	r24, Y+9	; 0x09
    2b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e8       	ldi	r20, 0x80	; 128
    2b92:	5f e3       	ldi	r21, 0x3F	; 63
    2b94:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2b98:	88 23       	and	r24, r24
    2b9a:	2c f4       	brge	.+10     	; 0x2ba6 <changePass+0xf8>
		__ticks = 1;
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	9e 83       	std	Y+6, r25	; 0x06
    2ba2:	8d 83       	std	Y+5, r24	; 0x05
    2ba4:	3f c0       	rjmp	.+126    	; 0x2c24 <changePass+0x176>
	else if (__tmp > 65535)
    2ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba8:	78 85       	ldd	r23, Y+8	; 0x08
    2baa:	89 85       	ldd	r24, Y+9	; 0x09
    2bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	3f ef       	ldi	r19, 0xFF	; 255
    2bb2:	4f e7       	ldi	r20, 0x7F	; 127
    2bb4:	57 e4       	ldi	r21, 0x47	; 71
    2bb6:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2bba:	18 16       	cp	r1, r24
    2bbc:	4c f5       	brge	.+82     	; 0x2c10 <changePass+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e2       	ldi	r20, 0x20	; 32
    2bcc:	51 e4       	ldi	r21, 0x41	; 65
    2bce:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	cd 01       	movw	r24, r26
    2bda:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	9e 83       	std	Y+6, r25	; 0x06
    2be4:	8d 83       	std	Y+5, r24	; 0x05
    2be6:	0f c0       	rjmp	.+30     	; 0x2c06 <changePass+0x158>
    2be8:	88 ec       	ldi	r24, 0xC8	; 200
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9c 83       	std	Y+4, r25	; 0x04
    2bee:	8b 83       	std	Y+3, r24	; 0x03
    2bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <changePass+0x146>
    2bf8:	9c 83       	std	Y+4, r25	; 0x04
    2bfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c06:	8d 81       	ldd	r24, Y+5	; 0x05
    2c08:	9e 81       	ldd	r25, Y+6	; 0x06
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	69 f7       	brne	.-38     	; 0x2be8 <changePass+0x13a>
    2c0e:	14 c0       	rjmp	.+40     	; 0x2c38 <changePass+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c10:	6f 81       	ldd	r22, Y+7	; 0x07
    2c12:	78 85       	ldd	r23, Y+8	; 0x08
    2c14:	89 85       	ldd	r24, Y+9	; 0x09
    2c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c18:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9e 83       	std	Y+6, r25	; 0x06
    2c22:	8d 83       	std	Y+5, r24	; 0x05
    2c24:	8d 81       	ldd	r24, Y+5	; 0x05
    2c26:	9e 81       	ldd	r25, Y+6	; 0x06
    2c28:	9a 83       	std	Y+2, r25	; 0x02
    2c2a:	89 83       	std	Y+1, r24	; 0x01
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <changePass+0x182>
    2c34:	9a 83       	std	Y+2, r25	; 0x02
    2c36:	89 83       	std	Y+1, r24	; 0x01
			}
			_delay_ms(2000);
			LCD_clearScreen();
    2c38:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_clearScreen>

		}while(response == 'f');
    2c3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c3e:	86 36       	cpi	r24, 0x66	; 102
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <changePass+0x196>
    2c42:	41 cf       	rjmp	.-382    	; 0x2ac6 <changePass+0x18>
}
    2c44:	2f 96       	adiw	r28, 0x0f	; 15
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <__prologue_saves__>:
    2c56:	2f 92       	push	r2
    2c58:	3f 92       	push	r3
    2c5a:	4f 92       	push	r4
    2c5c:	5f 92       	push	r5
    2c5e:	6f 92       	push	r6
    2c60:	7f 92       	push	r7
    2c62:	8f 92       	push	r8
    2c64:	9f 92       	push	r9
    2c66:	af 92       	push	r10
    2c68:	bf 92       	push	r11
    2c6a:	cf 92       	push	r12
    2c6c:	df 92       	push	r13
    2c6e:	ef 92       	push	r14
    2c70:	ff 92       	push	r15
    2c72:	0f 93       	push	r16
    2c74:	1f 93       	push	r17
    2c76:	cf 93       	push	r28
    2c78:	df 93       	push	r29
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	ca 1b       	sub	r28, r26
    2c80:	db 0b       	sbc	r29, r27
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    2c8c:	09 94       	ijmp

00002c8e <__epilogue_restores__>:
    2c8e:	2a 88       	ldd	r2, Y+18	; 0x12
    2c90:	39 88       	ldd	r3, Y+17	; 0x11
    2c92:	48 88       	ldd	r4, Y+16	; 0x10
    2c94:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c96:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c98:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ca0:	b9 84       	ldd	r11, Y+9	; 0x09
    2ca2:	c8 84       	ldd	r12, Y+8	; 0x08
    2ca4:	df 80       	ldd	r13, Y+7	; 0x07
    2ca6:	ee 80       	ldd	r14, Y+6	; 0x06
    2ca8:	fd 80       	ldd	r15, Y+5	; 0x05
    2caa:	0c 81       	ldd	r16, Y+4	; 0x04
    2cac:	1b 81       	ldd	r17, Y+3	; 0x03
    2cae:	aa 81       	ldd	r26, Y+2	; 0x02
    2cb0:	b9 81       	ldd	r27, Y+1	; 0x01
    2cb2:	ce 0f       	add	r28, r30
    2cb4:	d1 1d       	adc	r29, r1
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
    2cc0:	ed 01       	movw	r28, r26
    2cc2:	08 95       	ret

00002cc4 <dtostrf>:
    2cc4:	ef 92       	push	r14
    2cc6:	ff 92       	push	r15
    2cc8:	0f 93       	push	r16
    2cca:	1f 93       	push	r17
    2ccc:	f2 2f       	mov	r31, r18
    2cce:	f0 2e       	mov	r15, r16
    2cd0:	47 fd       	sbrc	r20, 7
    2cd2:	02 c0       	rjmp	.+4      	; 0x2cd8 <dtostrf+0x14>
    2cd4:	e4 e0       	ldi	r30, 0x04	; 4
    2cd6:	01 c0       	rjmp	.+2      	; 0x2cda <dtostrf+0x16>
    2cd8:	e4 e1       	ldi	r30, 0x14	; 20
    2cda:	24 2f       	mov	r18, r20
    2cdc:	33 27       	eor	r19, r19
    2cde:	27 fd       	sbrc	r18, 7
    2ce0:	30 95       	com	r19
    2ce2:	37 ff       	sbrs	r19, 7
    2ce4:	03 c0       	rjmp	.+6      	; 0x2cec <dtostrf+0x28>
    2ce6:	30 95       	com	r19
    2ce8:	21 95       	neg	r18
    2cea:	3f 4f       	sbci	r19, 0xFF	; 255
    2cec:	4f 2d       	mov	r20, r15
    2cee:	51 2f       	mov	r21, r17
    2cf0:	0f 2f       	mov	r16, r31
    2cf2:	ee 2e       	mov	r14, r30
    2cf4:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <dtoa_prf>
    2cf8:	8f 2d       	mov	r24, r15
    2cfa:	91 2f       	mov	r25, r17
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	ff 90       	pop	r15
    2d02:	ef 90       	pop	r14
    2d04:	08 95       	ret

00002d06 <itoa>:
    2d06:	fb 01       	movw	r30, r22
    2d08:	9f 01       	movw	r18, r30
    2d0a:	e8 94       	clt
    2d0c:	42 30       	cpi	r20, 0x02	; 2
    2d0e:	c4 f0       	brlt	.+48     	; 0x2d40 <itoa+0x3a>
    2d10:	45 32       	cpi	r20, 0x25	; 37
    2d12:	b4 f4       	brge	.+44     	; 0x2d40 <itoa+0x3a>
    2d14:	4a 30       	cpi	r20, 0x0A	; 10
    2d16:	29 f4       	brne	.+10     	; 0x2d22 <itoa+0x1c>
    2d18:	97 fb       	bst	r25, 7
    2d1a:	1e f4       	brtc	.+6      	; 0x2d22 <itoa+0x1c>
    2d1c:	90 95       	com	r25
    2d1e:	81 95       	neg	r24
    2d20:	9f 4f       	sbci	r25, 0xFF	; 255
    2d22:	64 2f       	mov	r22, r20
    2d24:	77 27       	eor	r23, r23
    2d26:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__udivmodhi4>
    2d2a:	80 5d       	subi	r24, 0xD0	; 208
    2d2c:	8a 33       	cpi	r24, 0x3A	; 58
    2d2e:	0c f0       	brlt	.+2      	; 0x2d32 <itoa+0x2c>
    2d30:	89 5d       	subi	r24, 0xD9	; 217
    2d32:	81 93       	st	Z+, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	a1 f7       	brne	.-24     	; 0x2d22 <itoa+0x1c>
    2d3a:	16 f4       	brtc	.+4      	; 0x2d40 <itoa+0x3a>
    2d3c:	5d e2       	ldi	r21, 0x2D	; 45
    2d3e:	51 93       	st	Z+, r21
    2d40:	10 82       	st	Z, r1
    2d42:	c9 01       	movw	r24, r18
    2d44:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <strrev>

00002d48 <dtoa_prf>:
    2d48:	a9 e0       	ldi	r26, 0x09	; 9
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	ea ea       	ldi	r30, 0xAA	; 170
    2d4e:	f6 e1       	ldi	r31, 0x16	; 22
    2d50:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__prologue_saves__+0x8>
    2d54:	6a 01       	movw	r12, r20
    2d56:	12 2f       	mov	r17, r18
    2d58:	a0 2e       	mov	r10, r16
    2d5a:	be 2c       	mov	r11, r14
    2d5c:	2b e3       	ldi	r18, 0x3B	; 59
    2d5e:	20 17       	cp	r18, r16
    2d60:	18 f4       	brcc	.+6      	; 0x2d68 <dtoa_prf+0x20>
    2d62:	2c e3       	ldi	r18, 0x3C	; 60
    2d64:	92 2e       	mov	r9, r18
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <dtoa_prf+0x24>
    2d68:	90 2e       	mov	r9, r16
    2d6a:	93 94       	inc	r9
    2d6c:	ae 01       	movw	r20, r28
    2d6e:	4f 5f       	subi	r20, 0xFF	; 255
    2d70:	5f 4f       	sbci	r21, 0xFF	; 255
    2d72:	27 e0       	ldi	r18, 0x07	; 7
    2d74:	09 2d       	mov	r16, r9
    2d76:	0e 94 06 18 	call	0x300c	; 0x300c <__ftoa_engine>
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	e8 2e       	mov	r14, r24
    2d80:	ff 24       	eor	r15, r15
    2d82:	c7 01       	movw	r24, r14
    2d84:	89 70       	andi	r24, 0x09	; 9
    2d86:	90 70       	andi	r25, 0x00	; 0
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	11 f4       	brne	.+4      	; 0x2d90 <dtoa_prf+0x48>
    2d8c:	ad e2       	ldi	r26, 0x2D	; 45
    2d8e:	09 c0       	rjmp	.+18     	; 0x2da2 <dtoa_prf+0x5a>
    2d90:	b1 fe       	sbrs	r11, 1
    2d92:	02 c0       	rjmp	.+4      	; 0x2d98 <dtoa_prf+0x50>
    2d94:	ab e2       	ldi	r26, 0x2B	; 43
    2d96:	05 c0       	rjmp	.+10     	; 0x2da2 <dtoa_prf+0x5a>
    2d98:	b0 fc       	sbrc	r11, 0
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <dtoa_prf+0x58>
    2d9c:	a0 e0       	ldi	r26, 0x00	; 0
    2d9e:	01 c0       	rjmp	.+2      	; 0x2da2 <dtoa_prf+0x5a>
    2da0:	a0 e2       	ldi	r26, 0x20	; 32
    2da2:	e3 fe       	sbrs	r14, 3
    2da4:	3b c0       	rjmp	.+118    	; 0x2e1c <dtoa_prf+0xd4>
    2da6:	aa 23       	and	r26, r26
    2da8:	11 f4       	brne	.+4      	; 0x2dae <dtoa_prf+0x66>
    2daa:	23 e0       	ldi	r18, 0x03	; 3
    2dac:	01 c0       	rjmp	.+2      	; 0x2db0 <dtoa_prf+0x68>
    2dae:	24 e0       	ldi	r18, 0x04	; 4
    2db0:	21 17       	cp	r18, r17
    2db2:	10 f0       	brcs	.+4      	; 0x2db8 <dtoa_prf+0x70>
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <dtoa_prf+0x74>
    2db8:	12 1b       	sub	r17, r18
    2dba:	21 2f       	mov	r18, r17
    2dbc:	eb 2c       	mov	r14, r11
    2dbe:	b4 fe       	sbrs	r11, 4
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <dtoa_prf+0x7e>
    2dc2:	32 2f       	mov	r19, r18
    2dc4:	0a c0       	rjmp	.+20     	; 0x2dda <dtoa_prf+0x92>
    2dc6:	f6 01       	movw	r30, r12
    2dc8:	32 2f       	mov	r19, r18
    2dca:	80 e2       	ldi	r24, 0x20	; 32
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <dtoa_prf+0x8a>
    2dce:	81 93       	st	Z+, r24
    2dd0:	31 50       	subi	r19, 0x01	; 1
    2dd2:	33 23       	and	r19, r19
    2dd4:	e1 f7       	brne	.-8      	; 0x2dce <dtoa_prf+0x86>
    2dd6:	c2 0e       	add	r12, r18
    2dd8:	d1 1c       	adc	r13, r1
    2dda:	aa 23       	and	r26, r26
    2ddc:	19 f0       	breq	.+6      	; 0x2de4 <dtoa_prf+0x9c>
    2dde:	f6 01       	movw	r30, r12
    2de0:	a1 93       	st	Z+, r26
    2de2:	6f 01       	movw	r12, r30
    2de4:	f6 01       	movw	r30, r12
    2de6:	31 96       	adiw	r30, 0x01	; 1
    2de8:	e2 fe       	sbrs	r14, 2
    2dea:	05 c0       	rjmp	.+10     	; 0x2df6 <dtoa_prf+0xae>
    2dec:	9e e4       	ldi	r25, 0x4E	; 78
    2dee:	d6 01       	movw	r26, r12
    2df0:	9c 93       	st	X, r25
    2df2:	81 e4       	ldi	r24, 0x41	; 65
    2df4:	04 c0       	rjmp	.+8      	; 0x2dfe <dtoa_prf+0xb6>
    2df6:	9e e6       	ldi	r25, 0x6E	; 110
    2df8:	d6 01       	movw	r26, r12
    2dfa:	9c 93       	st	X, r25
    2dfc:	81 e6       	ldi	r24, 0x61	; 97
    2dfe:	11 96       	adiw	r26, 0x01	; 1
    2e00:	8c 93       	st	X, r24
    2e02:	91 83       	std	Z+1, r25	; 0x01
    2e04:	32 96       	adiw	r30, 0x02	; 2
    2e06:	df 01       	movw	r26, r30
    2e08:	83 2f       	mov	r24, r19
    2e0a:	90 e2       	ldi	r25, 0x20	; 32
    2e0c:	02 c0       	rjmp	.+4      	; 0x2e12 <dtoa_prf+0xca>
    2e0e:	9d 93       	st	X+, r25
    2e10:	81 50       	subi	r24, 0x01	; 1
    2e12:	88 23       	and	r24, r24
    2e14:	e1 f7       	brne	.-8      	; 0x2e0e <dtoa_prf+0xc6>
    2e16:	e3 0f       	add	r30, r19
    2e18:	f1 1d       	adc	r31, r1
    2e1a:	40 c0       	rjmp	.+128    	; 0x2e9c <dtoa_prf+0x154>
    2e1c:	e2 fe       	sbrs	r14, 2
    2e1e:	42 c0       	rjmp	.+132    	; 0x2ea4 <dtoa_prf+0x15c>
    2e20:	aa 23       	and	r26, r26
    2e22:	11 f4       	brne	.+4      	; 0x2e28 <dtoa_prf+0xe0>
    2e24:	23 e0       	ldi	r18, 0x03	; 3
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <dtoa_prf+0xe2>
    2e28:	24 e0       	ldi	r18, 0x04	; 4
    2e2a:	21 17       	cp	r18, r17
    2e2c:	10 f0       	brcs	.+4      	; 0x2e32 <dtoa_prf+0xea>
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	02 c0       	rjmp	.+4      	; 0x2e36 <dtoa_prf+0xee>
    2e32:	12 1b       	sub	r17, r18
    2e34:	21 2f       	mov	r18, r17
    2e36:	eb 2c       	mov	r14, r11
    2e38:	b4 fe       	sbrs	r11, 4
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <dtoa_prf+0xf8>
    2e3c:	92 2f       	mov	r25, r18
    2e3e:	0a c0       	rjmp	.+20     	; 0x2e54 <dtoa_prf+0x10c>
    2e40:	f6 01       	movw	r30, r12
    2e42:	92 2f       	mov	r25, r18
    2e44:	80 e2       	ldi	r24, 0x20	; 32
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <dtoa_prf+0x104>
    2e48:	81 93       	st	Z+, r24
    2e4a:	91 50       	subi	r25, 0x01	; 1
    2e4c:	99 23       	and	r25, r25
    2e4e:	e1 f7       	brne	.-8      	; 0x2e48 <dtoa_prf+0x100>
    2e50:	c2 0e       	add	r12, r18
    2e52:	d1 1c       	adc	r13, r1
    2e54:	aa 23       	and	r26, r26
    2e56:	19 f0       	breq	.+6      	; 0x2e5e <dtoa_prf+0x116>
    2e58:	f6 01       	movw	r30, r12
    2e5a:	a1 93       	st	Z+, r26
    2e5c:	6f 01       	movw	r12, r30
    2e5e:	f6 01       	movw	r30, r12
    2e60:	31 96       	adiw	r30, 0x01	; 1
    2e62:	e2 fe       	sbrs	r14, 2
    2e64:	08 c0       	rjmp	.+16     	; 0x2e76 <dtoa_prf+0x12e>
    2e66:	89 e4       	ldi	r24, 0x49	; 73
    2e68:	d6 01       	movw	r26, r12
    2e6a:	8c 93       	st	X, r24
    2e6c:	8e e4       	ldi	r24, 0x4E	; 78
    2e6e:	11 96       	adiw	r26, 0x01	; 1
    2e70:	8c 93       	st	X, r24
    2e72:	86 e4       	ldi	r24, 0x46	; 70
    2e74:	07 c0       	rjmp	.+14     	; 0x2e84 <dtoa_prf+0x13c>
    2e76:	89 e6       	ldi	r24, 0x69	; 105
    2e78:	d6 01       	movw	r26, r12
    2e7a:	8c 93       	st	X, r24
    2e7c:	8e e6       	ldi	r24, 0x6E	; 110
    2e7e:	11 96       	adiw	r26, 0x01	; 1
    2e80:	8c 93       	st	X, r24
    2e82:	86 e6       	ldi	r24, 0x66	; 102
    2e84:	81 83       	std	Z+1, r24	; 0x01
    2e86:	32 96       	adiw	r30, 0x02	; 2
    2e88:	df 01       	movw	r26, r30
    2e8a:	89 2f       	mov	r24, r25
    2e8c:	20 e2       	ldi	r18, 0x20	; 32
    2e8e:	02 c0       	rjmp	.+4      	; 0x2e94 <dtoa_prf+0x14c>
    2e90:	2d 93       	st	X+, r18
    2e92:	81 50       	subi	r24, 0x01	; 1
    2e94:	88 23       	and	r24, r24
    2e96:	e1 f7       	brne	.-8      	; 0x2e90 <dtoa_prf+0x148>
    2e98:	e9 0f       	add	r30, r25
    2e9a:	f1 1d       	adc	r31, r1
    2e9c:	10 82       	st	Z, r1
    2e9e:	2e ef       	ldi	r18, 0xFE	; 254
    2ea0:	3f ef       	ldi	r19, 0xFF	; 255
    2ea2:	af c0       	rjmp	.+350    	; 0x3002 <dtoa_prf+0x2ba>
    2ea4:	16 16       	cp	r1, r22
    2ea6:	17 06       	cpc	r1, r23
    2ea8:	1c f0       	brlt	.+6      	; 0x2eb0 <dtoa_prf+0x168>
    2eaa:	41 e0       	ldi	r20, 0x01	; 1
    2eac:	50 e0       	ldi	r21, 0x00	; 0
    2eae:	03 c0       	rjmp	.+6      	; 0x2eb6 <dtoa_prf+0x16e>
    2eb0:	ab 01       	movw	r20, r22
    2eb2:	4f 5f       	subi	r20, 0xFF	; 255
    2eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb6:	aa 20       	and	r10, r10
    2eb8:	19 f4       	brne	.+6      	; 0x2ec0 <dtoa_prf+0x178>
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	03 c0       	rjmp	.+6      	; 0x2ec6 <dtoa_prf+0x17e>
    2ec0:	8a 2d       	mov	r24, r10
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	01 96       	adiw	r24, 0x01	; 1
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	aa 23       	and	r26, r26
    2ecc:	11 f0       	breq	.+4      	; 0x2ed2 <dtoa_prf+0x18a>
    2ece:	21 e0       	ldi	r18, 0x01	; 1
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	24 0f       	add	r18, r20
    2ed4:	35 1f       	adc	r19, r21
    2ed6:	28 0f       	add	r18, r24
    2ed8:	39 1f       	adc	r19, r25
    2eda:	81 2f       	mov	r24, r17
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	28 17       	cp	r18, r24
    2ee0:	39 07       	cpc	r19, r25
    2ee2:	14 f0       	brlt	.+4      	; 0x2ee8 <dtoa_prf+0x1a0>
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <dtoa_prf+0x1a4>
    2ee8:	12 1b       	sub	r17, r18
    2eea:	21 2f       	mov	r18, r17
    2eec:	4b 2d       	mov	r20, r11
    2eee:	50 e0       	ldi	r21, 0x00	; 0
    2ef0:	ca 01       	movw	r24, r20
    2ef2:	80 71       	andi	r24, 0x10	; 16
    2ef4:	90 70       	andi	r25, 0x00	; 0
    2ef6:	b4 fc       	sbrc	r11, 4
    2ef8:	0d c0       	rjmp	.+26     	; 0x2f14 <dtoa_prf+0x1cc>
    2efa:	b3 fc       	sbrc	r11, 3
    2efc:	0b c0       	rjmp	.+22     	; 0x2f14 <dtoa_prf+0x1cc>
    2efe:	f6 01       	movw	r30, r12
    2f00:	32 2f       	mov	r19, r18
    2f02:	40 e2       	ldi	r20, 0x20	; 32
    2f04:	02 c0       	rjmp	.+4      	; 0x2f0a <dtoa_prf+0x1c2>
    2f06:	41 93       	st	Z+, r20
    2f08:	31 50       	subi	r19, 0x01	; 1
    2f0a:	33 23       	and	r19, r19
    2f0c:	e1 f7       	brne	.-8      	; 0x2f06 <dtoa_prf+0x1be>
    2f0e:	c2 0e       	add	r12, r18
    2f10:	d1 1c       	adc	r13, r1
    2f12:	01 c0       	rjmp	.+2      	; 0x2f16 <dtoa_prf+0x1ce>
    2f14:	32 2f       	mov	r19, r18
    2f16:	aa 23       	and	r26, r26
    2f18:	19 f0       	breq	.+6      	; 0x2f20 <dtoa_prf+0x1d8>
    2f1a:	f6 01       	movw	r30, r12
    2f1c:	a1 93       	st	Z+, r26
    2f1e:	6f 01       	movw	r12, r30
    2f20:	89 2b       	or	r24, r25
    2f22:	11 f0       	breq	.+4      	; 0x2f28 <dtoa_prf+0x1e0>
    2f24:	13 2f       	mov	r17, r19
    2f26:	0a c0       	rjmp	.+20     	; 0x2f3c <dtoa_prf+0x1f4>
    2f28:	f6 01       	movw	r30, r12
    2f2a:	13 2f       	mov	r17, r19
    2f2c:	80 e3       	ldi	r24, 0x30	; 48
    2f2e:	02 c0       	rjmp	.+4      	; 0x2f34 <dtoa_prf+0x1ec>
    2f30:	81 93       	st	Z+, r24
    2f32:	11 50       	subi	r17, 0x01	; 1
    2f34:	11 23       	and	r17, r17
    2f36:	e1 f7       	brne	.-8      	; 0x2f30 <dtoa_prf+0x1e8>
    2f38:	c3 0e       	add	r12, r19
    2f3a:	d1 1c       	adc	r13, r1
    2f3c:	09 2d       	mov	r16, r9
    2f3e:	06 0f       	add	r16, r22
    2f40:	ba 80       	ldd	r11, Y+2	; 0x02
    2f42:	90 e1       	ldi	r25, 0x10	; 16
    2f44:	89 2e       	mov	r8, r25
    2f46:	91 2c       	mov	r9, r1
    2f48:	8e 20       	and	r8, r14
    2f4a:	9f 20       	and	r9, r15
    2f4c:	e4 fe       	sbrs	r14, 4
    2f4e:	04 c0       	rjmp	.+8      	; 0x2f58 <dtoa_prf+0x210>
    2f50:	f1 e3       	ldi	r31, 0x31	; 49
    2f52:	bf 16       	cp	r11, r31
    2f54:	09 f4       	brne	.+2      	; 0x2f58 <dtoa_prf+0x210>
    2f56:	01 50       	subi	r16, 0x01	; 1
    2f58:	10 16       	cp	r1, r16
    2f5a:	14 f0       	brlt	.+4      	; 0x2f60 <dtoa_prf+0x218>
    2f5c:	01 e0       	ldi	r16, 0x01	; 1
    2f5e:	03 c0       	rjmp	.+6      	; 0x2f66 <dtoa_prf+0x21e>
    2f60:	09 30       	cpi	r16, 0x09	; 9
    2f62:	08 f0       	brcs	.+2      	; 0x2f66 <dtoa_prf+0x21e>
    2f64:	08 e0       	ldi	r16, 0x08	; 8
    2f66:	9b 01       	movw	r18, r22
    2f68:	77 ff       	sbrs	r23, 7
    2f6a:	02 c0       	rjmp	.+4      	; 0x2f70 <dtoa_prf+0x228>
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	cb 01       	movw	r24, r22
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	82 1b       	sub	r24, r18
    2f76:	93 0b       	sbc	r25, r19
    2f78:	fe 01       	movw	r30, r28
    2f7a:	31 96       	adiw	r30, 0x01	; 1
    2f7c:	e8 0f       	add	r30, r24
    2f7e:	f9 1f       	adc	r31, r25
    2f80:	8e e2       	ldi	r24, 0x2E	; 46
    2f82:	f8 2e       	mov	r15, r24
    2f84:	3b 01       	movw	r6, r22
    2f86:	60 1a       	sub	r6, r16
    2f88:	71 08       	sbc	r7, r1
    2f8a:	8a 2d       	mov	r24, r10
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	44 27       	eor	r20, r20
    2f90:	55 27       	eor	r21, r21
    2f92:	48 1b       	sub	r20, r24
    2f94:	59 0b       	sbc	r21, r25
    2f96:	8f ef       	ldi	r24, 0xFF	; 255
    2f98:	2f 3f       	cpi	r18, 0xFF	; 255
    2f9a:	38 07       	cpc	r19, r24
    2f9c:	19 f4       	brne	.+6      	; 0x2fa4 <dtoa_prf+0x25c>
    2f9e:	d6 01       	movw	r26, r12
    2fa0:	fd 92       	st	X+, r15
    2fa2:	6d 01       	movw	r12, r26
    2fa4:	62 17       	cp	r22, r18
    2fa6:	73 07       	cpc	r23, r19
    2fa8:	2c f0       	brlt	.+10     	; 0x2fb4 <dtoa_prf+0x26c>
    2faa:	62 16       	cp	r6, r18
    2fac:	73 06       	cpc	r7, r19
    2fae:	14 f4       	brge	.+4      	; 0x2fb4 <dtoa_prf+0x26c>
    2fb0:	80 81       	ld	r24, Z
    2fb2:	01 c0       	rjmp	.+2      	; 0x2fb6 <dtoa_prf+0x26e>
    2fb4:	80 e3       	ldi	r24, 0x30	; 48
    2fb6:	21 50       	subi	r18, 0x01	; 1
    2fb8:	30 40       	sbci	r19, 0x00	; 0
    2fba:	31 96       	adiw	r30, 0x01	; 1
    2fbc:	24 17       	cp	r18, r20
    2fbe:	35 07       	cpc	r19, r21
    2fc0:	24 f0       	brlt	.+8      	; 0x2fca <dtoa_prf+0x282>
    2fc2:	d6 01       	movw	r26, r12
    2fc4:	8d 93       	st	X+, r24
    2fc6:	6d 01       	movw	r12, r26
    2fc8:	e6 cf       	rjmp	.-52     	; 0x2f96 <dtoa_prf+0x24e>
    2fca:	26 17       	cp	r18, r22
    2fcc:	37 07       	cpc	r19, r23
    2fce:	49 f4       	brne	.+18     	; 0x2fe2 <dtoa_prf+0x29a>
    2fd0:	b5 e3       	ldi	r27, 0x35	; 53
    2fd2:	bb 15       	cp	r27, r11
    2fd4:	28 f0       	brcs	.+10     	; 0x2fe0 <dtoa_prf+0x298>
    2fd6:	bb 16       	cp	r11, r27
    2fd8:	21 f4       	brne	.+8      	; 0x2fe2 <dtoa_prf+0x29a>
    2fda:	81 14       	cp	r8, r1
    2fdc:	91 04       	cpc	r9, r1
    2fde:	09 f4       	brne	.+2      	; 0x2fe2 <dtoa_prf+0x29a>
    2fe0:	81 e3       	ldi	r24, 0x31	; 49
    2fe2:	f6 01       	movw	r30, r12
    2fe4:	81 93       	st	Z+, r24
    2fe6:	d6 01       	movw	r26, r12
    2fe8:	81 2f       	mov	r24, r17
    2fea:	90 e2       	ldi	r25, 0x20	; 32
    2fec:	02 c0       	rjmp	.+4      	; 0x2ff2 <dtoa_prf+0x2aa>
    2fee:	9c 93       	st	X, r25
    2ff0:	81 50       	subi	r24, 0x01	; 1
    2ff2:	11 96       	adiw	r26, 0x01	; 1
    2ff4:	88 23       	and	r24, r24
    2ff6:	d9 f7       	brne	.-10     	; 0x2fee <dtoa_prf+0x2a6>
    2ff8:	e1 0f       	add	r30, r17
    2ffa:	f1 1d       	adc	r31, r1
    2ffc:	10 82       	st	Z, r1
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	c9 01       	movw	r24, r18
    3004:	29 96       	adiw	r28, 0x09	; 9
    3006:	ee e0       	ldi	r30, 0x0E	; 14
    3008:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__epilogue_restores__+0x8>

0000300c <__ftoa_engine>:
    300c:	28 30       	cpi	r18, 0x08	; 8
    300e:	08 f0       	brcs	.+2      	; 0x3012 <__ftoa_engine+0x6>
    3010:	27 e0       	ldi	r18, 0x07	; 7
    3012:	33 27       	eor	r19, r19
    3014:	da 01       	movw	r26, r20
    3016:	99 0f       	add	r25, r25
    3018:	31 1d       	adc	r19, r1
    301a:	87 fd       	sbrc	r24, 7
    301c:	91 60       	ori	r25, 0x01	; 1
    301e:	00 96       	adiw	r24, 0x00	; 0
    3020:	61 05       	cpc	r22, r1
    3022:	71 05       	cpc	r23, r1
    3024:	39 f4       	brne	.+14     	; 0x3034 <__ftoa_engine+0x28>
    3026:	32 60       	ori	r19, 0x02	; 2
    3028:	2e 5f       	subi	r18, 0xFE	; 254
    302a:	3d 93       	st	X+, r19
    302c:	30 e3       	ldi	r19, 0x30	; 48
    302e:	2a 95       	dec	r18
    3030:	e1 f7       	brne	.-8      	; 0x302a <__ftoa_engine+0x1e>
    3032:	08 95       	ret
    3034:	9f 3f       	cpi	r25, 0xFF	; 255
    3036:	30 f0       	brcs	.+12     	; 0x3044 <__ftoa_engine+0x38>
    3038:	80 38       	cpi	r24, 0x80	; 128
    303a:	71 05       	cpc	r23, r1
    303c:	61 05       	cpc	r22, r1
    303e:	09 f0       	breq	.+2      	; 0x3042 <__ftoa_engine+0x36>
    3040:	3c 5f       	subi	r19, 0xFC	; 252
    3042:	3c 5f       	subi	r19, 0xFC	; 252
    3044:	3d 93       	st	X+, r19
    3046:	91 30       	cpi	r25, 0x01	; 1
    3048:	08 f0       	brcs	.+2      	; 0x304c <__ftoa_engine+0x40>
    304a:	80 68       	ori	r24, 0x80	; 128
    304c:	91 1d       	adc	r25, r1
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	1f 93       	push	r17
    3054:	0f 93       	push	r16
    3056:	ff 92       	push	r15
    3058:	ef 92       	push	r14
    305a:	19 2f       	mov	r17, r25
    305c:	98 7f       	andi	r25, 0xF8	; 248
    305e:	96 95       	lsr	r25
    3060:	e9 2f       	mov	r30, r25
    3062:	96 95       	lsr	r25
    3064:	96 95       	lsr	r25
    3066:	e9 0f       	add	r30, r25
    3068:	ff 27       	eor	r31, r31
    306a:	e2 55       	subi	r30, 0x52	; 82
    306c:	ff 4f       	sbci	r31, 0xFF	; 255
    306e:	99 27       	eor	r25, r25
    3070:	33 27       	eor	r19, r19
    3072:	ee 24       	eor	r14, r14
    3074:	ff 24       	eor	r15, r15
    3076:	a7 01       	movw	r20, r14
    3078:	e7 01       	movw	r28, r14
    307a:	05 90       	lpm	r0, Z+
    307c:	08 94       	sec
    307e:	07 94       	ror	r0
    3080:	28 f4       	brcc	.+10     	; 0x308c <__ftoa_engine+0x80>
    3082:	36 0f       	add	r19, r22
    3084:	e7 1e       	adc	r14, r23
    3086:	f8 1e       	adc	r15, r24
    3088:	49 1f       	adc	r20, r25
    308a:	51 1d       	adc	r21, r1
    308c:	66 0f       	add	r22, r22
    308e:	77 1f       	adc	r23, r23
    3090:	88 1f       	adc	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	06 94       	lsr	r0
    3096:	a1 f7       	brne	.-24     	; 0x3080 <__ftoa_engine+0x74>
    3098:	05 90       	lpm	r0, Z+
    309a:	07 94       	ror	r0
    309c:	28 f4       	brcc	.+10     	; 0x30a8 <__ftoa_engine+0x9c>
    309e:	e7 0e       	add	r14, r23
    30a0:	f8 1e       	adc	r15, r24
    30a2:	49 1f       	adc	r20, r25
    30a4:	56 1f       	adc	r21, r22
    30a6:	c1 1d       	adc	r28, r1
    30a8:	77 0f       	add	r23, r23
    30aa:	88 1f       	adc	r24, r24
    30ac:	99 1f       	adc	r25, r25
    30ae:	66 1f       	adc	r22, r22
    30b0:	06 94       	lsr	r0
    30b2:	a1 f7       	brne	.-24     	; 0x309c <__ftoa_engine+0x90>
    30b4:	05 90       	lpm	r0, Z+
    30b6:	07 94       	ror	r0
    30b8:	28 f4       	brcc	.+10     	; 0x30c4 <__ftoa_engine+0xb8>
    30ba:	f8 0e       	add	r15, r24
    30bc:	49 1f       	adc	r20, r25
    30be:	56 1f       	adc	r21, r22
    30c0:	c7 1f       	adc	r28, r23
    30c2:	d1 1d       	adc	r29, r1
    30c4:	88 0f       	add	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	66 1f       	adc	r22, r22
    30ca:	77 1f       	adc	r23, r23
    30cc:	06 94       	lsr	r0
    30ce:	a1 f7       	brne	.-24     	; 0x30b8 <__ftoa_engine+0xac>
    30d0:	05 90       	lpm	r0, Z+
    30d2:	07 94       	ror	r0
    30d4:	20 f4       	brcc	.+8      	; 0x30de <__ftoa_engine+0xd2>
    30d6:	49 0f       	add	r20, r25
    30d8:	56 1f       	adc	r21, r22
    30da:	c7 1f       	adc	r28, r23
    30dc:	d8 1f       	adc	r29, r24
    30de:	99 0f       	add	r25, r25
    30e0:	66 1f       	adc	r22, r22
    30e2:	77 1f       	adc	r23, r23
    30e4:	88 1f       	adc	r24, r24
    30e6:	06 94       	lsr	r0
    30e8:	a9 f7       	brne	.-22     	; 0x30d4 <__ftoa_engine+0xc8>
    30ea:	84 91       	lpm	r24, Z+
    30ec:	10 95       	com	r17
    30ee:	17 70       	andi	r17, 0x07	; 7
    30f0:	41 f0       	breq	.+16     	; 0x3102 <__ftoa_engine+0xf6>
    30f2:	d6 95       	lsr	r29
    30f4:	c7 95       	ror	r28
    30f6:	57 95       	ror	r21
    30f8:	47 95       	ror	r20
    30fa:	f7 94       	ror	r15
    30fc:	e7 94       	ror	r14
    30fe:	1a 95       	dec	r17
    3100:	c1 f7       	brne	.-16     	; 0x30f2 <__ftoa_engine+0xe6>
    3102:	e4 e5       	ldi	r30, 0x54	; 84
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	68 94       	set
    3108:	15 90       	lpm	r1, Z+
    310a:	15 91       	lpm	r17, Z+
    310c:	35 91       	lpm	r19, Z+
    310e:	65 91       	lpm	r22, Z+
    3110:	95 91       	lpm	r25, Z+
    3112:	05 90       	lpm	r0, Z+
    3114:	7f e2       	ldi	r23, 0x2F	; 47
    3116:	73 95       	inc	r23
    3118:	e1 18       	sub	r14, r1
    311a:	f1 0a       	sbc	r15, r17
    311c:	43 0b       	sbc	r20, r19
    311e:	56 0b       	sbc	r21, r22
    3120:	c9 0b       	sbc	r28, r25
    3122:	d0 09       	sbc	r29, r0
    3124:	c0 f7       	brcc	.-16     	; 0x3116 <__ftoa_engine+0x10a>
    3126:	e1 0c       	add	r14, r1
    3128:	f1 1e       	adc	r15, r17
    312a:	43 1f       	adc	r20, r19
    312c:	56 1f       	adc	r21, r22
    312e:	c9 1f       	adc	r28, r25
    3130:	d0 1d       	adc	r29, r0
    3132:	7e f4       	brtc	.+30     	; 0x3152 <__ftoa_engine+0x146>
    3134:	70 33       	cpi	r23, 0x30	; 48
    3136:	11 f4       	brne	.+4      	; 0x313c <__ftoa_engine+0x130>
    3138:	8a 95       	dec	r24
    313a:	e6 cf       	rjmp	.-52     	; 0x3108 <__ftoa_engine+0xfc>
    313c:	e8 94       	clt
    313e:	01 50       	subi	r16, 0x01	; 1
    3140:	30 f0       	brcs	.+12     	; 0x314e <__ftoa_engine+0x142>
    3142:	08 0f       	add	r16, r24
    3144:	0a f4       	brpl	.+2      	; 0x3148 <__ftoa_engine+0x13c>
    3146:	00 27       	eor	r16, r16
    3148:	02 17       	cp	r16, r18
    314a:	08 f4       	brcc	.+2      	; 0x314e <__ftoa_engine+0x142>
    314c:	20 2f       	mov	r18, r16
    314e:	23 95       	inc	r18
    3150:	02 2f       	mov	r16, r18
    3152:	7a 33       	cpi	r23, 0x3A	; 58
    3154:	28 f0       	brcs	.+10     	; 0x3160 <__ftoa_engine+0x154>
    3156:	79 e3       	ldi	r23, 0x39	; 57
    3158:	7d 93       	st	X+, r23
    315a:	2a 95       	dec	r18
    315c:	e9 f7       	brne	.-6      	; 0x3158 <__ftoa_engine+0x14c>
    315e:	10 c0       	rjmp	.+32     	; 0x3180 <__ftoa_engine+0x174>
    3160:	7d 93       	st	X+, r23
    3162:	2a 95       	dec	r18
    3164:	89 f6       	brne	.-94     	; 0x3108 <__ftoa_engine+0xfc>
    3166:	06 94       	lsr	r0
    3168:	97 95       	ror	r25
    316a:	67 95       	ror	r22
    316c:	37 95       	ror	r19
    316e:	17 95       	ror	r17
    3170:	17 94       	ror	r1
    3172:	e1 18       	sub	r14, r1
    3174:	f1 0a       	sbc	r15, r17
    3176:	43 0b       	sbc	r20, r19
    3178:	56 0b       	sbc	r21, r22
    317a:	c9 0b       	sbc	r28, r25
    317c:	d0 09       	sbc	r29, r0
    317e:	98 f0       	brcs	.+38     	; 0x31a6 <__ftoa_engine+0x19a>
    3180:	23 95       	inc	r18
    3182:	7e 91       	ld	r23, -X
    3184:	73 95       	inc	r23
    3186:	7a 33       	cpi	r23, 0x3A	; 58
    3188:	08 f0       	brcs	.+2      	; 0x318c <__ftoa_engine+0x180>
    318a:	70 e3       	ldi	r23, 0x30	; 48
    318c:	7c 93       	st	X, r23
    318e:	20 13       	cpse	r18, r16
    3190:	b8 f7       	brcc	.-18     	; 0x3180 <__ftoa_engine+0x174>
    3192:	7e 91       	ld	r23, -X
    3194:	70 61       	ori	r23, 0x10	; 16
    3196:	7d 93       	st	X+, r23
    3198:	30 f0       	brcs	.+12     	; 0x31a6 <__ftoa_engine+0x19a>
    319a:	83 95       	inc	r24
    319c:	71 e3       	ldi	r23, 0x31	; 49
    319e:	7d 93       	st	X+, r23
    31a0:	70 e3       	ldi	r23, 0x30	; 48
    31a2:	2a 95       	dec	r18
    31a4:	e1 f7       	brne	.-8      	; 0x319e <__ftoa_engine+0x192>
    31a6:	11 24       	eor	r1, r1
    31a8:	ef 90       	pop	r14
    31aa:	ff 90       	pop	r15
    31ac:	0f 91       	pop	r16
    31ae:	1f 91       	pop	r17
    31b0:	cf 91       	pop	r28
    31b2:	df 91       	pop	r29
    31b4:	99 27       	eor	r25, r25
    31b6:	87 fd       	sbrc	r24, 7
    31b8:	90 95       	com	r25
    31ba:	08 95       	ret

000031bc <strrev>:
    31bc:	dc 01       	movw	r26, r24
    31be:	fc 01       	movw	r30, r24
    31c0:	67 2f       	mov	r22, r23
    31c2:	71 91       	ld	r23, Z+
    31c4:	77 23       	and	r23, r23
    31c6:	e1 f7       	brne	.-8      	; 0x31c0 <strrev+0x4>
    31c8:	32 97       	sbiw	r30, 0x02	; 2
    31ca:	04 c0       	rjmp	.+8      	; 0x31d4 <strrev+0x18>
    31cc:	7c 91       	ld	r23, X
    31ce:	6d 93       	st	X+, r22
    31d0:	70 83       	st	Z, r23
    31d2:	62 91       	ld	r22, -Z
    31d4:	ae 17       	cp	r26, r30
    31d6:	bf 07       	cpc	r27, r31
    31d8:	c8 f3       	brcs	.-14     	; 0x31cc <strrev+0x10>
    31da:	08 95       	ret

000031dc <__udivmodhi4>:
    31dc:	aa 1b       	sub	r26, r26
    31de:	bb 1b       	sub	r27, r27
    31e0:	51 e1       	ldi	r21, 0x11	; 17
    31e2:	07 c0       	rjmp	.+14     	; 0x31f2 <__udivmodhi4_ep>

000031e4 <__udivmodhi4_loop>:
    31e4:	aa 1f       	adc	r26, r26
    31e6:	bb 1f       	adc	r27, r27
    31e8:	a6 17       	cp	r26, r22
    31ea:	b7 07       	cpc	r27, r23
    31ec:	10 f0       	brcs	.+4      	; 0x31f2 <__udivmodhi4_ep>
    31ee:	a6 1b       	sub	r26, r22
    31f0:	b7 0b       	sbc	r27, r23

000031f2 <__udivmodhi4_ep>:
    31f2:	88 1f       	adc	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	5a 95       	dec	r21
    31f8:	a9 f7       	brne	.-22     	; 0x31e4 <__udivmodhi4_loop>
    31fa:	80 95       	com	r24
    31fc:	90 95       	com	r25
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	08 95       	ret

00003204 <_exit>:
    3204:	f8 94       	cli

00003206 <__stop_program>:
    3206:	ff cf       	rjmp	.-2      	; 0x3206 <__stop_program>
