
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000942  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000942  000009b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000e7c  00000000  00000000  000009b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b08  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 98 04 	call	0x930	; 0x930 <main>
  7a:	0c 94 9f 04 	jmp	0x93e	; 0x93e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_13>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(USART_RXC_vect){
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	g_uartRcvData = UDR;
  9a:	ec e2       	ldi	r30, 0x2C	; 44
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 93 60 00 	sts	0x0060, r24
}
  a4:	cf 91       	pop	r28
  a6:	df 91       	pop	r29
  a8:	ff 91       	pop	r31
  aa:	ef 91       	pop	r30
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <UART_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void UART_init(){
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	00 d0       	rcall	.+0      	; 0xbe <UART_init+0x6>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62

	uint16 ubrr_value = 0;
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRA, U2X);		/* : Double the USART Transmission Speed */
  c6:	ab e2       	ldi	r26, 0x2B	; 43
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	eb e2       	ldi	r30, 0x2B	; 43
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	8c 93       	st	X, r24

	SET_BIT(UCSRB, RXCIE);		/* RX Complete Interrupt Enable */
  d4:	aa e2       	ldi	r26, 0x2A	; 42
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	ea e2       	ldi	r30, 0x2A	; 42
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);		/* Transmitter Enable*/
  e2:	aa e2       	ldi	r26, 0x2A	; 42
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	ea e2       	ldi	r30, 0x2A	; 42
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 60       	ori	r24, 0x08	; 8
  ee:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);		/* Receiver Enable */
  f0:	aa e2       	ldi	r26, 0x2A	; 42
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	ea e2       	ldi	r30, 0x2A	; 42
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC, UMSEL);	/* USART Mode Select 0 -> async, 1 -> sync*/
  fe:	a0 e4       	ldi	r26, 0x40	; 64
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	e0 e4       	ldi	r30, 0x40	; 64
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);		/* UCSZ1:0: Character Size */
 10c:	a0 e4       	ldi	r26, 0x40	; 64
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e0 e4       	ldi	r30, 0x40	; 64
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);		/* UCSZ1:0: 11 -> 8-bit */
 11a:	a0 e4       	ldi	r26, 0x40	; 64
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e0 e4       	ldi	r30, 0x40	; 64
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	8c 93       	st	X, r24


	ubrr_value = (uint16)(( F_CPU / ( BAUDRATE * 8UL )) - 1 );
 128:	87 e6       	ldi	r24, 0x67	; 103
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	9a 83       	std	Y+2, r25	; 0x02
 12e:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = (ubrr_value >> 8) & (0x0F);
 130:	e0 e4       	ldi	r30, 0x40	; 64
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	9a 81       	ldd	r25, Y+2	; 0x02
 138:	89 2f       	mov	r24, r25
 13a:	99 27       	eor	r25, r25
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
 140:	e9 e2       	ldi	r30, 0x29	; 41
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	80 83       	st	Z, r24
}
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	08 95       	ret

00000152 <UART_sendByte>:

void UART_sendByte(uint8 data){
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	0f 92       	push	r0
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
 15e:	eb e2       	ldi	r30, 0x2B	; 43
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 2f       	mov	r24, r24
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	80 72       	andi	r24, 0x20	; 32
 16a:	90 70       	andi	r25, 0x00	; 0
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	b9 f3       	breq	.-18     	; 0x15e <UART_sendByte+0xc>
	UDR = data;
 170:	ec e2       	ldi	r30, 0x2C	; 44
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	80 83       	st	Z, r24
}
 178:	0f 90       	pop	r0
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	08 95       	ret

00000180 <UART_sendString>:

void UART_sendString(const char *str){
 180:	df 93       	push	r29
 182:	cf 93       	push	r28
 184:	00 d0       	rcall	.+0      	; 0x186 <UART_sendString+0x6>
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	9a 83       	std	Y+2, r25	; 0x02
 18c:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
 18e:	eb e2       	ldi	r30, 0x2B	; 43
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	88 2f       	mov	r24, r24
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	80 72       	andi	r24, 0x20	; 32
 19a:	90 70       	andi	r25, 0x00	; 0
 19c:	00 97       	sbiw	r24, 0x00	; 0
 19e:	b9 f3       	breq	.-18     	; 0x18e <UART_sendString+0xe>
}
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	cf 91       	pop	r28
 1a6:	df 91       	pop	r29
 1a8:	08 95       	ret

000001aa <GPIO_setupPinDirection>:
 *******************************************************************************/



void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
 1aa:	df 93       	push	r29
 1ac:	cf 93       	push	r28
 1ae:	00 d0       	rcall	.+0      	; 0x1b0 <GPIO_setupPinDirection+0x6>
 1b0:	00 d0       	rcall	.+0      	; 0x1b2 <GPIO_setupPinDirection+0x8>
 1b2:	0f 92       	push	r0
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	89 83       	std	Y+1, r24	; 0x01
 1ba:	6a 83       	std	Y+2, r22	; 0x02
 1bc:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	08 f0       	brcs	.+2      	; 0x1c6 <GPIO_setupPinDirection+0x1c>
 1c4:	d5 c0       	rjmp	.+426    	; 0x370 <GPIO_setupPinDirection+0x1c6>
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	84 30       	cpi	r24, 0x04	; 4
 1ca:	08 f0       	brcs	.+2      	; 0x1ce <GPIO_setupPinDirection+0x24>
 1cc:	d1 c0       	rjmp	.+418    	; 0x370 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	3d 83       	std	Y+5, r19	; 0x05
 1d6:	2c 83       	std	Y+4, r18	; 0x04
 1d8:	8c 81       	ldd	r24, Y+4	; 0x04
 1da:	9d 81       	ldd	r25, Y+5	; 0x05
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	91 05       	cpc	r25, r1
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <GPIO_setupPinDirection+0x3a>
 1e2:	43 c0       	rjmp	.+134    	; 0x26a <GPIO_setupPinDirection+0xc0>
 1e4:	2c 81       	ldd	r18, Y+4	; 0x04
 1e6:	3d 81       	ldd	r19, Y+5	; 0x05
 1e8:	22 30       	cpi	r18, 0x02	; 2
 1ea:	31 05       	cpc	r19, r1
 1ec:	2c f4       	brge	.+10     	; 0x1f8 <GPIO_setupPinDirection+0x4e>
 1ee:	8c 81       	ldd	r24, Y+4	; 0x04
 1f0:	9d 81       	ldd	r25, Y+5	; 0x05
 1f2:	00 97       	sbiw	r24, 0x00	; 0
 1f4:	71 f0       	breq	.+28     	; 0x212 <GPIO_setupPinDirection+0x68>
 1f6:	bc c0       	rjmp	.+376    	; 0x370 <GPIO_setupPinDirection+0x1c6>
 1f8:	2c 81       	ldd	r18, Y+4	; 0x04
 1fa:	3d 81       	ldd	r19, Y+5	; 0x05
 1fc:	22 30       	cpi	r18, 0x02	; 2
 1fe:	31 05       	cpc	r19, r1
 200:	09 f4       	brne	.+2      	; 0x204 <GPIO_setupPinDirection+0x5a>
 202:	5f c0       	rjmp	.+190    	; 0x2c2 <GPIO_setupPinDirection+0x118>
 204:	8c 81       	ldd	r24, Y+4	; 0x04
 206:	9d 81       	ldd	r25, Y+5	; 0x05
 208:	83 30       	cpi	r24, 0x03	; 3
 20a:	91 05       	cpc	r25, r1
 20c:	09 f4       	brne	.+2      	; 0x210 <GPIO_setupPinDirection+0x66>
 20e:	85 c0       	rjmp	.+266    	; 0x31a <GPIO_setupPinDirection+0x170>
 210:	af c0       	rjmp	.+350    	; 0x370 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 212:	8b 81       	ldd	r24, Y+3	; 0x03
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	a1 f4       	brne	.+40     	; 0x240 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 218:	aa e3       	ldi	r26, 0x3A	; 58
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	ea e3       	ldi	r30, 0x3A	; 58
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8a 81       	ldd	r24, Y+2	; 0x02
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <GPIO_setupPinDirection+0x8c>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <GPIO_setupPinDirection+0x88>
 23a:	84 2b       	or	r24, r20
 23c:	8c 93       	st	X, r24
 23e:	98 c0       	rjmp	.+304    	; 0x370 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 240:	aa e3       	ldi	r26, 0x3A	; 58
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	ea e3       	ldi	r30, 0x3A	; 58
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	48 2f       	mov	r20, r24
 24c:	8a 81       	ldd	r24, Y+2	; 0x02
 24e:	28 2f       	mov	r18, r24
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 2e       	mov	r0, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <GPIO_setupPinDirection+0xb4>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <GPIO_setupPinDirection+0xb0>
 262:	80 95       	com	r24
 264:	84 23       	and	r24, r20
 266:	8c 93       	st	X, r24
 268:	83 c0       	rjmp	.+262    	; 0x370 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 26a:	8b 81       	ldd	r24, Y+3	; 0x03
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	a1 f4       	brne	.+40     	; 0x298 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 270:	a7 e3       	ldi	r26, 0x37	; 55
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	e7 e3       	ldi	r30, 0x37	; 55
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	48 2f       	mov	r20, r24
 27c:	8a 81       	ldd	r24, Y+2	; 0x02
 27e:	28 2f       	mov	r18, r24
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 2e       	mov	r0, r18
 288:	02 c0       	rjmp	.+4      	; 0x28e <GPIO_setupPinDirection+0xe4>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <GPIO_setupPinDirection+0xe0>
 292:	84 2b       	or	r24, r20
 294:	8c 93       	st	X, r24
 296:	6c c0       	rjmp	.+216    	; 0x370 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 298:	a7 e3       	ldi	r26, 0x37	; 55
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	e7 e3       	ldi	r30, 0x37	; 55
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	48 2f       	mov	r20, r24
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 2e       	mov	r0, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <GPIO_setupPinDirection+0x10c>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <GPIO_setupPinDirection+0x108>
 2ba:	80 95       	com	r24
 2bc:	84 23       	and	r24, r20
 2be:	8c 93       	st	X, r24
 2c0:	57 c0       	rjmp	.+174    	; 0x370 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 2c2:	8b 81       	ldd	r24, Y+3	; 0x03
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	a1 f4       	brne	.+40     	; 0x2f0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 2c8:	a4 e3       	ldi	r26, 0x34	; 52
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	e4 e3       	ldi	r30, 0x34	; 52
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	48 2f       	mov	r20, r24
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	28 2f       	mov	r18, r24
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 2e       	mov	r0, r18
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <GPIO_setupPinDirection+0x13c>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <GPIO_setupPinDirection+0x138>
 2ea:	84 2b       	or	r24, r20
 2ec:	8c 93       	st	X, r24
 2ee:	40 c0       	rjmp	.+128    	; 0x370 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 2f0:	a4 e3       	ldi	r26, 0x34	; 52
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	e4 e3       	ldi	r30, 0x34	; 52
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	48 2f       	mov	r20, r24
 2fc:	8a 81       	ldd	r24, Y+2	; 0x02
 2fe:	28 2f       	mov	r18, r24
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 2e       	mov	r0, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <GPIO_setupPinDirection+0x164>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <GPIO_setupPinDirection+0x160>
 312:	80 95       	com	r24
 314:	84 23       	and	r24, r20
 316:	8c 93       	st	X, r24
 318:	2b c0       	rjmp	.+86     	; 0x370 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 31a:	8b 81       	ldd	r24, Y+3	; 0x03
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	a1 f4       	brne	.+40     	; 0x348 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 320:	a1 e3       	ldi	r26, 0x31	; 49
 322:	b0 e0       	ldi	r27, 0x00	; 0
 324:	e1 e3       	ldi	r30, 0x31	; 49
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	48 2f       	mov	r20, r24
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	28 2f       	mov	r18, r24
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 2e       	mov	r0, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <GPIO_setupPinDirection+0x194>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <GPIO_setupPinDirection+0x190>
 342:	84 2b       	or	r24, r20
 344:	8c 93       	st	X, r24
 346:	14 c0       	rjmp	.+40     	; 0x370 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 348:	a1 e3       	ldi	r26, 0x31	; 49
 34a:	b0 e0       	ldi	r27, 0x00	; 0
 34c:	e1 e3       	ldi	r30, 0x31	; 49
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	48 2f       	mov	r20, r24
 354:	8a 81       	ldd	r24, Y+2	; 0x02
 356:	28 2f       	mov	r18, r24
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 2e       	mov	r0, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <GPIO_setupPinDirection+0x1bc>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	0a 94       	dec	r0
 368:	e2 f7       	brpl	.-8      	; 0x362 <GPIO_setupPinDirection+0x1b8>
 36a:	80 95       	com	r24
 36c:	84 23       	and	r24, r20
 36e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	08 95       	ret

00000380 <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
 380:	df 93       	push	r29
 382:	cf 93       	push	r28
 384:	00 d0       	rcall	.+0      	; 0x386 <GPIO_writePin+0x6>
 386:	00 d0       	rcall	.+0      	; 0x388 <GPIO_writePin+0x8>
 388:	0f 92       	push	r0
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	89 83       	std	Y+1, r24	; 0x01
 390:	6a 83       	std	Y+2, r22	; 0x02
 392:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	88 30       	cpi	r24, 0x08	; 8
 398:	08 f0       	brcs	.+2      	; 0x39c <GPIO_writePin+0x1c>
 39a:	d5 c0       	rjmp	.+426    	; 0x546 <GPIO_writePin+0x1c6>
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	84 30       	cpi	r24, 0x04	; 4
 3a0:	08 f0       	brcs	.+2      	; 0x3a4 <GPIO_writePin+0x24>
 3a2:	d1 c0       	rjmp	.+418    	; 0x546 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	3d 83       	std	Y+5, r19	; 0x05
 3ac:	2c 83       	std	Y+4, r18	; 0x04
 3ae:	8c 81       	ldd	r24, Y+4	; 0x04
 3b0:	9d 81       	ldd	r25, Y+5	; 0x05
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	91 05       	cpc	r25, r1
 3b6:	09 f4       	brne	.+2      	; 0x3ba <GPIO_writePin+0x3a>
 3b8:	43 c0       	rjmp	.+134    	; 0x440 <GPIO_writePin+0xc0>
 3ba:	2c 81       	ldd	r18, Y+4	; 0x04
 3bc:	3d 81       	ldd	r19, Y+5	; 0x05
 3be:	22 30       	cpi	r18, 0x02	; 2
 3c0:	31 05       	cpc	r19, r1
 3c2:	2c f4       	brge	.+10     	; 0x3ce <GPIO_writePin+0x4e>
 3c4:	8c 81       	ldd	r24, Y+4	; 0x04
 3c6:	9d 81       	ldd	r25, Y+5	; 0x05
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	71 f0       	breq	.+28     	; 0x3e8 <GPIO_writePin+0x68>
 3cc:	bc c0       	rjmp	.+376    	; 0x546 <GPIO_writePin+0x1c6>
 3ce:	2c 81       	ldd	r18, Y+4	; 0x04
 3d0:	3d 81       	ldd	r19, Y+5	; 0x05
 3d2:	22 30       	cpi	r18, 0x02	; 2
 3d4:	31 05       	cpc	r19, r1
 3d6:	09 f4       	brne	.+2      	; 0x3da <GPIO_writePin+0x5a>
 3d8:	5f c0       	rjmp	.+190    	; 0x498 <GPIO_writePin+0x118>
 3da:	8c 81       	ldd	r24, Y+4	; 0x04
 3dc:	9d 81       	ldd	r25, Y+5	; 0x05
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	91 05       	cpc	r25, r1
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <GPIO_writePin+0x66>
 3e4:	85 c0       	rjmp	.+266    	; 0x4f0 <GPIO_writePin+0x170>
 3e6:	af c0       	rjmp	.+350    	; 0x546 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 3e8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	a1 f4       	brne	.+40     	; 0x416 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 3ee:	ab e3       	ldi	r26, 0x3B	; 59
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	eb e3       	ldi	r30, 0x3B	; 59
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 2e       	mov	r0, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <GPIO_writePin+0x8c>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <GPIO_writePin+0x88>
 410:	84 2b       	or	r24, r20
 412:	8c 93       	st	X, r24
 414:	98 c0       	rjmp	.+304    	; 0x546 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 416:	ab e3       	ldi	r26, 0x3B	; 59
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	eb e3       	ldi	r30, 0x3B	; 59
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	48 2f       	mov	r20, r24
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	28 2f       	mov	r18, r24
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 2e       	mov	r0, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <GPIO_writePin+0xb4>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <GPIO_writePin+0xb0>
 438:	80 95       	com	r24
 43a:	84 23       	and	r24, r20
 43c:	8c 93       	st	X, r24
 43e:	83 c0       	rjmp	.+262    	; 0x546 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 440:	8b 81       	ldd	r24, Y+3	; 0x03
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	a1 f4       	brne	.+40     	; 0x46e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 446:	a8 e3       	ldi	r26, 0x38	; 56
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	e8 e3       	ldi	r30, 0x38	; 56
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	48 2f       	mov	r20, r24
 452:	8a 81       	ldd	r24, Y+2	; 0x02
 454:	28 2f       	mov	r18, r24
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 2e       	mov	r0, r18
 45e:	02 c0       	rjmp	.+4      	; 0x464 <GPIO_writePin+0xe4>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <GPIO_writePin+0xe0>
 468:	84 2b       	or	r24, r20
 46a:	8c 93       	st	X, r24
 46c:	6c c0       	rjmp	.+216    	; 0x546 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 46e:	a8 e3       	ldi	r26, 0x38	; 56
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	e8 e3       	ldi	r30, 0x38	; 56
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	48 2f       	mov	r20, r24
 47a:	8a 81       	ldd	r24, Y+2	; 0x02
 47c:	28 2f       	mov	r18, r24
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 2e       	mov	r0, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <GPIO_writePin+0x10c>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <GPIO_writePin+0x108>
 490:	80 95       	com	r24
 492:	84 23       	and	r24, r20
 494:	8c 93       	st	X, r24
 496:	57 c0       	rjmp	.+174    	; 0x546 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 498:	8b 81       	ldd	r24, Y+3	; 0x03
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	a1 f4       	brne	.+40     	; 0x4c6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 49e:	a5 e3       	ldi	r26, 0x35	; 53
 4a0:	b0 e0       	ldi	r27, 0x00	; 0
 4a2:	e5 e3       	ldi	r30, 0x35	; 53
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	48 2f       	mov	r20, r24
 4aa:	8a 81       	ldd	r24, Y+2	; 0x02
 4ac:	28 2f       	mov	r18, r24
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 2e       	mov	r0, r18
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <GPIO_writePin+0x13c>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	0a 94       	dec	r0
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <GPIO_writePin+0x138>
 4c0:	84 2b       	or	r24, r20
 4c2:	8c 93       	st	X, r24
 4c4:	40 c0       	rjmp	.+128    	; 0x546 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 4c6:	a5 e3       	ldi	r26, 0x35	; 53
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	e5 e3       	ldi	r30, 0x35	; 53
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	48 2f       	mov	r20, r24
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	28 2f       	mov	r18, r24
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 2e       	mov	r0, r18
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <GPIO_writePin+0x164>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	0a 94       	dec	r0
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <GPIO_writePin+0x160>
 4e8:	80 95       	com	r24
 4ea:	84 23       	and	r24, r20
 4ec:	8c 93       	st	X, r24
 4ee:	2b c0       	rjmp	.+86     	; 0x546 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	a1 f4       	brne	.+40     	; 0x51e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 4f6:	a2 e3       	ldi	r26, 0x32	; 50
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	e2 e3       	ldi	r30, 0x32	; 50
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	48 2f       	mov	r20, r24
 502:	8a 81       	ldd	r24, Y+2	; 0x02
 504:	28 2f       	mov	r18, r24
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 2e       	mov	r0, r18
 50e:	02 c0       	rjmp	.+4      	; 0x514 <GPIO_writePin+0x194>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	0a 94       	dec	r0
 516:	e2 f7       	brpl	.-8      	; 0x510 <GPIO_writePin+0x190>
 518:	84 2b       	or	r24, r20
 51a:	8c 93       	st	X, r24
 51c:	14 c0       	rjmp	.+40     	; 0x546 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 51e:	a2 e3       	ldi	r26, 0x32	; 50
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	e2 e3       	ldi	r30, 0x32	; 50
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	48 2f       	mov	r20, r24
 52a:	8a 81       	ldd	r24, Y+2	; 0x02
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 2e       	mov	r0, r18
 536:	02 c0       	rjmp	.+4      	; 0x53c <GPIO_writePin+0x1bc>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	0a 94       	dec	r0
 53e:	e2 f7       	brpl	.-8      	; 0x538 <GPIO_writePin+0x1b8>
 540:	80 95       	com	r24
 542:	84 23       	and	r24, r20
 544:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	cf 91       	pop	r28
 552:	df 91       	pop	r29
 554:	08 95       	ret

00000556 <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 556:	df 93       	push	r29
 558:	cf 93       	push	r28
 55a:	00 d0       	rcall	.+0      	; 0x55c <GPIO_readPin+0x6>
 55c:	00 d0       	rcall	.+0      	; 0x55e <GPIO_readPin+0x8>
 55e:	0f 92       	push	r0
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
 564:	8a 83       	std	Y+2, r24	; 0x02
 566:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 568:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 56a:	8b 81       	ldd	r24, Y+3	; 0x03
 56c:	88 30       	cpi	r24, 0x08	; 8
 56e:	08 f0       	brcs	.+2      	; 0x572 <GPIO_readPin+0x1c>
 570:	84 c0       	rjmp	.+264    	; 0x67a <GPIO_readPin+0x124>
 572:	8a 81       	ldd	r24, Y+2	; 0x02
 574:	84 30       	cpi	r24, 0x04	; 4
 576:	08 f0       	brcs	.+2      	; 0x57a <GPIO_readPin+0x24>
 578:	80 c0       	rjmp	.+256    	; 0x67a <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	28 2f       	mov	r18, r24
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	3d 83       	std	Y+5, r19	; 0x05
 582:	2c 83       	std	Y+4, r18	; 0x04
 584:	4c 81       	ldd	r20, Y+4	; 0x04
 586:	5d 81       	ldd	r21, Y+5	; 0x05
 588:	41 30       	cpi	r20, 0x01	; 1
 58a:	51 05       	cpc	r21, r1
 58c:	79 f1       	breq	.+94     	; 0x5ec <GPIO_readPin+0x96>
 58e:	8c 81       	ldd	r24, Y+4	; 0x04
 590:	9d 81       	ldd	r25, Y+5	; 0x05
 592:	82 30       	cpi	r24, 0x02	; 2
 594:	91 05       	cpc	r25, r1
 596:	34 f4       	brge	.+12     	; 0x5a4 <GPIO_readPin+0x4e>
 598:	2c 81       	ldd	r18, Y+4	; 0x04
 59a:	3d 81       	ldd	r19, Y+5	; 0x05
 59c:	21 15       	cp	r18, r1
 59e:	31 05       	cpc	r19, r1
 5a0:	69 f0       	breq	.+26     	; 0x5bc <GPIO_readPin+0x66>
 5a2:	6b c0       	rjmp	.+214    	; 0x67a <GPIO_readPin+0x124>
 5a4:	4c 81       	ldd	r20, Y+4	; 0x04
 5a6:	5d 81       	ldd	r21, Y+5	; 0x05
 5a8:	42 30       	cpi	r20, 0x02	; 2
 5aa:	51 05       	cpc	r21, r1
 5ac:	b9 f1       	breq	.+110    	; 0x61c <GPIO_readPin+0xc6>
 5ae:	8c 81       	ldd	r24, Y+4	; 0x04
 5b0:	9d 81       	ldd	r25, Y+5	; 0x05
 5b2:	83 30       	cpi	r24, 0x03	; 3
 5b4:	91 05       	cpc	r25, r1
 5b6:	09 f4       	brne	.+2      	; 0x5ba <GPIO_readPin+0x64>
 5b8:	49 c0       	rjmp	.+146    	; 0x64c <GPIO_readPin+0xf6>
 5ba:	5f c0       	rjmp	.+190    	; 0x67a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 5bc:	e9 e3       	ldi	r30, 0x39	; 57
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	28 2f       	mov	r18, r24
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	8b 81       	ldd	r24, Y+3	; 0x03
 5c8:	88 2f       	mov	r24, r24
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	a9 01       	movw	r20, r18
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <GPIO_readPin+0x7e>
 5d0:	55 95       	asr	r21
 5d2:	47 95       	ror	r20
 5d4:	8a 95       	dec	r24
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <GPIO_readPin+0x7a>
 5d8:	ca 01       	movw	r24, r20
 5da:	81 70       	andi	r24, 0x01	; 1
 5dc:	90 70       	andi	r25, 0x00	; 0
 5de:	88 23       	and	r24, r24
 5e0:	19 f0       	breq	.+6      	; 0x5e8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	89 83       	std	Y+1, r24	; 0x01
 5e6:	49 c0       	rjmp	.+146    	; 0x67a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 5e8:	19 82       	std	Y+1, r1	; 0x01
 5ea:	47 c0       	rjmp	.+142    	; 0x67a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 5ec:	e6 e3       	ldi	r30, 0x36	; 54
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	8b 81       	ldd	r24, Y+3	; 0x03
 5f8:	88 2f       	mov	r24, r24
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	a9 01       	movw	r20, r18
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <GPIO_readPin+0xae>
 600:	55 95       	asr	r21
 602:	47 95       	ror	r20
 604:	8a 95       	dec	r24
 606:	e2 f7       	brpl	.-8      	; 0x600 <GPIO_readPin+0xaa>
 608:	ca 01       	movw	r24, r20
 60a:	81 70       	andi	r24, 0x01	; 1
 60c:	90 70       	andi	r25, 0x00	; 0
 60e:	88 23       	and	r24, r24
 610:	19 f0       	breq	.+6      	; 0x618 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	89 83       	std	Y+1, r24	; 0x01
 616:	31 c0       	rjmp	.+98     	; 0x67a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 618:	19 82       	std	Y+1, r1	; 0x01
 61a:	2f c0       	rjmp	.+94     	; 0x67a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 61c:	e3 e3       	ldi	r30, 0x33	; 51
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	28 2f       	mov	r18, r24
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	8b 81       	ldd	r24, Y+3	; 0x03
 628:	88 2f       	mov	r24, r24
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	a9 01       	movw	r20, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <GPIO_readPin+0xde>
 630:	55 95       	asr	r21
 632:	47 95       	ror	r20
 634:	8a 95       	dec	r24
 636:	e2 f7       	brpl	.-8      	; 0x630 <GPIO_readPin+0xda>
 638:	ca 01       	movw	r24, r20
 63a:	81 70       	andi	r24, 0x01	; 1
 63c:	90 70       	andi	r25, 0x00	; 0
 63e:	88 23       	and	r24, r24
 640:	19 f0       	breq	.+6      	; 0x648 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	89 83       	std	Y+1, r24	; 0x01
 646:	19 c0       	rjmp	.+50     	; 0x67a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 648:	19 82       	std	Y+1, r1	; 0x01
 64a:	17 c0       	rjmp	.+46     	; 0x67a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 64c:	e0 e3       	ldi	r30, 0x30	; 48
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	28 2f       	mov	r18, r24
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	8b 81       	ldd	r24, Y+3	; 0x03
 658:	88 2f       	mov	r24, r24
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	a9 01       	movw	r20, r18
 65e:	02 c0       	rjmp	.+4      	; 0x664 <GPIO_readPin+0x10e>
 660:	55 95       	asr	r21
 662:	47 95       	ror	r20
 664:	8a 95       	dec	r24
 666:	e2 f7       	brpl	.-8      	; 0x660 <GPIO_readPin+0x10a>
 668:	ca 01       	movw	r24, r20
 66a:	81 70       	andi	r24, 0x01	; 1
 66c:	90 70       	andi	r25, 0x00	; 0
 66e:	88 23       	and	r24, r24
 670:	19 f0       	breq	.+6      	; 0x678 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	89 83       	std	Y+1, r24	; 0x01
 676:	01 c0       	rjmp	.+2      	; 0x67a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 678:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 67a:	89 81       	ldd	r24, Y+1	; 0x01
}
 67c:	0f 90       	pop	r0
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	0f 90       	pop	r0
 686:	cf 91       	pop	r28
 688:	df 91       	pop	r29
 68a:	08 95       	ret

0000068c <GPIO_togglePin>:
void GPIO_togglePin(uint8 port_num, uint8 pin_num){
 68c:	df 93       	push	r29
 68e:	cf 93       	push	r28
 690:	00 d0       	rcall	.+0      	; 0x692 <GPIO_togglePin+0x6>
 692:	00 d0       	rcall	.+0      	; 0x694 <GPIO_togglePin+0x8>
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62
 698:	89 83       	std	Y+1, r24	; 0x01
 69a:	6a 83       	std	Y+2, r22	; 0x02


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 69c:	8a 81       	ldd	r24, Y+2	; 0x02
 69e:	88 30       	cpi	r24, 0x08	; 8
 6a0:	08 f0       	brcs	.+2      	; 0x6a4 <GPIO_togglePin+0x18>
 6a2:	72 c0       	rjmp	.+228    	; 0x788 <GPIO_togglePin+0xfc>
 6a4:	89 81       	ldd	r24, Y+1	; 0x01
 6a6:	84 30       	cpi	r24, 0x04	; 4
 6a8:	08 f0       	brcs	.+2      	; 0x6ac <GPIO_togglePin+0x20>
 6aa:	6e c0       	rjmp	.+220    	; 0x788 <GPIO_togglePin+0xfc>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 6ac:	89 81       	ldd	r24, Y+1	; 0x01
 6ae:	28 2f       	mov	r18, r24
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	3c 83       	std	Y+4, r19	; 0x04
 6b4:	2b 83       	std	Y+3, r18	; 0x03
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ba:	81 30       	cpi	r24, 0x01	; 1
 6bc:	91 05       	cpc	r25, r1
 6be:	49 f1       	breq	.+82     	; 0x712 <GPIO_togglePin+0x86>
 6c0:	2b 81       	ldd	r18, Y+3	; 0x03
 6c2:	3c 81       	ldd	r19, Y+4	; 0x04
 6c4:	22 30       	cpi	r18, 0x02	; 2
 6c6:	31 05       	cpc	r19, r1
 6c8:	2c f4       	brge	.+10     	; 0x6d4 <GPIO_togglePin+0x48>
 6ca:	8b 81       	ldd	r24, Y+3	; 0x03
 6cc:	9c 81       	ldd	r25, Y+4	; 0x04
 6ce:	00 97       	sbiw	r24, 0x00	; 0
 6d0:	61 f0       	breq	.+24     	; 0x6ea <GPIO_togglePin+0x5e>
 6d2:	5a c0       	rjmp	.+180    	; 0x788 <GPIO_togglePin+0xfc>
 6d4:	2b 81       	ldd	r18, Y+3	; 0x03
 6d6:	3c 81       	ldd	r19, Y+4	; 0x04
 6d8:	22 30       	cpi	r18, 0x02	; 2
 6da:	31 05       	cpc	r19, r1
 6dc:	71 f1       	breq	.+92     	; 0x73a <GPIO_togglePin+0xae>
 6de:	8b 81       	ldd	r24, Y+3	; 0x03
 6e0:	9c 81       	ldd	r25, Y+4	; 0x04
 6e2:	83 30       	cpi	r24, 0x03	; 3
 6e4:	91 05       	cpc	r25, r1
 6e6:	e9 f1       	breq	.+122    	; 0x762 <GPIO_togglePin+0xd6>
 6e8:	4f c0       	rjmp	.+158    	; 0x788 <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA, pin_num);
 6ea:	ab e3       	ldi	r26, 0x3B	; 59
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	eb e3       	ldi	r30, 0x3B	; 59
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	48 2f       	mov	r20, r24
 6f6:	8a 81       	ldd	r24, Y+2	; 0x02
 6f8:	28 2f       	mov	r18, r24
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	02 2e       	mov	r0, r18
 702:	02 c0       	rjmp	.+4      	; 0x708 <GPIO_togglePin+0x7c>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	0a 94       	dec	r0
 70a:	e2 f7       	brpl	.-8      	; 0x704 <GPIO_togglePin+0x78>
 70c:	84 27       	eor	r24, r20
 70e:	8c 93       	st	X, r24
 710:	3b c0       	rjmp	.+118    	; 0x788 <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB, pin_num);
 712:	a8 e3       	ldi	r26, 0x38	; 56
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	e8 e3       	ldi	r30, 0x38	; 56
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	48 2f       	mov	r20, r24
 71e:	8a 81       	ldd	r24, Y+2	; 0x02
 720:	28 2f       	mov	r18, r24
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	02 2e       	mov	r0, r18
 72a:	02 c0       	rjmp	.+4      	; 0x730 <GPIO_togglePin+0xa4>
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	0a 94       	dec	r0
 732:	e2 f7       	brpl	.-8      	; 0x72c <GPIO_togglePin+0xa0>
 734:	84 27       	eor	r24, r20
 736:	8c 93       	st	X, r24
 738:	27 c0       	rjmp	.+78     	; 0x788 <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC, pin_num);
 73a:	a5 e3       	ldi	r26, 0x35	; 53
 73c:	b0 e0       	ldi	r27, 0x00	; 0
 73e:	e5 e3       	ldi	r30, 0x35	; 53
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	48 2f       	mov	r20, r24
 746:	8a 81       	ldd	r24, Y+2	; 0x02
 748:	28 2f       	mov	r18, r24
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	02 2e       	mov	r0, r18
 752:	02 c0       	rjmp	.+4      	; 0x758 <GPIO_togglePin+0xcc>
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	0a 94       	dec	r0
 75a:	e2 f7       	brpl	.-8      	; 0x754 <GPIO_togglePin+0xc8>
 75c:	84 27       	eor	r24, r20
 75e:	8c 93       	st	X, r24
 760:	13 c0       	rjmp	.+38     	; 0x788 <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD, pin_num);
 762:	a2 e3       	ldi	r26, 0x32	; 50
 764:	b0 e0       	ldi	r27, 0x00	; 0
 766:	e2 e3       	ldi	r30, 0x32	; 50
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	48 2f       	mov	r20, r24
 76e:	8a 81       	ldd	r24, Y+2	; 0x02
 770:	28 2f       	mov	r18, r24
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	02 2e       	mov	r0, r18
 77a:	02 c0       	rjmp	.+4      	; 0x780 <GPIO_togglePin+0xf4>
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	0a 94       	dec	r0
 782:	e2 f7       	brpl	.-8      	; 0x77c <GPIO_togglePin+0xf0>
 784:	84 27       	eor	r24, r20
 786:	8c 93       	st	X, r24
			break;
		}
	}
}
 788:	0f 90       	pop	r0
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	cf 91       	pop	r28
 792:	df 91       	pop	r29
 794:	08 95       	ret

00000796 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
 796:	df 93       	push	r29
 798:	cf 93       	push	r28
 79a:	00 d0       	rcall	.+0      	; 0x79c <GPIO_setupPortDirection+0x6>
 79c:	00 d0       	rcall	.+0      	; 0x79e <GPIO_setupPortDirection+0x8>
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
 7a2:	89 83       	std	Y+1, r24	; 0x01
 7a4:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 7a6:	89 81       	ldd	r24, Y+1	; 0x01
 7a8:	84 30       	cpi	r24, 0x04	; 4
 7aa:	90 f5       	brcc	.+100    	; 0x810 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 7ac:	89 81       	ldd	r24, Y+1	; 0x01
 7ae:	28 2f       	mov	r18, r24
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	3c 83       	std	Y+4, r19	; 0x04
 7b4:	2b 83       	std	Y+3, r18	; 0x03
 7b6:	8b 81       	ldd	r24, Y+3	; 0x03
 7b8:	9c 81       	ldd	r25, Y+4	; 0x04
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	91 05       	cpc	r25, r1
 7be:	d1 f0       	breq	.+52     	; 0x7f4 <GPIO_setupPortDirection+0x5e>
 7c0:	2b 81       	ldd	r18, Y+3	; 0x03
 7c2:	3c 81       	ldd	r19, Y+4	; 0x04
 7c4:	22 30       	cpi	r18, 0x02	; 2
 7c6:	31 05       	cpc	r19, r1
 7c8:	2c f4       	brge	.+10     	; 0x7d4 <GPIO_setupPortDirection+0x3e>
 7ca:	8b 81       	ldd	r24, Y+3	; 0x03
 7cc:	9c 81       	ldd	r25, Y+4	; 0x04
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	61 f0       	breq	.+24     	; 0x7ea <GPIO_setupPortDirection+0x54>
 7d2:	1e c0       	rjmp	.+60     	; 0x810 <GPIO_setupPortDirection+0x7a>
 7d4:	2b 81       	ldd	r18, Y+3	; 0x03
 7d6:	3c 81       	ldd	r19, Y+4	; 0x04
 7d8:	22 30       	cpi	r18, 0x02	; 2
 7da:	31 05       	cpc	r19, r1
 7dc:	81 f0       	breq	.+32     	; 0x7fe <GPIO_setupPortDirection+0x68>
 7de:	8b 81       	ldd	r24, Y+3	; 0x03
 7e0:	9c 81       	ldd	r25, Y+4	; 0x04
 7e2:	83 30       	cpi	r24, 0x03	; 3
 7e4:	91 05       	cpc	r25, r1
 7e6:	81 f0       	breq	.+32     	; 0x808 <GPIO_setupPortDirection+0x72>
 7e8:	13 c0       	rjmp	.+38     	; 0x810 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 7ea:	ea e3       	ldi	r30, 0x3A	; 58
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	8a 81       	ldd	r24, Y+2	; 0x02
 7f0:	80 83       	st	Z, r24
 7f2:	0e c0       	rjmp	.+28     	; 0x810 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 7f4:	e7 e3       	ldi	r30, 0x37	; 55
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	8a 81       	ldd	r24, Y+2	; 0x02
 7fa:	80 83       	st	Z, r24
 7fc:	09 c0       	rjmp	.+18     	; 0x810 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 7fe:	e4 e3       	ldi	r30, 0x34	; 52
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	8a 81       	ldd	r24, Y+2	; 0x02
 804:	80 83       	st	Z, r24
 806:	04 c0       	rjmp	.+8      	; 0x810 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 808:	e1 e3       	ldi	r30, 0x31	; 49
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	8a 81       	ldd	r24, Y+2	; 0x02
 80e:	80 83       	st	Z, r24
			break;
		}
	}
}
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	0f 90       	pop	r0
 816:	0f 90       	pop	r0
 818:	cf 91       	pop	r28
 81a:	df 91       	pop	r29
 81c:	08 95       	ret

0000081e <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value){
 81e:	df 93       	push	r29
 820:	cf 93       	push	r28
 822:	00 d0       	rcall	.+0      	; 0x824 <GPIO_writePort+0x6>
 824:	00 d0       	rcall	.+0      	; 0x826 <GPIO_writePort+0x8>
 826:	cd b7       	in	r28, 0x3d	; 61
 828:	de b7       	in	r29, 0x3e	; 62
 82a:	89 83       	std	Y+1, r24	; 0x01
 82c:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 82e:	89 81       	ldd	r24, Y+1	; 0x01
 830:	84 30       	cpi	r24, 0x04	; 4
 832:	90 f5       	brcc	.+100    	; 0x898 <__stack+0x39>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 834:	89 81       	ldd	r24, Y+1	; 0x01
 836:	28 2f       	mov	r18, r24
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	3c 83       	std	Y+4, r19	; 0x04
 83c:	2b 83       	std	Y+3, r18	; 0x03
 83e:	8b 81       	ldd	r24, Y+3	; 0x03
 840:	9c 81       	ldd	r25, Y+4	; 0x04
 842:	81 30       	cpi	r24, 0x01	; 1
 844:	91 05       	cpc	r25, r1
 846:	d1 f0       	breq	.+52     	; 0x87c <__stack+0x1d>
 848:	2b 81       	ldd	r18, Y+3	; 0x03
 84a:	3c 81       	ldd	r19, Y+4	; 0x04
 84c:	22 30       	cpi	r18, 0x02	; 2
 84e:	31 05       	cpc	r19, r1
 850:	2c f4       	brge	.+10     	; 0x85c <GPIO_writePort+0x3e>
 852:	8b 81       	ldd	r24, Y+3	; 0x03
 854:	9c 81       	ldd	r25, Y+4	; 0x04
 856:	00 97       	sbiw	r24, 0x00	; 0
 858:	61 f0       	breq	.+24     	; 0x872 <__stack+0x13>
 85a:	1e c0       	rjmp	.+60     	; 0x898 <__stack+0x39>
 85c:	2b 81       	ldd	r18, Y+3	; 0x03
 85e:	3c 81       	ldd	r19, Y+4	; 0x04
 860:	22 30       	cpi	r18, 0x02	; 2
 862:	31 05       	cpc	r19, r1
 864:	81 f0       	breq	.+32     	; 0x886 <__stack+0x27>
 866:	8b 81       	ldd	r24, Y+3	; 0x03
 868:	9c 81       	ldd	r25, Y+4	; 0x04
 86a:	83 30       	cpi	r24, 0x03	; 3
 86c:	91 05       	cpc	r25, r1
 86e:	81 f0       	breq	.+32     	; 0x890 <__stack+0x31>
 870:	13 c0       	rjmp	.+38     	; 0x898 <__stack+0x39>
		{
		case PORTA_ID:
			PORTA = value;
 872:	eb e3       	ldi	r30, 0x3B	; 59
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	8a 81       	ldd	r24, Y+2	; 0x02
 878:	80 83       	st	Z, r24
 87a:	0e c0       	rjmp	.+28     	; 0x898 <__stack+0x39>
			break;
		case PORTB_ID:
			PORTB = value;
 87c:	e8 e3       	ldi	r30, 0x38	; 56
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	8a 81       	ldd	r24, Y+2	; 0x02
 882:	80 83       	st	Z, r24
 884:	09 c0       	rjmp	.+18     	; 0x898 <__stack+0x39>
			break;
		case PORTC_ID:
			PORTC = value;
 886:	e5 e3       	ldi	r30, 0x35	; 53
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	8a 81       	ldd	r24, Y+2	; 0x02
 88c:	80 83       	st	Z, r24
 88e:	04 c0       	rjmp	.+8      	; 0x898 <__stack+0x39>
			break;
		case PORTD_ID:
			PORTD = value;
 890:	e2 e3       	ldi	r30, 0x32	; 50
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	8a 81       	ldd	r24, Y+2	; 0x02
 896:	80 83       	st	Z, r24
			break;
		}
	}
}
 898:	0f 90       	pop	r0
 89a:	0f 90       	pop	r0
 89c:	0f 90       	pop	r0
 89e:	0f 90       	pop	r0
 8a0:	cf 91       	pop	r28
 8a2:	df 91       	pop	r29
 8a4:	08 95       	ret

000008a6 <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num){
 8a6:	df 93       	push	r29
 8a8:	cf 93       	push	r28
 8aa:	00 d0       	rcall	.+0      	; 0x8ac <GPIO_readPort+0x6>
 8ac:	00 d0       	rcall	.+0      	; 0x8ae <GPIO_readPort+0x8>
 8ae:	cd b7       	in	r28, 0x3d	; 61
 8b0:	de b7       	in	r29, 0x3e	; 62
 8b2:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
 8b4:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
 8b6:	8a 81       	ldd	r24, Y+2	; 0x02
 8b8:	84 30       	cpi	r24, 0x04	; 4
 8ba:	90 f5       	brcc	.+100    	; 0x920 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 8bc:	8a 81       	ldd	r24, Y+2	; 0x02
 8be:	28 2f       	mov	r18, r24
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	3c 83       	std	Y+4, r19	; 0x04
 8c4:	2b 83       	std	Y+3, r18	; 0x03
 8c6:	8b 81       	ldd	r24, Y+3	; 0x03
 8c8:	9c 81       	ldd	r25, Y+4	; 0x04
 8ca:	81 30       	cpi	r24, 0x01	; 1
 8cc:	91 05       	cpc	r25, r1
 8ce:	d1 f0       	breq	.+52     	; 0x904 <GPIO_readPort+0x5e>
 8d0:	2b 81       	ldd	r18, Y+3	; 0x03
 8d2:	3c 81       	ldd	r19, Y+4	; 0x04
 8d4:	22 30       	cpi	r18, 0x02	; 2
 8d6:	31 05       	cpc	r19, r1
 8d8:	2c f4       	brge	.+10     	; 0x8e4 <GPIO_readPort+0x3e>
 8da:	8b 81       	ldd	r24, Y+3	; 0x03
 8dc:	9c 81       	ldd	r25, Y+4	; 0x04
 8de:	00 97       	sbiw	r24, 0x00	; 0
 8e0:	61 f0       	breq	.+24     	; 0x8fa <GPIO_readPort+0x54>
 8e2:	1e c0       	rjmp	.+60     	; 0x920 <GPIO_readPort+0x7a>
 8e4:	2b 81       	ldd	r18, Y+3	; 0x03
 8e6:	3c 81       	ldd	r19, Y+4	; 0x04
 8e8:	22 30       	cpi	r18, 0x02	; 2
 8ea:	31 05       	cpc	r19, r1
 8ec:	81 f0       	breq	.+32     	; 0x90e <GPIO_readPort+0x68>
 8ee:	8b 81       	ldd	r24, Y+3	; 0x03
 8f0:	9c 81       	ldd	r25, Y+4	; 0x04
 8f2:	83 30       	cpi	r24, 0x03	; 3
 8f4:	91 05       	cpc	r25, r1
 8f6:	81 f0       	breq	.+32     	; 0x918 <GPIO_readPort+0x72>
 8f8:	13 c0       	rjmp	.+38     	; 0x920 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 8fa:	e9 e3       	ldi	r30, 0x39	; 57
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	80 81       	ld	r24, Z
 900:	89 83       	std	Y+1, r24	; 0x01
 902:	0e c0       	rjmp	.+28     	; 0x920 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 904:	e6 e3       	ldi	r30, 0x36	; 54
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	80 81       	ld	r24, Z
 90a:	89 83       	std	Y+1, r24	; 0x01
 90c:	09 c0       	rjmp	.+18     	; 0x920 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 90e:	e3 e3       	ldi	r30, 0x33	; 51
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	80 81       	ld	r24, Z
 914:	89 83       	std	Y+1, r24	; 0x01
 916:	04 c0       	rjmp	.+8      	; 0x920 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 918:	e0 e3       	ldi	r30, 0x30	; 48
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	80 81       	ld	r24, Z
 91e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 920:	89 81       	ldd	r24, Y+1	; 0x01
}
 922:	0f 90       	pop	r0
 924:	0f 90       	pop	r0
 926:	0f 90       	pop	r0
 928:	0f 90       	pop	r0
 92a:	cf 91       	pop	r28
 92c:	df 91       	pop	r29
 92e:	08 95       	ret

00000930 <main>:
 *
 *  Created on: May 24, 2023
 *      Author: mohah
 */

void main(void){
 930:	df 93       	push	r29
 932:	cf 93       	push	r28
 934:	cd b7       	in	r28, 0x3d	; 61
 936:	de b7       	in	r29, 0x3e	; 62

}
 938:	cf 91       	pop	r28
 93a:	df 91       	pop	r29
 93c:	08 95       	ret

0000093e <_exit>:
 93e:	f8 94       	cli

00000940 <__stop_program>:
 940:	ff cf       	rjmp	.-2      	; 0x940 <__stop_program>
