
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000221c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000221c  000022b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800082  00800082  000022d2  2**0
                  ALLOC
  3 .stab         00002cd0  00000000  00000000  000022d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c13  00000000  00000000  00004fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000999b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a748  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ab35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b303  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <main>
      8a:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_13>:


/*******************************************************************************
 *                              ISR's Definitions                              *
 *******************************************************************************/
ISR(USART_RXC_vect){
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	g_uart_data = UDR;
     b70:	ec e2       	ldi	r30, 0x2C	; 44
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	80 93 8c 00 	sts	0x008C, r24
    (*receiveCallBackFunction)();
     b7a:	e0 91 8a 00 	lds	r30, 0x008A
     b7e:	f0 91 8b 00 	lds	r31, 0x008B
     b82:	09 95       	icall
}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	bf 91       	pop	r27
     b8e:	af 91       	pop	r26
     b90:	9f 91       	pop	r25
     b92:	8f 91       	pop	r24
     b94:	7f 91       	pop	r23
     b96:	6f 91       	pop	r22
     b98:	5f 91       	pop	r21
     b9a:	4f 91       	pop	r20
     b9c:	3f 91       	pop	r19
     b9e:	2f 91       	pop	r18
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <__vector_15>:

ISR(USART_TXC_vect){
     baa:	1f 92       	push	r1
     bac:	0f 92       	push	r0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	0f 92       	push	r0
     bb2:	11 24       	eor	r1, r1
     bb4:	2f 93       	push	r18
     bb6:	3f 93       	push	r19
     bb8:	4f 93       	push	r20
     bba:	5f 93       	push	r21
     bbc:	6f 93       	push	r22
     bbe:	7f 93       	push	r23
     bc0:	8f 93       	push	r24
     bc2:	9f 93       	push	r25
     bc4:	af 93       	push	r26
     bc6:	bf 93       	push	r27
     bc8:	ef 93       	push	r30
     bca:	ff 93       	push	r31
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
	(*transmitionCallBackFunction)();
     bd4:	e0 91 88 00 	lds	r30, 0x0088
     bd8:	f0 91 89 00 	lds	r31, 0x0089
     bdc:	09 95       	icall
}
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	ff 91       	pop	r31
     be4:	ef 91       	pop	r30
     be6:	bf 91       	pop	r27
     be8:	af 91       	pop	r26
     bea:	9f 91       	pop	r25
     bec:	8f 91       	pop	r24
     bee:	7f 91       	pop	r23
     bf0:	6f 91       	pop	r22
     bf2:	5f 91       	pop	r21
     bf4:	4f 91       	pop	r20
     bf6:	3f 91       	pop	r19
     bf8:	2f 91       	pop	r18
     bfa:	0f 90       	pop	r0
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	0f 90       	pop	r0
     c00:	1f 90       	pop	r1
     c02:	18 95       	reti

00000c04 <UART_init>:

 /*******************************************************************************
 *                            Functions Definitions                            *
 *******************************************************************************/
void UART_init(ST_uart_ConfigType *configType){
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	00 d0       	rcall	.+0      	; 0xc0a <UART_init+0x6>
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <UART_init+0x8>
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	9c 83       	std	Y+4, r25	; 0x04
     c12:	8b 83       	std	Y+3, r24	; 0x03

    uint16 ubrr_value = 0;
     c14:	1a 82       	std	Y+2, r1	; 0x02
     c16:	19 82       	std	Y+1, r1	; 0x01

	UCSRA |= ( configType->u2x << U2X); 					/* Enable Double the USART Transmission Speed */
     c18:	ab e2       	ldi	r26, 0x2B	; 43
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	eb e2       	ldi	r30, 0x2B	; 43
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	28 2f       	mov	r18, r24
     c24:	eb 81       	ldd	r30, Y+3	; 0x03
     c26:	fc 81       	ldd	r31, Y+4	; 0x04
     c28:	85 81       	ldd	r24, Z+5	; 0x05
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	82 2b       	or	r24, r18
     c34:	8c 93       	st	X, r24

	UCSRB |= ( 1 << TXEN );									/* Transmitter Enable*/
     c36:	aa e2       	ldi	r26, 0x2A	; 42
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	ea e2       	ldi	r30, 0x2A	; 42
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	88 60       	ori	r24, 0x08	; 8
     c42:	8c 93       	st	X, r24
	UCSRB |= ( 1 << RXEN );									/* Receiver Enable */
     c44:	aa e2       	ldi	r26, 0x2A	; 42
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	ea e2       	ldi	r30, 0x2A	; 42
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	80 61       	ori	r24, 0x10	; 16
     c50:	8c 93       	st	X, r24
	UCSRB |= ( configType-> receiveInterrupt << RXCIE);		/* RX Complete Interrupt Enable */
     c52:	aa e2       	ldi	r26, 0x2A	; 42
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ea e2       	ldi	r30, 0x2A	; 42
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	28 2f       	mov	r18, r24
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	87 81       	ldd	r24, Z+7	; 0x07
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	96 95       	lsr	r25
     c6a:	98 2f       	mov	r25, r24
     c6c:	88 27       	eor	r24, r24
     c6e:	97 95       	ror	r25
     c70:	87 95       	ror	r24
     c72:	82 2b       	or	r24, r18
     c74:	8c 93       	st	X, r24
	UCSRB |= ( configType-> transmitInterrupt << TXCIE);	/* TX Complete Interrupt Enable */
     c76:	aa e2       	ldi	r26, 0x2A	; 42
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	ea e2       	ldi	r30, 0x2A	; 42
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	28 2f       	mov	r18, r24
     c82:	eb 81       	ldd	r30, Y+3	; 0x03
     c84:	fc 81       	ldd	r31, Y+4	; 0x04
     c86:	86 81       	ldd	r24, Z+6	; 0x06
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	00 24       	eor	r0, r0
     c8e:	96 95       	lsr	r25
     c90:	87 95       	ror	r24
     c92:	07 94       	ror	r0
     c94:	96 95       	lsr	r25
     c96:	87 95       	ror	r24
     c98:	07 94       	ror	r0
     c9a:	98 2f       	mov	r25, r24
     c9c:	80 2d       	mov	r24, r0
     c9e:	82 2b       	or	r24, r18
     ca0:	8c 93       	st	X, r24

	UCSRC |= ( configType->bit_data << UCSZ0 ); 			/* configure number of bits to be send, UCSZ1:0: 11 -> 8-bit */ /* will not work with 9-bits because UCSZ2 not in UCSRC */
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e0 e4       	ldi	r30, 0x40	; 64
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	28 2f       	mov	r18, r24
     cae:	eb 81       	ldd	r30, Y+3	; 0x03
     cb0:	fc 81       	ldd	r31, Y+4	; 0x04
     cb2:	80 81       	ld	r24, Z
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	82 2b       	or	r24, r18
     cbe:	8c 93       	st	X, r24
	UCSRC |= ( configType->parity << UPM0 );				/* configure parity bits */
     cc0:	a0 e4       	ldi	r26, 0x40	; 64
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e0 e4       	ldi	r30, 0x40	; 64
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	28 2f       	mov	r18, r24
     ccc:	eb 81       	ldd	r30, Y+3	; 0x03
     cce:	fc 81       	ldd	r31, Y+4	; 0x04
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	88 2f       	mov	r24, r24
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	82 95       	swap	r24
     cd8:	92 95       	swap	r25
     cda:	90 7f       	andi	r25, 0xF0	; 240
     cdc:	98 27       	eor	r25, r24
     cde:	80 7f       	andi	r24, 0xF0	; 240
     ce0:	98 27       	eor	r25, r24
     ce2:	82 2b       	or	r24, r18
     ce4:	8c 93       	st	X, r24
	UCSRC |= ( configType->stop_bit << USBS );				/* configure stop bits */
     ce6:	a0 e4       	ldi	r26, 0x40	; 64
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e0 e4       	ldi	r30, 0x40	; 64
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	28 2f       	mov	r18, r24
     cf2:	eb 81       	ldd	r30, Y+3	; 0x03
     cf4:	fc 81       	ldd	r31, Y+4	; 0x04
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	88 2f       	mov	r24, r24
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	82 2b       	or	r24, r18
     d0a:	8c 93       	st	X, r24



	if(configType->u2x == UART_U2X_ENABLE)
     d0c:	eb 81       	ldd	r30, Y+3	; 0x03
     d0e:	fc 81       	ldd	r31, Y+4	; 0x04
     d10:	85 81       	ldd	r24, Z+5	; 0x05
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	19 f5       	brne	.+70     	; 0xd5c <UART_init+0x158>
		ubrr_value = (uint16) CALCULATE_BAUD_RATE(configType->baud_rate);
     d16:	eb 81       	ldd	r30, Y+3	; 0x03
     d18:	fc 81       	ldd	r31, Y+4	; 0x04
     d1a:	83 81       	ldd	r24, Z+3	; 0x03
     d1c:	94 81       	ldd	r25, Z+4	; 0x04
     d1e:	cc 01       	movw	r24, r24
     d20:	a0 e0       	ldi	r26, 0x00	; 0
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	aa 1f       	adc	r26, r26
     d2a:	bb 1f       	adc	r27, r27
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	aa 1f       	adc	r26, r26
     d32:	bb 1f       	adc	r27, r27
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	aa 1f       	adc	r26, r26
     d3a:	bb 1f       	adc	r27, r27
     d3c:	9c 01       	movw	r18, r24
     d3e:	ad 01       	movw	r20, r26
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	92 e1       	ldi	r25, 0x12	; 18
     d44:	aa e7       	ldi	r26, 0x7A	; 122
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	bc 01       	movw	r22, r24
     d4a:	cd 01       	movw	r24, r26
     d4c:	0e 94 96 10 	call	0x212c	; 0x212c <__udivmodsi4>
     d50:	da 01       	movw	r26, r20
     d52:	c9 01       	movw	r24, r18
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	9a 83       	std	Y+2, r25	; 0x02
     d58:	89 83       	std	Y+1, r24	; 0x01
     d5a:	26 c0       	rjmp	.+76     	; 0xda8 <UART_init+0x1a4>
	else
		ubrr_value = (uint16) CALCULATE_BAUD_RATE(configType->baud_rate * 2);
     d5c:	eb 81       	ldd	r30, Y+3	; 0x03
     d5e:	fc 81       	ldd	r31, Y+4	; 0x04
     d60:	83 81       	ldd	r24, Z+3	; 0x03
     d62:	94 81       	ldd	r25, Z+4	; 0x04
     d64:	cc 01       	movw	r24, r24
     d66:	a0 e0       	ldi	r26, 0x00	; 0
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	aa 1f       	adc	r26, r26
     d70:	bb 1f       	adc	r27, r27
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	aa 1f       	adc	r26, r26
     d78:	bb 1f       	adc	r27, r27
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	aa 1f       	adc	r26, r26
     d80:	bb 1f       	adc	r27, r27
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	aa 1f       	adc	r26, r26
     d88:	bb 1f       	adc	r27, r27
     d8a:	9c 01       	movw	r18, r24
     d8c:	ad 01       	movw	r20, r26
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	92 e1       	ldi	r25, 0x12	; 18
     d92:	aa e7       	ldi	r26, 0x7A	; 122
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	bc 01       	movw	r22, r24
     d98:	cd 01       	movw	r24, r26
     d9a:	0e 94 96 10 	call	0x212c	; 0x212c <__udivmodsi4>
     d9e:	da 01       	movw	r26, r20
     da0:	c9 01       	movw	r24, r18
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01

//	UBRRH = (ubrr_value >> 8) & (0x0F);
	UBRRH = (uint8)(ubrr_value >> 8);
     da8:	e0 e4       	ldi	r30, 0x40	; 64
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	89 2f       	mov	r24, r25
     db2:	99 27       	eor	r25, r25
     db4:	80 83       	st	Z, r24
	UBRRL = (uint8) ubrr_value;
     db6:	e9 e2       	ldi	r30, 0x29	; 41
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	80 83       	st	Z, r24

}
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <UART_sendCharacter>:

void UART_sendCharacter(uint8 data){
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	0f 92       	push	r0
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
     dd8:	eb e2       	ldi	r30, 0x2B	; 43
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	80 72       	andi	r24, 0x20	; 32
     de4:	90 70       	andi	r25, 0x00	; 0
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	b9 f3       	breq	.-18     	; 0xdd8 <UART_sendCharacter+0xc>
	UDR = data;
     dea:	ec e2       	ldi	r30, 0x2C	; 44
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	80 83       	st	Z, r24
}
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <UART_sendArray>:

void UART_sendArray(uint8 *str, uint8 str_size){
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <UART_sendArray+0x6>
     e00:	00 d0       	rcall	.+0      	; 0xe02 <UART_sendArray+0x8>
     e02:	0f 92       	push	r0
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	9c 83       	std	Y+4, r25	; 0x04
     e0a:	8b 83       	std	Y+3, r24	; 0x03
     e0c:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < str_size; i++){
     e0e:	1a 82       	std	Y+2, r1	; 0x02
     e10:	19 82       	std	Y+1, r1	; 0x01
     e12:	19 c0       	rjmp	.+50     	; 0xe46 <UART_sendArray+0x4c>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
     e14:	eb e2       	ldi	r30, 0x2B	; 43
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	88 2f       	mov	r24, r24
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	80 72       	andi	r24, 0x20	; 32
     e20:	90 70       	andi	r25, 0x00	; 0
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	b9 f3       	breq	.-18     	; 0xe14 <UART_sendArray+0x1a>
		UDR = str[i];
     e26:	ac e2       	ldi	r26, 0x2C	; 44
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	29 81       	ldd	r18, Y+1	; 0x01
     e2c:	3a 81       	ldd	r19, Y+2	; 0x02
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	fc 01       	movw	r30, r24
     e34:	e2 0f       	add	r30, r18
     e36:	f3 1f       	adc	r31, r19
     e38:	80 81       	ld	r24, Z
     e3a:	8c 93       	st	X, r24
	UDR = data;
}

void UART_sendArray(uint8 *str, uint8 str_size){

	for(int i = 0; i < str_size; i++){
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	9a 81       	ldd	r25, Y+2	; 0x02
     e50:	82 17       	cp	r24, r18
     e52:	93 07       	cpc	r25, r19
     e54:	fc f2       	brlt	.-66     	; 0xe14 <UART_sendArray+0x1a>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
		UDR = str[i];
	}

}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <UART_rcvCharacter>:

uint8 UART_rcvCharacter(){
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	while( BIT_IS_CLEAR(UCSRA, RXC) ){}
     e6e:	eb e2       	ldi	r30, 0x2B	; 43
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	88 23       	and	r24, r24
     e76:	dc f7       	brge	.-10     	; 0xe6e <UART_rcvCharacter+0x8>
	return UDR;
     e78:	ec e2       	ldi	r30, 0x2C	; 44
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
}
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <UART_int_rx_callBack>:

void UART_int_rx_callBack(void (*callBackFunction)(void)){
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	00 d0       	rcall	.+0      	; 0xe8a <UART_int_rx_callBack+0x6>
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	9a 83       	std	Y+2, r25	; 0x02
     e90:	89 83       	std	Y+1, r24	; 0x01
	receiveCallBackFunction = callBackFunction;
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	90 93 8b 00 	sts	0x008B, r25
     e9a:	80 93 8a 00 	sts	0x008A, r24
}
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <UART_int_tx_callBack>:

void UART_int_tx_callBack(void (*callBackFunction)(void)){
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <UART_int_tx_callBack+0x6>
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
    transmitionCallBackFunction = callBackFunction;
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	90 93 89 00 	sts	0x0089, r25
     ebe:	80 93 88 00 	sts	0x0088, r24
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <TIMER0_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void TIMER0_init(){
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0, FOC0); /* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
     ed4:	a3 e5       	ldi	r26, 0x53	; 83
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e3 e5       	ldi	r30, 0x53	; 83
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8f 77       	andi	r24, 0x7F	; 127
     ee0:	8c 93       	st	X, r24
	 *  0   |   0  * Normal
	 *  0   |   1  * PWM, phase correct
	 *  1   |   0  * CTC
	 *  1   |   1  * Fast PWM
	 ***************/
}
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <TIMER0_start>:
void TIMER0_start(){}
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <TIMER0_stop>:
void TIMER0_stop(){}
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <TIMER0_clear>:
void TIMER0_clear(){}
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <PWM_T0_init>:



void PWM_T0_init(){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62

	DDRB |= ( 1 << PB3 );
     f1a:	a7 e3       	ldi	r26, 0x37	; 55
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e7 e3       	ldi	r30, 0x37	; 55
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	88 60       	ori	r24, 0x08	; 8
     f26:	8c 93       	st	X, r24
	TCNT0 = 0;
     f28:	e2 e5       	ldi	r30, 0x52	; 82
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	10 82       	st	Z, r1
	TCCR0 |= ( 1 << WGM00 ) | ( 1 << WGM01 ) | ( 1 << CS01 ); /* F_PWM=(F_CPU)/(256*N) = (8*10^6)/(256*8) = 4kHz*/
     f2e:	a3 e5       	ldi	r26, 0x53	; 83
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e3 e5       	ldi	r30, 0x53	; 83
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	8a 64       	ori	r24, 0x4A	; 74
     f3a:	8c 93       	st	X, r24
	TCCR0 |= ( 1 << COM01 );
     f3c:	a3 e5       	ldi	r26, 0x53	; 83
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e3 e5       	ldi	r30, 0x53	; 83
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	8c 93       	st	X, r24
	OCR0 = 255;
     f4a:	ec e5       	ldi	r30, 0x5C	; 92
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	80 83       	st	Z, r24

}
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <PWM_T0_setDutyCycle>:

void PWM_T0_setDutyCycle(uint8 dutyCycle){
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <PWM_T0_setDutyCycle+0x6>
     f5e:	0f 92       	push	r0
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	8b 83       	std	Y+3, r24	; 0x03

	uint16 temp_dutyCycle = (dutyCycle * 255) / 100;
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	48 2f       	mov	r20, r24
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	ca 01       	movw	r24, r20
     f6e:	9c 01       	movw	r18, r24
     f70:	22 0f       	add	r18, r18
     f72:	33 1f       	adc	r19, r19
     f74:	c9 01       	movw	r24, r18
     f76:	96 95       	lsr	r25
     f78:	98 2f       	mov	r25, r24
     f7a:	88 27       	eor	r24, r24
     f7c:	97 95       	ror	r25
     f7e:	87 95       	ror	r24
     f80:	82 1b       	sub	r24, r18
     f82:	93 0b       	sbc	r25, r19
     f84:	84 0f       	add	r24, r20
     f86:	95 1f       	adc	r25, r21
     f88:	24 e6       	ldi	r18, 0x64	; 100
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	b9 01       	movw	r22, r18
     f8e:	0e 94 83 10 	call	0x2106	; 0x2106 <__divmodhi4>
     f92:	cb 01       	movw	r24, r22
     f94:	9a 83       	std	Y+2, r25	; 0x02
     f96:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = temp_dutyCycle;
     f98:	ec e5       	ldi	r30, 0x5C	; 92
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	80 83       	st	Z, r24
}
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <__vector_9>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(TIMER1_OVF_vect){
     fac:	1f 92       	push	r1
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62

	(*callBackFunction)();
     fd6:	e0 91 8d 00 	lds	r30, 0x008D
     fda:	f0 91 8e 00 	lds	r31, 0x008E
     fde:	09 95       	icall
	TCNT1 = tcnt1_value;
     fe0:	ec e4       	ldi	r30, 0x4C	; 76
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 91 82 00 	lds	r24, 0x0082
     fe8:	90 91 83 00 	lds	r25, 0x0083
     fec:	91 83       	std	Z+1, r25	; 0x01
     fee:	80 83       	st	Z, r24

}
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	ff 91       	pop	r31
     ff6:	ef 91       	pop	r30
     ff8:	bf 91       	pop	r27
     ffa:	af 91       	pop	r26
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	7f 91       	pop	r23
    1002:	6f 91       	pop	r22
    1004:	5f 91       	pop	r21
    1006:	4f 91       	pop	r20
    1008:	3f 91       	pop	r19
    100a:	2f 91       	pop	r18
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti

00001016 <Timer1_init>:


void Timer1_init(const ST_timer1_configType * Config_Ptr){
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	00 d0       	rcall	.+0      	; 0x101c <Timer1_init+0x6>
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	89 83       	std	Y+1, r24	; 0x01

	tcnt1_value = Config_Ptr->initial_value;
    1024:	e9 81       	ldd	r30, Y+1	; 0x01
    1026:	fa 81       	ldd	r31, Y+2	; 0x02
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	90 93 83 00 	sts	0x0083, r25
    1030:	80 93 82 00 	sts	0x0082, r24


	TCNT1 = tcnt1_value;
    1034:	ec e4       	ldi	r30, 0x4C	; 76
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 91 82 00 	lds	r24, 0x0082
    103c:	90 91 83 00 	lds	r25, 0x0083
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	80 83       	st	Z, r24
	TCCR1B |= ( 0x07 & Config_Ptr->prescaler );
    1044:	ae e4       	ldi	r26, 0x4E	; 78
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	ee e4       	ldi	r30, 0x4E	; 78
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	98 2f       	mov	r25, r24
    1050:	e9 81       	ldd	r30, Y+1	; 0x01
    1052:	fa 81       	ldd	r31, Y+2	; 0x02
    1054:	84 81       	ldd	r24, Z+4	; 0x04
    1056:	87 70       	andi	r24, 0x07	; 7
    1058:	89 2b       	or	r24, r25
    105a:	8c 93       	st	X, r24
	SET_BIT(TIMSK, TOIE1);	/* Overflow Interrupt Enable */
    105c:	a9 e5       	ldi	r26, 0x59	; 89
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e9 e5       	ldi	r30, 0x59	; 89
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	84 60       	ori	r24, 0x04	; 4
    1068:	8c 93       	st	X, r24


}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <Timer1_deInit>:
void Timer1_deInit(void){
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    107c:	ec e4       	ldi	r30, 0x4C	; 76
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	11 82       	std	Z+1, r1	; 0x01
    1082:	10 82       	st	Z, r1
	TCCR1A = 0;
    1084:	ef e4       	ldi	r30, 0x4F	; 79
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	10 82       	st	Z, r1
	TCCR1B = 0;
    108a:	ee e4       	ldi	r30, 0x4E	; 78
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, TOIE1);
    1090:	a9 e5       	ldi	r26, 0x59	; 89
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e9 e5       	ldi	r30, 0x59	; 89
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	8b 7f       	andi	r24, 0xFB	; 251
    109c:	8c 93       	st	X, r24
}
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <Timer1_setCallBack+0x6>
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01

	callBackFunction = a_ptr;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	90 93 8e 00 	sts	0x008E, r25
    10ba:	80 93 8d 00 	sts	0x008D, r24
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <TWI_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void TWI_init(){
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62

	TWAR = 0b00000010; // my address = 0x01 address from BIT 7..1
    10d0:	e2 e2       	ldi	r30, 0x22	; 34
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	80 83       	st	Z, r24

	TWSR = 0x00; /* set Prescaler and clear old status*/
    10d8:	e1 e2       	ldi	r30, 0x21	; 33
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	10 82       	st	Z, r1

	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = BITRATE(TWSR); /* set baud rate */
    10de:	e0 e2       	ldi	r30, 0x20	; 32
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	80 83       	st	Z, r24
   	   General Call Recognition: Off */


//	TWCR = ( 1 << TWEN);

}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <TWI_start>:
void TWI_start(){
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1 << TWINT) | ( 1 << TWSTA) | ( 1 << TWEN);
    10f4:	e6 e5       	ldi	r30, 0x56	; 86
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	84 ea       	ldi	r24, 0xA4	; 164
    10fa:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR(TWCR, TWINT) ); //wait until TWI finish its process
    10fc:	e6 e5       	ldi	r30, 0x56	; 86
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	88 23       	and	r24, r24
    1104:	dc f7       	brge	.-10     	; 0x10fc <TWI_start+0x10>
}
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <TWI_stop>:

void TWI_stop(){
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | ( 1 << TWSTO ) | ( 1 << TWEN);
    1114:	e6 e5       	ldi	r30, 0x56	; 86
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	84 e9       	ldi	r24, 0x94	; 148
    111a:	80 83       	st	Z, r24
//	while( BIT_IS_CLEAR(TWCR, TWINT) ); //wait until TWI finish its process

}
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <TWI_writeByte>:
void TWI_writeByte(uint8 data)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	0f 92       	push	r0
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data;
    112e:	e3 e2       	ldi	r30, 0x23	; 35
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	80 83       	st	Z, r24
    TWCR = (1 << TWINT) | (1 << TWEN);
    1136:	e6 e5       	ldi	r30, 0x56	; 86
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	84 e8       	ldi	r24, 0x84	; 132
    113c:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));
    113e:	e6 e5       	ldi	r30, 0x56	; 86
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	88 23       	and	r24, r24
    1146:	dc f7       	brge	.-10     	; 0x113e <TWI_writeByte+0x1c>
}
    1148:	0f 90       	pop	r0
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <TWI_readByteWithACK>:
uint8 TWI_readByteWithACK(){
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
   TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1158:	e6 e5       	ldi	r30, 0x56	; 86
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	84 ec       	ldi	r24, 0xC4	; 196
    115e:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1160:	e6 e5       	ldi	r30, 0x56	; 86
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	88 23       	and	r24, r24
    1168:	dc f7       	brge	.-10     	; 0x1160 <TWI_readByteWithACK+0x10>
	return TWDR;
    116a:	e3 e2       	ldi	r30, 0x23	; 35
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
}
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <TWI_readByteWithNACK>:
uint8 TWI_readByteWithNACK(){
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN);
    117e:	e6 e5       	ldi	r30, 0x56	; 86
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	84 e8       	ldi	r24, 0x84	; 132
    1184:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1186:	e6 e5       	ldi	r30, 0x56	; 86
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	88 23       	and	r24, r24
    118e:	dc f7       	brge	.-10     	; 0x1186 <TWI_readByteWithNACK+0x10>
	return TWDR;
    1190:	e3 e2       	ldi	r30, 0x23	; 35
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
}
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <TWI_getStatus>:

uint8 TWI_getStatus(){
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
	return ( TWSR & 0xF8 );
    11a4:	e1 e2       	ldi	r30, 0x21	; 33
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	88 7f       	andi	r24, 0xF8	; 248
}
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <GPIO_setupPinDirection>:
 *******************************************************************************/



void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <GPIO_setupPinDirection+0x6>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <GPIO_setupPinDirection+0x8>
    11ba:	0f 92       	push	r0
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	6a 83       	std	Y+2, r22	; 0x02
    11c4:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	88 30       	cpi	r24, 0x08	; 8
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <GPIO_setupPinDirection+0x1c>
    11cc:	d5 c0       	rjmp	.+426    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	84 30       	cpi	r24, 0x04	; 4
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <GPIO_setupPinDirection+0x24>
    11d4:	d1 c0       	rjmp	.+418    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	3d 83       	std	Y+5, r19	; 0x05
    11de:	2c 83       	std	Y+4, r18	; 0x04
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	91 05       	cpc	r25, r1
    11e8:	09 f4       	brne	.+2      	; 0x11ec <GPIO_setupPinDirection+0x3a>
    11ea:	43 c0       	rjmp	.+134    	; 0x1272 <GPIO_setupPinDirection+0xc0>
    11ec:	2c 81       	ldd	r18, Y+4	; 0x04
    11ee:	3d 81       	ldd	r19, Y+5	; 0x05
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	2c f4       	brge	.+10     	; 0x1200 <GPIO_setupPinDirection+0x4e>
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	9d 81       	ldd	r25, Y+5	; 0x05
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	71 f0       	breq	.+28     	; 0x121a <GPIO_setupPinDirection+0x68>
    11fe:	bc c0       	rjmp	.+376    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
    1200:	2c 81       	ldd	r18, Y+4	; 0x04
    1202:	3d 81       	ldd	r19, Y+5	; 0x05
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <GPIO_setupPinDirection+0x5a>
    120a:	5f c0       	rjmp	.+190    	; 0x12ca <GPIO_setupPinDirection+0x118>
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	9d 81       	ldd	r25, Y+5	; 0x05
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <GPIO_setupPinDirection+0x66>
    1216:	85 c0       	rjmp	.+266    	; 0x1322 <GPIO_setupPinDirection+0x170>
    1218:	af c0       	rjmp	.+350    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	a1 f4       	brne	.+40     	; 0x1248 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1220:	aa e3       	ldi	r26, 0x3A	; 58
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	ea e3       	ldi	r30, 0x3A	; 58
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_setupPinDirection+0x8c>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_setupPinDirection+0x88>
    1242:	84 2b       	or	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	98 c0       	rjmp	.+304    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1248:	aa e3       	ldi	r26, 0x3A	; 58
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ea e3       	ldi	r30, 0x3A	; 58
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <GPIO_setupPinDirection+0xb4>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <GPIO_setupPinDirection+0xb0>
    126a:	80 95       	com	r24
    126c:	84 23       	and	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	83 c0       	rjmp	.+262    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	a1 f4       	brne	.+40     	; 0x12a0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1278:	a7 e3       	ldi	r26, 0x37	; 55
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e7 e3       	ldi	r30, 0x37	; 55
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <GPIO_setupPinDirection+0xe4>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <GPIO_setupPinDirection+0xe0>
    129a:	84 2b       	or	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	6c c0       	rjmp	.+216    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12a0:	a7 e3       	ldi	r26, 0x37	; 55
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e7 e3       	ldi	r30, 0x37	; 55
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_setupPinDirection+0x10c>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_setupPinDirection+0x108>
    12c2:	80 95       	com	r24
    12c4:	84 23       	and	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	57 c0       	rjmp	.+174    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	a1 f4       	brne	.+40     	; 0x12f8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    12d0:	a4 e3       	ldi	r26, 0x34	; 52
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e4 e3       	ldi	r30, 0x34	; 52
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <GPIO_setupPinDirection+0x13c>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <GPIO_setupPinDirection+0x138>
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	40 c0       	rjmp	.+128    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    12f8:	a4 e3       	ldi	r26, 0x34	; 52
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e4 e3       	ldi	r30, 0x34	; 52
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <GPIO_setupPinDirection+0x164>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <GPIO_setupPinDirection+0x160>
    131a:	80 95       	com	r24
    131c:	84 23       	and	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	2b c0       	rjmp	.+86     	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	a1 f4       	brne	.+40     	; 0x1350 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1328:	a1 e3       	ldi	r26, 0x31	; 49
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e1 e3       	ldi	r30, 0x31	; 49
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <GPIO_setupPinDirection+0x194>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <GPIO_setupPinDirection+0x190>
    134a:	84 2b       	or	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1350:	a1 e3       	ldi	r26, 0x31	; 49
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e1 e3       	ldi	r30, 0x31	; 49
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <GPIO_setupPinDirection+0x1bc>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <GPIO_setupPinDirection+0x1b8>
    1372:	80 95       	com	r24
    1374:	84 23       	and	r24, r20
    1376:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	00 d0       	rcall	.+0      	; 0x138e <GPIO_writePin+0x6>
    138e:	00 d0       	rcall	.+0      	; 0x1390 <GPIO_writePin+0x8>
    1390:	0f 92       	push	r0
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	6a 83       	std	Y+2, r22	; 0x02
    139a:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	88 30       	cpi	r24, 0x08	; 8
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <GPIO_writePin+0x1c>
    13a2:	d5 c0       	rjmp	.+426    	; 0x154e <GPIO_writePin+0x1c6>
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <GPIO_writePin+0x24>
    13aa:	d1 c0       	rjmp	.+418    	; 0x154e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	3d 83       	std	Y+5, r19	; 0x05
    13b4:	2c 83       	std	Y+4, r18	; 0x04
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	91 05       	cpc	r25, r1
    13be:	09 f4       	brne	.+2      	; 0x13c2 <GPIO_writePin+0x3a>
    13c0:	43 c0       	rjmp	.+134    	; 0x1448 <GPIO_writePin+0xc0>
    13c2:	2c 81       	ldd	r18, Y+4	; 0x04
    13c4:	3d 81       	ldd	r19, Y+5	; 0x05
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	2c f4       	brge	.+10     	; 0x13d6 <GPIO_writePin+0x4e>
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	9d 81       	ldd	r25, Y+5	; 0x05
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	71 f0       	breq	.+28     	; 0x13f0 <GPIO_writePin+0x68>
    13d4:	bc c0       	rjmp	.+376    	; 0x154e <GPIO_writePin+0x1c6>
    13d6:	2c 81       	ldd	r18, Y+4	; 0x04
    13d8:	3d 81       	ldd	r19, Y+5	; 0x05
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	09 f4       	brne	.+2      	; 0x13e2 <GPIO_writePin+0x5a>
    13e0:	5f c0       	rjmp	.+190    	; 0x14a0 <GPIO_writePin+0x118>
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	91 05       	cpc	r25, r1
    13ea:	09 f4       	brne	.+2      	; 0x13ee <GPIO_writePin+0x66>
    13ec:	85 c0       	rjmp	.+266    	; 0x14f8 <GPIO_writePin+0x170>
    13ee:	af c0       	rjmp	.+350    	; 0x154e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	a1 f4       	brne	.+40     	; 0x141e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    13f6:	ab e3       	ldi	r26, 0x3B	; 59
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	eb e3       	ldi	r30, 0x3B	; 59
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <GPIO_writePin+0x8c>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <GPIO_writePin+0x88>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	98 c0       	rjmp	.+304    	; 0x154e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    141e:	ab e3       	ldi	r26, 0x3B	; 59
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	eb e3       	ldi	r30, 0x3B	; 59
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <GPIO_writePin+0xb4>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <GPIO_writePin+0xb0>
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	83 c0       	rjmp	.+262    	; 0x154e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	a1 f4       	brne	.+40     	; 0x1476 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    144e:	a8 e3       	ldi	r26, 0x38	; 56
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e8 e3       	ldi	r30, 0x38	; 56
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_writePin+0xe4>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_writePin+0xe0>
    1470:	84 2b       	or	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	6c c0       	rjmp	.+216    	; 0x154e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1476:	a8 e3       	ldi	r26, 0x38	; 56
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e8 e3       	ldi	r30, 0x38	; 56
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_writePin+0x10c>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_writePin+0x108>
    1498:	80 95       	com	r24
    149a:	84 23       	and	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	57 c0       	rjmp	.+174    	; 0x154e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	a1 f4       	brne	.+40     	; 0x14ce <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    14a6:	a5 e3       	ldi	r26, 0x35	; 53
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e5 e3       	ldi	r30, 0x35	; 53
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_writePin+0x13c>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_writePin+0x138>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	40 c0       	rjmp	.+128    	; 0x154e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    14ce:	a5 e3       	ldi	r26, 0x35	; 53
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e5 e3       	ldi	r30, 0x35	; 53
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <GPIO_writePin+0x164>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <GPIO_writePin+0x160>
    14f0:	80 95       	com	r24
    14f2:	84 23       	and	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	2b c0       	rjmp	.+86     	; 0x154e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	a1 f4       	brne	.+40     	; 0x1526 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    14fe:	a2 e3       	ldi	r26, 0x32	; 50
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e2 e3       	ldi	r30, 0x32	; 50
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <GPIO_writePin+0x194>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <GPIO_writePin+0x190>
    1520:	84 2b       	or	r24, r20
    1522:	8c 93       	st	X, r24
    1524:	14 c0       	rjmp	.+40     	; 0x154e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1526:	a2 e3       	ldi	r26, 0x32	; 50
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e2 e3       	ldi	r30, 0x32	; 50
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <GPIO_writePin+0x1bc>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <GPIO_writePin+0x1b8>
    1548:	80 95       	com	r24
    154a:	84 23       	and	r24, r20
    154c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <GPIO_readPin+0x6>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <GPIO_readPin+0x8>
    1566:	0f 92       	push	r0
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	8a 83       	std	Y+2, r24	; 0x02
    156e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1570:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	88 30       	cpi	r24, 0x08	; 8
    1576:	08 f0       	brcs	.+2      	; 0x157a <GPIO_readPin+0x1c>
    1578:	84 c0       	rjmp	.+264    	; 0x1682 <GPIO_readPin+0x124>
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	84 30       	cpi	r24, 0x04	; 4
    157e:	08 f0       	brcs	.+2      	; 0x1582 <GPIO_readPin+0x24>
    1580:	80 c0       	rjmp	.+256    	; 0x1682 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	3d 83       	std	Y+5, r19	; 0x05
    158a:	2c 83       	std	Y+4, r18	; 0x04
    158c:	4c 81       	ldd	r20, Y+4	; 0x04
    158e:	5d 81       	ldd	r21, Y+5	; 0x05
    1590:	41 30       	cpi	r20, 0x01	; 1
    1592:	51 05       	cpc	r21, r1
    1594:	79 f1       	breq	.+94     	; 0x15f4 <GPIO_readPin+0x96>
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	9d 81       	ldd	r25, Y+5	; 0x05
    159a:	82 30       	cpi	r24, 0x02	; 2
    159c:	91 05       	cpc	r25, r1
    159e:	34 f4       	brge	.+12     	; 0x15ac <GPIO_readPin+0x4e>
    15a0:	2c 81       	ldd	r18, Y+4	; 0x04
    15a2:	3d 81       	ldd	r19, Y+5	; 0x05
    15a4:	21 15       	cp	r18, r1
    15a6:	31 05       	cpc	r19, r1
    15a8:	69 f0       	breq	.+26     	; 0x15c4 <GPIO_readPin+0x66>
    15aa:	6b c0       	rjmp	.+214    	; 0x1682 <GPIO_readPin+0x124>
    15ac:	4c 81       	ldd	r20, Y+4	; 0x04
    15ae:	5d 81       	ldd	r21, Y+5	; 0x05
    15b0:	42 30       	cpi	r20, 0x02	; 2
    15b2:	51 05       	cpc	r21, r1
    15b4:	b9 f1       	breq	.+110    	; 0x1624 <GPIO_readPin+0xc6>
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	83 30       	cpi	r24, 0x03	; 3
    15bc:	91 05       	cpc	r25, r1
    15be:	09 f4       	brne	.+2      	; 0x15c2 <GPIO_readPin+0x64>
    15c0:	49 c0       	rjmp	.+146    	; 0x1654 <GPIO_readPin+0xf6>
    15c2:	5f c0       	rjmp	.+190    	; 0x1682 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    15c4:	e9 e3       	ldi	r30, 0x39	; 57
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a9 01       	movw	r20, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <GPIO_readPin+0x7e>
    15d8:	55 95       	asr	r21
    15da:	47 95       	ror	r20
    15dc:	8a 95       	dec	r24
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <GPIO_readPin+0x7a>
    15e0:	ca 01       	movw	r24, r20
    15e2:	81 70       	andi	r24, 0x01	; 1
    15e4:	90 70       	andi	r25, 0x00	; 0
    15e6:	88 23       	and	r24, r24
    15e8:	19 f0       	breq	.+6      	; 0x15f0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	49 c0       	rjmp	.+146    	; 0x1682 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15f0:	19 82       	std	Y+1, r1	; 0x01
    15f2:	47 c0       	rjmp	.+142    	; 0x1682 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    15f4:	e6 e3       	ldi	r30, 0x36	; 54
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a9 01       	movw	r20, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <GPIO_readPin+0xae>
    1608:	55 95       	asr	r21
    160a:	47 95       	ror	r20
    160c:	8a 95       	dec	r24
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <GPIO_readPin+0xaa>
    1610:	ca 01       	movw	r24, r20
    1612:	81 70       	andi	r24, 0x01	; 1
    1614:	90 70       	andi	r25, 0x00	; 0
    1616:	88 23       	and	r24, r24
    1618:	19 f0       	breq	.+6      	; 0x1620 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	31 c0       	rjmp	.+98     	; 0x1682 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1620:	19 82       	std	Y+1, r1	; 0x01
    1622:	2f c0       	rjmp	.+94     	; 0x1682 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1624:	e3 e3       	ldi	r30, 0x33	; 51
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a9 01       	movw	r20, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <GPIO_readPin+0xde>
    1638:	55 95       	asr	r21
    163a:	47 95       	ror	r20
    163c:	8a 95       	dec	r24
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <GPIO_readPin+0xda>
    1640:	ca 01       	movw	r24, r20
    1642:	81 70       	andi	r24, 0x01	; 1
    1644:	90 70       	andi	r25, 0x00	; 0
    1646:	88 23       	and	r24, r24
    1648:	19 f0       	breq	.+6      	; 0x1650 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	19 c0       	rjmp	.+50     	; 0x1682 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1650:	19 82       	std	Y+1, r1	; 0x01
    1652:	17 c0       	rjmp	.+46     	; 0x1682 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1654:	e0 e3       	ldi	r30, 0x30	; 48
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a9 01       	movw	r20, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <GPIO_readPin+0x10e>
    1668:	55 95       	asr	r21
    166a:	47 95       	ror	r20
    166c:	8a 95       	dec	r24
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <GPIO_readPin+0x10a>
    1670:	ca 01       	movw	r24, r20
    1672:	81 70       	andi	r24, 0x01	; 1
    1674:	90 70       	andi	r25, 0x00	; 0
    1676:	88 23       	and	r24, r24
    1678:	19 f0       	breq	.+6      	; 0x1680 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1680:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1682:	89 81       	ldd	r24, Y+1	; 0x01
}
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <GPIO_togglePin>:
void GPIO_togglePin(uint8 port_num, uint8 pin_num){
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <GPIO_togglePin+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <GPIO_togglePin+0x8>
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	6a 83       	std	Y+2, r22	; 0x02


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	88 30       	cpi	r24, 0x08	; 8
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <GPIO_togglePin+0x18>
    16aa:	72 c0       	rjmp	.+228    	; 0x1790 <GPIO_togglePin+0xfc>
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	84 30       	cpi	r24, 0x04	; 4
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <GPIO_togglePin+0x20>
    16b2:	6e c0       	rjmp	.+220    	; 0x1790 <GPIO_togglePin+0xfc>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	3c 83       	std	Y+4, r19	; 0x04
    16bc:	2b 83       	std	Y+3, r18	; 0x03
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	91 05       	cpc	r25, r1
    16c6:	49 f1       	breq	.+82     	; 0x171a <GPIO_togglePin+0x86>
    16c8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ca:	3c 81       	ldd	r19, Y+4	; 0x04
    16cc:	22 30       	cpi	r18, 0x02	; 2
    16ce:	31 05       	cpc	r19, r1
    16d0:	2c f4       	brge	.+10     	; 0x16dc <GPIO_togglePin+0x48>
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	61 f0       	breq	.+24     	; 0x16f2 <GPIO_togglePin+0x5e>
    16da:	5a c0       	rjmp	.+180    	; 0x1790 <GPIO_togglePin+0xfc>
    16dc:	2b 81       	ldd	r18, Y+3	; 0x03
    16de:	3c 81       	ldd	r19, Y+4	; 0x04
    16e0:	22 30       	cpi	r18, 0x02	; 2
    16e2:	31 05       	cpc	r19, r1
    16e4:	71 f1       	breq	.+92     	; 0x1742 <GPIO_togglePin+0xae>
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	83 30       	cpi	r24, 0x03	; 3
    16ec:	91 05       	cpc	r25, r1
    16ee:	e9 f1       	breq	.+122    	; 0x176a <GPIO_togglePin+0xd6>
    16f0:	4f c0       	rjmp	.+158    	; 0x1790 <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA, pin_num);
    16f2:	ab e3       	ldi	r26, 0x3B	; 59
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	eb e3       	ldi	r30, 0x3B	; 59
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <GPIO_togglePin+0x7c>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <GPIO_togglePin+0x78>
    1714:	84 27       	eor	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	3b c0       	rjmp	.+118    	; 0x1790 <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB, pin_num);
    171a:	a8 e3       	ldi	r26, 0x38	; 56
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e8 e3       	ldi	r30, 0x38	; 56
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <GPIO_togglePin+0xa4>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <GPIO_togglePin+0xa0>
    173c:	84 27       	eor	r24, r20
    173e:	8c 93       	st	X, r24
    1740:	27 c0       	rjmp	.+78     	; 0x1790 <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC, pin_num);
    1742:	a5 e3       	ldi	r26, 0x35	; 53
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e5 e3       	ldi	r30, 0x35	; 53
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <GPIO_togglePin+0xcc>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <GPIO_togglePin+0xc8>
    1764:	84 27       	eor	r24, r20
    1766:	8c 93       	st	X, r24
    1768:	13 c0       	rjmp	.+38     	; 0x1790 <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD, pin_num);
    176a:	a2 e3       	ldi	r26, 0x32	; 50
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e2 e3       	ldi	r30, 0x32	; 50
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	48 2f       	mov	r20, r24
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 2e       	mov	r0, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <GPIO_togglePin+0xf4>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	0a 94       	dec	r0
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <GPIO_togglePin+0xf0>
    178c:	84 27       	eor	r24, r20
    178e:	8c 93       	st	X, r24
			break;
		}
	}
}
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <GPIO_setupPortDirection+0x6>
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <GPIO_setupPortDirection+0x8>
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	84 30       	cpi	r24, 0x04	; 4
    17b2:	90 f5       	brcc	.+100    	; 0x1818 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	3c 83       	std	Y+4, r19	; 0x04
    17bc:	2b 83       	std	Y+3, r18	; 0x03
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	9c 81       	ldd	r25, Y+4	; 0x04
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	91 05       	cpc	r25, r1
    17c6:	d1 f0       	breq	.+52     	; 0x17fc <GPIO_setupPortDirection+0x5e>
    17c8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ca:	3c 81       	ldd	r19, Y+4	; 0x04
    17cc:	22 30       	cpi	r18, 0x02	; 2
    17ce:	31 05       	cpc	r19, r1
    17d0:	2c f4       	brge	.+10     	; 0x17dc <GPIO_setupPortDirection+0x3e>
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	61 f0       	breq	.+24     	; 0x17f2 <GPIO_setupPortDirection+0x54>
    17da:	1e c0       	rjmp	.+60     	; 0x1818 <GPIO_setupPortDirection+0x7a>
    17dc:	2b 81       	ldd	r18, Y+3	; 0x03
    17de:	3c 81       	ldd	r19, Y+4	; 0x04
    17e0:	22 30       	cpi	r18, 0x02	; 2
    17e2:	31 05       	cpc	r19, r1
    17e4:	81 f0       	breq	.+32     	; 0x1806 <GPIO_setupPortDirection+0x68>
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	83 30       	cpi	r24, 0x03	; 3
    17ec:	91 05       	cpc	r25, r1
    17ee:	81 f0       	breq	.+32     	; 0x1810 <GPIO_setupPortDirection+0x72>
    17f0:	13 c0       	rjmp	.+38     	; 0x1818 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    17f2:	ea e3       	ldi	r30, 0x3A	; 58
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	80 83       	st	Z, r24
    17fa:	0e c0       	rjmp	.+28     	; 0x1818 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    17fc:	e7 e3       	ldi	r30, 0x37	; 55
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	80 83       	st	Z, r24
    1804:	09 c0       	rjmp	.+18     	; 0x1818 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1806:	e4 e3       	ldi	r30, 0x34	; 52
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	80 83       	st	Z, r24
    180e:	04 c0       	rjmp	.+8      	; 0x1818 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1810:	e1 e3       	ldi	r30, 0x31	; 49
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	80 83       	st	Z, r24
			break;
		}
	}
}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value){
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <GPIO_writePort+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <GPIO_writePort+0x8>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	84 30       	cpi	r24, 0x04	; 4
    183a:	90 f5       	brcc	.+100    	; 0x18a0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	3c 83       	std	Y+4, r19	; 0x04
    1844:	2b 83       	std	Y+3, r18	; 0x03
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	91 05       	cpc	r25, r1
    184e:	d1 f0       	breq	.+52     	; 0x1884 <GPIO_writePort+0x5e>
    1850:	2b 81       	ldd	r18, Y+3	; 0x03
    1852:	3c 81       	ldd	r19, Y+4	; 0x04
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	2c f4       	brge	.+10     	; 0x1864 <GPIO_writePort+0x3e>
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	61 f0       	breq	.+24     	; 0x187a <GPIO_writePort+0x54>
    1862:	1e c0       	rjmp	.+60     	; 0x18a0 <GPIO_writePort+0x7a>
    1864:	2b 81       	ldd	r18, Y+3	; 0x03
    1866:	3c 81       	ldd	r19, Y+4	; 0x04
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	81 f0       	breq	.+32     	; 0x188e <GPIO_writePort+0x68>
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	83 30       	cpi	r24, 0x03	; 3
    1874:	91 05       	cpc	r25, r1
    1876:	81 f0       	breq	.+32     	; 0x1898 <GPIO_writePort+0x72>
    1878:	13 c0       	rjmp	.+38     	; 0x18a0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    187a:	eb e3       	ldi	r30, 0x3B	; 59
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	80 83       	st	Z, r24
    1882:	0e c0       	rjmp	.+28     	; 0x18a0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1884:	e8 e3       	ldi	r30, 0x38	; 56
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	80 83       	st	Z, r24
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    188e:	e5 e3       	ldi	r30, 0x35	; 53
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	80 83       	st	Z, r24
    1896:	04 c0       	rjmp	.+8      	; 0x18a0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1898:	e2 e3       	ldi	r30, 0x32	; 50
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	80 83       	st	Z, r24
			break;
		}
	}
}
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num){
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <GPIO_readPort+0x6>
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <GPIO_readPort+0x8>
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
    18bc:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	84 30       	cpi	r24, 0x04	; 4
    18c2:	90 f5       	brcc	.+100    	; 0x1928 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	3c 83       	std	Y+4, r19	; 0x04
    18cc:	2b 83       	std	Y+3, r18	; 0x03
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	91 05       	cpc	r25, r1
    18d6:	d1 f0       	breq	.+52     	; 0x190c <GPIO_readPort+0x5e>
    18d8:	2b 81       	ldd	r18, Y+3	; 0x03
    18da:	3c 81       	ldd	r19, Y+4	; 0x04
    18dc:	22 30       	cpi	r18, 0x02	; 2
    18de:	31 05       	cpc	r19, r1
    18e0:	2c f4       	brge	.+10     	; 0x18ec <GPIO_readPort+0x3e>
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	61 f0       	breq	.+24     	; 0x1902 <GPIO_readPort+0x54>
    18ea:	1e c0       	rjmp	.+60     	; 0x1928 <GPIO_readPort+0x7a>
    18ec:	2b 81       	ldd	r18, Y+3	; 0x03
    18ee:	3c 81       	ldd	r19, Y+4	; 0x04
    18f0:	22 30       	cpi	r18, 0x02	; 2
    18f2:	31 05       	cpc	r19, r1
    18f4:	81 f0       	breq	.+32     	; 0x1916 <GPIO_readPort+0x68>
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	83 30       	cpi	r24, 0x03	; 3
    18fc:	91 05       	cpc	r25, r1
    18fe:	81 f0       	breq	.+32     	; 0x1920 <GPIO_readPort+0x72>
    1900:	13 c0       	rjmp	.+38     	; 0x1928 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1902:	e9 e3       	ldi	r30, 0x39	; 57
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	0e c0       	rjmp	.+28     	; 0x1928 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    190c:	e6 e3       	ldi	r30, 0x36	; 54
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	09 c0       	rjmp	.+18     	; 0x1928 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1916:	e3 e3       	ldi	r30, 0x33	; 51
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	04 c0       	rjmp	.+8      	; 0x1928 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1920:	e0 e3       	ldi	r30, 0x30	; 48
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1928:	89 81       	ldd	r24, Y+1	; 0x01
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <EEPROM_writeByte>:
#include "eeprom.h"
#include "../../MCAL/i2c/i2c.h"
#include "avr/io.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <EEPROM_writeByte+0x6>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <EEPROM_writeByte+0x8>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    194a:	0e 94 76 08 	call	0x10ec	; 0x10ec <TWI_start>
    if (TWI_getStatus() != TWI_START_STATE)
    194e:	0e 94 ce 08 	call	0x119c	; 0x119c <TWI_getStatus>
    1952:	88 30       	cpi	r24, 0x08	; 8
    1954:	11 f0       	breq	.+4      	; 0x195a <EEPROM_writeByte+0x22>
        return ERROR;
    1956:	1c 82       	std	Y+4, r1	; 0x04
    1958:	28 c0       	rjmp	.+80     	; 0x19aa <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	80 70       	andi	r24, 0x00	; 0
    1960:	97 70       	andi	r25, 0x07	; 7
    1962:	88 0f       	add	r24, r24
    1964:	89 2f       	mov	r24, r25
    1966:	88 1f       	adc	r24, r24
    1968:	99 0b       	sbc	r25, r25
    196a:	91 95       	neg	r25
    196c:	80 6a       	ori	r24, 0xA0	; 160
    196e:	0e 94 91 08 	call	0x1122	; 0x1122 <TWI_writeByte>
    if (TWI_getStatus() != TWI_SLA_W_ACK_STATE)
    1972:	0e 94 ce 08 	call	0x119c	; 0x119c <TWI_getStatus>
    1976:	88 31       	cpi	r24, 0x18	; 24
    1978:	11 f0       	breq	.+4      	; 0x197e <EEPROM_writeByte+0x46>
        return ERROR;
    197a:	1c 82       	std	Y+4, r1	; 0x04
    197c:	16 c0       	rjmp	.+44     	; 0x19aa <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	0e 94 91 08 	call	0x1122	; 0x1122 <TWI_writeByte>
    if (TWI_getStatus() != TWI_DATA_WRITE_ACK_STATE)
    1984:	0e 94 ce 08 	call	0x119c	; 0x119c <TWI_getStatus>
    1988:	88 32       	cpi	r24, 0x28	; 40
    198a:	11 f0       	breq	.+4      	; 0x1990 <EEPROM_writeByte+0x58>
        return ERROR;
    198c:	1c 82       	std	Y+4, r1	; 0x04
    198e:	0d c0       	rjmp	.+26     	; 0x19aa <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	0e 94 91 08 	call	0x1122	; 0x1122 <TWI_writeByte>
    if (TWI_getStatus() != TWI_DATA_WRITE_ACK_STATE)
    1996:	0e 94 ce 08 	call	0x119c	; 0x119c <TWI_getStatus>
    199a:	88 32       	cpi	r24, 0x28	; 40
    199c:	11 f0       	breq	.+4      	; 0x19a2 <EEPROM_writeByte+0x6a>
        return ERROR;
    199e:	1c 82       	std	Y+4, r1	; 0x04
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    19a2:	0e 94 86 08 	call	0x110c	; 0x110c <TWI_stop>

    return SUCCESS;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	8c 83       	std	Y+4, r24	; 0x04
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
}
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <EEPROM_readByte+0x6>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <EEPROM_readByte+0x8>
    19c2:	0f 92       	push	r0
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	9a 83       	std	Y+2, r25	; 0x02
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	7c 83       	std	Y+4, r23	; 0x04
    19ce:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    19d0:	0e 94 76 08 	call	0x10ec	; 0x10ec <TWI_start>
    if (TWI_getStatus() != TWI_START_STATE)
    19d4:	0e 94 ce 08 	call	0x119c	; 0x119c <TWI_getStatus>
    19d8:	88 30       	cpi	r24, 0x08	; 8
    19da:	11 f0       	breq	.+4      	; 0x19e0 <EEPROM_readByte+0x26>
        return ERROR;
    19dc:	1d 82       	std	Y+5, r1	; 0x05
    19de:	44 c0       	rjmp	.+136    	; 0x1a68 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	80 70       	andi	r24, 0x00	; 0
    19e6:	97 70       	andi	r25, 0x07	; 7
    19e8:	88 0f       	add	r24, r24
    19ea:	89 2f       	mov	r24, r25
    19ec:	88 1f       	adc	r24, r24
    19ee:	99 0b       	sbc	r25, r25
    19f0:	91 95       	neg	r25
    19f2:	80 6a       	ori	r24, 0xA0	; 160
    19f4:	0e 94 91 08 	call	0x1122	; 0x1122 <TWI_writeByte>
    if (TWI_getStatus() != TWI_SLA_W_ACK_STATE)
    19f8:	0e 94 ce 08 	call	0x119c	; 0x119c <TWI_getStatus>
    19fc:	88 31       	cpi	r24, 0x18	; 24
    19fe:	11 f0       	breq	.+4      	; 0x1a04 <EEPROM_readByte+0x4a>
        return ERROR;
    1a00:	1d 82       	std	Y+5, r1	; 0x05
    1a02:	32 c0       	rjmp	.+100    	; 0x1a68 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	0e 94 91 08 	call	0x1122	; 0x1122 <TWI_writeByte>
    if (TWI_getStatus() != TWI_DATA_WRITE_ACK_STATE)
    1a0a:	0e 94 ce 08 	call	0x119c	; 0x119c <TWI_getStatus>
    1a0e:	88 32       	cpi	r24, 0x28	; 40
    1a10:	11 f0       	breq	.+4      	; 0x1a16 <EEPROM_readByte+0x5c>
        return ERROR;
    1a12:	1d 82       	std	Y+5, r1	; 0x05
    1a14:	29 c0       	rjmp	.+82     	; 0x1a68 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    1a16:	0e 94 76 08 	call	0x10ec	; 0x10ec <TWI_start>
    if (TWI_getStatus() != TWI_REPEATED_START_STATE)
    1a1a:	0e 94 ce 08 	call	0x119c	; 0x119c <TWI_getStatus>
    1a1e:	80 31       	cpi	r24, 0x10	; 16
    1a20:	11 f0       	breq	.+4      	; 0x1a26 <EEPROM_readByte+0x6c>
        return ERROR;
    1a22:	1d 82       	std	Y+5, r1	; 0x05
    1a24:	21 c0       	rjmp	.+66     	; 0x1a68 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2a:	80 70       	andi	r24, 0x00	; 0
    1a2c:	97 70       	andi	r25, 0x07	; 7
    1a2e:	88 0f       	add	r24, r24
    1a30:	89 2f       	mov	r24, r25
    1a32:	88 1f       	adc	r24, r24
    1a34:	99 0b       	sbc	r25, r25
    1a36:	91 95       	neg	r25
    1a38:	81 6a       	ori	r24, 0xA1	; 161
    1a3a:	0e 94 91 08 	call	0x1122	; 0x1122 <TWI_writeByte>
    if (TWI_getStatus() != TWI_SLA_R_ACK_STATE)
    1a3e:	0e 94 ce 08 	call	0x119c	; 0x119c <TWI_getStatus>
    1a42:	80 34       	cpi	r24, 0x40	; 64
    1a44:	11 f0       	breq	.+4      	; 0x1a4a <EEPROM_readByte+0x90>
        return ERROR;
    1a46:	1d 82       	std	Y+5, r1	; 0x05
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1a4a:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_readByteWithNACK>
    1a4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a50:	fc 81       	ldd	r31, Y+4	; 0x04
    1a52:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_DATA_READ_NACK_STATE)
    1a54:	0e 94 ce 08 	call	0x119c	; 0x119c <TWI_getStatus>
    1a58:	88 35       	cpi	r24, 0x58	; 88
    1a5a:	11 f0       	breq	.+4      	; 0x1a60 <EEPROM_readByte+0xa6>
        return ERROR;
    1a5c:	1d 82       	std	Y+5, r1	; 0x05
    1a5e:	04 c0       	rjmp	.+8      	; 0x1a68 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1a60:	0e 94 86 08 	call	0x110c	; 0x110c <TWI_stop>

    return SUCCESS;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <DcMotor_init>:
#include "../../MCAL/timer0/timer0.h"


//DcMotor_configType config_pwm = {EN_TIMER0_ID, PWM_MAX};

void DcMotor_init(ST_dcMotor_configType *dcMotor){
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <DcMotor_init+0x6>
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	9a 83       	std	Y+2, r25	; 0x02
    1a86:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(dcMotor->port1_id, dcMotor->pin1_id, PIN_OUTPUT);
    1a88:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8c:	80 81       	ld	r24, Z
    1a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a90:	fa 81       	ldd	r31, Y+2	; 0x02
    1a92:	92 81       	ldd	r25, Z+2	; 0x02
    1a94:	69 2f       	mov	r22, r25
    1a96:	41 e0       	ldi	r20, 0x01	; 1
    1a98:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(dcMotor->port2_id, dcMotor->pin2_id, PIN_OUTPUT);
    1a9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa0:	81 81       	ldd	r24, Z+1	; 0x01
    1aa2:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa4:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	69 2f       	mov	r22, r25
    1aaa:	41 e0       	ldi	r20, 0x01	; 1
    1aac:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <GPIO_setupPinDirection>

	PWM_T0_init();
    1ab0:	0e 94 89 07 	call	0xf12	; 0xf12 <PWM_T0_init>

}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <DcMotor_rotate>:
void DcMotor_rotate(ST_dcMotor_configType *dcMotor, EN_dcMotor_state state, uint8 speed){
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <DcMotor_rotate+0x6>
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <DcMotor_rotate+0x8>
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <DcMotor_rotate+0xa>
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	6b 83       	std	Y+3, r22	; 0x03
    1ad2:	4c 83       	std	Y+4, r20	; 0x04

	PWM_T0_setDutyCycle(speed);
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	0e 94 ac 07 	call	0xf58	; 0xf58 <PWM_T0_setDutyCycle>

	switch(state){
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	3e 83       	std	Y+6, r19	; 0x06
    1ae2:	2d 83       	std	Y+5, r18	; 0x05
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	91 05       	cpc	r25, r1
    1aec:	31 f0       	breq	.+12     	; 0x1afa <DcMotor_rotate+0x3c>
    1aee:	2d 81       	ldd	r18, Y+5	; 0x05
    1af0:	3e 81       	ldd	r19, Y+6	; 0x06
    1af2:	22 30       	cpi	r18, 0x02	; 2
    1af4:	31 05       	cpc	r19, r1
    1af6:	b1 f0       	breq	.+44     	; 0x1b24 <DcMotor_rotate+0x66>
    1af8:	29 c0       	rjmp	.+82     	; 0x1b4c <DcMotor_rotate+0x8e>
		case EN_DC_CW:
			GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_HIGH);
    1afa:	e9 81       	ldd	r30, Y+1	; 0x01
    1afc:	fa 81       	ldd	r31, Y+2	; 0x02
    1afe:	80 81       	ld	r24, Z
    1b00:	e9 81       	ldd	r30, Y+1	; 0x01
    1b02:	fa 81       	ldd	r31, Y+2	; 0x02
    1b04:	92 81       	ldd	r25, Z+2	; 0x02
    1b06:	69 2f       	mov	r22, r25
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 c4 09 	call	0x1388	; 0x1388 <GPIO_writePin>
			GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_LOW);
    1b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b10:	fa 81       	ldd	r31, Y+2	; 0x02
    1b12:	81 81       	ldd	r24, Z+1	; 0x01
    1b14:	e9 81       	ldd	r30, Y+1	; 0x01
    1b16:	fa 81       	ldd	r31, Y+2	; 0x02
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	69 2f       	mov	r22, r25
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	0e 94 c4 09 	call	0x1388	; 0x1388 <GPIO_writePin>
    1b22:	14 c0       	rjmp	.+40     	; 0x1b4c <DcMotor_rotate+0x8e>

			break;

		case EN_DC_A_CW:
			GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_LOW);
    1b24:	e9 81       	ldd	r30, Y+1	; 0x01
    1b26:	fa 81       	ldd	r31, Y+2	; 0x02
    1b28:	80 81       	ld	r24, Z
    1b2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2e:	92 81       	ldd	r25, Z+2	; 0x02
    1b30:	69 2f       	mov	r22, r25
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	0e 94 c4 09 	call	0x1388	; 0x1388 <GPIO_writePin>
			GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_HIGH);
    1b38:	e9 81       	ldd	r30, Y+1	; 0x01
    1b3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b3c:	81 81       	ldd	r24, Z+1	; 0x01
    1b3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b40:	fa 81       	ldd	r31, Y+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	69 2f       	mov	r22, r25
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 c4 09 	call	0x1388	; 0x1388 <GPIO_writePin>

			break;
	}
}
    1b4c:	26 96       	adiw	r28, 0x06	; 6
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <DcMotor_stop>:

void DcMotor_stop(ST_dcMotor_configType *dcMotor){
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <DcMotor_stop+0x6>
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_LOW);
    1b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b70:	80 81       	ld	r24, Z
    1b72:	e9 81       	ldd	r30, Y+1	; 0x01
    1b74:	fa 81       	ldd	r31, Y+2	; 0x02
    1b76:	92 81       	ldd	r25, Z+2	; 0x02
    1b78:	69 2f       	mov	r22, r25
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	0e 94 c4 09 	call	0x1388	; 0x1388 <GPIO_writePin>
	GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_LOW);
    1b80:	e9 81       	ldd	r30, Y+1	; 0x01
    1b82:	fa 81       	ldd	r31, Y+2	; 0x02
    1b84:	81 81       	ldd	r24, Z+1	; 0x01
    1b86:	e9 81       	ldd	r30, Y+1	; 0x01
    1b88:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	69 2f       	mov	r22, r25
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	0e 94 c4 09 	call	0x1388	; 0x1388 <GPIO_writePin>
}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <Buzzer_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Buzzer_init(){
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(buzzer_port, buzzer_pin, PIN_OUTPUT);
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <GPIO_setupPinDirection>
}
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <Buzzer_on>:
void Buzzer_on(void){
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(buzzer_port, buzzer_pin, LOGIC_HIGH);
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	41 e0       	ldi	r20, 0x01	; 1
    1bc4:	0e 94 c4 09 	call	0x1388	; 0x1388 <GPIO_writePin>
}
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <Buzzer_off>:
void Buzzer_off(void){
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(buzzer_port, buzzer_pin, LOGIC_LOW);
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	0e 94 c4 09 	call	0x1388	; 0x1388 <GPIO_writePin>
}
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <secondsCountDown>:
ST_uart_ConfigType uart_configType = {UART_BITS_EIGHT, UART_PARITY_DISABLE, UART_STOP_ONE_BIT, BAUD_9600, UART_U2X_ENABLE, UART_INT_TX_DISABLE, UART_INT_RX_DISABLE};
ST_timer1_configType timer1_configType = {TIMER1_MAX_VALUE - TIMER1_ONE_SECOND_CLK_256_8M, TIMER1_MAX_VALUE, TIMER1_CLK_256, TIMER1_NORMAL};

static uint8 seconds = 0;

void secondsCountDown(){
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
	if (seconds > 0)
    1bee:	80 91 87 00 	lds	r24, 0x0087
    1bf2:	88 23       	and	r24, r24
    1bf4:	29 f0       	breq	.+10     	; 0x1c00 <secondsCountDown+0x1a>
		seconds--;
    1bf6:	80 91 87 00 	lds	r24, 0x0087
    1bfa:	81 50       	subi	r24, 0x01	; 1
    1bfc:	80 93 87 00 	sts	0x0087, r24
}
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <setup>:


void setup(){
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62


	UART_init(&uart_configType);
    1c0e:	8d e6       	ldi	r24, 0x6D	; 109
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	0e 94 02 06 	call	0xc04	; 0xc04 <UART_init>
	Buzzer_init();
    1c16:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <Buzzer_init>
	DcMotor_init(&dcMotor);
    1c1a:	89 e6       	ldi	r24, 0x69	; 105
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DcMotor_init>
	TWI_init();
    1c22:	0e 94 64 08 	call	0x10c8	; 0x10c8 <TWI_init>
	Timer1_init(&timer1_configType);
    1c26:	85 e7       	ldi	r24, 0x75	; 117
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 0b 08 	call	0x1016	; 0x1016 <Timer1_init>
	Timer1_setCallBack(&secondsCountDown);
    1c2e:	83 ef       	ldi	r24, 0xF3	; 243
    1c30:	9d e0       	ldi	r25, 0x0D	; 13
    1c32:	0e 94 52 08 	call	0x10a4	; 0x10a4 <Timer1_setCallBack>
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    1c36:	af e5       	ldi	r26, 0x5F	; 95
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	ef e5       	ldi	r30, 0x5F	; 95
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	80 68       	ori	r24, 0x80	; 128
    1c42:	8c 93       	st	X, r24


}
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <main>:

void rcvPassword(uint8* str);
void changePass();
uint8 checkPass();

void main(void){
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <main+0x6>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62

	uint8 response = 0;
    1c54:	1a 82       	std	Y+2, r1	; 0x02

	setup();
    1c56:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <setup>

	do{
		response = UART_rcvCharacter();
    1c5a:	0e 94 33 07 	call	0xe66	; 0xe66 <UART_rcvCharacter>
    1c5e:	8a 83       	std	Y+2, r24	; 0x02
		uint8 result = 0;
    1c60:	19 82       	std	Y+1, r1	; 0x01

		if(response == '+' ){
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	8b 32       	cpi	r24, 0x2B	; 43
    1c66:	e1 f5       	brne	.+120    	; 0x1ce0 <main+0x96>
			result = checkPass();
    1c68:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <checkPass>
    1c6c:	89 83       	std	Y+1, r24	; 0x01
			if(result == 1){
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	99 f7       	brne	.-26     	; 0x1c5a <main+0x10>
				DcMotor_rotate(&dcMotor, EN_DC_CW, 100);
    1c74:	89 e6       	ldi	r24, 0x69	; 105
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	61 e0       	ldi	r22, 0x01	; 1
    1c7a:	44 e6       	ldi	r20, 0x64	; 100
    1c7c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DcMotor_rotate>
				seconds = 15;
    1c80:	8f e0       	ldi	r24, 0x0F	; 15
    1c82:	80 93 87 00 	sts	0x0087, r24
				while(seconds > 0){};
    1c86:	80 91 87 00 	lds	r24, 0x0087
    1c8a:	88 23       	and	r24, r24
    1c8c:	e1 f7       	brne	.-8      	; 0x1c86 <main+0x3c>
				UART_sendCharacter(' ');
    1c8e:	80 e2       	ldi	r24, 0x20	; 32
    1c90:	0e 94 e6 06 	call	0xdcc	; 0xdcc <UART_sendCharacter>

				DcMotor_stop(&dcMotor);
    1c94:	89 e6       	ldi	r24, 0x69	; 105
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DcMotor_stop>
				seconds = 3;
    1c9c:	83 e0       	ldi	r24, 0x03	; 3
    1c9e:	80 93 87 00 	sts	0x0087, r24
				while(seconds > 0){};
    1ca2:	80 91 87 00 	lds	r24, 0x0087
    1ca6:	88 23       	and	r24, r24
    1ca8:	e1 f7       	brne	.-8      	; 0x1ca2 <main+0x58>
				UART_sendCharacter(' ');
    1caa:	80 e2       	ldi	r24, 0x20	; 32
    1cac:	0e 94 e6 06 	call	0xdcc	; 0xdcc <UART_sendCharacter>

				DcMotor_rotate(&dcMotor, EN_DC_A_CW, 100);
    1cb0:	89 e6       	ldi	r24, 0x69	; 105
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	62 e0       	ldi	r22, 0x02	; 2
    1cb6:	44 e6       	ldi	r20, 0x64	; 100
    1cb8:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DcMotor_rotate>
				seconds = 15;
    1cbc:	8f e0       	ldi	r24, 0x0F	; 15
    1cbe:	80 93 87 00 	sts	0x0087, r24
				while(seconds > 0){};
    1cc2:	80 91 87 00 	lds	r24, 0x0087
    1cc6:	88 23       	and	r24, r24
    1cc8:	e1 f7       	brne	.-8      	; 0x1cc2 <main+0x78>

				UART_sendCharacter(' ');
    1cca:	80 e2       	ldi	r24, 0x20	; 32
    1ccc:	0e 94 e6 06 	call	0xdcc	; 0xdcc <UART_sendCharacter>
				DcMotor_stop(&dcMotor);
    1cd0:	89 e6       	ldi	r24, 0x69	; 105
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DcMotor_stop>
				UART_sendCharacter(' ');
    1cd8:	80 e2       	ldi	r24, 0x20	; 32
    1cda:	0e 94 e6 06 	call	0xdcc	; 0xdcc <UART_sendCharacter>
    1cde:	bd cf       	rjmp	.-134    	; 0x1c5a <main+0x10>

			}
		}
		else if(response == '-')
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	8d 32       	cpi	r24, 0x2D	; 45
    1ce4:	51 f4       	brne	.+20     	; 0x1cfa <main+0xb0>
		{
			result = checkPass();
    1ce6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <checkPass>
    1cea:	89 83       	std	Y+1, r24	; 0x01
			if(result == 1)
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	81 30       	cpi	r24, 0x01	; 1
    1cf0:	09 f0       	breq	.+2      	; 0x1cf4 <main+0xaa>
    1cf2:	b3 cf       	rjmp	.-154    	; 0x1c5a <main+0x10>
				changePass();
    1cf4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <changePass>
    1cf8:	b0 cf       	rjmp	.-160    	; 0x1c5a <main+0x10>

		}
		else if(response == 'p')
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	80 37       	cpi	r24, 0x70	; 112
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <main+0xb8>
    1d00:	ac cf       	rjmp	.-168    	; 0x1c5a <main+0x10>
			changePass();
    1d02:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <changePass>
    1d06:	a9 cf       	rjmp	.-174    	; 0x1c5a <main+0x10>

00001d08 <rcvPassword>:
	}while(1);


}

void rcvPassword(uint8* str){
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <rcvPassword+0xa>
    1d12:	0f 92       	push	r0
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	9b 83       	std	Y+3, r25	; 0x03
    1d1a:	8a 83       	std	Y+2, r24	; 0x02

	uint8 index = 0;
    1d1c:	19 82       	std	Y+1, r1	; 0x01
    1d1e:	23 c0       	rjmp	.+70     	; 0x1d66 <rcvPassword+0x5e>

	while(index < PASSWORD_SIZE){
		str[index] = UART_rcvCharacter();
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2a:	8c 01       	movw	r16, r24
    1d2c:	02 0f       	add	r16, r18
    1d2e:	13 1f       	adc	r17, r19
    1d30:	0e 94 33 07 	call	0xe66	; 0xe66 <UART_rcvCharacter>
    1d34:	f8 01       	movw	r30, r16
    1d36:	80 83       	st	Z, r24
		if( str[index] == '=')
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	9b 81       	ldd	r25, Y+3	; 0x03
    1d42:	fc 01       	movw	r30, r24
    1d44:	e2 0f       	add	r30, r18
    1d46:	f3 1f       	adc	r31, r19
    1d48:	80 81       	ld	r24, Z
    1d4a:	8d 33       	cpi	r24, 0x3D	; 61
    1d4c:	49 f4       	brne	.+18     	; 0x1d60 <rcvPassword+0x58>
		{
			str[index] = '\0';
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	9b 81       	ldd	r25, Y+3	; 0x03
    1d58:	fc 01       	movw	r30, r24
    1d5a:	e2 0f       	add	r30, r18
    1d5c:	f3 1f       	adc	r31, r19
    1d5e:	10 82       	st	Z, r1
		}
		index++;
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	8f 5f       	subi	r24, 0xFF	; 255
    1d64:	89 83       	std	Y+1, r24	; 0x01

void rcvPassword(uint8* str){

	uint8 index = 0;

	while(index < PASSWORD_SIZE){
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	86 30       	cpi	r24, 0x06	; 6
    1d6a:	d0 f2       	brcs	.-76     	; 0x1d20 <rcvPassword+0x18>
		{
			str[index] = '\0';
		}
		index++;
	}
}
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	08 95       	ret

00001d7c <changePass>:
void changePass(){
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	6c 97       	sbiw	r28, 0x1c	; 28
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61

	uint8 password[6];
	uint8 rePassword[6];
	rcvPassword(password);
    1d90:	ce 01       	movw	r24, r28
    1d92:	41 96       	adiw	r24, 0x11	; 17
    1d94:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <rcvPassword>
	rcvPassword(rePassword);
    1d98:	ce 01       	movw	r24, r28
    1d9a:	47 96       	adiw	r24, 0x17	; 23
    1d9c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <rcvPassword>

	if(strcmp(password, rePassword) == 0){
    1da0:	ce 01       	movw	r24, r28
    1da2:	41 96       	adiw	r24, 0x11	; 17
    1da4:	9e 01       	movw	r18, r28
    1da6:	29 5e       	subi	r18, 0xE9	; 233
    1da8:	3f 4f       	sbci	r19, 0xFF	; 255
    1daa:	b9 01       	movw	r22, r18
    1dac:	0e 94 03 11 	call	0x2206	; 0x2206 <strcmp>
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <changePass+0x3a>
    1db4:	95 c0       	rjmp	.+298    	; 0x1ee0 <changePass+0x164>
		for(int i = 0; i < 6; i++){
    1db6:	18 8a       	std	Y+16, r1	; 0x10
    1db8:	1f 86       	std	Y+15, r1	; 0x0f
    1dba:	88 c0       	rjmp	.+272    	; 0x1ecc <changePass+0x150>
			EEPROM_writeByte(0x0311+i, password[i]);
    1dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dbe:	98 89       	ldd	r25, Y+16	; 0x10
    1dc0:	8f 5e       	subi	r24, 0xEF	; 239
    1dc2:	9c 4f       	sbci	r25, 0xFC	; 252
    1dc4:	ac 01       	movw	r20, r24
    1dc6:	2f 85       	ldd	r18, Y+15	; 0x0f
    1dc8:	38 89       	ldd	r19, Y+16	; 0x10
    1dca:	ce 01       	movw	r24, r28
    1dcc:	41 96       	adiw	r24, 0x11	; 17
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	20 81       	ld	r18, Z
    1dd6:	ca 01       	movw	r24, r20
    1dd8:	62 2f       	mov	r22, r18
    1dda:	0e 94 9c 0c 	call	0x1938	; 0x1938 <EEPROM_writeByte>
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a0 e2       	ldi	r26, 0x20	; 32
    1de4:	b1 e4       	ldi	r27, 0x41	; 65
    1de6:	8b 87       	std	Y+11, r24	; 0x0b
    1de8:	9c 87       	std	Y+12, r25	; 0x0c
    1dea:	ad 87       	std	Y+13, r26	; 0x0d
    1dec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	4a ef       	ldi	r20, 0xFA	; 250
    1dfc:	54 e4       	ldi	r21, 0x44	; 68
    1dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	8f 83       	std	Y+7, r24	; 0x07
    1e08:	98 87       	std	Y+8, r25	; 0x08
    1e0a:	a9 87       	std	Y+9, r26	; 0x09
    1e0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e10:	78 85       	ldd	r23, Y+8	; 0x08
    1e12:	89 85       	ldd	r24, Y+9	; 0x09
    1e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e8       	ldi	r20, 0x80	; 128
    1e1c:	5f e3       	ldi	r21, 0x3F	; 63
    1e1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e22:	88 23       	and	r24, r24
    1e24:	2c f4       	brge	.+10     	; 0x1e30 <changePass+0xb4>
		__ticks = 1;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
    1e2e:	3f c0       	rjmp	.+126    	; 0x1eae <changePass+0x132>
	else if (__tmp > 65535)
    1e30:	6f 81       	ldd	r22, Y+7	; 0x07
    1e32:	78 85       	ldd	r23, Y+8	; 0x08
    1e34:	89 85       	ldd	r24, Y+9	; 0x09
    1e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	3f ef       	ldi	r19, 0xFF	; 255
    1e3c:	4f e7       	ldi	r20, 0x7F	; 127
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e44:	18 16       	cp	r1, r24
    1e46:	4c f5       	brge	.+82     	; 0x1e9a <changePass+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e2       	ldi	r20, 0x20	; 32
    1e56:	51 e4       	ldi	r21, 0x41	; 65
    1e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	bc 01       	movw	r22, r24
    1e62:	cd 01       	movw	r24, r26
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	0f c0       	rjmp	.+30     	; 0x1e90 <changePass+0x114>
    1e72:	88 ec       	ldi	r24, 0xC8	; 200
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9c 83       	std	Y+4, r25	; 0x04
    1e78:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <changePass+0x102>
    1e82:	9c 83       	std	Y+4, r25	; 0x04
    1e84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e86:	8d 81       	ldd	r24, Y+5	; 0x05
    1e88:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	9e 83       	std	Y+6, r25	; 0x06
    1e8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e90:	8d 81       	ldd	r24, Y+5	; 0x05
    1e92:	9e 81       	ldd	r25, Y+6	; 0x06
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	69 f7       	brne	.-38     	; 0x1e72 <changePass+0xf6>
    1e98:	14 c0       	rjmp	.+40     	; 0x1ec2 <changePass+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9c:	78 85       	ldd	r23, Y+8	; 0x08
    1e9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <changePass+0x13e>
    1ebe:	9a 83       	std	Y+2, r25	; 0x02
    1ec0:	89 83       	std	Y+1, r24	; 0x01
	uint8 rePassword[6];
	rcvPassword(password);
	rcvPassword(rePassword);

	if(strcmp(password, rePassword) == 0){
		for(int i = 0; i < 6; i++){
    1ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec4:	98 89       	ldd	r25, Y+16	; 0x10
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	98 8b       	std	Y+16, r25	; 0x10
    1eca:	8f 87       	std	Y+15, r24	; 0x0f
    1ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ece:	98 89       	ldd	r25, Y+16	; 0x10
    1ed0:	86 30       	cpi	r24, 0x06	; 6
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	0c f4       	brge	.+2      	; 0x1ed8 <changePass+0x15c>
    1ed6:	72 cf       	rjmp	.-284    	; 0x1dbc <changePass+0x40>
			EEPROM_writeByte(0x0311+i, password[i]);
			_delay_ms(10);
		}
		UART_sendCharacter('t');
    1ed8:	84 e7       	ldi	r24, 0x74	; 116
    1eda:	0e 94 e6 06 	call	0xdcc	; 0xdcc <UART_sendCharacter>
    1ede:	03 c0       	rjmp	.+6      	; 0x1ee6 <changePass+0x16a>
	}
	else
		UART_sendCharacter('f');
    1ee0:	86 e6       	ldi	r24, 0x66	; 102
    1ee2:	0e 94 e6 06 	call	0xdcc	; 0xdcc <UART_sendCharacter>
}
    1ee6:	6c 96       	adiw	r28, 0x1c	; 28
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <checkPass>:
uint8 checkPass(){
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	a2 97       	sbiw	r28, 0x22	; 34
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
	uint8 default_pass[6] = {'=', '=', '=', '=', '=', '='};
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	41 96       	adiw	r24, 0x11	; 17
    1f10:	9f 8f       	std	Y+31, r25	; 0x1f
    1f12:	8e 8f       	std	Y+30, r24	; 0x1e
    1f14:	ab e7       	ldi	r26, 0x7B	; 123
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	b9 a3       	std	Y+33, r27	; 0x21
    1f1a:	a8 a3       	std	Y+32, r26	; 0x20
    1f1c:	b6 e0       	ldi	r27, 0x06	; 6
    1f1e:	ba a3       	std	Y+34, r27	; 0x22
    1f20:	e8 a1       	ldd	r30, Y+32	; 0x20
    1f22:	f9 a1       	ldd	r31, Y+33	; 0x21
    1f24:	00 80       	ld	r0, Z
    1f26:	88 a1       	ldd	r24, Y+32	; 0x20
    1f28:	99 a1       	ldd	r25, Y+33	; 0x21
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	99 a3       	std	Y+33, r25	; 0x21
    1f2e:	88 a3       	std	Y+32, r24	; 0x20
    1f30:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1f32:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1f34:	0c 92       	st	X, r0
    1f36:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f38:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f3a:	31 96       	adiw	r30, 0x01	; 1
    1f3c:	ff 8f       	std	Y+31, r31	; 0x1f
    1f3e:	ee 8f       	std	Y+30, r30	; 0x1e
    1f40:	fa a1       	ldd	r31, Y+34	; 0x22
    1f42:	f1 50       	subi	r31, 0x01	; 1
    1f44:	fa a3       	std	Y+34, r31	; 0x22
    1f46:	8a a1       	ldd	r24, Y+34	; 0x22
    1f48:	88 23       	and	r24, r24
    1f4a:	51 f7       	brne	.-44     	; 0x1f20 <checkPass+0x28>
	uint8 password[6] = {'='};
    1f4c:	86 e0       	ldi	r24, 0x06	; 6
    1f4e:	fe 01       	movw	r30, r28
    1f50:	77 96       	adiw	r30, 0x17	; 23
    1f52:	df 01       	movw	r26, r30
    1f54:	98 2f       	mov	r25, r24
    1f56:	1d 92       	st	X+, r1
    1f58:	9a 95       	dec	r25
    1f5a:	e9 f7       	brne	.-6      	; 0x1f56 <checkPass+0x5e>
    1f5c:	8d e3       	ldi	r24, 0x3D	; 61
    1f5e:	8f 8b       	std	Y+23, r24	; 0x17
	rcvPassword(password);
    1f60:	ce 01       	movw	r24, r28
    1f62:	47 96       	adiw	r24, 0x17	; 23
    1f64:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <rcvPassword>

	for(int i = 0; i < 6; i++){
    1f68:	18 8a       	std	Y+16, r1	; 0x10
    1f6a:	1f 86       	std	Y+15, r1	; 0x0f
    1f6c:	87 c0       	rjmp	.+270    	; 0x207c <checkPass+0x184>
		EEPROM_readByte(0x0311+i, &default_pass[i]);
    1f6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f70:	98 89       	ldd	r25, Y+16	; 0x10
    1f72:	8f 5e       	subi	r24, 0xEF	; 239
    1f74:	9c 4f       	sbci	r25, 0xFC	; 252
    1f76:	ac 01       	movw	r20, r24
    1f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7a:	98 89       	ldd	r25, Y+16	; 0x10
    1f7c:	9e 01       	movw	r18, r28
    1f7e:	2f 5e       	subi	r18, 0xEF	; 239
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	28 0f       	add	r18, r24
    1f84:	39 1f       	adc	r19, r25
    1f86:	ca 01       	movw	r24, r20
    1f88:	b9 01       	movw	r22, r18
    1f8a:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_readByte>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e2       	ldi	r26, 0x20	; 32
    1f94:	b1 e4       	ldi	r27, 0x41	; 65
    1f96:	8b 87       	std	Y+11, r24	; 0x0b
    1f98:	9c 87       	std	Y+12, r25	; 0x0c
    1f9a:	ad 87       	std	Y+13, r26	; 0x0d
    1f9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a ef       	ldi	r20, 0xFA	; 250
    1fac:	54 e4       	ldi	r21, 0x44	; 68
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	8f 83       	std	Y+7, r24	; 0x07
    1fb8:	98 87       	std	Y+8, r25	; 0x08
    1fba:	a9 87       	std	Y+9, r26	; 0x09
    1fbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc0:	78 85       	ldd	r23, Y+8	; 0x08
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e8       	ldi	r20, 0x80	; 128
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	2c f4       	brge	.+10     	; 0x1fe0 <checkPass+0xe8>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	3f c0       	rjmp	.+126    	; 0x205e <checkPass+0x166>
	else if (__tmp > 65535)
    1fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe2:	78 85       	ldd	r23, Y+8	; 0x08
    1fe4:	89 85       	ldd	r24, Y+9	; 0x09
    1fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	3f ef       	ldi	r19, 0xFF	; 255
    1fec:	4f e7       	ldi	r20, 0x7F	; 127
    1fee:	57 e4       	ldi	r21, 0x47	; 71
    1ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	4c f5       	brge	.+82     	; 0x204a <checkPass+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e2       	ldi	r20, 0x20	; 32
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9e 83       	std	Y+6, r25	; 0x06
    201e:	8d 83       	std	Y+5, r24	; 0x05
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <checkPass+0x148>
    2022:	88 ec       	ldi	r24, 0xC8	; 200
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9c 83       	std	Y+4, r25	; 0x04
    2028:	8b 83       	std	Y+3, r24	; 0x03
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <checkPass+0x136>
    2032:	9c 83       	std	Y+4, r25	; 0x04
    2034:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	9e 81       	ldd	r25, Y+6	; 0x06
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	69 f7       	brne	.-38     	; 0x2022 <checkPass+0x12a>
    2048:	14 c0       	rjmp	.+40     	; 0x2072 <checkPass+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204a:	6f 81       	ldd	r22, Y+7	; 0x07
    204c:	78 85       	ldd	r23, Y+8	; 0x08
    204e:	89 85       	ldd	r24, Y+9	; 0x09
    2050:	9a 85       	ldd	r25, Y+10	; 0x0a
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	9a 83       	std	Y+2, r25	; 0x02
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	9a 81       	ldd	r25, Y+2	; 0x02
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <checkPass+0x172>
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	89 83       	std	Y+1, r24	; 0x01
uint8 checkPass(){
	uint8 default_pass[6] = {'=', '=', '=', '=', '=', '='};
	uint8 password[6] = {'='};
	rcvPassword(password);

	for(int i = 0; i < 6; i++){
    2072:	8f 85       	ldd	r24, Y+15	; 0x0f
    2074:	98 89       	ldd	r25, Y+16	; 0x10
    2076:	01 96       	adiw	r24, 0x01	; 1
    2078:	98 8b       	std	Y+16, r25	; 0x10
    207a:	8f 87       	std	Y+15, r24	; 0x0f
    207c:	8f 85       	ldd	r24, Y+15	; 0x0f
    207e:	98 89       	ldd	r25, Y+16	; 0x10
    2080:	86 30       	cpi	r24, 0x06	; 6
    2082:	91 05       	cpc	r25, r1
    2084:	0c f4       	brge	.+2      	; 0x2088 <checkPass+0x190>
    2086:	73 cf       	rjmp	.-282    	; 0x1f6e <checkPass+0x76>
		_delay_ms(10);
	}



	if(strcmp(password, default_pass) == 0){
    2088:	ce 01       	movw	r24, r28
    208a:	47 96       	adiw	r24, 0x17	; 23
    208c:	9e 01       	movw	r18, r28
    208e:	2f 5e       	subi	r18, 0xEF	; 239
    2090:	3f 4f       	sbci	r19, 0xFF	; 255
    2092:	b9 01       	movw	r22, r18
    2094:	0e 94 03 11 	call	0x2206	; 0x2206 <strcmp>
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	49 f4       	brne	.+18     	; 0x20ae <checkPass+0x1b6>

		UART_sendCharacter('t');
    209c:	84 e7       	ldi	r24, 0x74	; 116
    209e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <UART_sendCharacter>
		attempts = 2;
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	80 93 68 00 	sts	0x0068, r24
		return 1;
    20a8:	a1 e0       	ldi	r26, 0x01	; 1
    20aa:	ad 8f       	std	Y+29, r26	; 0x1d
    20ac:	22 c0       	rjmp	.+68     	; 0x20f2 <checkPass+0x1fa>
	}
	else{

		if(attempts == 0){
    20ae:	80 91 68 00 	lds	r24, 0x0068
    20b2:	88 23       	and	r24, r24
    20b4:	a9 f4       	brne	.+42     	; 0x20e0 <checkPass+0x1e8>
			UART_sendCharacter('b');
    20b6:	82 e6       	ldi	r24, 0x62	; 98
    20b8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <UART_sendCharacter>
			Buzzer_on();
    20bc:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <Buzzer_on>
			seconds = 60;
    20c0:	8c e3       	ldi	r24, 0x3C	; 60
    20c2:	80 93 87 00 	sts	0x0087, r24
			while(seconds > 0){};
    20c6:	80 91 87 00 	lds	r24, 0x0087
    20ca:	88 23       	and	r24, r24
    20cc:	e1 f7       	brne	.-8      	; 0x20c6 <checkPass+0x1ce>
			Buzzer_off();
    20ce:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <Buzzer_off>
			UART_sendCharacter('b');
    20d2:	82 e6       	ldi	r24, 0x62	; 98
    20d4:	0e 94 e6 06 	call	0xdcc	; 0xdcc <UART_sendCharacter>
			attempts = 2;
    20d8:	82 e0       	ldi	r24, 0x02	; 2
    20da:	80 93 68 00 	sts	0x0068, r24
    20de:	08 c0       	rjmp	.+16     	; 0x20f0 <checkPass+0x1f8>
		}
		else{
			UART_sendCharacter('f');
    20e0:	86 e6       	ldi	r24, 0x66	; 102
    20e2:	0e 94 e6 06 	call	0xdcc	; 0xdcc <UART_sendCharacter>
			attempts--;
    20e6:	80 91 68 00 	lds	r24, 0x0068
    20ea:	81 50       	subi	r24, 0x01	; 1
    20ec:	80 93 68 00 	sts	0x0068, r24
		}
		return 0;
    20f0:	1d 8e       	std	Y+29, r1	; 0x1d
    20f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
	}
}
    20f4:	a2 96       	adiw	r28, 0x22	; 34
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <__divmodhi4>:
    2106:	97 fb       	bst	r25, 7
    2108:	09 2e       	mov	r0, r25
    210a:	07 26       	eor	r0, r23
    210c:	0a d0       	rcall	.+20     	; 0x2122 <__divmodhi4_neg1>
    210e:	77 fd       	sbrc	r23, 7
    2110:	04 d0       	rcall	.+8      	; 0x211a <__divmodhi4_neg2>
    2112:	2e d0       	rcall	.+92     	; 0x2170 <__udivmodhi4>
    2114:	06 d0       	rcall	.+12     	; 0x2122 <__divmodhi4_neg1>
    2116:	00 20       	and	r0, r0
    2118:	1a f4       	brpl	.+6      	; 0x2120 <__divmodhi4_exit>

0000211a <__divmodhi4_neg2>:
    211a:	70 95       	com	r23
    211c:	61 95       	neg	r22
    211e:	7f 4f       	sbci	r23, 0xFF	; 255

00002120 <__divmodhi4_exit>:
    2120:	08 95       	ret

00002122 <__divmodhi4_neg1>:
    2122:	f6 f7       	brtc	.-4      	; 0x2120 <__divmodhi4_exit>
    2124:	90 95       	com	r25
    2126:	81 95       	neg	r24
    2128:	9f 4f       	sbci	r25, 0xFF	; 255
    212a:	08 95       	ret

0000212c <__udivmodsi4>:
    212c:	a1 e2       	ldi	r26, 0x21	; 33
    212e:	1a 2e       	mov	r1, r26
    2130:	aa 1b       	sub	r26, r26
    2132:	bb 1b       	sub	r27, r27
    2134:	fd 01       	movw	r30, r26
    2136:	0d c0       	rjmp	.+26     	; 0x2152 <__udivmodsi4_ep>

00002138 <__udivmodsi4_loop>:
    2138:	aa 1f       	adc	r26, r26
    213a:	bb 1f       	adc	r27, r27
    213c:	ee 1f       	adc	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	a2 17       	cp	r26, r18
    2142:	b3 07       	cpc	r27, r19
    2144:	e4 07       	cpc	r30, r20
    2146:	f5 07       	cpc	r31, r21
    2148:	20 f0       	brcs	.+8      	; 0x2152 <__udivmodsi4_ep>
    214a:	a2 1b       	sub	r26, r18
    214c:	b3 0b       	sbc	r27, r19
    214e:	e4 0b       	sbc	r30, r20
    2150:	f5 0b       	sbc	r31, r21

00002152 <__udivmodsi4_ep>:
    2152:	66 1f       	adc	r22, r22
    2154:	77 1f       	adc	r23, r23
    2156:	88 1f       	adc	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	1a 94       	dec	r1
    215c:	69 f7       	brne	.-38     	; 0x2138 <__udivmodsi4_loop>
    215e:	60 95       	com	r22
    2160:	70 95       	com	r23
    2162:	80 95       	com	r24
    2164:	90 95       	com	r25
    2166:	9b 01       	movw	r18, r22
    2168:	ac 01       	movw	r20, r24
    216a:	bd 01       	movw	r22, r26
    216c:	cf 01       	movw	r24, r30
    216e:	08 95       	ret

00002170 <__udivmodhi4>:
    2170:	aa 1b       	sub	r26, r26
    2172:	bb 1b       	sub	r27, r27
    2174:	51 e1       	ldi	r21, 0x11	; 17
    2176:	07 c0       	rjmp	.+14     	; 0x2186 <__udivmodhi4_ep>

00002178 <__udivmodhi4_loop>:
    2178:	aa 1f       	adc	r26, r26
    217a:	bb 1f       	adc	r27, r27
    217c:	a6 17       	cp	r26, r22
    217e:	b7 07       	cpc	r27, r23
    2180:	10 f0       	brcs	.+4      	; 0x2186 <__udivmodhi4_ep>
    2182:	a6 1b       	sub	r26, r22
    2184:	b7 0b       	sbc	r27, r23

00002186 <__udivmodhi4_ep>:
    2186:	88 1f       	adc	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	5a 95       	dec	r21
    218c:	a9 f7       	brne	.-22     	; 0x2178 <__udivmodhi4_loop>
    218e:	80 95       	com	r24
    2190:	90 95       	com	r25
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	08 95       	ret

00002198 <__prologue_saves__>:
    2198:	2f 92       	push	r2
    219a:	3f 92       	push	r3
    219c:	4f 92       	push	r4
    219e:	5f 92       	push	r5
    21a0:	6f 92       	push	r6
    21a2:	7f 92       	push	r7
    21a4:	8f 92       	push	r8
    21a6:	9f 92       	push	r9
    21a8:	af 92       	push	r10
    21aa:	bf 92       	push	r11
    21ac:	cf 92       	push	r12
    21ae:	df 92       	push	r13
    21b0:	ef 92       	push	r14
    21b2:	ff 92       	push	r15
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	ca 1b       	sub	r28, r26
    21c2:	db 0b       	sbc	r29, r27
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	09 94       	ijmp

000021d0 <__epilogue_restores__>:
    21d0:	2a 88       	ldd	r2, Y+18	; 0x12
    21d2:	39 88       	ldd	r3, Y+17	; 0x11
    21d4:	48 88       	ldd	r4, Y+16	; 0x10
    21d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    21d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    21da:	7d 84       	ldd	r7, Y+13	; 0x0d
    21dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    21de:	9b 84       	ldd	r9, Y+11	; 0x0b
    21e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    21e2:	b9 84       	ldd	r11, Y+9	; 0x09
    21e4:	c8 84       	ldd	r12, Y+8	; 0x08
    21e6:	df 80       	ldd	r13, Y+7	; 0x07
    21e8:	ee 80       	ldd	r14, Y+6	; 0x06
    21ea:	fd 80       	ldd	r15, Y+5	; 0x05
    21ec:	0c 81       	ldd	r16, Y+4	; 0x04
    21ee:	1b 81       	ldd	r17, Y+3	; 0x03
    21f0:	aa 81       	ldd	r26, Y+2	; 0x02
    21f2:	b9 81       	ldd	r27, Y+1	; 0x01
    21f4:	ce 0f       	add	r28, r30
    21f6:	d1 1d       	adc	r29, r1
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	ed 01       	movw	r28, r26
    2204:	08 95       	ret

00002206 <strcmp>:
    2206:	fb 01       	movw	r30, r22
    2208:	dc 01       	movw	r26, r24
    220a:	8d 91       	ld	r24, X+
    220c:	01 90       	ld	r0, Z+
    220e:	80 19       	sub	r24, r0
    2210:	01 10       	cpse	r0, r1
    2212:	d9 f3       	breq	.-10     	; 0x220a <strcmp+0x4>
    2214:	99 0b       	sbc	r25, r25
    2216:	08 95       	ret

00002218 <_exit>:
    2218:	f8 94       	cli

0000221a <__stop_program>:
    221a:	ff cf       	rjmp	.-2      	; 0x221a <__stop_program>
