
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e2c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001e2c  00001ea0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002358  00000000  00000000  00001eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000013f2  00000000  00000000  0000420c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000055fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000573e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000058ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000074f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000083e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000092f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000957d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009d4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_13>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <main>
      7a:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <__vector_13>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(USART_RXC_vect){
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	8f 93       	push	r24
     b42:	ef 93       	push	r30
     b44:	ff 93       	push	r31
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_uartRcvData = UDR;
     b4e:	ec e2       	ldi	r30, 0x2C	; 44
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	80 93 68 00 	sts	0x0068, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	ff 91       	pop	r31
     b5e:	ef 91       	pop	r30
     b60:	8f 91       	pop	r24
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	0f 90       	pop	r0
     b68:	1f 90       	pop	r1
     b6a:	18 95       	reti

00000b6c <UART_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void UART_init(){
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	00 d0       	rcall	.+0      	; 0xb72 <UART_init+0x6>
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62

	uint16 ubrr_value = 0;
     b76:	1a 82       	std	Y+2, r1	; 0x02
     b78:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRA, U2X);		/* : Double the USART Transmission Speed */
     b7a:	ab e2       	ldi	r26, 0x2B	; 43
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	eb e2       	ldi	r30, 0x2B	; 43
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	82 60       	ori	r24, 0x02	; 2
     b86:	8c 93       	st	X, r24

	SET_BIT(UCSRB, RXCIE);		/* RX Complete Interrupt Enable */
     b88:	aa e2       	ldi	r26, 0x2A	; 42
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ea e2       	ldi	r30, 0x2A	; 42
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	80 68       	ori	r24, 0x80	; 128
     b94:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);		/* Transmitter Enable*/
     b96:	aa e2       	ldi	r26, 0x2A	; 42
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	ea e2       	ldi	r30, 0x2A	; 42
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	88 60       	ori	r24, 0x08	; 8
     ba2:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);		/* Receiver Enable */
     ba4:	aa e2       	ldi	r26, 0x2A	; 42
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e2       	ldi	r30, 0x2A	; 42
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	80 61       	ori	r24, 0x10	; 16
     bb0:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC, UMSEL);	/* USART Mode Select 0 -> async, 1 -> sync*/
     bb2:	a0 e4       	ldi	r26, 0x40	; 64
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e0 e4       	ldi	r30, 0x40	; 64
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	8f 7b       	andi	r24, 0xBF	; 191
     bbe:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);		/* UCSZ1:0: Character Size */
     bc0:	a0 e4       	ldi	r26, 0x40	; 64
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e0 e4       	ldi	r30, 0x40	; 64
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	84 60       	ori	r24, 0x04	; 4
     bcc:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);		/* UCSZ1:0: 11 -> 8-bit */
     bce:	a0 e4       	ldi	r26, 0x40	; 64
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e0 e4       	ldi	r30, 0x40	; 64
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	82 60       	ori	r24, 0x02	; 2
     bda:	8c 93       	st	X, r24


	ubrr_value = (uint16)(( F_CPU / ( BAUDRATE * 8UL )) - 1 );
     bdc:	87 e6       	ldi	r24, 0x67	; 103
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	9a 83       	std	Y+2, r25	; 0x02
     be2:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = (ubrr_value >> 8) & (0x0F);
     be4:	e0 e4       	ldi	r30, 0x40	; 64
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	89 2f       	mov	r24, r25
     bee:	99 27       	eor	r25, r25
     bf0:	8f 70       	andi	r24, 0x0F	; 15
     bf2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     bf4:	e9 e2       	ldi	r30, 0x29	; 41
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	80 83       	st	Z, r24
}
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <UART_sendCharacter>:

void UART_sendCharacter(uint8 data){
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	0f 92       	push	r0
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
     c12:	eb e2       	ldi	r30, 0x2B	; 43
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	88 2f       	mov	r24, r24
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	80 72       	andi	r24, 0x20	; 32
     c1e:	90 70       	andi	r25, 0x00	; 0
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	b9 f3       	breq	.-18     	; 0xc12 <UART_sendCharacter+0xc>
	UDR = data;
     c24:	ec e2       	ldi	r30, 0x2C	; 44
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	80 83       	st	Z, r24
}
     c2c:	0f 90       	pop	r0
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <UART_sendArray>:

void UART_sendArray(uint8 *str, uint8 str_size){
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	00 d0       	rcall	.+0      	; 0xc3a <UART_sendArray+0x6>
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <UART_sendArray+0x8>
     c3c:	0f 92       	push	r0
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	8b 83       	std	Y+3, r24	; 0x03
     c46:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < str_size; i++){
     c48:	1a 82       	std	Y+2, r1	; 0x02
     c4a:	19 82       	std	Y+1, r1	; 0x01
     c4c:	19 c0       	rjmp	.+50     	; 0xc80 <UART_sendArray+0x4c>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
     c4e:	eb e2       	ldi	r30, 0x2B	; 43
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	88 2f       	mov	r24, r24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	80 72       	andi	r24, 0x20	; 32
     c5a:	90 70       	andi	r25, 0x00	; 0
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	b9 f3       	breq	.-18     	; 0xc4e <UART_sendArray+0x1a>
		UDR = str[i];
     c60:	ac e2       	ldi	r26, 0x2C	; 44
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	29 81       	ldd	r18, Y+1	; 0x01
     c66:	3a 81       	ldd	r19, Y+2	; 0x02
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	fc 01       	movw	r30, r24
     c6e:	e2 0f       	add	r30, r18
     c70:	f3 1f       	adc	r31, r19
     c72:	80 81       	ld	r24, Z
     c74:	8c 93       	st	X, r24
	UDR = data;
}

void UART_sendArray(uint8 *str, uint8 str_size){

	for(int i = 0; i < str_size; i++){
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	9a 83       	std	Y+2, r25	; 0x02
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	9a 81       	ldd	r25, Y+2	; 0x02
     c8a:	82 17       	cp	r24, r18
     c8c:	93 07       	cpc	r25, r19
     c8e:	fc f2       	brlt	.-66     	; 0xc4e <UART_sendArray+0x1a>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
		UDR = str[i];
	}

}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <UART_rcvCharacter>:

uint8 UART_rcvCharacter(){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	while( BIT_IS_CLEAR(UCSRA, RXC) ){}
     ca8:	eb e2       	ldi	r30, 0x2B	; 43
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	88 23       	and	r24, r24
     cb0:	dc f7       	brge	.-10     	; 0xca8 <UART_rcvCharacter+0x8>
	return UDR;
     cb2:	ec e2       	ldi	r30, 0x2C	; 44
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <TIMER0_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void TIMER0_init(){
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0, FOC0); /* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
     cc6:	a3 e5       	ldi	r26, 0x53	; 83
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e3 e5       	ldi	r30, 0x53	; 83
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8f 77       	andi	r24, 0x7F	; 127
     cd2:	8c 93       	st	X, r24
	 *  0   |   0  * Normal
	 *  0   |   1  * PWM, phase correct
	 *  1   |   0  * CTC
	 *  1   |   1  * Fast PWM
	 ***************/
}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <TIMER0_start>:
void TIMER0_start(){}
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <TIMER0_stop>:
void TIMER0_stop(){}
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <TIMER0_clear>:
void TIMER0_clear(){}
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <PWM_T0_init>:



void PWM_T0_init(){
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62

	DDRB |= ( 1 << PB3 );
     d0c:	a7 e3       	ldi	r26, 0x37	; 55
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e7 e3       	ldi	r30, 0x37	; 55
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	88 60       	ori	r24, 0x08	; 8
     d18:	8c 93       	st	X, r24
	TCNT0 = 0;
     d1a:	e2 e5       	ldi	r30, 0x52	; 82
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	10 82       	st	Z, r1
	TCCR0 |= ( 1 << WGM00 ) | ( 1 << WGM01 ) | ( 1 << CS01 ); /* F_PWM=(F_CPU)/(256*N) = (8*10^6)/(256*8) = 4kHz*/
     d20:	a3 e5       	ldi	r26, 0x53	; 83
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e3 e5       	ldi	r30, 0x53	; 83
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8a 64       	ori	r24, 0x4A	; 74
     d2c:	8c 93       	st	X, r24
	TCCR0 |= ( 1 << COM01 );
     d2e:	a3 e5       	ldi	r26, 0x53	; 83
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e3 e5       	ldi	r30, 0x53	; 83
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	80 62       	ori	r24, 0x20	; 32
     d3a:	8c 93       	st	X, r24
	OCR0 = 255;
     d3c:	ec e5       	ldi	r30, 0x5C	; 92
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	80 83       	st	Z, r24

}
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <PWM_T0_setDutyCycle>:

void PWM_T0_setDutyCycle(uint8 dutyCycle){
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <PWM_T0_setDutyCycle+0x6>
     d50:	0f 92       	push	r0
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	8b 83       	std	Y+3, r24	; 0x03

	uint16 temp_dutyCycle = (dutyCycle * 255) / 100;
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	48 2f       	mov	r20, r24
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	ca 01       	movw	r24, r20
     d60:	9c 01       	movw	r18, r24
     d62:	22 0f       	add	r18, r18
     d64:	33 1f       	adc	r19, r19
     d66:	c9 01       	movw	r24, r18
     d68:	96 95       	lsr	r25
     d6a:	98 2f       	mov	r25, r24
     d6c:	88 27       	eor	r24, r24
     d6e:	97 95       	ror	r25
     d70:	87 95       	ror	r24
     d72:	82 1b       	sub	r24, r18
     d74:	93 0b       	sbc	r25, r19
     d76:	84 0f       	add	r24, r20
     d78:	95 1f       	adc	r25, r21
     d7a:	24 e6       	ldi	r18, 0x64	; 100
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	b9 01       	movw	r22, r18
     d80:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__divmodhi4>
     d84:	cb 01       	movw	r24, r22
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = temp_dutyCycle;
     d8a:	ec e5       	ldi	r30, 0x5C	; 92
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	80 83       	st	Z, r24
}
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <TWI_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void TWI_init(){
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62

	TWSR = 0x00; /* set Prescaler and clear old status*/
     da6:	e1 e2       	ldi	r30, 0x21	; 33
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	10 82       	st	Z, r1

	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = BITRATE(TWSR); /* set baud rate */
     dac:	e0 e2       	ldi	r30, 0x20	; 32
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	80 83       	st	Z, r24

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
   	   General Call Recognition: Off */
	TWAR = 0b00000010; // my address = 0x01 address from BIT 7..1
     db4:	e2 e2       	ldi	r30, 0x22	; 34
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	80 83       	st	Z, r24

//	TWCR = ( TWEN << 1);

}
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <TWI_start>:
void TWI_start(){
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1 << TWINT) | ( TWSTA << 1) | ( TWEN << 1);
     dca:	e6 e5       	ldi	r30, 0x56	; 86
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	8e e8       	ldi	r24, 0x8E	; 142
     dd0:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR(TWCR, TWINT) ); //wait until TWI finish its process
     dd2:	e6 e5       	ldi	r30, 0x56	; 86
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	88 23       	and	r24, r24
     dda:	dc f7       	brge	.-10     	; 0xdd2 <TWI_start+0x10>
}
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <TWI_stop>:

void TWI_stop(){
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | ( TWSTO << 1) | ( TWEN << 1);
     dea:	e6 e5       	ldi	r30, 0x56	; 86
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	8c e8       	ldi	r24, 0x8C	; 140
     df0:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR(TWCR, TWINT) ); //wait until TWI finish its process
     df2:	e6 e5       	ldi	r30, 0x56	; 86
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	88 23       	and	r24, r24
     dfa:	dc f7       	brge	.-10     	; 0xdf2 <TWI_stop+0x10>

}
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <TWI_writeByte>:
void TWI_writeByte(uint8 data)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	0f 92       	push	r0
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data;
     e0e:	e3 e2       	ldi	r30, 0x23	; 35
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	80 83       	st	Z, r24
    TWCR = (1 << TWINT) | (1 << TWEN);
     e16:	e6 e5       	ldi	r30, 0x56	; 86
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	84 e8       	ldi	r24, 0x84	; 132
     e1c:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e1e:	e6 e5       	ldi	r30, 0x56	; 86
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	88 23       	and	r24, r24
     e26:	dc f7       	brge	.-10     	; 0xe1e <TWI_writeByte+0x1c>
}
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <TWI_readByteWithACK>:
uint8 TWI_readByteWithACK(){
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
   TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     e38:	e6 e5       	ldi	r30, 0x56	; 86
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	84 ec       	ldi	r24, 0xC4	; 196
     e3e:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
     e40:	e6 e5       	ldi	r30, 0x56	; 86
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 23       	and	r24, r24
     e48:	dc f7       	brge	.-10     	; 0xe40 <TWI_readByteWithACK+0x10>
	return TWDR;
     e4a:	e3 e2       	ldi	r30, 0x23	; 35
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
}
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <TWI_readByteWithNACK>:
uint8 TWI_readByteWithNACK(){
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	return 1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <TWI_getStatus>:

uint8 TWI_getStatus(){
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	return ( TWSR & 0xF8 );
     e6e:	e1 e2       	ldi	r30, 0x21	; 33
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	88 7f       	andi	r24, 0xF8	; 248
}
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <GPIO_setupPinDirection>:
 *******************************************************************************/



void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <GPIO_setupPinDirection+0x6>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <GPIO_setupPinDirection+0x8>
     e84:	0f 92       	push	r0
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	6a 83       	std	Y+2, r22	; 0x02
     e8e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	88 30       	cpi	r24, 0x08	; 8
     e94:	08 f0       	brcs	.+2      	; 0xe98 <GPIO_setupPinDirection+0x1c>
     e96:	d5 c0       	rjmp	.+426    	; 0x1042 <GPIO_setupPinDirection+0x1c6>
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	84 30       	cpi	r24, 0x04	; 4
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <GPIO_setupPinDirection+0x24>
     e9e:	d1 c0       	rjmp	.+418    	; 0x1042 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	3d 83       	std	Y+5, r19	; 0x05
     ea8:	2c 83       	std	Y+4, r18	; 0x04
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	91 05       	cpc	r25, r1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <GPIO_setupPinDirection+0x3a>
     eb4:	43 c0       	rjmp	.+134    	; 0xf3c <GPIO_setupPinDirection+0xc0>
     eb6:	2c 81       	ldd	r18, Y+4	; 0x04
     eb8:	3d 81       	ldd	r19, Y+5	; 0x05
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	2c f4       	brge	.+10     	; 0xeca <GPIO_setupPinDirection+0x4e>
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	9d 81       	ldd	r25, Y+5	; 0x05
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	71 f0       	breq	.+28     	; 0xee4 <GPIO_setupPinDirection+0x68>
     ec8:	bc c0       	rjmp	.+376    	; 0x1042 <GPIO_setupPinDirection+0x1c6>
     eca:	2c 81       	ldd	r18, Y+4	; 0x04
     ecc:	3d 81       	ldd	r19, Y+5	; 0x05
     ece:	22 30       	cpi	r18, 0x02	; 2
     ed0:	31 05       	cpc	r19, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <GPIO_setupPinDirection+0x5a>
     ed4:	5f c0       	rjmp	.+190    	; 0xf94 <GPIO_setupPinDirection+0x118>
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	9d 81       	ldd	r25, Y+5	; 0x05
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	91 05       	cpc	r25, r1
     ede:	09 f4       	brne	.+2      	; 0xee2 <GPIO_setupPinDirection+0x66>
     ee0:	85 c0       	rjmp	.+266    	; 0xfec <GPIO_setupPinDirection+0x170>
     ee2:	af c0       	rjmp	.+350    	; 0x1042 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	a1 f4       	brne	.+40     	; 0xf12 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     eea:	aa e3       	ldi	r26, 0x3A	; 58
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea e3       	ldi	r30, 0x3A	; 58
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <GPIO_setupPinDirection+0x8c>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <GPIO_setupPinDirection+0x88>
     f0c:	84 2b       	or	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	98 c0       	rjmp	.+304    	; 0x1042 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f12:	aa e3       	ldi	r26, 0x3A	; 58
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ea e3       	ldi	r30, 0x3A	; 58
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <GPIO_setupPinDirection+0xb4>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <GPIO_setupPinDirection+0xb0>
     f34:	80 95       	com	r24
     f36:	84 23       	and	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	83 c0       	rjmp	.+262    	; 0x1042 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	a1 f4       	brne	.+40     	; 0xf6a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f42:	a7 e3       	ldi	r26, 0x37	; 55
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e7 e3       	ldi	r30, 0x37	; 55
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_setupPinDirection+0xe4>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_setupPinDirection+0xe0>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	6c c0       	rjmp	.+216    	; 0x1042 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f6a:	a7 e3       	ldi	r26, 0x37	; 55
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e7 e3       	ldi	r30, 0x37	; 55
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <GPIO_setupPinDirection+0x10c>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <GPIO_setupPinDirection+0x108>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	57 c0       	rjmp	.+174    	; 0x1042 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	a1 f4       	brne	.+40     	; 0xfc2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f9a:	a4 e3       	ldi	r26, 0x34	; 52
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e4 e3       	ldi	r30, 0x34	; 52
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <GPIO_setupPinDirection+0x13c>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <GPIO_setupPinDirection+0x138>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	40 c0       	rjmp	.+128    	; 0x1042 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     fc2:	a4 e3       	ldi	r26, 0x34	; 52
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e4 e3       	ldi	r30, 0x34	; 52
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <GPIO_setupPinDirection+0x164>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <GPIO_setupPinDirection+0x160>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	2b c0       	rjmp	.+86     	; 0x1042 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	a1 f4       	brne	.+40     	; 0x101a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ff2:	a1 e3       	ldi	r26, 0x31	; 49
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e1 e3       	ldi	r30, 0x31	; 49
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 2e       	mov	r0, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <GPIO_setupPinDirection+0x194>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <GPIO_setupPinDirection+0x190>
    1014:	84 2b       	or	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	14 c0       	rjmp	.+40     	; 0x1042 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    101a:	a1 e3       	ldi	r26, 0x31	; 49
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e1 e3       	ldi	r30, 0x31	; 49
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <GPIO_setupPinDirection+0x1bc>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <GPIO_setupPinDirection+0x1b8>
    103c:	80 95       	com	r24
    103e:	84 23       	and	r24, r20
    1040:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	00 d0       	rcall	.+0      	; 0x1058 <GPIO_writePin+0x6>
    1058:	00 d0       	rcall	.+0      	; 0x105a <GPIO_writePin+0x8>
    105a:	0f 92       	push	r0
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	6a 83       	std	Y+2, r22	; 0x02
    1064:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	88 30       	cpi	r24, 0x08	; 8
    106a:	08 f0       	brcs	.+2      	; 0x106e <GPIO_writePin+0x1c>
    106c:	d5 c0       	rjmp	.+426    	; 0x1218 <GPIO_writePin+0x1c6>
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	84 30       	cpi	r24, 0x04	; 4
    1072:	08 f0       	brcs	.+2      	; 0x1076 <GPIO_writePin+0x24>
    1074:	d1 c0       	rjmp	.+418    	; 0x1218 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3d 83       	std	Y+5, r19	; 0x05
    107e:	2c 83       	std	Y+4, r18	; 0x04
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	9d 81       	ldd	r25, Y+5	; 0x05
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	91 05       	cpc	r25, r1
    1088:	09 f4       	brne	.+2      	; 0x108c <GPIO_writePin+0x3a>
    108a:	43 c0       	rjmp	.+134    	; 0x1112 <GPIO_writePin+0xc0>
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	2c f4       	brge	.+10     	; 0x10a0 <GPIO_writePin+0x4e>
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	9d 81       	ldd	r25, Y+5	; 0x05
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	71 f0       	breq	.+28     	; 0x10ba <GPIO_writePin+0x68>
    109e:	bc c0       	rjmp	.+376    	; 0x1218 <GPIO_writePin+0x1c6>
    10a0:	2c 81       	ldd	r18, Y+4	; 0x04
    10a2:	3d 81       	ldd	r19, Y+5	; 0x05
    10a4:	22 30       	cpi	r18, 0x02	; 2
    10a6:	31 05       	cpc	r19, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <GPIO_writePin+0x5a>
    10aa:	5f c0       	rjmp	.+190    	; 0x116a <GPIO_writePin+0x118>
    10ac:	8c 81       	ldd	r24, Y+4	; 0x04
    10ae:	9d 81       	ldd	r25, Y+5	; 0x05
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	91 05       	cpc	r25, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <GPIO_writePin+0x66>
    10b6:	85 c0       	rjmp	.+266    	; 0x11c2 <GPIO_writePin+0x170>
    10b8:	af c0       	rjmp	.+350    	; 0x1218 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	a1 f4       	brne	.+40     	; 0x10e8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10c0:	ab e3       	ldi	r26, 0x3B	; 59
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	eb e3       	ldi	r30, 0x3B	; 59
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <GPIO_writePin+0x8c>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <GPIO_writePin+0x88>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	98 c0       	rjmp	.+304    	; 0x1218 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    10e8:	ab e3       	ldi	r26, 0x3B	; 59
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	eb e3       	ldi	r30, 0x3B	; 59
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <GPIO_writePin+0xb4>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <GPIO_writePin+0xb0>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	83 c0       	rjmp	.+262    	; 0x1218 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	a1 f4       	brne	.+40     	; 0x1140 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1118:	a8 e3       	ldi	r26, 0x38	; 56
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e8 e3       	ldi	r30, 0x38	; 56
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <GPIO_writePin+0xe4>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <GPIO_writePin+0xe0>
    113a:	84 2b       	or	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	6c c0       	rjmp	.+216    	; 0x1218 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1140:	a8 e3       	ldi	r26, 0x38	; 56
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e8 e3       	ldi	r30, 0x38	; 56
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <GPIO_writePin+0x10c>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <GPIO_writePin+0x108>
    1162:	80 95       	com	r24
    1164:	84 23       	and	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	57 c0       	rjmp	.+174    	; 0x1218 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	a1 f4       	brne	.+40     	; 0x1198 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1170:	a5 e3       	ldi	r26, 0x35	; 53
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e5 e3       	ldi	r30, 0x35	; 53
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <GPIO_writePin+0x13c>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <GPIO_writePin+0x138>
    1192:	84 2b       	or	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	40 c0       	rjmp	.+128    	; 0x1218 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1198:	a5 e3       	ldi	r26, 0x35	; 53
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e5 e3       	ldi	r30, 0x35	; 53
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <GPIO_writePin+0x164>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <GPIO_writePin+0x160>
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	2b c0       	rjmp	.+86     	; 0x1218 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	a1 f4       	brne	.+40     	; 0x11f0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11c8:	a2 e3       	ldi	r26, 0x32	; 50
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e2 e3       	ldi	r30, 0x32	; 50
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <GPIO_writePin+0x194>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <GPIO_writePin+0x190>
    11ea:	84 2b       	or	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	14 c0       	rjmp	.+40     	; 0x1218 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    11f0:	a2 e3       	ldi	r26, 0x32	; 50
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e2 e3       	ldi	r30, 0x32	; 50
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <GPIO_writePin+0x1bc>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <GPIO_writePin+0x1b8>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	00 d0       	rcall	.+0      	; 0x122e <GPIO_readPin+0x6>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <GPIO_readPin+0x8>
    1230:	0f 92       	push	r0
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	8a 83       	std	Y+2, r24	; 0x02
    1238:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    123a:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	88 30       	cpi	r24, 0x08	; 8
    1240:	08 f0       	brcs	.+2      	; 0x1244 <GPIO_readPin+0x1c>
    1242:	84 c0       	rjmp	.+264    	; 0x134c <GPIO_readPin+0x124>
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	84 30       	cpi	r24, 0x04	; 4
    1248:	08 f0       	brcs	.+2      	; 0x124c <GPIO_readPin+0x24>
    124a:	80 c0       	rjmp	.+256    	; 0x134c <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	3d 83       	std	Y+5, r19	; 0x05
    1254:	2c 83       	std	Y+4, r18	; 0x04
    1256:	4c 81       	ldd	r20, Y+4	; 0x04
    1258:	5d 81       	ldd	r21, Y+5	; 0x05
    125a:	41 30       	cpi	r20, 0x01	; 1
    125c:	51 05       	cpc	r21, r1
    125e:	79 f1       	breq	.+94     	; 0x12be <GPIO_readPin+0x96>
    1260:	8c 81       	ldd	r24, Y+4	; 0x04
    1262:	9d 81       	ldd	r25, Y+5	; 0x05
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	91 05       	cpc	r25, r1
    1268:	34 f4       	brge	.+12     	; 0x1276 <GPIO_readPin+0x4e>
    126a:	2c 81       	ldd	r18, Y+4	; 0x04
    126c:	3d 81       	ldd	r19, Y+5	; 0x05
    126e:	21 15       	cp	r18, r1
    1270:	31 05       	cpc	r19, r1
    1272:	69 f0       	breq	.+26     	; 0x128e <GPIO_readPin+0x66>
    1274:	6b c0       	rjmp	.+214    	; 0x134c <GPIO_readPin+0x124>
    1276:	4c 81       	ldd	r20, Y+4	; 0x04
    1278:	5d 81       	ldd	r21, Y+5	; 0x05
    127a:	42 30       	cpi	r20, 0x02	; 2
    127c:	51 05       	cpc	r21, r1
    127e:	b9 f1       	breq	.+110    	; 0x12ee <GPIO_readPin+0xc6>
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	9d 81       	ldd	r25, Y+5	; 0x05
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	91 05       	cpc	r25, r1
    1288:	09 f4       	brne	.+2      	; 0x128c <GPIO_readPin+0x64>
    128a:	49 c0       	rjmp	.+146    	; 0x131e <GPIO_readPin+0xf6>
    128c:	5f c0       	rjmp	.+190    	; 0x134c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    128e:	e9 e3       	ldi	r30, 0x39	; 57
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a9 01       	movw	r20, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <GPIO_readPin+0x7e>
    12a2:	55 95       	asr	r21
    12a4:	47 95       	ror	r20
    12a6:	8a 95       	dec	r24
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <GPIO_readPin+0x7a>
    12aa:	ca 01       	movw	r24, r20
    12ac:	81 70       	andi	r24, 0x01	; 1
    12ae:	90 70       	andi	r25, 0x00	; 0
    12b0:	88 23       	and	r24, r24
    12b2:	19 f0       	breq	.+6      	; 0x12ba <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	49 c0       	rjmp	.+146    	; 0x134c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12ba:	19 82       	std	Y+1, r1	; 0x01
    12bc:	47 c0       	rjmp	.+142    	; 0x134c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12be:	e6 e3       	ldi	r30, 0x36	; 54
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	88 2f       	mov	r24, r24
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	a9 01       	movw	r20, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <GPIO_readPin+0xae>
    12d2:	55 95       	asr	r21
    12d4:	47 95       	ror	r20
    12d6:	8a 95       	dec	r24
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <GPIO_readPin+0xaa>
    12da:	ca 01       	movw	r24, r20
    12dc:	81 70       	andi	r24, 0x01	; 1
    12de:	90 70       	andi	r25, 0x00	; 0
    12e0:	88 23       	and	r24, r24
    12e2:	19 f0       	breq	.+6      	; 0x12ea <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	31 c0       	rjmp	.+98     	; 0x134c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12ea:	19 82       	std	Y+1, r1	; 0x01
    12ec:	2f c0       	rjmp	.+94     	; 0x134c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    12ee:	e3 e3       	ldi	r30, 0x33	; 51
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <GPIO_readPin+0xde>
    1302:	55 95       	asr	r21
    1304:	47 95       	ror	r20
    1306:	8a 95       	dec	r24
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <GPIO_readPin+0xda>
    130a:	ca 01       	movw	r24, r20
    130c:	81 70       	andi	r24, 0x01	; 1
    130e:	90 70       	andi	r25, 0x00	; 0
    1310:	88 23       	and	r24, r24
    1312:	19 f0       	breq	.+6      	; 0x131a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	19 c0       	rjmp	.+50     	; 0x134c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    131a:	19 82       	std	Y+1, r1	; 0x01
    131c:	17 c0       	rjmp	.+46     	; 0x134c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    131e:	e0 e3       	ldi	r30, 0x30	; 48
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	a9 01       	movw	r20, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <GPIO_readPin+0x10e>
    1332:	55 95       	asr	r21
    1334:	47 95       	ror	r20
    1336:	8a 95       	dec	r24
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <GPIO_readPin+0x10a>
    133a:	ca 01       	movw	r24, r20
    133c:	81 70       	andi	r24, 0x01	; 1
    133e:	90 70       	andi	r25, 0x00	; 0
    1340:	88 23       	and	r24, r24
    1342:	19 f0       	breq	.+6      	; 0x134a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	01 c0       	rjmp	.+2      	; 0x134c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    134a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    134c:	89 81       	ldd	r24, Y+1	; 0x01
}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <GPIO_togglePin>:
void GPIO_togglePin(uint8 port_num, uint8 pin_num){
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	00 d0       	rcall	.+0      	; 0x1364 <GPIO_togglePin+0x6>
    1364:	00 d0       	rcall	.+0      	; 0x1366 <GPIO_togglePin+0x8>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	6a 83       	std	Y+2, r22	; 0x02


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	88 30       	cpi	r24, 0x08	; 8
    1372:	08 f0       	brcs	.+2      	; 0x1376 <GPIO_togglePin+0x18>
    1374:	72 c0       	rjmp	.+228    	; 0x145a <GPIO_togglePin+0xfc>
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	84 30       	cpi	r24, 0x04	; 4
    137a:	08 f0       	brcs	.+2      	; 0x137e <GPIO_togglePin+0x20>
    137c:	6e c0       	rjmp	.+220    	; 0x145a <GPIO_togglePin+0xfc>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	3c 83       	std	Y+4, r19	; 0x04
    1386:	2b 83       	std	Y+3, r18	; 0x03
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	49 f1       	breq	.+82     	; 0x13e4 <GPIO_togglePin+0x86>
    1392:	2b 81       	ldd	r18, Y+3	; 0x03
    1394:	3c 81       	ldd	r19, Y+4	; 0x04
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	31 05       	cpc	r19, r1
    139a:	2c f4       	brge	.+10     	; 0x13a6 <GPIO_togglePin+0x48>
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	61 f0       	breq	.+24     	; 0x13bc <GPIO_togglePin+0x5e>
    13a4:	5a c0       	rjmp	.+180    	; 0x145a <GPIO_togglePin+0xfc>
    13a6:	2b 81       	ldd	r18, Y+3	; 0x03
    13a8:	3c 81       	ldd	r19, Y+4	; 0x04
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	71 f1       	breq	.+92     	; 0x140c <GPIO_togglePin+0xae>
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	91 05       	cpc	r25, r1
    13b8:	e9 f1       	breq	.+122    	; 0x1434 <GPIO_togglePin+0xd6>
    13ba:	4f c0       	rjmp	.+158    	; 0x145a <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA, pin_num);
    13bc:	ab e3       	ldi	r26, 0x3B	; 59
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	eb e3       	ldi	r30, 0x3B	; 59
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <GPIO_togglePin+0x7c>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <GPIO_togglePin+0x78>
    13de:	84 27       	eor	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	3b c0       	rjmp	.+118    	; 0x145a <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB, pin_num);
    13e4:	a8 e3       	ldi	r26, 0x38	; 56
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e8 e3       	ldi	r30, 0x38	; 56
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <GPIO_togglePin+0xa4>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <GPIO_togglePin+0xa0>
    1406:	84 27       	eor	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	27 c0       	rjmp	.+78     	; 0x145a <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC, pin_num);
    140c:	a5 e3       	ldi	r26, 0x35	; 53
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e5 e3       	ldi	r30, 0x35	; 53
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_togglePin+0xcc>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_togglePin+0xc8>
    142e:	84 27       	eor	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	13 c0       	rjmp	.+38     	; 0x145a <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD, pin_num);
    1434:	a2 e3       	ldi	r26, 0x32	; 50
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e2 e3       	ldi	r30, 0x32	; 50
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <GPIO_togglePin+0xf4>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <GPIO_togglePin+0xf0>
    1456:	84 27       	eor	r24, r20
    1458:	8c 93       	st	X, r24
			break;
		}
	}
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <GPIO_setupPortDirection+0x6>
    146e:	00 d0       	rcall	.+0      	; 0x1470 <GPIO_setupPortDirection+0x8>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	84 30       	cpi	r24, 0x04	; 4
    147c:	90 f5       	brcc	.+100    	; 0x14e2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	3c 83       	std	Y+4, r19	; 0x04
    1486:	2b 83       	std	Y+3, r18	; 0x03
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	91 05       	cpc	r25, r1
    1490:	d1 f0       	breq	.+52     	; 0x14c6 <GPIO_setupPortDirection+0x5e>
    1492:	2b 81       	ldd	r18, Y+3	; 0x03
    1494:	3c 81       	ldd	r19, Y+4	; 0x04
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	2c f4       	brge	.+10     	; 0x14a6 <GPIO_setupPortDirection+0x3e>
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	61 f0       	breq	.+24     	; 0x14bc <GPIO_setupPortDirection+0x54>
    14a4:	1e c0       	rjmp	.+60     	; 0x14e2 <GPIO_setupPortDirection+0x7a>
    14a6:	2b 81       	ldd	r18, Y+3	; 0x03
    14a8:	3c 81       	ldd	r19, Y+4	; 0x04
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	81 f0       	breq	.+32     	; 0x14d0 <GPIO_setupPortDirection+0x68>
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	91 05       	cpc	r25, r1
    14b8:	81 f0       	breq	.+32     	; 0x14da <GPIO_setupPortDirection+0x72>
    14ba:	13 c0       	rjmp	.+38     	; 0x14e2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14bc:	ea e3       	ldi	r30, 0x3A	; 58
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	80 83       	st	Z, r24
    14c4:	0e c0       	rjmp	.+28     	; 0x14e2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14c6:	e7 e3       	ldi	r30, 0x37	; 55
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	80 83       	st	Z, r24
    14ce:	09 c0       	rjmp	.+18     	; 0x14e2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14d0:	e4 e3       	ldi	r30, 0x34	; 52
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	80 83       	st	Z, r24
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    14da:	e1 e3       	ldi	r30, 0x31	; 49
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	80 83       	st	Z, r24
			break;
		}
	}
}
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value){
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <GPIO_writePort+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <GPIO_writePort+0x8>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	84 30       	cpi	r24, 0x04	; 4
    1504:	90 f5       	brcc	.+100    	; 0x156a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3c 83       	std	Y+4, r19	; 0x04
    150e:	2b 83       	std	Y+3, r18	; 0x03
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	d1 f0       	breq	.+52     	; 0x154e <GPIO_writePort+0x5e>
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	2c f4       	brge	.+10     	; 0x152e <GPIO_writePort+0x3e>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	61 f0       	breq	.+24     	; 0x1544 <GPIO_writePort+0x54>
    152c:	1e c0       	rjmp	.+60     	; 0x156a <GPIO_writePort+0x7a>
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	81 f0       	breq	.+32     	; 0x1558 <GPIO_writePort+0x68>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	81 f0       	breq	.+32     	; 0x1562 <GPIO_writePort+0x72>
    1542:	13 c0       	rjmp	.+38     	; 0x156a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1544:	eb e3       	ldi	r30, 0x3B	; 59
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	80 83       	st	Z, r24
    154c:	0e c0       	rjmp	.+28     	; 0x156a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    154e:	e8 e3       	ldi	r30, 0x38	; 56
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	80 83       	st	Z, r24
    1556:	09 c0       	rjmp	.+18     	; 0x156a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1558:	e5 e3       	ldi	r30, 0x35	; 53
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	80 83       	st	Z, r24
    1560:	04 c0       	rjmp	.+8      	; 0x156a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1562:	e2 e3       	ldi	r30, 0x32	; 50
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	80 83       	st	Z, r24
			break;
		}
	}
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num){
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	00 d0       	rcall	.+0      	; 0x157e <GPIO_readPort+0x6>
    157e:	00 d0       	rcall	.+0      	; 0x1580 <GPIO_readPort+0x8>
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
    1586:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	84 30       	cpi	r24, 0x04	; 4
    158c:	90 f5       	brcc	.+100    	; 0x15f2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	3c 83       	std	Y+4, r19	; 0x04
    1596:	2b 83       	std	Y+3, r18	; 0x03
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 05       	cpc	r25, r1
    15a0:	d1 f0       	breq	.+52     	; 0x15d6 <GPIO_readPort+0x5e>
    15a2:	2b 81       	ldd	r18, Y+3	; 0x03
    15a4:	3c 81       	ldd	r19, Y+4	; 0x04
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <GPIO_readPort+0x3e>
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	61 f0       	breq	.+24     	; 0x15cc <GPIO_readPort+0x54>
    15b4:	1e c0       	rjmp	.+60     	; 0x15f2 <GPIO_readPort+0x7a>
    15b6:	2b 81       	ldd	r18, Y+3	; 0x03
    15b8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	81 f0       	breq	.+32     	; 0x15e0 <GPIO_readPort+0x68>
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	83 30       	cpi	r24, 0x03	; 3
    15c6:	91 05       	cpc	r25, r1
    15c8:	81 f0       	breq	.+32     	; 0x15ea <GPIO_readPort+0x72>
    15ca:	13 c0       	rjmp	.+38     	; 0x15f2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    15cc:	e9 e3       	ldi	r30, 0x39	; 57
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	0e c0       	rjmp	.+28     	; 0x15f2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    15d6:	e6 e3       	ldi	r30, 0x36	; 54
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	09 c0       	rjmp	.+18     	; 0x15f2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    15e0:	e3 e3       	ldi	r30, 0x33	; 51
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	04 c0       	rjmp	.+8      	; 0x15f2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    15ea:	e0 e3       	ldi	r30, 0x30	; 48
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <DcMotor_init>:
#include "../../MCAL/timer0/timer0.h"


//DcMotor_configType config_pwm = {EN_TIMER0_ID, PWM_MAX};

void DcMotor_init(ST_dcMotor_configType *dcMotor){
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <DcMotor_init+0x6>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(dcMotor->port1_id, dcMotor->pin1_id, PIN_OUTPUT);
    1610:	e9 81       	ldd	r30, Y+1	; 0x01
    1612:	fa 81       	ldd	r31, Y+2	; 0x02
    1614:	80 81       	ld	r24, Z
    1616:	e9 81       	ldd	r30, Y+1	; 0x01
    1618:	fa 81       	ldd	r31, Y+2	; 0x02
    161a:	92 81       	ldd	r25, Z+2	; 0x02
    161c:	69 2f       	mov	r22, r25
    161e:	41 e0       	ldi	r20, 0x01	; 1
    1620:	0e 94 3e 07 	call	0xe7c	; 0xe7c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(dcMotor->port2_id, dcMotor->pin2_id, PIN_OUTPUT);
    1624:	e9 81       	ldd	r30, Y+1	; 0x01
    1626:	fa 81       	ldd	r31, Y+2	; 0x02
    1628:	81 81       	ldd	r24, Z+1	; 0x01
    162a:	e9 81       	ldd	r30, Y+1	; 0x01
    162c:	fa 81       	ldd	r31, Y+2	; 0x02
    162e:	93 81       	ldd	r25, Z+3	; 0x03
    1630:	69 2f       	mov	r22, r25
    1632:	41 e0       	ldi	r20, 0x01	; 1
    1634:	0e 94 3e 07 	call	0xe7c	; 0xe7c <GPIO_setupPinDirection>

	PWM_T0_init();
    1638:	0e 94 82 06 	call	0xd04	; 0xd04 <PWM_T0_init>

}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <DcMotor_rotate>:
void DcMotor_rotate(ST_dcMotor_configType *dcMotor, EN_dcMotor_state state, uint8 speed){
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <DcMotor_rotate+0x6>
    164c:	00 d0       	rcall	.+0      	; 0x164e <DcMotor_rotate+0x8>
    164e:	00 d0       	rcall	.+0      	; 0x1650 <DcMotor_rotate+0xa>
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	6b 83       	std	Y+3, r22	; 0x03
    165a:	4c 83       	std	Y+4, r20	; 0x04

	PWM_T0_setDutyCycle(speed);
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <PWM_T0_setDutyCycle>

	switch(state){
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	3e 83       	std	Y+6, r19	; 0x06
    166a:	2d 83       	std	Y+5, r18	; 0x05
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	91 05       	cpc	r25, r1
    1674:	31 f0       	breq	.+12     	; 0x1682 <DcMotor_rotate+0x3c>
    1676:	2d 81       	ldd	r18, Y+5	; 0x05
    1678:	3e 81       	ldd	r19, Y+6	; 0x06
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	31 05       	cpc	r19, r1
    167e:	b1 f0       	breq	.+44     	; 0x16ac <DcMotor_rotate+0x66>
    1680:	29 c0       	rjmp	.+82     	; 0x16d4 <DcMotor_rotate+0x8e>
		case EN_DC_CW:
			GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_HIGH);
    1682:	e9 81       	ldd	r30, Y+1	; 0x01
    1684:	fa 81       	ldd	r31, Y+2	; 0x02
    1686:	80 81       	ld	r24, Z
    1688:	e9 81       	ldd	r30, Y+1	; 0x01
    168a:	fa 81       	ldd	r31, Y+2	; 0x02
    168c:	92 81       	ldd	r25, Z+2	; 0x02
    168e:	69 2f       	mov	r22, r25
    1690:	41 e0       	ldi	r20, 0x01	; 1
    1692:	0e 94 29 08 	call	0x1052	; 0x1052 <GPIO_writePin>
			GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_LOW);
    1696:	e9 81       	ldd	r30, Y+1	; 0x01
    1698:	fa 81       	ldd	r31, Y+2	; 0x02
    169a:	81 81       	ldd	r24, Z+1	; 0x01
    169c:	e9 81       	ldd	r30, Y+1	; 0x01
    169e:	fa 81       	ldd	r31, Y+2	; 0x02
    16a0:	93 81       	ldd	r25, Z+3	; 0x03
    16a2:	69 2f       	mov	r22, r25
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	0e 94 29 08 	call	0x1052	; 0x1052 <GPIO_writePin>
    16aa:	14 c0       	rjmp	.+40     	; 0x16d4 <DcMotor_rotate+0x8e>

			break;

		case EN_DC_A_CW:
			GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_LOW);
    16ac:	e9 81       	ldd	r30, Y+1	; 0x01
    16ae:	fa 81       	ldd	r31, Y+2	; 0x02
    16b0:	80 81       	ld	r24, Z
    16b2:	e9 81       	ldd	r30, Y+1	; 0x01
    16b4:	fa 81       	ldd	r31, Y+2	; 0x02
    16b6:	92 81       	ldd	r25, Z+2	; 0x02
    16b8:	69 2f       	mov	r22, r25
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	0e 94 29 08 	call	0x1052	; 0x1052 <GPIO_writePin>
			GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_HIGH);
    16c0:	e9 81       	ldd	r30, Y+1	; 0x01
    16c2:	fa 81       	ldd	r31, Y+2	; 0x02
    16c4:	81 81       	ldd	r24, Z+1	; 0x01
    16c6:	e9 81       	ldd	r30, Y+1	; 0x01
    16c8:	fa 81       	ldd	r31, Y+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	69 2f       	mov	r22, r25
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 29 08 	call	0x1052	; 0x1052 <GPIO_writePin>

			break;
	}
}
    16d4:	26 96       	adiw	r28, 0x06	; 6
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <DcMotor_stop>:

void DcMotor_stop(ST_dcMotor_configType *dcMotor){
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <DcMotor_stop+0x6>
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_LOW);
    16f4:	e9 81       	ldd	r30, Y+1	; 0x01
    16f6:	fa 81       	ldd	r31, Y+2	; 0x02
    16f8:	80 81       	ld	r24, Z
    16fa:	e9 81       	ldd	r30, Y+1	; 0x01
    16fc:	fa 81       	ldd	r31, Y+2	; 0x02
    16fe:	92 81       	ldd	r25, Z+2	; 0x02
    1700:	69 2f       	mov	r22, r25
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	0e 94 29 08 	call	0x1052	; 0x1052 <GPIO_writePin>
	GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_LOW);
    1708:	e9 81       	ldd	r30, Y+1	; 0x01
    170a:	fa 81       	ldd	r31, Y+2	; 0x02
    170c:	81 81       	ldd	r24, Z+1	; 0x01
    170e:	e9 81       	ldd	r30, Y+1	; 0x01
    1710:	fa 81       	ldd	r31, Y+2	; 0x02
    1712:	93 81       	ldd	r25, Z+3	; 0x03
    1714:	69 2f       	mov	r22, r25
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	0e 94 29 08 	call	0x1052	; 0x1052 <GPIO_writePin>
}
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <Buzzer_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Buzzer_init(){
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(buzzer_port, buzzer_pin, PIN_OUTPUT);
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	41 e0       	ldi	r20, 0x01	; 1
    1734:	0e 94 3e 07 	call	0xe7c	; 0xe7c <GPIO_setupPinDirection>
}
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <Buzzer_on>:
void Buzzer_on(void){
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(buzzer_port, buzzer_pin, LOGIC_HIGH);
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	0e 94 29 08 	call	0x1052	; 0x1052 <GPIO_writePin>
}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <Buzzer_off>:
void Buzzer_off(void){
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(buzzer_port, buzzer_pin, LOGIC_LOW);
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	0e 94 29 08 	call	0x1052	; 0x1052 <GPIO_writePin>
}
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <setup>:

static uint8 attempts = 2;

ST_dcMotor_configType dcMotor = { PORTB_ID, PORTB_ID, PIN4_ID, PIN5_ID };

void setup(){
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
	UART_init();
    1776:	0e 94 b6 05 	call	0xb6c	; 0xb6c <UART_init>
	Buzzer_init();
    177a:	0e 94 93 0b 	call	0x1726	; 0x1726 <Buzzer_init>
	DcMotor_init(&dcMotor);
    177e:	8a e6       	ldi	r24, 0x6A	; 106
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	0e 94 01 0b 	call	0x1602	; 0x1602 <DcMotor_init>
	TWI_init();
    1786:	0e 94 cf 06 	call	0xd9e	; 0xd9e <TWI_init>

}
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <rcvPassword>:

void rcvPassword(uint8* str){
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <rcvPassword+0xa>
    179a:	0f 92       	push	r0
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	9b 83       	std	Y+3, r25	; 0x03
    17a2:	8a 83       	std	Y+2, r24	; 0x02

	uint8 index = 0;
    17a4:	19 82       	std	Y+1, r1	; 0x01
    17a6:	23 c0       	rjmp	.+70     	; 0x17ee <rcvPassword+0x5e>

	while(index < PASSWORD_SIZE){
		str[index] = UART_rcvCharacter();
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	9b 81       	ldd	r25, Y+3	; 0x03
    17b2:	8c 01       	movw	r16, r24
    17b4:	02 0f       	add	r16, r18
    17b6:	13 1f       	adc	r17, r19
    17b8:	0e 94 50 06 	call	0xca0	; 0xca0 <UART_rcvCharacter>
    17bc:	f8 01       	movw	r30, r16
    17be:	80 83       	st	Z, r24
		if( str[index] == '=')
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ca:	fc 01       	movw	r30, r24
    17cc:	e2 0f       	add	r30, r18
    17ce:	f3 1f       	adc	r31, r19
    17d0:	80 81       	ld	r24, Z
    17d2:	8d 33       	cpi	r24, 0x3D	; 61
    17d4:	49 f4       	brne	.+18     	; 0x17e8 <rcvPassword+0x58>
		{
			str[index] = '\0';
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	9b 81       	ldd	r25, Y+3	; 0x03
    17e0:	fc 01       	movw	r30, r24
    17e2:	e2 0f       	add	r30, r18
    17e4:	f3 1f       	adc	r31, r19
    17e6:	10 82       	st	Z, r1
		}
		index++;
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	8f 5f       	subi	r24, 0xFF	; 255
    17ec:	89 83       	std	Y+1, r24	; 0x01

void rcvPassword(uint8* str){

	uint8 index = 0;

	while(index < PASSWORD_SIZE){
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	86 30       	cpi	r24, 0x06	; 6
    17f2:	d0 f2       	brcs	.-76     	; 0x17a8 <rcvPassword+0x18>
			str[index] = '\0';
		}
		index++;
	}

}
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	08 95       	ret

00001804 <changePass>:

void changePass(){
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	2c 97       	sbiw	r28, 0x0c	; 12
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61

	uint8 password[6];
	uint8 rePassword[6];
	rcvPassword(password);
    1818:	ce 01       	movw	r24, r28
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	0e 94 c8 0b 	call	0x1790	; 0x1790 <rcvPassword>
	rcvPassword(rePassword);
    1820:	ce 01       	movw	r24, r28
    1822:	07 96       	adiw	r24, 0x07	; 7
    1824:	0e 94 c8 0b 	call	0x1790	; 0x1790 <rcvPassword>


	if(strcmp(password, rePassword) == 0)
    1828:	9e 01       	movw	r18, r28
    182a:	29 5f       	subi	r18, 0xF9	; 249
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	ce 01       	movw	r24, r28
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	b9 01       	movw	r22, r18
    1834:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <strcmp>
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	21 f4       	brne	.+8      	; 0x1844 <changePass+0x40>
		UART_sendCharacter('t');
    183c:	84 e7       	ldi	r24, 0x74	; 116
    183e:	0e 94 03 06 	call	0xc06	; 0xc06 <UART_sendCharacter>
    1842:	03 c0       	rjmp	.+6      	; 0x184a <changePass+0x46>
	else
		UART_sendCharacter('f');
    1844:	86 e6       	ldi	r24, 0x66	; 102
    1846:	0e 94 03 06 	call	0xc06	; 0xc06 <UART_sendCharacter>
}
    184a:	2c 96       	adiw	r28, 0x0c	; 12
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <checkPass>:

uint8 checkPass(){
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	a0 97       	sbiw	r28, 0x20	; 32
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
	uint8 default_pass[6] = {'1', '2', '3', '4', '5', '\0'};
    1870:	ce 01       	movw	r24, r28
    1872:	0f 96       	adiw	r24, 0x0f	; 15
    1874:	9d 8f       	std	Y+29, r25	; 0x1d
    1876:	8c 8f       	std	Y+28, r24	; 0x1c
    1878:	ee e6       	ldi	r30, 0x6E	; 110
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	ff 8f       	std	Y+31, r31	; 0x1f
    187e:	ee 8f       	std	Y+30, r30	; 0x1e
    1880:	f6 e0       	ldi	r31, 0x06	; 6
    1882:	f8 a3       	std	Y+32, r31	; 0x20
    1884:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1886:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1888:	00 80       	ld	r0, Z
    188a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    188c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	9f 8f       	std	Y+31, r25	; 0x1f
    1892:	8e 8f       	std	Y+30, r24	; 0x1e
    1894:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1896:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1898:	00 82       	st	Z, r0
    189a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    189c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	9d 8f       	std	Y+29, r25	; 0x1d
    18a2:	8c 8f       	std	Y+28, r24	; 0x1c
    18a4:	98 a1       	ldd	r25, Y+32	; 0x20
    18a6:	91 50       	subi	r25, 0x01	; 1
    18a8:	98 a3       	std	Y+32, r25	; 0x20
    18aa:	e8 a1       	ldd	r30, Y+32	; 0x20
    18ac:	ee 23       	and	r30, r30
    18ae:	51 f7       	brne	.-44     	; 0x1884 <checkPass+0x28>
	uint8 password[6];
	rcvPassword(password);
    18b0:	ce 01       	movw	r24, r28
    18b2:	45 96       	adiw	r24, 0x15	; 21
    18b4:	0e 94 c8 0b 	call	0x1790	; 0x1790 <rcvPassword>

	if(strcmp(password, default_pass) == 0){
    18b8:	ce 01       	movw	r24, r28
    18ba:	45 96       	adiw	r24, 0x15	; 21
    18bc:	9e 01       	movw	r18, r28
    18be:	21 5f       	subi	r18, 0xF1	; 241
    18c0:	3f 4f       	sbci	r19, 0xFF	; 255
    18c2:	b9 01       	movw	r22, r18
    18c4:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <strcmp>
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	49 f4       	brne	.+18     	; 0x18de <checkPass+0x82>
		UART_sendCharacter('t');
    18cc:	84 e7       	ldi	r24, 0x74	; 116
    18ce:	0e 94 03 06 	call	0xc06	; 0xc06 <UART_sendCharacter>
		attempts = 2;
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	80 93 69 00 	sts	0x0069, r24
		return 1;
    18d8:	f1 e0       	ldi	r31, 0x01	; 1
    18da:	fb 8f       	std	Y+27, r31	; 0x1b
    18dc:	8e c0       	rjmp	.+284    	; 0x19fa <checkPass+0x19e>
	}
	else{
		if(attempts == 0){
    18de:	80 91 69 00 	lds	r24, 0x0069
    18e2:	88 23       	and	r24, r24
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <checkPass+0x8c>
    18e6:	80 c0       	rjmp	.+256    	; 0x19e8 <checkPass+0x18c>
			UART_sendCharacter('b');
    18e8:	82 e6       	ldi	r24, 0x62	; 98
    18ea:	0e 94 03 06 	call	0xc06	; 0xc06 <UART_sendCharacter>
			Buzzer_on();
    18ee:	0e 94 9f 0b 	call	0x173e	; 0x173e <Buzzer_on>
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e4       	ldi	r25, 0x40	; 64
    18f6:	ac e9       	ldi	r26, 0x9C	; 156
    18f8:	b5 e4       	ldi	r27, 0x45	; 69
    18fa:	8b 87       	std	Y+11, r24	; 0x0b
    18fc:	9c 87       	std	Y+12, r25	; 0x0c
    18fe:	ad 87       	std	Y+13, r26	; 0x0d
    1900:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1902:	6b 85       	ldd	r22, Y+11	; 0x0b
    1904:	7c 85       	ldd	r23, Y+12	; 0x0c
    1906:	8d 85       	ldd	r24, Y+13	; 0x0d
    1908:	9e 85       	ldd	r25, Y+14	; 0x0e
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	4a ef       	ldi	r20, 0xFA	; 250
    1910:	54 e4       	ldi	r21, 0x44	; 68
    1912:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	8f 83       	std	Y+7, r24	; 0x07
    191c:	98 87       	std	Y+8, r25	; 0x08
    191e:	a9 87       	std	Y+9, r26	; 0x09
    1920:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1922:	6f 81       	ldd	r22, Y+7	; 0x07
    1924:	78 85       	ldd	r23, Y+8	; 0x08
    1926:	89 85       	ldd	r24, Y+9	; 0x09
    1928:	9a 85       	ldd	r25, Y+10	; 0x0a
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e8       	ldi	r20, 0x80	; 128
    1930:	5f e3       	ldi	r21, 0x3F	; 63
    1932:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1936:	88 23       	and	r24, r24
    1938:	2c f4       	brge	.+10     	; 0x1944 <checkPass+0xe8>
		__ticks = 1;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	9e 83       	std	Y+6, r25	; 0x06
    1940:	8d 83       	std	Y+5, r24	; 0x05
    1942:	3f c0       	rjmp	.+126    	; 0x19c2 <checkPass+0x166>
	else if (__tmp > 65535)
    1944:	6f 81       	ldd	r22, Y+7	; 0x07
    1946:	78 85       	ldd	r23, Y+8	; 0x08
    1948:	89 85       	ldd	r24, Y+9	; 0x09
    194a:	9a 85       	ldd	r25, Y+10	; 0x0a
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	3f ef       	ldi	r19, 0xFF	; 255
    1950:	4f e7       	ldi	r20, 0x7F	; 127
    1952:	57 e4       	ldi	r21, 0x47	; 71
    1954:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1958:	18 16       	cp	r1, r24
    195a:	4c f5       	brge	.+82     	; 0x19ae <checkPass+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195c:	6b 85       	ldd	r22, Y+11	; 0x0b
    195e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1960:	8d 85       	ldd	r24, Y+13	; 0x0d
    1962:	9e 85       	ldd	r25, Y+14	; 0x0e
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e2       	ldi	r20, 0x20	; 32
    196a:	51 e4       	ldi	r21, 0x41	; 65
    196c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	bc 01       	movw	r22, r24
    1976:	cd 01       	movw	r24, r26
    1978:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	9e 83       	std	Y+6, r25	; 0x06
    1982:	8d 83       	std	Y+5, r24	; 0x05
    1984:	0f c0       	rjmp	.+30     	; 0x19a4 <checkPass+0x148>
    1986:	88 ec       	ldi	r24, 0xC8	; 200
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9c 83       	std	Y+4, r25	; 0x04
    198c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <checkPass+0x136>
    1996:	9c 83       	std	Y+4, r25	; 0x04
    1998:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	9e 81       	ldd	r25, Y+6	; 0x06
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	9e 81       	ldd	r25, Y+6	; 0x06
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	69 f7       	brne	.-38     	; 0x1986 <checkPass+0x12a>
    19ac:	14 c0       	rjmp	.+40     	; 0x19d6 <checkPass+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ae:	6f 81       	ldd	r22, Y+7	; 0x07
    19b0:	78 85       	ldd	r23, Y+8	; 0x08
    19b2:	89 85       	ldd	r24, Y+9	; 0x09
    19b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	9e 83       	std	Y+6, r25	; 0x06
    19c0:	8d 83       	std	Y+5, r24	; 0x05
    19c2:	8d 81       	ldd	r24, Y+5	; 0x05
    19c4:	9e 81       	ldd	r25, Y+6	; 0x06
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	9a 81       	ldd	r25, Y+2	; 0x02
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <checkPass+0x172>
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
			//TODO delay 1 min
			_delay_ms(5000);
			Buzzer_off();
    19d6:	0e 94 ab 0b 	call	0x1756	; 0x1756 <Buzzer_off>
			UART_sendCharacter('b');
    19da:	82 e6       	ldi	r24, 0x62	; 98
    19dc:	0e 94 03 06 	call	0xc06	; 0xc06 <UART_sendCharacter>
			attempts = 2;
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	80 93 69 00 	sts	0x0069, r24
    19e6:	08 c0       	rjmp	.+16     	; 0x19f8 <checkPass+0x19c>
		}
		else{
			UART_sendCharacter('f');
    19e8:	86 e6       	ldi	r24, 0x66	; 102
    19ea:	0e 94 03 06 	call	0xc06	; 0xc06 <UART_sendCharacter>
			attempts--;
    19ee:	80 91 69 00 	lds	r24, 0x0069
    19f2:	81 50       	subi	r24, 0x01	; 1
    19f4:	80 93 69 00 	sts	0x0069, r24
		}

		return 0;
    19f8:	1b 8e       	std	Y+27, r1	; 0x1b
    19fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
	}
}
    19fc:	a0 96       	adiw	r28, 0x20	; 32
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <main>:

void main(void){
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	ac 97       	sbiw	r28, 0x2c	; 44
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
//	TWI_start();
//
//	TWI_writeByte(0x10);
//	TWI_stop();

	uint8 response = 0;
    1a22:	1c a6       	std	Y+44, r1	; 0x2c

	setup();
    1a24:	0e 94 b7 0b 	call	0x176e	; 0x176e <setup>

	do{
		response = UART_rcvCharacter();
    1a28:	0e 94 50 06 	call	0xca0	; 0xca0 <UART_rcvCharacter>
    1a2c:	8c a7       	std	Y+44, r24	; 0x2c
		uint8 result = 0;
    1a2e:	1b a6       	std	Y+43, r1	; 0x2b

		if(response == '+' ){
    1a30:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a32:	8b 32       	cpi	r24, 0x2B	; 43
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <main+0x2a>
    1a36:	7d c1       	rjmp	.+762    	; 0x1d32 <main+0x324>
			result = checkPass();
    1a38:	0e 94 2e 0c 	call	0x185c	; 0x185c <checkPass>
    1a3c:	8b a7       	std	Y+43, r24	; 0x2b
			if(result == 1){
    1a3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	91 f7       	brne	.-28     	; 0x1a28 <main+0x1a>
				DcMotor_rotate(&dcMotor, EN_DC_CW, 100);
    1a44:	8a e6       	ldi	r24, 0x6A	; 106
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	44 e6       	ldi	r20, 0x64	; 100
    1a4c:	0e 94 23 0b 	call	0x1646	; 0x1646 <DcMotor_rotate>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e6       	ldi	r25, 0x60	; 96
    1a54:	aa e6       	ldi	r26, 0x6A	; 106
    1a56:	b6 e4       	ldi	r27, 0x46	; 70
    1a58:	8f a3       	std	Y+39, r24	; 0x27
    1a5a:	98 a7       	std	Y+40, r25	; 0x28
    1a5c:	a9 a7       	std	Y+41, r26	; 0x29
    1a5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a60:	6f a1       	ldd	r22, Y+39	; 0x27
    1a62:	78 a5       	ldd	r23, Y+40	; 0x28
    1a64:	89 a5       	ldd	r24, Y+41	; 0x29
    1a66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4a ef       	ldi	r20, 0xFA	; 250
    1a6e:	54 e4       	ldi	r21, 0x44	; 68
    1a70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	8b a3       	std	Y+35, r24	; 0x23
    1a7a:	9c a3       	std	Y+36, r25	; 0x24
    1a7c:	ad a3       	std	Y+37, r26	; 0x25
    1a7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a80:	6b a1       	ldd	r22, Y+35	; 0x23
    1a82:	7c a1       	ldd	r23, Y+36	; 0x24
    1a84:	8d a1       	ldd	r24, Y+37	; 0x25
    1a86:	9e a1       	ldd	r25, Y+38	; 0x26
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	5f e3       	ldi	r21, 0x3F	; 63
    1a90:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a94:	88 23       	and	r24, r24
    1a96:	2c f4       	brge	.+10     	; 0x1aa2 <main+0x94>
		__ticks = 1;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	9a a3       	std	Y+34, r25	; 0x22
    1a9e:	89 a3       	std	Y+33, r24	; 0x21
    1aa0:	3f c0       	rjmp	.+126    	; 0x1b20 <main+0x112>
	else if (__tmp > 65535)
    1aa2:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa4:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa6:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa8:	9e a1       	ldd	r25, Y+38	; 0x26
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	3f ef       	ldi	r19, 0xFF	; 255
    1aae:	4f e7       	ldi	r20, 0x7F	; 127
    1ab0:	57 e4       	ldi	r21, 0x47	; 71
    1ab2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	4c f5       	brge	.+82     	; 0x1b0c <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aba:	6f a1       	ldd	r22, Y+39	; 0x27
    1abc:	78 a5       	ldd	r23, Y+40	; 0x28
    1abe:	89 a5       	ldd	r24, Y+41	; 0x29
    1ac0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e2       	ldi	r20, 0x20	; 32
    1ac8:	51 e4       	ldi	r21, 0x41	; 65
    1aca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	bc 01       	movw	r22, r24
    1ad4:	cd 01       	movw	r24, r26
    1ad6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	9a a3       	std	Y+34, r25	; 0x22
    1ae0:	89 a3       	std	Y+33, r24	; 0x21
    1ae2:	0f c0       	rjmp	.+30     	; 0x1b02 <main+0xf4>
    1ae4:	88 ec       	ldi	r24, 0xC8	; 200
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	98 a3       	std	Y+32, r25	; 0x20
    1aea:	8f 8f       	std	Y+31, r24	; 0x1f
    1aec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aee:	98 a1       	ldd	r25, Y+32	; 0x20
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <main+0xe2>
    1af4:	98 a3       	std	Y+32, r25	; 0x20
    1af6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af8:	89 a1       	ldd	r24, Y+33	; 0x21
    1afa:	9a a1       	ldd	r25, Y+34	; 0x22
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	9a a3       	std	Y+34, r25	; 0x22
    1b00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b02:	89 a1       	ldd	r24, Y+33	; 0x21
    1b04:	9a a1       	ldd	r25, Y+34	; 0x22
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	69 f7       	brne	.-38     	; 0x1ae4 <main+0xd6>
    1b0a:	14 c0       	rjmp	.+40     	; 0x1b34 <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b10:	8d a1       	ldd	r24, Y+37	; 0x25
    1b12:	9e a1       	ldd	r25, Y+38	; 0x26
    1b14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9a a3       	std	Y+34, r25	; 0x22
    1b1e:	89 a3       	std	Y+33, r24	; 0x21
    1b20:	89 a1       	ldd	r24, Y+33	; 0x21
    1b22:	9a a1       	ldd	r25, Y+34	; 0x22
    1b24:	9e 8f       	std	Y+30, r25	; 0x1e
    1b26:	8d 8f       	std	Y+29, r24	; 0x1d
    1b28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <main+0x11e>
    1b30:	9e 8f       	std	Y+30, r25	; 0x1e
    1b32:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(15000);
				UART_sendCharacter(' ');
    1b34:	80 e2       	ldi	r24, 0x20	; 32
    1b36:	0e 94 03 06 	call	0xc06	; 0xc06 <UART_sendCharacter>

				DcMotor_stop(&dcMotor);
    1b3a:	8a e6       	ldi	r24, 0x6A	; 106
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DcMotor_stop>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e8       	ldi	r25, 0x80	; 128
    1b46:	ab e3       	ldi	r26, 0x3B	; 59
    1b48:	b5 e4       	ldi	r27, 0x45	; 69
    1b4a:	89 8f       	std	Y+25, r24	; 0x19
    1b4c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b4e:	ab 8f       	std	Y+27, r26	; 0x1b
    1b50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b52:	69 8d       	ldd	r22, Y+25	; 0x19
    1b54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	4a ef       	ldi	r20, 0xFA	; 250
    1b60:	54 e4       	ldi	r21, 0x44	; 68
    1b62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	8d 8b       	std	Y+21, r24	; 0x15
    1b6c:	9e 8b       	std	Y+22, r25	; 0x16
    1b6e:	af 8b       	std	Y+23, r26	; 0x17
    1b70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b72:	6d 89       	ldd	r22, Y+21	; 0x15
    1b74:	7e 89       	ldd	r23, Y+22	; 0x16
    1b76:	8f 89       	ldd	r24, Y+23	; 0x17
    1b78:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e8       	ldi	r20, 0x80	; 128
    1b80:	5f e3       	ldi	r21, 0x3F	; 63
    1b82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b86:	88 23       	and	r24, r24
    1b88:	2c f4       	brge	.+10     	; 0x1b94 <main+0x186>
		__ticks = 1;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	9c 8b       	std	Y+20, r25	; 0x14
    1b90:	8b 8b       	std	Y+19, r24	; 0x13
    1b92:	3f c0       	rjmp	.+126    	; 0x1c12 <main+0x204>
	else if (__tmp > 65535)
    1b94:	6d 89       	ldd	r22, Y+21	; 0x15
    1b96:	7e 89       	ldd	r23, Y+22	; 0x16
    1b98:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ba0:	4f e7       	ldi	r20, 0x7F	; 127
    1ba2:	57 e4       	ldi	r21, 0x47	; 71
    1ba4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ba8:	18 16       	cp	r1, r24
    1baa:	4c f5       	brge	.+82     	; 0x1bfe <main+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bac:	69 8d       	ldd	r22, Y+25	; 0x19
    1bae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e2       	ldi	r20, 0x20	; 32
    1bba:	51 e4       	ldi	r21, 0x41	; 65
    1bbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9c 8b       	std	Y+20, r25	; 0x14
    1bd2:	8b 8b       	std	Y+19, r24	; 0x13
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <main+0x1e6>
    1bd6:	88 ec       	ldi	r24, 0xC8	; 200
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9a 8b       	std	Y+18, r25	; 0x12
    1bdc:	89 8b       	std	Y+17, r24	; 0x11
    1bde:	89 89       	ldd	r24, Y+17	; 0x11
    1be0:	9a 89       	ldd	r25, Y+18	; 0x12
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <main+0x1d4>
    1be6:	9a 8b       	std	Y+18, r25	; 0x12
    1be8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bea:	8b 89       	ldd	r24, Y+19	; 0x13
    1bec:	9c 89       	ldd	r25, Y+20	; 0x14
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	9c 8b       	std	Y+20, r25	; 0x14
    1bf2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	69 f7       	brne	.-38     	; 0x1bd6 <main+0x1c8>
    1bfc:	14 c0       	rjmp	.+40     	; 0x1c26 <main+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1c00:	7e 89       	ldd	r23, Y+22	; 0x16
    1c02:	8f 89       	ldd	r24, Y+23	; 0x17
    1c04:	98 8d       	ldd	r25, Y+24	; 0x18
    1c06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9c 8b       	std	Y+20, r25	; 0x14
    1c10:	8b 8b       	std	Y+19, r24	; 0x13
    1c12:	8b 89       	ldd	r24, Y+19	; 0x13
    1c14:	9c 89       	ldd	r25, Y+20	; 0x14
    1c16:	98 8b       	std	Y+16, r25	; 0x10
    1c18:	8f 87       	std	Y+15, r24	; 0x0f
    1c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c1c:	98 89       	ldd	r25, Y+16	; 0x10
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <main+0x210>
    1c22:	98 8b       	std	Y+16, r25	; 0x10
    1c24:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(3000);
				UART_sendCharacter(' ');
    1c26:	80 e2       	ldi	r24, 0x20	; 32
    1c28:	0e 94 03 06 	call	0xc06	; 0xc06 <UART_sendCharacter>

				DcMotor_rotate(&dcMotor, EN_DC_A_CW, 100);
    1c2c:	8a e6       	ldi	r24, 0x6A	; 106
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	62 e0       	ldi	r22, 0x02	; 2
    1c32:	44 e6       	ldi	r20, 0x64	; 100
    1c34:	0e 94 23 0b 	call	0x1646	; 0x1646 <DcMotor_rotate>
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e6       	ldi	r25, 0x60	; 96
    1c3c:	aa e6       	ldi	r26, 0x6A	; 106
    1c3e:	b6 e4       	ldi	r27, 0x46	; 70
    1c40:	8b 87       	std	Y+11, r24	; 0x0b
    1c42:	9c 87       	std	Y+12, r25	; 0x0c
    1c44:	ad 87       	std	Y+13, r26	; 0x0d
    1c46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4a ef       	ldi	r20, 0xFA	; 250
    1c56:	54 e4       	ldi	r21, 0x44	; 68
    1c58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	8f 83       	std	Y+7, r24	; 0x07
    1c62:	98 87       	std	Y+8, r25	; 0x08
    1c64:	a9 87       	std	Y+9, r26	; 0x09
    1c66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c68:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6a:	78 85       	ldd	r23, Y+8	; 0x08
    1c6c:	89 85       	ldd	r24, Y+9	; 0x09
    1c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e8       	ldi	r20, 0x80	; 128
    1c76:	5f e3       	ldi	r21, 0x3F	; 63
    1c78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c7c:	88 23       	and	r24, r24
    1c7e:	2c f4       	brge	.+10     	; 0x1c8a <main+0x27c>
		__ticks = 1;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
    1c88:	3f c0       	rjmp	.+126    	; 0x1d08 <main+0x2fa>
	else if (__tmp > 65535)
    1c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8c:	78 85       	ldd	r23, Y+8	; 0x08
    1c8e:	89 85       	ldd	r24, Y+9	; 0x09
    1c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	3f ef       	ldi	r19, 0xFF	; 255
    1c96:	4f e7       	ldi	r20, 0x7F	; 127
    1c98:	57 e4       	ldi	r21, 0x47	; 71
    1c9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c9e:	18 16       	cp	r1, r24
    1ca0:	4c f5       	brge	.+82     	; 0x1cf4 <main+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e2       	ldi	r20, 0x20	; 32
    1cb0:	51 e4       	ldi	r21, 0x41	; 65
    1cb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	bc 01       	movw	r22, r24
    1cbc:	cd 01       	movw	r24, r26
    1cbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
    1cca:	0f c0       	rjmp	.+30     	; 0x1cea <main+0x2dc>
    1ccc:	88 ec       	ldi	r24, 0xC8	; 200
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9c 83       	std	Y+4, r25	; 0x04
    1cd2:	8b 83       	std	Y+3, r24	; 0x03
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <main+0x2ca>
    1cdc:	9c 83       	std	Y+4, r25	; 0x04
    1cde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	69 f7       	brne	.-38     	; 0x1ccc <main+0x2be>
    1cf2:	14 c0       	rjmp	.+40     	; 0x1d1c <main+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf6:	78 85       	ldd	r23, Y+8	; 0x08
    1cf8:	89 85       	ldd	r24, Y+9	; 0x09
    1cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9e 83       	std	Y+6, r25	; 0x06
    1d06:	8d 83       	std	Y+5, r24	; 0x05
    1d08:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	9a 81       	ldd	r25, Y+2	; 0x02
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <main+0x306>
    1d18:	9a 83       	std	Y+2, r25	; 0x02
    1d1a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(15000);
				UART_sendCharacter(' ');
    1d1c:	80 e2       	ldi	r24, 0x20	; 32
    1d1e:	0e 94 03 06 	call	0xc06	; 0xc06 <UART_sendCharacter>

				DcMotor_stop(&dcMotor);
    1d22:	8a e6       	ldi	r24, 0x6A	; 106
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DcMotor_stop>

				UART_sendCharacter(' ');
    1d2a:	80 e2       	ldi	r24, 0x20	; 32
    1d2c:	0e 94 03 06 	call	0xc06	; 0xc06 <UART_sendCharacter>
    1d30:	7b ce       	rjmp	.-778    	; 0x1a28 <main+0x1a>

			}
		}
		else if(response == '-')
    1d32:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d34:	8d 32       	cpi	r24, 0x2D	; 45
    1d36:	51 f4       	brne	.+20     	; 0x1d4c <main+0x33e>
		{
			result = checkPass();
    1d38:	0e 94 2e 0c 	call	0x185c	; 0x185c <checkPass>
    1d3c:	8b a7       	std	Y+43, r24	; 0x2b
			if(result == 1)
    1d3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <main+0x338>
    1d44:	71 ce       	rjmp	.-798    	; 0x1a28 <main+0x1a>
				changePass();
    1d46:	0e 94 02 0c 	call	0x1804	; 0x1804 <changePass>
    1d4a:	6e ce       	rjmp	.-804    	; 0x1a28 <main+0x1a>

		}
		else if(response == 'p')
    1d4c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d4e:	80 37       	cpi	r24, 0x70	; 112
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <main+0x346>
    1d52:	6a ce       	rjmp	.-812    	; 0x1a28 <main+0x1a>
			changePass();
    1d54:	0e 94 02 0c 	call	0x1804	; 0x1804 <changePass>
    1d58:	67 ce       	rjmp	.-818    	; 0x1a28 <main+0x1a>

00001d5a <__divmodhi4>:
    1d5a:	97 fb       	bst	r25, 7
    1d5c:	09 2e       	mov	r0, r25
    1d5e:	07 26       	eor	r0, r23
    1d60:	0a d0       	rcall	.+20     	; 0x1d76 <__divmodhi4_neg1>
    1d62:	77 fd       	sbrc	r23, 7
    1d64:	04 d0       	rcall	.+8      	; 0x1d6e <__divmodhi4_neg2>
    1d66:	0c d0       	rcall	.+24     	; 0x1d80 <__udivmodhi4>
    1d68:	06 d0       	rcall	.+12     	; 0x1d76 <__divmodhi4_neg1>
    1d6a:	00 20       	and	r0, r0
    1d6c:	1a f4       	brpl	.+6      	; 0x1d74 <__divmodhi4_exit>

00001d6e <__divmodhi4_neg2>:
    1d6e:	70 95       	com	r23
    1d70:	61 95       	neg	r22
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255

00001d74 <__divmodhi4_exit>:
    1d74:	08 95       	ret

00001d76 <__divmodhi4_neg1>:
    1d76:	f6 f7       	brtc	.-4      	; 0x1d74 <__divmodhi4_exit>
    1d78:	90 95       	com	r25
    1d7a:	81 95       	neg	r24
    1d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7e:	08 95       	ret

00001d80 <__udivmodhi4>:
    1d80:	aa 1b       	sub	r26, r26
    1d82:	bb 1b       	sub	r27, r27
    1d84:	51 e1       	ldi	r21, 0x11	; 17
    1d86:	07 c0       	rjmp	.+14     	; 0x1d96 <__udivmodhi4_ep>

00001d88 <__udivmodhi4_loop>:
    1d88:	aa 1f       	adc	r26, r26
    1d8a:	bb 1f       	adc	r27, r27
    1d8c:	a6 17       	cp	r26, r22
    1d8e:	b7 07       	cpc	r27, r23
    1d90:	10 f0       	brcs	.+4      	; 0x1d96 <__udivmodhi4_ep>
    1d92:	a6 1b       	sub	r26, r22
    1d94:	b7 0b       	sbc	r27, r23

00001d96 <__udivmodhi4_ep>:
    1d96:	88 1f       	adc	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	5a 95       	dec	r21
    1d9c:	a9 f7       	brne	.-22     	; 0x1d88 <__udivmodhi4_loop>
    1d9e:	80 95       	com	r24
    1da0:	90 95       	com	r25
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	08 95       	ret

00001da8 <__prologue_saves__>:
    1da8:	2f 92       	push	r2
    1daa:	3f 92       	push	r3
    1dac:	4f 92       	push	r4
    1dae:	5f 92       	push	r5
    1db0:	6f 92       	push	r6
    1db2:	7f 92       	push	r7
    1db4:	8f 92       	push	r8
    1db6:	9f 92       	push	r9
    1db8:	af 92       	push	r10
    1dba:	bf 92       	push	r11
    1dbc:	cf 92       	push	r12
    1dbe:	df 92       	push	r13
    1dc0:	ef 92       	push	r14
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	ca 1b       	sub	r28, r26
    1dd2:	db 0b       	sbc	r29, r27
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	09 94       	ijmp

00001de0 <__epilogue_restores__>:
    1de0:	2a 88       	ldd	r2, Y+18	; 0x12
    1de2:	39 88       	ldd	r3, Y+17	; 0x11
    1de4:	48 88       	ldd	r4, Y+16	; 0x10
    1de6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1de8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1dea:	7d 84       	ldd	r7, Y+13	; 0x0d
    1dec:	8c 84       	ldd	r8, Y+12	; 0x0c
    1dee:	9b 84       	ldd	r9, Y+11	; 0x0b
    1df0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1df2:	b9 84       	ldd	r11, Y+9	; 0x09
    1df4:	c8 84       	ldd	r12, Y+8	; 0x08
    1df6:	df 80       	ldd	r13, Y+7	; 0x07
    1df8:	ee 80       	ldd	r14, Y+6	; 0x06
    1dfa:	fd 80       	ldd	r15, Y+5	; 0x05
    1dfc:	0c 81       	ldd	r16, Y+4	; 0x04
    1dfe:	1b 81       	ldd	r17, Y+3	; 0x03
    1e00:	aa 81       	ldd	r26, Y+2	; 0x02
    1e02:	b9 81       	ldd	r27, Y+1	; 0x01
    1e04:	ce 0f       	add	r28, r30
    1e06:	d1 1d       	adc	r29, r1
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	ed 01       	movw	r28, r26
    1e14:	08 95       	ret

00001e16 <strcmp>:
    1e16:	fb 01       	movw	r30, r22
    1e18:	dc 01       	movw	r26, r24
    1e1a:	8d 91       	ld	r24, X+
    1e1c:	01 90       	ld	r0, Z+
    1e1e:	80 19       	sub	r24, r0
    1e20:	01 10       	cpse	r0, r1
    1e22:	d9 f3       	breq	.-10     	; 0x1e1a <strcmp+0x4>
    1e24:	99 0b       	sbc	r25, r25
    1e26:	08 95       	ret

00001e28 <_exit>:
    1e28:	f8 94       	cli

00001e2a <__stop_program>:
    1e2a:	ff cf       	rjmp	.-2      	; 0x1e2a <__stop_program>
