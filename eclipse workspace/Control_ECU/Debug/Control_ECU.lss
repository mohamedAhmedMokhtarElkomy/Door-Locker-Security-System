
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000996  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000996  00000a0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000f90  00000000  00000000  00000a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bb9  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 c2 04 	call	0x984	; 0x984 <main>
  7a:	0c 94 c9 04 	jmp	0x992	; 0x992 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_13>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(USART_RXC_vect){
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	g_uartRcvData = UDR;
  9a:	ec e2       	ldi	r30, 0x2C	; 44
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 93 60 00 	sts	0x0060, r24
}
  a4:	cf 91       	pop	r28
  a6:	df 91       	pop	r29
  a8:	ff 91       	pop	r31
  aa:	ef 91       	pop	r30
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <UART_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void UART_init(){
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	00 d0       	rcall	.+0      	; 0xbe <UART_init+0x6>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62

	uint16 ubrr_value = 0;
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRA, U2X);		/* : Double the USART Transmission Speed */
  c6:	ab e2       	ldi	r26, 0x2B	; 43
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	eb e2       	ldi	r30, 0x2B	; 43
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	8c 93       	st	X, r24

	SET_BIT(UCSRB, RXCIE);		/* RX Complete Interrupt Enable */
  d4:	aa e2       	ldi	r26, 0x2A	; 42
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	ea e2       	ldi	r30, 0x2A	; 42
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);		/* Transmitter Enable*/
  e2:	aa e2       	ldi	r26, 0x2A	; 42
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	ea e2       	ldi	r30, 0x2A	; 42
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 60       	ori	r24, 0x08	; 8
  ee:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);		/* Receiver Enable */
  f0:	aa e2       	ldi	r26, 0x2A	; 42
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	ea e2       	ldi	r30, 0x2A	; 42
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC, UMSEL);	/* USART Mode Select 0 -> async, 1 -> sync*/
  fe:	a0 e4       	ldi	r26, 0x40	; 64
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	e0 e4       	ldi	r30, 0x40	; 64
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);		/* UCSZ1:0: Character Size */
 10c:	a0 e4       	ldi	r26, 0x40	; 64
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e0 e4       	ldi	r30, 0x40	; 64
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);		/* UCSZ1:0: 11 -> 8-bit */
 11a:	a0 e4       	ldi	r26, 0x40	; 64
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e0 e4       	ldi	r30, 0x40	; 64
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	8c 93       	st	X, r24


	ubrr_value = (uint16)(( F_CPU / ( BAUDRATE * 8UL )) - 1 );
 128:	87 e6       	ldi	r24, 0x67	; 103
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	9a 83       	std	Y+2, r25	; 0x02
 12e:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = (ubrr_value >> 8) & (0x0F);
 130:	e0 e4       	ldi	r30, 0x40	; 64
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	9a 81       	ldd	r25, Y+2	; 0x02
 138:	89 2f       	mov	r24, r25
 13a:	99 27       	eor	r25, r25
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
 140:	e9 e2       	ldi	r30, 0x29	; 41
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	80 83       	st	Z, r24
}
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	08 95       	ret

00000152 <UART_sendCharacter>:

void UART_sendCharacter(uint8 data){
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	0f 92       	push	r0
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
 15e:	eb e2       	ldi	r30, 0x2B	; 43
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 2f       	mov	r24, r24
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	80 72       	andi	r24, 0x20	; 32
 16a:	90 70       	andi	r25, 0x00	; 0
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	b9 f3       	breq	.-18     	; 0x15e <UART_sendCharacter+0xc>
	UDR = data;
 170:	ec e2       	ldi	r30, 0x2C	; 44
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	80 83       	st	Z, r24
}
 178:	0f 90       	pop	r0
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	08 95       	ret

00000180 <UART_sendArray>:

void UART_sendArray(uint8 *str, uint8 str_size){
 180:	df 93       	push	r29
 182:	cf 93       	push	r28
 184:	00 d0       	rcall	.+0      	; 0x186 <UART_sendArray+0x6>
 186:	00 d0       	rcall	.+0      	; 0x188 <UART_sendArray+0x8>
 188:	0f 92       	push	r0
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	9c 83       	std	Y+4, r25	; 0x04
 190:	8b 83       	std	Y+3, r24	; 0x03
 192:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < str_size; i++){
 194:	1a 82       	std	Y+2, r1	; 0x02
 196:	19 82       	std	Y+1, r1	; 0x01
 198:	19 c0       	rjmp	.+50     	; 0x1cc <UART_sendArray+0x4c>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
 19a:	eb e2       	ldi	r30, 0x2B	; 43
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	80 72       	andi	r24, 0x20	; 32
 1a6:	90 70       	andi	r25, 0x00	; 0
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	b9 f3       	breq	.-18     	; 0x19a <UART_sendArray+0x1a>
		UDR = str[i];
 1ac:	ac e2       	ldi	r26, 0x2C	; 44
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	29 81       	ldd	r18, Y+1	; 0x01
 1b2:	3a 81       	ldd	r19, Y+2	; 0x02
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	9c 81       	ldd	r25, Y+4	; 0x04
 1b8:	fc 01       	movw	r30, r24
 1ba:	e2 0f       	add	r30, r18
 1bc:	f3 1f       	adc	r31, r19
 1be:	80 81       	ld	r24, Z
 1c0:	8c 93       	st	X, r24
	UDR = data;
}

void UART_sendArray(uint8 *str, uint8 str_size){

	for(int i = 0; i < str_size; i++){
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	9a 83       	std	Y+2, r25	; 0x02
 1ca:	89 83       	std	Y+1, r24	; 0x01
 1cc:	8d 81       	ldd	r24, Y+5	; 0x05
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	9a 81       	ldd	r25, Y+2	; 0x02
 1d6:	82 17       	cp	r24, r18
 1d8:	93 07       	cpc	r25, r19
 1da:	fc f2       	brlt	.-66     	; 0x19a <UART_sendArray+0x1a>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
		UDR = str[i];
	}

}
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	cf 91       	pop	r28
 1e8:	df 91       	pop	r29
 1ea:	08 95       	ret

000001ec <GPIO_setupPinDirection>:
 *******************************************************************************/



void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
 1ec:	df 93       	push	r29
 1ee:	cf 93       	push	r28
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <GPIO_setupPinDirection+0x6>
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <GPIO_setupPinDirection+0x8>
 1f4:	0f 92       	push	r0
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	89 83       	std	Y+1, r24	; 0x01
 1fc:	6a 83       	std	Y+2, r22	; 0x02
 1fe:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 200:	8a 81       	ldd	r24, Y+2	; 0x02
 202:	88 30       	cpi	r24, 0x08	; 8
 204:	08 f0       	brcs	.+2      	; 0x208 <GPIO_setupPinDirection+0x1c>
 206:	d5 c0       	rjmp	.+426    	; 0x3b2 <GPIO_setupPinDirection+0x1c6>
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	84 30       	cpi	r24, 0x04	; 4
 20c:	08 f0       	brcs	.+2      	; 0x210 <GPIO_setupPinDirection+0x24>
 20e:	d1 c0       	rjmp	.+418    	; 0x3b2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	3d 83       	std	Y+5, r19	; 0x05
 218:	2c 83       	std	Y+4, r18	; 0x04
 21a:	8c 81       	ldd	r24, Y+4	; 0x04
 21c:	9d 81       	ldd	r25, Y+5	; 0x05
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	91 05       	cpc	r25, r1
 222:	09 f4       	brne	.+2      	; 0x226 <GPIO_setupPinDirection+0x3a>
 224:	43 c0       	rjmp	.+134    	; 0x2ac <GPIO_setupPinDirection+0xc0>
 226:	2c 81       	ldd	r18, Y+4	; 0x04
 228:	3d 81       	ldd	r19, Y+5	; 0x05
 22a:	22 30       	cpi	r18, 0x02	; 2
 22c:	31 05       	cpc	r19, r1
 22e:	2c f4       	brge	.+10     	; 0x23a <GPIO_setupPinDirection+0x4e>
 230:	8c 81       	ldd	r24, Y+4	; 0x04
 232:	9d 81       	ldd	r25, Y+5	; 0x05
 234:	00 97       	sbiw	r24, 0x00	; 0
 236:	71 f0       	breq	.+28     	; 0x254 <GPIO_setupPinDirection+0x68>
 238:	bc c0       	rjmp	.+376    	; 0x3b2 <GPIO_setupPinDirection+0x1c6>
 23a:	2c 81       	ldd	r18, Y+4	; 0x04
 23c:	3d 81       	ldd	r19, Y+5	; 0x05
 23e:	22 30       	cpi	r18, 0x02	; 2
 240:	31 05       	cpc	r19, r1
 242:	09 f4       	brne	.+2      	; 0x246 <GPIO_setupPinDirection+0x5a>
 244:	5f c0       	rjmp	.+190    	; 0x304 <GPIO_setupPinDirection+0x118>
 246:	8c 81       	ldd	r24, Y+4	; 0x04
 248:	9d 81       	ldd	r25, Y+5	; 0x05
 24a:	83 30       	cpi	r24, 0x03	; 3
 24c:	91 05       	cpc	r25, r1
 24e:	09 f4       	brne	.+2      	; 0x252 <GPIO_setupPinDirection+0x66>
 250:	85 c0       	rjmp	.+266    	; 0x35c <GPIO_setupPinDirection+0x170>
 252:	af c0       	rjmp	.+350    	; 0x3b2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	a1 f4       	brne	.+40     	; 0x282 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 25a:	aa e3       	ldi	r26, 0x3A	; 58
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	ea e3       	ldi	r30, 0x3A	; 58
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	48 2f       	mov	r20, r24
 266:	8a 81       	ldd	r24, Y+2	; 0x02
 268:	28 2f       	mov	r18, r24
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 2e       	mov	r0, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <GPIO_setupPinDirection+0x8c>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	0a 94       	dec	r0
 27a:	e2 f7       	brpl	.-8      	; 0x274 <GPIO_setupPinDirection+0x88>
 27c:	84 2b       	or	r24, r20
 27e:	8c 93       	st	X, r24
 280:	98 c0       	rjmp	.+304    	; 0x3b2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 282:	aa e3       	ldi	r26, 0x3A	; 58
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	ea e3       	ldi	r30, 0x3A	; 58
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	48 2f       	mov	r20, r24
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	28 2f       	mov	r18, r24
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 2e       	mov	r0, r18
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <GPIO_setupPinDirection+0xb4>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	0a 94       	dec	r0
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <GPIO_setupPinDirection+0xb0>
 2a4:	80 95       	com	r24
 2a6:	84 23       	and	r24, r20
 2a8:	8c 93       	st	X, r24
 2aa:	83 c0       	rjmp	.+262    	; 0x3b2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 2ac:	8b 81       	ldd	r24, Y+3	; 0x03
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	a1 f4       	brne	.+40     	; 0x2da <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 2b2:	a7 e3       	ldi	r26, 0x37	; 55
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	e7 e3       	ldi	r30, 0x37	; 55
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	48 2f       	mov	r20, r24
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	28 2f       	mov	r18, r24
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 2e       	mov	r0, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <GPIO_setupPinDirection+0xe4>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <GPIO_setupPinDirection+0xe0>
 2d4:	84 2b       	or	r24, r20
 2d6:	8c 93       	st	X, r24
 2d8:	6c c0       	rjmp	.+216    	; 0x3b2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 2da:	a7 e3       	ldi	r26, 0x37	; 55
 2dc:	b0 e0       	ldi	r27, 0x00	; 0
 2de:	e7 e3       	ldi	r30, 0x37	; 55
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	48 2f       	mov	r20, r24
 2e6:	8a 81       	ldd	r24, Y+2	; 0x02
 2e8:	28 2f       	mov	r18, r24
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 2e       	mov	r0, r18
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <GPIO_setupPinDirection+0x10c>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	0a 94       	dec	r0
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <GPIO_setupPinDirection+0x108>
 2fc:	80 95       	com	r24
 2fe:	84 23       	and	r24, r20
 300:	8c 93       	st	X, r24
 302:	57 c0       	rjmp	.+174    	; 0x3b2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	a1 f4       	brne	.+40     	; 0x332 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 30a:	a4 e3       	ldi	r26, 0x34	; 52
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	e4 e3       	ldi	r30, 0x34	; 52
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	48 2f       	mov	r20, r24
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 2e       	mov	r0, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <GPIO_setupPinDirection+0x13c>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <GPIO_setupPinDirection+0x138>
 32c:	84 2b       	or	r24, r20
 32e:	8c 93       	st	X, r24
 330:	40 c0       	rjmp	.+128    	; 0x3b2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 332:	a4 e3       	ldi	r26, 0x34	; 52
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e4 e3       	ldi	r30, 0x34	; 52
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	48 2f       	mov	r20, r24
 33e:	8a 81       	ldd	r24, Y+2	; 0x02
 340:	28 2f       	mov	r18, r24
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 2e       	mov	r0, r18
 34a:	02 c0       	rjmp	.+4      	; 0x350 <GPIO_setupPinDirection+0x164>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	0a 94       	dec	r0
 352:	e2 f7       	brpl	.-8      	; 0x34c <GPIO_setupPinDirection+0x160>
 354:	80 95       	com	r24
 356:	84 23       	and	r24, r20
 358:	8c 93       	st	X, r24
 35a:	2b c0       	rjmp	.+86     	; 0x3b2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 35c:	8b 81       	ldd	r24, Y+3	; 0x03
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	a1 f4       	brne	.+40     	; 0x38a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 362:	a1 e3       	ldi	r26, 0x31	; 49
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	e1 e3       	ldi	r30, 0x31	; 49
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	48 2f       	mov	r20, r24
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	28 2f       	mov	r18, r24
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 2e       	mov	r0, r18
 37a:	02 c0       	rjmp	.+4      	; 0x380 <GPIO_setupPinDirection+0x194>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	0a 94       	dec	r0
 382:	e2 f7       	brpl	.-8      	; 0x37c <GPIO_setupPinDirection+0x190>
 384:	84 2b       	or	r24, r20
 386:	8c 93       	st	X, r24
 388:	14 c0       	rjmp	.+40     	; 0x3b2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 38a:	a1 e3       	ldi	r26, 0x31	; 49
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	e1 e3       	ldi	r30, 0x31	; 49
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	48 2f       	mov	r20, r24
 396:	8a 81       	ldd	r24, Y+2	; 0x02
 398:	28 2f       	mov	r18, r24
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 2e       	mov	r0, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <GPIO_setupPinDirection+0x1bc>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	0a 94       	dec	r0
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <GPIO_setupPinDirection+0x1b8>
 3ac:	80 95       	com	r24
 3ae:	84 23       	and	r24, r20
 3b0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	cf 91       	pop	r28
 3be:	df 91       	pop	r29
 3c0:	08 95       	ret

000003c2 <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
 3c2:	df 93       	push	r29
 3c4:	cf 93       	push	r28
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <GPIO_writePin+0x6>
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <GPIO_writePin+0x8>
 3ca:	0f 92       	push	r0
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	89 83       	std	Y+1, r24	; 0x01
 3d2:	6a 83       	std	Y+2, r22	; 0x02
 3d4:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	88 30       	cpi	r24, 0x08	; 8
 3da:	08 f0       	brcs	.+2      	; 0x3de <GPIO_writePin+0x1c>
 3dc:	d5 c0       	rjmp	.+426    	; 0x588 <GPIO_writePin+0x1c6>
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	84 30       	cpi	r24, 0x04	; 4
 3e2:	08 f0       	brcs	.+2      	; 0x3e6 <GPIO_writePin+0x24>
 3e4:	d1 c0       	rjmp	.+418    	; 0x588 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	28 2f       	mov	r18, r24
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	3d 83       	std	Y+5, r19	; 0x05
 3ee:	2c 83       	std	Y+4, r18	; 0x04
 3f0:	8c 81       	ldd	r24, Y+4	; 0x04
 3f2:	9d 81       	ldd	r25, Y+5	; 0x05
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	91 05       	cpc	r25, r1
 3f8:	09 f4       	brne	.+2      	; 0x3fc <GPIO_writePin+0x3a>
 3fa:	43 c0       	rjmp	.+134    	; 0x482 <GPIO_writePin+0xc0>
 3fc:	2c 81       	ldd	r18, Y+4	; 0x04
 3fe:	3d 81       	ldd	r19, Y+5	; 0x05
 400:	22 30       	cpi	r18, 0x02	; 2
 402:	31 05       	cpc	r19, r1
 404:	2c f4       	brge	.+10     	; 0x410 <GPIO_writePin+0x4e>
 406:	8c 81       	ldd	r24, Y+4	; 0x04
 408:	9d 81       	ldd	r25, Y+5	; 0x05
 40a:	00 97       	sbiw	r24, 0x00	; 0
 40c:	71 f0       	breq	.+28     	; 0x42a <GPIO_writePin+0x68>
 40e:	bc c0       	rjmp	.+376    	; 0x588 <GPIO_writePin+0x1c6>
 410:	2c 81       	ldd	r18, Y+4	; 0x04
 412:	3d 81       	ldd	r19, Y+5	; 0x05
 414:	22 30       	cpi	r18, 0x02	; 2
 416:	31 05       	cpc	r19, r1
 418:	09 f4       	brne	.+2      	; 0x41c <GPIO_writePin+0x5a>
 41a:	5f c0       	rjmp	.+190    	; 0x4da <GPIO_writePin+0x118>
 41c:	8c 81       	ldd	r24, Y+4	; 0x04
 41e:	9d 81       	ldd	r25, Y+5	; 0x05
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	91 05       	cpc	r25, r1
 424:	09 f4       	brne	.+2      	; 0x428 <GPIO_writePin+0x66>
 426:	85 c0       	rjmp	.+266    	; 0x532 <GPIO_writePin+0x170>
 428:	af c0       	rjmp	.+350    	; 0x588 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 42a:	8b 81       	ldd	r24, Y+3	; 0x03
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	a1 f4       	brne	.+40     	; 0x458 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 430:	ab e3       	ldi	r26, 0x3B	; 59
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	eb e3       	ldi	r30, 0x3B	; 59
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	48 2f       	mov	r20, r24
 43c:	8a 81       	ldd	r24, Y+2	; 0x02
 43e:	28 2f       	mov	r18, r24
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 2e       	mov	r0, r18
 448:	02 c0       	rjmp	.+4      	; 0x44e <GPIO_writePin+0x8c>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <GPIO_writePin+0x88>
 452:	84 2b       	or	r24, r20
 454:	8c 93       	st	X, r24
 456:	98 c0       	rjmp	.+304    	; 0x588 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 458:	ab e3       	ldi	r26, 0x3B	; 59
 45a:	b0 e0       	ldi	r27, 0x00	; 0
 45c:	eb e3       	ldi	r30, 0x3B	; 59
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	48 2f       	mov	r20, r24
 464:	8a 81       	ldd	r24, Y+2	; 0x02
 466:	28 2f       	mov	r18, r24
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 2e       	mov	r0, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <GPIO_writePin+0xb4>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	0a 94       	dec	r0
 478:	e2 f7       	brpl	.-8      	; 0x472 <GPIO_writePin+0xb0>
 47a:	80 95       	com	r24
 47c:	84 23       	and	r24, r20
 47e:	8c 93       	st	X, r24
 480:	83 c0       	rjmp	.+262    	; 0x588 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	a1 f4       	brne	.+40     	; 0x4b0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 488:	a8 e3       	ldi	r26, 0x38	; 56
 48a:	b0 e0       	ldi	r27, 0x00	; 0
 48c:	e8 e3       	ldi	r30, 0x38	; 56
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	48 2f       	mov	r20, r24
 494:	8a 81       	ldd	r24, Y+2	; 0x02
 496:	28 2f       	mov	r18, r24
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 2e       	mov	r0, r18
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <GPIO_writePin+0xe4>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	0a 94       	dec	r0
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <GPIO_writePin+0xe0>
 4aa:	84 2b       	or	r24, r20
 4ac:	8c 93       	st	X, r24
 4ae:	6c c0       	rjmp	.+216    	; 0x588 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 4b0:	a8 e3       	ldi	r26, 0x38	; 56
 4b2:	b0 e0       	ldi	r27, 0x00	; 0
 4b4:	e8 e3       	ldi	r30, 0x38	; 56
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	48 2f       	mov	r20, r24
 4bc:	8a 81       	ldd	r24, Y+2	; 0x02
 4be:	28 2f       	mov	r18, r24
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 2e       	mov	r0, r18
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <GPIO_writePin+0x10c>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	0a 94       	dec	r0
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <GPIO_writePin+0x108>
 4d2:	80 95       	com	r24
 4d4:	84 23       	and	r24, r20
 4d6:	8c 93       	st	X, r24
 4d8:	57 c0       	rjmp	.+174    	; 0x588 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 4da:	8b 81       	ldd	r24, Y+3	; 0x03
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	a1 f4       	brne	.+40     	; 0x508 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 4e0:	a5 e3       	ldi	r26, 0x35	; 53
 4e2:	b0 e0       	ldi	r27, 0x00	; 0
 4e4:	e5 e3       	ldi	r30, 0x35	; 53
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	48 2f       	mov	r20, r24
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	28 2f       	mov	r18, r24
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 2e       	mov	r0, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <GPIO_writePin+0x13c>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <GPIO_writePin+0x138>
 502:	84 2b       	or	r24, r20
 504:	8c 93       	st	X, r24
 506:	40 c0       	rjmp	.+128    	; 0x588 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 508:	a5 e3       	ldi	r26, 0x35	; 53
 50a:	b0 e0       	ldi	r27, 0x00	; 0
 50c:	e5 e3       	ldi	r30, 0x35	; 53
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	48 2f       	mov	r20, r24
 514:	8a 81       	ldd	r24, Y+2	; 0x02
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 2e       	mov	r0, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <GPIO_writePin+0x164>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	0a 94       	dec	r0
 528:	e2 f7       	brpl	.-8      	; 0x522 <GPIO_writePin+0x160>
 52a:	80 95       	com	r24
 52c:	84 23       	and	r24, r20
 52e:	8c 93       	st	X, r24
 530:	2b c0       	rjmp	.+86     	; 0x588 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 532:	8b 81       	ldd	r24, Y+3	; 0x03
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	a1 f4       	brne	.+40     	; 0x560 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 538:	a2 e3       	ldi	r26, 0x32	; 50
 53a:	b0 e0       	ldi	r27, 0x00	; 0
 53c:	e2 e3       	ldi	r30, 0x32	; 50
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	48 2f       	mov	r20, r24
 544:	8a 81       	ldd	r24, Y+2	; 0x02
 546:	28 2f       	mov	r18, r24
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 2e       	mov	r0, r18
 550:	02 c0       	rjmp	.+4      	; 0x556 <GPIO_writePin+0x194>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	0a 94       	dec	r0
 558:	e2 f7       	brpl	.-8      	; 0x552 <GPIO_writePin+0x190>
 55a:	84 2b       	or	r24, r20
 55c:	8c 93       	st	X, r24
 55e:	14 c0       	rjmp	.+40     	; 0x588 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 560:	a2 e3       	ldi	r26, 0x32	; 50
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	e2 e3       	ldi	r30, 0x32	; 50
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	48 2f       	mov	r20, r24
 56c:	8a 81       	ldd	r24, Y+2	; 0x02
 56e:	28 2f       	mov	r18, r24
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 2e       	mov	r0, r18
 578:	02 c0       	rjmp	.+4      	; 0x57e <GPIO_writePin+0x1bc>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	0a 94       	dec	r0
 580:	e2 f7       	brpl	.-8      	; 0x57a <GPIO_writePin+0x1b8>
 582:	80 95       	com	r24
 584:	84 23       	and	r24, r20
 586:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	0f 90       	pop	r0
 58e:	0f 90       	pop	r0
 590:	0f 90       	pop	r0
 592:	cf 91       	pop	r28
 594:	df 91       	pop	r29
 596:	08 95       	ret

00000598 <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 598:	df 93       	push	r29
 59a:	cf 93       	push	r28
 59c:	00 d0       	rcall	.+0      	; 0x59e <GPIO_readPin+0x6>
 59e:	00 d0       	rcall	.+0      	; 0x5a0 <GPIO_readPin+0x8>
 5a0:	0f 92       	push	r0
 5a2:	cd b7       	in	r28, 0x3d	; 61
 5a4:	de b7       	in	r29, 0x3e	; 62
 5a6:	8a 83       	std	Y+2, r24	; 0x02
 5a8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 5aa:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 5ac:	8b 81       	ldd	r24, Y+3	; 0x03
 5ae:	88 30       	cpi	r24, 0x08	; 8
 5b0:	08 f0       	brcs	.+2      	; 0x5b4 <GPIO_readPin+0x1c>
 5b2:	84 c0       	rjmp	.+264    	; 0x6bc <GPIO_readPin+0x124>
 5b4:	8a 81       	ldd	r24, Y+2	; 0x02
 5b6:	84 30       	cpi	r24, 0x04	; 4
 5b8:	08 f0       	brcs	.+2      	; 0x5bc <GPIO_readPin+0x24>
 5ba:	80 c0       	rjmp	.+256    	; 0x6bc <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 5bc:	8a 81       	ldd	r24, Y+2	; 0x02
 5be:	28 2f       	mov	r18, r24
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	3d 83       	std	Y+5, r19	; 0x05
 5c4:	2c 83       	std	Y+4, r18	; 0x04
 5c6:	4c 81       	ldd	r20, Y+4	; 0x04
 5c8:	5d 81       	ldd	r21, Y+5	; 0x05
 5ca:	41 30       	cpi	r20, 0x01	; 1
 5cc:	51 05       	cpc	r21, r1
 5ce:	79 f1       	breq	.+94     	; 0x62e <GPIO_readPin+0x96>
 5d0:	8c 81       	ldd	r24, Y+4	; 0x04
 5d2:	9d 81       	ldd	r25, Y+5	; 0x05
 5d4:	82 30       	cpi	r24, 0x02	; 2
 5d6:	91 05       	cpc	r25, r1
 5d8:	34 f4       	brge	.+12     	; 0x5e6 <GPIO_readPin+0x4e>
 5da:	2c 81       	ldd	r18, Y+4	; 0x04
 5dc:	3d 81       	ldd	r19, Y+5	; 0x05
 5de:	21 15       	cp	r18, r1
 5e0:	31 05       	cpc	r19, r1
 5e2:	69 f0       	breq	.+26     	; 0x5fe <GPIO_readPin+0x66>
 5e4:	6b c0       	rjmp	.+214    	; 0x6bc <GPIO_readPin+0x124>
 5e6:	4c 81       	ldd	r20, Y+4	; 0x04
 5e8:	5d 81       	ldd	r21, Y+5	; 0x05
 5ea:	42 30       	cpi	r20, 0x02	; 2
 5ec:	51 05       	cpc	r21, r1
 5ee:	b9 f1       	breq	.+110    	; 0x65e <GPIO_readPin+0xc6>
 5f0:	8c 81       	ldd	r24, Y+4	; 0x04
 5f2:	9d 81       	ldd	r25, Y+5	; 0x05
 5f4:	83 30       	cpi	r24, 0x03	; 3
 5f6:	91 05       	cpc	r25, r1
 5f8:	09 f4       	brne	.+2      	; 0x5fc <GPIO_readPin+0x64>
 5fa:	49 c0       	rjmp	.+146    	; 0x68e <GPIO_readPin+0xf6>
 5fc:	5f c0       	rjmp	.+190    	; 0x6bc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 5fe:	e9 e3       	ldi	r30, 0x39	; 57
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	80 81       	ld	r24, Z
 604:	28 2f       	mov	r18, r24
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	8b 81       	ldd	r24, Y+3	; 0x03
 60a:	88 2f       	mov	r24, r24
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	a9 01       	movw	r20, r18
 610:	02 c0       	rjmp	.+4      	; 0x616 <GPIO_readPin+0x7e>
 612:	55 95       	asr	r21
 614:	47 95       	ror	r20
 616:	8a 95       	dec	r24
 618:	e2 f7       	brpl	.-8      	; 0x612 <GPIO_readPin+0x7a>
 61a:	ca 01       	movw	r24, r20
 61c:	81 70       	andi	r24, 0x01	; 1
 61e:	90 70       	andi	r25, 0x00	; 0
 620:	88 23       	and	r24, r24
 622:	19 f0       	breq	.+6      	; 0x62a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	89 83       	std	Y+1, r24	; 0x01
 628:	49 c0       	rjmp	.+146    	; 0x6bc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 62a:	19 82       	std	Y+1, r1	; 0x01
 62c:	47 c0       	rjmp	.+142    	; 0x6bc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 62e:	e6 e3       	ldi	r30, 0x36	; 54
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	28 2f       	mov	r18, r24
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	8b 81       	ldd	r24, Y+3	; 0x03
 63a:	88 2f       	mov	r24, r24
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	a9 01       	movw	r20, r18
 640:	02 c0       	rjmp	.+4      	; 0x646 <GPIO_readPin+0xae>
 642:	55 95       	asr	r21
 644:	47 95       	ror	r20
 646:	8a 95       	dec	r24
 648:	e2 f7       	brpl	.-8      	; 0x642 <GPIO_readPin+0xaa>
 64a:	ca 01       	movw	r24, r20
 64c:	81 70       	andi	r24, 0x01	; 1
 64e:	90 70       	andi	r25, 0x00	; 0
 650:	88 23       	and	r24, r24
 652:	19 f0       	breq	.+6      	; 0x65a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	89 83       	std	Y+1, r24	; 0x01
 658:	31 c0       	rjmp	.+98     	; 0x6bc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 65a:	19 82       	std	Y+1, r1	; 0x01
 65c:	2f c0       	rjmp	.+94     	; 0x6bc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 65e:	e3 e3       	ldi	r30, 0x33	; 51
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	28 2f       	mov	r18, r24
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	8b 81       	ldd	r24, Y+3	; 0x03
 66a:	88 2f       	mov	r24, r24
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	a9 01       	movw	r20, r18
 670:	02 c0       	rjmp	.+4      	; 0x676 <GPIO_readPin+0xde>
 672:	55 95       	asr	r21
 674:	47 95       	ror	r20
 676:	8a 95       	dec	r24
 678:	e2 f7       	brpl	.-8      	; 0x672 <GPIO_readPin+0xda>
 67a:	ca 01       	movw	r24, r20
 67c:	81 70       	andi	r24, 0x01	; 1
 67e:	90 70       	andi	r25, 0x00	; 0
 680:	88 23       	and	r24, r24
 682:	19 f0       	breq	.+6      	; 0x68a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	89 83       	std	Y+1, r24	; 0x01
 688:	19 c0       	rjmp	.+50     	; 0x6bc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 68a:	19 82       	std	Y+1, r1	; 0x01
 68c:	17 c0       	rjmp	.+46     	; 0x6bc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 68e:	e0 e3       	ldi	r30, 0x30	; 48
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	80 81       	ld	r24, Z
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	8b 81       	ldd	r24, Y+3	; 0x03
 69a:	88 2f       	mov	r24, r24
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	a9 01       	movw	r20, r18
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <GPIO_readPin+0x10e>
 6a2:	55 95       	asr	r21
 6a4:	47 95       	ror	r20
 6a6:	8a 95       	dec	r24
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <GPIO_readPin+0x10a>
 6aa:	ca 01       	movw	r24, r20
 6ac:	81 70       	andi	r24, 0x01	; 1
 6ae:	90 70       	andi	r25, 0x00	; 0
 6b0:	88 23       	and	r24, r24
 6b2:	19 f0       	breq	.+6      	; 0x6ba <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	89 83       	std	Y+1, r24	; 0x01
 6b8:	01 c0       	rjmp	.+2      	; 0x6bc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 6ba:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
}
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	cf 91       	pop	r28
 6ca:	df 91       	pop	r29
 6cc:	08 95       	ret

000006ce <GPIO_togglePin>:
void GPIO_togglePin(uint8 port_num, uint8 pin_num){
 6ce:	df 93       	push	r29
 6d0:	cf 93       	push	r28
 6d2:	00 d0       	rcall	.+0      	; 0x6d4 <GPIO_togglePin+0x6>
 6d4:	00 d0       	rcall	.+0      	; 0x6d6 <GPIO_togglePin+0x8>
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
 6da:	89 83       	std	Y+1, r24	; 0x01
 6dc:	6a 83       	std	Y+2, r22	; 0x02


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	88 30       	cpi	r24, 0x08	; 8
 6e2:	08 f0       	brcs	.+2      	; 0x6e6 <GPIO_togglePin+0x18>
 6e4:	72 c0       	rjmp	.+228    	; 0x7ca <GPIO_togglePin+0xfc>
 6e6:	89 81       	ldd	r24, Y+1	; 0x01
 6e8:	84 30       	cpi	r24, 0x04	; 4
 6ea:	08 f0       	brcs	.+2      	; 0x6ee <GPIO_togglePin+0x20>
 6ec:	6e c0       	rjmp	.+220    	; 0x7ca <GPIO_togglePin+0xfc>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 6ee:	89 81       	ldd	r24, Y+1	; 0x01
 6f0:	28 2f       	mov	r18, r24
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	3c 83       	std	Y+4, r19	; 0x04
 6f6:	2b 83       	std	Y+3, r18	; 0x03
 6f8:	8b 81       	ldd	r24, Y+3	; 0x03
 6fa:	9c 81       	ldd	r25, Y+4	; 0x04
 6fc:	81 30       	cpi	r24, 0x01	; 1
 6fe:	91 05       	cpc	r25, r1
 700:	49 f1       	breq	.+82     	; 0x754 <GPIO_togglePin+0x86>
 702:	2b 81       	ldd	r18, Y+3	; 0x03
 704:	3c 81       	ldd	r19, Y+4	; 0x04
 706:	22 30       	cpi	r18, 0x02	; 2
 708:	31 05       	cpc	r19, r1
 70a:	2c f4       	brge	.+10     	; 0x716 <GPIO_togglePin+0x48>
 70c:	8b 81       	ldd	r24, Y+3	; 0x03
 70e:	9c 81       	ldd	r25, Y+4	; 0x04
 710:	00 97       	sbiw	r24, 0x00	; 0
 712:	61 f0       	breq	.+24     	; 0x72c <GPIO_togglePin+0x5e>
 714:	5a c0       	rjmp	.+180    	; 0x7ca <GPIO_togglePin+0xfc>
 716:	2b 81       	ldd	r18, Y+3	; 0x03
 718:	3c 81       	ldd	r19, Y+4	; 0x04
 71a:	22 30       	cpi	r18, 0x02	; 2
 71c:	31 05       	cpc	r19, r1
 71e:	71 f1       	breq	.+92     	; 0x77c <GPIO_togglePin+0xae>
 720:	8b 81       	ldd	r24, Y+3	; 0x03
 722:	9c 81       	ldd	r25, Y+4	; 0x04
 724:	83 30       	cpi	r24, 0x03	; 3
 726:	91 05       	cpc	r25, r1
 728:	e9 f1       	breq	.+122    	; 0x7a4 <GPIO_togglePin+0xd6>
 72a:	4f c0       	rjmp	.+158    	; 0x7ca <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA, pin_num);
 72c:	ab e3       	ldi	r26, 0x3B	; 59
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	eb e3       	ldi	r30, 0x3B	; 59
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	80 81       	ld	r24, Z
 736:	48 2f       	mov	r20, r24
 738:	8a 81       	ldd	r24, Y+2	; 0x02
 73a:	28 2f       	mov	r18, r24
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	02 2e       	mov	r0, r18
 744:	02 c0       	rjmp	.+4      	; 0x74a <GPIO_togglePin+0x7c>
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	0a 94       	dec	r0
 74c:	e2 f7       	brpl	.-8      	; 0x746 <GPIO_togglePin+0x78>
 74e:	84 27       	eor	r24, r20
 750:	8c 93       	st	X, r24
 752:	3b c0       	rjmp	.+118    	; 0x7ca <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB, pin_num);
 754:	a8 e3       	ldi	r26, 0x38	; 56
 756:	b0 e0       	ldi	r27, 0x00	; 0
 758:	e8 e3       	ldi	r30, 0x38	; 56
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	48 2f       	mov	r20, r24
 760:	8a 81       	ldd	r24, Y+2	; 0x02
 762:	28 2f       	mov	r18, r24
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	02 2e       	mov	r0, r18
 76c:	02 c0       	rjmp	.+4      	; 0x772 <GPIO_togglePin+0xa4>
 76e:	88 0f       	add	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	0a 94       	dec	r0
 774:	e2 f7       	brpl	.-8      	; 0x76e <GPIO_togglePin+0xa0>
 776:	84 27       	eor	r24, r20
 778:	8c 93       	st	X, r24
 77a:	27 c0       	rjmp	.+78     	; 0x7ca <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC, pin_num);
 77c:	a5 e3       	ldi	r26, 0x35	; 53
 77e:	b0 e0       	ldi	r27, 0x00	; 0
 780:	e5 e3       	ldi	r30, 0x35	; 53
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	80 81       	ld	r24, Z
 786:	48 2f       	mov	r20, r24
 788:	8a 81       	ldd	r24, Y+2	; 0x02
 78a:	28 2f       	mov	r18, r24
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	02 2e       	mov	r0, r18
 794:	02 c0       	rjmp	.+4      	; 0x79a <GPIO_togglePin+0xcc>
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	0a 94       	dec	r0
 79c:	e2 f7       	brpl	.-8      	; 0x796 <GPIO_togglePin+0xc8>
 79e:	84 27       	eor	r24, r20
 7a0:	8c 93       	st	X, r24
 7a2:	13 c0       	rjmp	.+38     	; 0x7ca <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD, pin_num);
 7a4:	a2 e3       	ldi	r26, 0x32	; 50
 7a6:	b0 e0       	ldi	r27, 0x00	; 0
 7a8:	e2 e3       	ldi	r30, 0x32	; 50
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	80 81       	ld	r24, Z
 7ae:	48 2f       	mov	r20, r24
 7b0:	8a 81       	ldd	r24, Y+2	; 0x02
 7b2:	28 2f       	mov	r18, r24
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	02 2e       	mov	r0, r18
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <GPIO_togglePin+0xf4>
 7be:	88 0f       	add	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	0a 94       	dec	r0
 7c4:	e2 f7       	brpl	.-8      	; 0x7be <GPIO_togglePin+0xf0>
 7c6:	84 27       	eor	r24, r20
 7c8:	8c 93       	st	X, r24
			break;
		}
	}
}
 7ca:	0f 90       	pop	r0
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	0f 90       	pop	r0
 7d2:	cf 91       	pop	r28
 7d4:	df 91       	pop	r29
 7d6:	08 95       	ret

000007d8 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
 7d8:	df 93       	push	r29
 7da:	cf 93       	push	r28
 7dc:	00 d0       	rcall	.+0      	; 0x7de <GPIO_setupPortDirection+0x6>
 7de:	00 d0       	rcall	.+0      	; 0x7e0 <GPIO_setupPortDirection+0x8>
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
 7e4:	89 83       	std	Y+1, r24	; 0x01
 7e6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	84 30       	cpi	r24, 0x04	; 4
 7ec:	90 f5       	brcc	.+100    	; 0x852 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 7ee:	89 81       	ldd	r24, Y+1	; 0x01
 7f0:	28 2f       	mov	r18, r24
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	3c 83       	std	Y+4, r19	; 0x04
 7f6:	2b 83       	std	Y+3, r18	; 0x03
 7f8:	8b 81       	ldd	r24, Y+3	; 0x03
 7fa:	9c 81       	ldd	r25, Y+4	; 0x04
 7fc:	81 30       	cpi	r24, 0x01	; 1
 7fe:	91 05       	cpc	r25, r1
 800:	d1 f0       	breq	.+52     	; 0x836 <GPIO_setupPortDirection+0x5e>
 802:	2b 81       	ldd	r18, Y+3	; 0x03
 804:	3c 81       	ldd	r19, Y+4	; 0x04
 806:	22 30       	cpi	r18, 0x02	; 2
 808:	31 05       	cpc	r19, r1
 80a:	2c f4       	brge	.+10     	; 0x816 <GPIO_setupPortDirection+0x3e>
 80c:	8b 81       	ldd	r24, Y+3	; 0x03
 80e:	9c 81       	ldd	r25, Y+4	; 0x04
 810:	00 97       	sbiw	r24, 0x00	; 0
 812:	61 f0       	breq	.+24     	; 0x82c <GPIO_setupPortDirection+0x54>
 814:	1e c0       	rjmp	.+60     	; 0x852 <GPIO_setupPortDirection+0x7a>
 816:	2b 81       	ldd	r18, Y+3	; 0x03
 818:	3c 81       	ldd	r19, Y+4	; 0x04
 81a:	22 30       	cpi	r18, 0x02	; 2
 81c:	31 05       	cpc	r19, r1
 81e:	81 f0       	breq	.+32     	; 0x840 <GPIO_setupPortDirection+0x68>
 820:	8b 81       	ldd	r24, Y+3	; 0x03
 822:	9c 81       	ldd	r25, Y+4	; 0x04
 824:	83 30       	cpi	r24, 0x03	; 3
 826:	91 05       	cpc	r25, r1
 828:	81 f0       	breq	.+32     	; 0x84a <GPIO_setupPortDirection+0x72>
 82a:	13 c0       	rjmp	.+38     	; 0x852 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 82c:	ea e3       	ldi	r30, 0x3A	; 58
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	8a 81       	ldd	r24, Y+2	; 0x02
 832:	80 83       	st	Z, r24
 834:	0e c0       	rjmp	.+28     	; 0x852 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 836:	e7 e3       	ldi	r30, 0x37	; 55
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	8a 81       	ldd	r24, Y+2	; 0x02
 83c:	80 83       	st	Z, r24
 83e:	09 c0       	rjmp	.+18     	; 0x852 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 840:	e4 e3       	ldi	r30, 0x34	; 52
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	8a 81       	ldd	r24, Y+2	; 0x02
 846:	80 83       	st	Z, r24
 848:	04 c0       	rjmp	.+8      	; 0x852 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 84a:	e1 e3       	ldi	r30, 0x31	; 49
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	8a 81       	ldd	r24, Y+2	; 0x02
 850:	80 83       	st	Z, r24
			break;
		}
	}
}
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	0f 90       	pop	r0
 858:	0f 90       	pop	r0
 85a:	cf 91       	pop	r28
 85c:	df 91       	pop	r29
 85e:	08 95       	ret

00000860 <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value){
 860:	df 93       	push	r29
 862:	cf 93       	push	r28
 864:	00 d0       	rcall	.+0      	; 0x866 <GPIO_writePort+0x6>
 866:	00 d0       	rcall	.+0      	; 0x868 <GPIO_writePort+0x8>
 868:	cd b7       	in	r28, 0x3d	; 61
 86a:	de b7       	in	r29, 0x3e	; 62
 86c:	89 83       	std	Y+1, r24	; 0x01
 86e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 870:	89 81       	ldd	r24, Y+1	; 0x01
 872:	84 30       	cpi	r24, 0x04	; 4
 874:	90 f5       	brcc	.+100    	; 0x8da <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 876:	89 81       	ldd	r24, Y+1	; 0x01
 878:	28 2f       	mov	r18, r24
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	3c 83       	std	Y+4, r19	; 0x04
 87e:	2b 83       	std	Y+3, r18	; 0x03
 880:	8b 81       	ldd	r24, Y+3	; 0x03
 882:	9c 81       	ldd	r25, Y+4	; 0x04
 884:	81 30       	cpi	r24, 0x01	; 1
 886:	91 05       	cpc	r25, r1
 888:	d1 f0       	breq	.+52     	; 0x8be <GPIO_writePort+0x5e>
 88a:	2b 81       	ldd	r18, Y+3	; 0x03
 88c:	3c 81       	ldd	r19, Y+4	; 0x04
 88e:	22 30       	cpi	r18, 0x02	; 2
 890:	31 05       	cpc	r19, r1
 892:	2c f4       	brge	.+10     	; 0x89e <GPIO_writePort+0x3e>
 894:	8b 81       	ldd	r24, Y+3	; 0x03
 896:	9c 81       	ldd	r25, Y+4	; 0x04
 898:	00 97       	sbiw	r24, 0x00	; 0
 89a:	61 f0       	breq	.+24     	; 0x8b4 <GPIO_writePort+0x54>
 89c:	1e c0       	rjmp	.+60     	; 0x8da <GPIO_writePort+0x7a>
 89e:	2b 81       	ldd	r18, Y+3	; 0x03
 8a0:	3c 81       	ldd	r19, Y+4	; 0x04
 8a2:	22 30       	cpi	r18, 0x02	; 2
 8a4:	31 05       	cpc	r19, r1
 8a6:	81 f0       	breq	.+32     	; 0x8c8 <GPIO_writePort+0x68>
 8a8:	8b 81       	ldd	r24, Y+3	; 0x03
 8aa:	9c 81       	ldd	r25, Y+4	; 0x04
 8ac:	83 30       	cpi	r24, 0x03	; 3
 8ae:	91 05       	cpc	r25, r1
 8b0:	81 f0       	breq	.+32     	; 0x8d2 <GPIO_writePort+0x72>
 8b2:	13 c0       	rjmp	.+38     	; 0x8da <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 8b4:	eb e3       	ldi	r30, 0x3B	; 59
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ba:	80 83       	st	Z, r24
 8bc:	0e c0       	rjmp	.+28     	; 0x8da <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 8be:	e8 e3       	ldi	r30, 0x38	; 56
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	8a 81       	ldd	r24, Y+2	; 0x02
 8c4:	80 83       	st	Z, r24
 8c6:	09 c0       	rjmp	.+18     	; 0x8da <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 8c8:	e5 e3       	ldi	r30, 0x35	; 53
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	8a 81       	ldd	r24, Y+2	; 0x02
 8ce:	80 83       	st	Z, r24
 8d0:	04 c0       	rjmp	.+8      	; 0x8da <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 8d2:	e2 e3       	ldi	r30, 0x32	; 50
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	8a 81       	ldd	r24, Y+2	; 0x02
 8d8:	80 83       	st	Z, r24
			break;
		}
	}
}
 8da:	0f 90       	pop	r0
 8dc:	0f 90       	pop	r0
 8de:	0f 90       	pop	r0
 8e0:	0f 90       	pop	r0
 8e2:	cf 91       	pop	r28
 8e4:	df 91       	pop	r29
 8e6:	08 95       	ret

000008e8 <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num){
 8e8:	df 93       	push	r29
 8ea:	cf 93       	push	r28
 8ec:	00 d0       	rcall	.+0      	; 0x8ee <GPIO_readPort+0x6>
 8ee:	00 d0       	rcall	.+0      	; 0x8f0 <GPIO_readPort+0x8>
 8f0:	cd b7       	in	r28, 0x3d	; 61
 8f2:	de b7       	in	r29, 0x3e	; 62
 8f4:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
 8f6:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
 8f8:	8a 81       	ldd	r24, Y+2	; 0x02
 8fa:	84 30       	cpi	r24, 0x04	; 4
 8fc:	90 f5       	brcc	.+100    	; 0x962 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 8fe:	8a 81       	ldd	r24, Y+2	; 0x02
 900:	28 2f       	mov	r18, r24
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	3c 83       	std	Y+4, r19	; 0x04
 906:	2b 83       	std	Y+3, r18	; 0x03
 908:	8b 81       	ldd	r24, Y+3	; 0x03
 90a:	9c 81       	ldd	r25, Y+4	; 0x04
 90c:	81 30       	cpi	r24, 0x01	; 1
 90e:	91 05       	cpc	r25, r1
 910:	d1 f0       	breq	.+52     	; 0x946 <GPIO_readPort+0x5e>
 912:	2b 81       	ldd	r18, Y+3	; 0x03
 914:	3c 81       	ldd	r19, Y+4	; 0x04
 916:	22 30       	cpi	r18, 0x02	; 2
 918:	31 05       	cpc	r19, r1
 91a:	2c f4       	brge	.+10     	; 0x926 <GPIO_readPort+0x3e>
 91c:	8b 81       	ldd	r24, Y+3	; 0x03
 91e:	9c 81       	ldd	r25, Y+4	; 0x04
 920:	00 97       	sbiw	r24, 0x00	; 0
 922:	61 f0       	breq	.+24     	; 0x93c <GPIO_readPort+0x54>
 924:	1e c0       	rjmp	.+60     	; 0x962 <GPIO_readPort+0x7a>
 926:	2b 81       	ldd	r18, Y+3	; 0x03
 928:	3c 81       	ldd	r19, Y+4	; 0x04
 92a:	22 30       	cpi	r18, 0x02	; 2
 92c:	31 05       	cpc	r19, r1
 92e:	81 f0       	breq	.+32     	; 0x950 <GPIO_readPort+0x68>
 930:	8b 81       	ldd	r24, Y+3	; 0x03
 932:	9c 81       	ldd	r25, Y+4	; 0x04
 934:	83 30       	cpi	r24, 0x03	; 3
 936:	91 05       	cpc	r25, r1
 938:	81 f0       	breq	.+32     	; 0x95a <GPIO_readPort+0x72>
 93a:	13 c0       	rjmp	.+38     	; 0x962 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 93c:	e9 e3       	ldi	r30, 0x39	; 57
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	89 83       	std	Y+1, r24	; 0x01
 944:	0e c0       	rjmp	.+28     	; 0x962 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 946:	e6 e3       	ldi	r30, 0x36	; 54
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	89 83       	std	Y+1, r24	; 0x01
 94e:	09 c0       	rjmp	.+18     	; 0x962 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 950:	e3 e3       	ldi	r30, 0x33	; 51
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	80 81       	ld	r24, Z
 956:	89 83       	std	Y+1, r24	; 0x01
 958:	04 c0       	rjmp	.+8      	; 0x962 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 95a:	e0 e3       	ldi	r30, 0x30	; 48
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	80 81       	ld	r24, Z
 960:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 962:	89 81       	ldd	r24, Y+1	; 0x01
}
 964:	0f 90       	pop	r0
 966:	0f 90       	pop	r0
 968:	0f 90       	pop	r0
 96a:	0f 90       	pop	r0
 96c:	cf 91       	pop	r28
 96e:	df 91       	pop	r29
 970:	08 95       	ret

00000972 <setup>:
#include "MCAL/uart/uart.h"


#include <string.h>
#include "avr/io.h"
void setup(){
 972:	df 93       	push	r29
 974:	cf 93       	push	r28
 976:	cd b7       	in	r28, 0x3d	; 61
 978:	de b7       	in	r29, 0x3e	; 62
	UART_init();
 97a:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_init>
}
 97e:	cf 91       	pop	r28
 980:	df 91       	pop	r29
 982:	08 95       	ret

00000984 <main>:

void main(void){
 984:	df 93       	push	r29
 986:	cf 93       	push	r28
 988:	cd b7       	in	r28, 0x3d	; 61
 98a:	de b7       	in	r29, 0x3e	; 62


//	if(strcmp(password, confirmation_password) == 0){return;}

}
 98c:	cf 91       	pop	r28
 98e:	df 91       	pop	r29
 990:	08 95       	ret

00000992 <_exit>:
 992:	f8 94       	cli

00000994 <__stop_program>:
 994:	ff cf       	rjmp	.-2      	; 0x994 <__stop_program>
