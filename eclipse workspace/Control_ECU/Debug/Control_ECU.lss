
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000ca0  00000d14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001764  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000012ca  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 28 06 	call	0xc50	; 0xc50 <main>
  7a:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_13>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(USART_RXC_vect){
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	g_uartRcvData = UDR;
  9a:	ec e2       	ldi	r30, 0x2C	; 44
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 93 60 00 	sts	0x0060, r24
}
  a4:	cf 91       	pop	r28
  a6:	df 91       	pop	r29
  a8:	ff 91       	pop	r31
  aa:	ef 91       	pop	r30
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <UART_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void UART_init(){
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	00 d0       	rcall	.+0      	; 0xbe <UART_init+0x6>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62

	uint16 ubrr_value = 0;
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRA, U2X);		/* : Double the USART Transmission Speed */
  c6:	ab e2       	ldi	r26, 0x2B	; 43
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	eb e2       	ldi	r30, 0x2B	; 43
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	8c 93       	st	X, r24

	SET_BIT(UCSRB, RXCIE);		/* RX Complete Interrupt Enable */
  d4:	aa e2       	ldi	r26, 0x2A	; 42
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	ea e2       	ldi	r30, 0x2A	; 42
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);		/* Transmitter Enable*/
  e2:	aa e2       	ldi	r26, 0x2A	; 42
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	ea e2       	ldi	r30, 0x2A	; 42
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 60       	ori	r24, 0x08	; 8
  ee:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);		/* Receiver Enable */
  f0:	aa e2       	ldi	r26, 0x2A	; 42
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	ea e2       	ldi	r30, 0x2A	; 42
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC, UMSEL);	/* USART Mode Select 0 -> async, 1 -> sync*/
  fe:	a0 e4       	ldi	r26, 0x40	; 64
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	e0 e4       	ldi	r30, 0x40	; 64
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);		/* UCSZ1:0: Character Size */
 10c:	a0 e4       	ldi	r26, 0x40	; 64
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e0 e4       	ldi	r30, 0x40	; 64
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);		/* UCSZ1:0: 11 -> 8-bit */
 11a:	a0 e4       	ldi	r26, 0x40	; 64
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e0 e4       	ldi	r30, 0x40	; 64
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	8c 93       	st	X, r24


	ubrr_value = (uint16)(( F_CPU / ( BAUDRATE * 8UL )) - 1 );
 128:	87 e6       	ldi	r24, 0x67	; 103
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	9a 83       	std	Y+2, r25	; 0x02
 12e:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = (ubrr_value >> 8) & (0x0F);
 130:	e0 e4       	ldi	r30, 0x40	; 64
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	9a 81       	ldd	r25, Y+2	; 0x02
 138:	89 2f       	mov	r24, r25
 13a:	99 27       	eor	r25, r25
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
 140:	e9 e2       	ldi	r30, 0x29	; 41
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	80 83       	st	Z, r24
}
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	08 95       	ret

00000152 <UART_sendCharacter>:

void UART_sendCharacter(uint8 data){
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	0f 92       	push	r0
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
 15e:	eb e2       	ldi	r30, 0x2B	; 43
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 2f       	mov	r24, r24
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	80 72       	andi	r24, 0x20	; 32
 16a:	90 70       	andi	r25, 0x00	; 0
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	b9 f3       	breq	.-18     	; 0x15e <UART_sendCharacter+0xc>
	UDR = data;
 170:	ec e2       	ldi	r30, 0x2C	; 44
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	80 83       	st	Z, r24
}
 178:	0f 90       	pop	r0
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	08 95       	ret

00000180 <UART_sendArray>:

void UART_sendArray(uint8 *str, uint8 str_size){
 180:	df 93       	push	r29
 182:	cf 93       	push	r28
 184:	00 d0       	rcall	.+0      	; 0x186 <UART_sendArray+0x6>
 186:	00 d0       	rcall	.+0      	; 0x188 <UART_sendArray+0x8>
 188:	0f 92       	push	r0
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	9c 83       	std	Y+4, r25	; 0x04
 190:	8b 83       	std	Y+3, r24	; 0x03
 192:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < str_size; i++){
 194:	1a 82       	std	Y+2, r1	; 0x02
 196:	19 82       	std	Y+1, r1	; 0x01
 198:	19 c0       	rjmp	.+50     	; 0x1cc <UART_sendArray+0x4c>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
 19a:	eb e2       	ldi	r30, 0x2B	; 43
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	80 72       	andi	r24, 0x20	; 32
 1a6:	90 70       	andi	r25, 0x00	; 0
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	b9 f3       	breq	.-18     	; 0x19a <UART_sendArray+0x1a>
		UDR = str[i];
 1ac:	ac e2       	ldi	r26, 0x2C	; 44
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	29 81       	ldd	r18, Y+1	; 0x01
 1b2:	3a 81       	ldd	r19, Y+2	; 0x02
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	9c 81       	ldd	r25, Y+4	; 0x04
 1b8:	fc 01       	movw	r30, r24
 1ba:	e2 0f       	add	r30, r18
 1bc:	f3 1f       	adc	r31, r19
 1be:	80 81       	ld	r24, Z
 1c0:	8c 93       	st	X, r24
	UDR = data;
}

void UART_sendArray(uint8 *str, uint8 str_size){

	for(int i = 0; i < str_size; i++){
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	9a 83       	std	Y+2, r25	; 0x02
 1ca:	89 83       	std	Y+1, r24	; 0x01
 1cc:	8d 81       	ldd	r24, Y+5	; 0x05
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	9a 81       	ldd	r25, Y+2	; 0x02
 1d6:	82 17       	cp	r24, r18
 1d8:	93 07       	cpc	r25, r19
 1da:	fc f2       	brlt	.-66     	; 0x19a <UART_sendArray+0x1a>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
		UDR = str[i];
	}

}
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	cf 91       	pop	r28
 1e8:	df 91       	pop	r29
 1ea:	08 95       	ret

000001ec <UART_rcvCharacter>:

uint8 UART_rcvCharacter(){
 1ec:	df 93       	push	r29
 1ee:	cf 93       	push	r28
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
	while( BIT_IS_CLEAR(UCSRA, RXC) ){}
 1f4:	eb e2       	ldi	r30, 0x2B	; 43
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	88 23       	and	r24, r24
 1fc:	dc f7       	brge	.-10     	; 0x1f4 <UART_rcvCharacter+0x8>
	return UDR;
 1fe:	ec e2       	ldi	r30, 0x2C	; 44
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
}
 204:	cf 91       	pop	r28
 206:	df 91       	pop	r29
 208:	08 95       	ret

0000020a <TIMER0_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void TIMER0_init(){
 20a:	df 93       	push	r29
 20c:	cf 93       	push	r28
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0, FOC0);
 212:	a3 e5       	ldi	r26, 0x53	; 83
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e3 e5       	ldi	r30, 0x53	; 83
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	8f 77       	andi	r24, 0x7F	; 127
 21e:	8c 93       	st	X, r24
}
 220:	cf 91       	pop	r28
 222:	df 91       	pop	r29
 224:	08 95       	ret

00000226 <TIMER0_start>:
void TIMER0_start(){}
 226:	df 93       	push	r29
 228:	cf 93       	push	r28
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	cf 91       	pop	r28
 230:	df 91       	pop	r29
 232:	08 95       	ret

00000234 <TIMER0_stop>:
void TIMER0_stop(){}
 234:	df 93       	push	r29
 236:	cf 93       	push	r28
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	08 95       	ret

00000242 <TIMER0_clear>:
void TIMER0_clear(){}
 242:	df 93       	push	r29
 244:	cf 93       	push	r28
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	cf 91       	pop	r28
 24c:	df 91       	pop	r29
 24e:	08 95       	ret

00000250 <GPIO_setupPinDirection>:
 *******************************************************************************/



void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
 250:	df 93       	push	r29
 252:	cf 93       	push	r28
 254:	00 d0       	rcall	.+0      	; 0x256 <GPIO_setupPinDirection+0x6>
 256:	00 d0       	rcall	.+0      	; 0x258 <GPIO_setupPinDirection+0x8>
 258:	0f 92       	push	r0
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	89 83       	std	Y+1, r24	; 0x01
 260:	6a 83       	std	Y+2, r22	; 0x02
 262:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	88 30       	cpi	r24, 0x08	; 8
 268:	08 f0       	brcs	.+2      	; 0x26c <GPIO_setupPinDirection+0x1c>
 26a:	d5 c0       	rjmp	.+426    	; 0x416 <GPIO_setupPinDirection+0x1c6>
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	84 30       	cpi	r24, 0x04	; 4
 270:	08 f0       	brcs	.+2      	; 0x274 <GPIO_setupPinDirection+0x24>
 272:	d1 c0       	rjmp	.+418    	; 0x416 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	28 2f       	mov	r18, r24
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	3d 83       	std	Y+5, r19	; 0x05
 27c:	2c 83       	std	Y+4, r18	; 0x04
 27e:	8c 81       	ldd	r24, Y+4	; 0x04
 280:	9d 81       	ldd	r25, Y+5	; 0x05
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	91 05       	cpc	r25, r1
 286:	09 f4       	brne	.+2      	; 0x28a <GPIO_setupPinDirection+0x3a>
 288:	43 c0       	rjmp	.+134    	; 0x310 <GPIO_setupPinDirection+0xc0>
 28a:	2c 81       	ldd	r18, Y+4	; 0x04
 28c:	3d 81       	ldd	r19, Y+5	; 0x05
 28e:	22 30       	cpi	r18, 0x02	; 2
 290:	31 05       	cpc	r19, r1
 292:	2c f4       	brge	.+10     	; 0x29e <GPIO_setupPinDirection+0x4e>
 294:	8c 81       	ldd	r24, Y+4	; 0x04
 296:	9d 81       	ldd	r25, Y+5	; 0x05
 298:	00 97       	sbiw	r24, 0x00	; 0
 29a:	71 f0       	breq	.+28     	; 0x2b8 <GPIO_setupPinDirection+0x68>
 29c:	bc c0       	rjmp	.+376    	; 0x416 <GPIO_setupPinDirection+0x1c6>
 29e:	2c 81       	ldd	r18, Y+4	; 0x04
 2a0:	3d 81       	ldd	r19, Y+5	; 0x05
 2a2:	22 30       	cpi	r18, 0x02	; 2
 2a4:	31 05       	cpc	r19, r1
 2a6:	09 f4       	brne	.+2      	; 0x2aa <GPIO_setupPinDirection+0x5a>
 2a8:	5f c0       	rjmp	.+190    	; 0x368 <GPIO_setupPinDirection+0x118>
 2aa:	8c 81       	ldd	r24, Y+4	; 0x04
 2ac:	9d 81       	ldd	r25, Y+5	; 0x05
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	91 05       	cpc	r25, r1
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <GPIO_setupPinDirection+0x66>
 2b4:	85 c0       	rjmp	.+266    	; 0x3c0 <GPIO_setupPinDirection+0x170>
 2b6:	af c0       	rjmp	.+350    	; 0x416 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	a1 f4       	brne	.+40     	; 0x2e6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 2be:	aa e3       	ldi	r26, 0x3A	; 58
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	ea e3       	ldi	r30, 0x3A	; 58
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	48 2f       	mov	r20, r24
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <GPIO_setupPinDirection+0x8c>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <GPIO_setupPinDirection+0x88>
 2e0:	84 2b       	or	r24, r20
 2e2:	8c 93       	st	X, r24
 2e4:	98 c0       	rjmp	.+304    	; 0x416 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 2e6:	aa e3       	ldi	r26, 0x3A	; 58
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	ea e3       	ldi	r30, 0x3A	; 58
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <GPIO_setupPinDirection+0xb4>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <GPIO_setupPinDirection+0xb0>
 308:	80 95       	com	r24
 30a:	84 23       	and	r24, r20
 30c:	8c 93       	st	X, r24
 30e:	83 c0       	rjmp	.+262    	; 0x416 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	a1 f4       	brne	.+40     	; 0x33e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 316:	a7 e3       	ldi	r26, 0x37	; 55
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	e7 e3       	ldi	r30, 0x37	; 55
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	48 2f       	mov	r20, r24
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	28 2f       	mov	r18, r24
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 2e       	mov	r0, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <GPIO_setupPinDirection+0xe4>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <GPIO_setupPinDirection+0xe0>
 338:	84 2b       	or	r24, r20
 33a:	8c 93       	st	X, r24
 33c:	6c c0       	rjmp	.+216    	; 0x416 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 33e:	a7 e3       	ldi	r26, 0x37	; 55
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	e7 e3       	ldi	r30, 0x37	; 55
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	48 2f       	mov	r20, r24
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	28 2f       	mov	r18, r24
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 2e       	mov	r0, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <GPIO_setupPinDirection+0x10c>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	0a 94       	dec	r0
 35e:	e2 f7       	brpl	.-8      	; 0x358 <GPIO_setupPinDirection+0x108>
 360:	80 95       	com	r24
 362:	84 23       	and	r24, r20
 364:	8c 93       	st	X, r24
 366:	57 c0       	rjmp	.+174    	; 0x416 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	a1 f4       	brne	.+40     	; 0x396 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 36e:	a4 e3       	ldi	r26, 0x34	; 52
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	e4 e3       	ldi	r30, 0x34	; 52
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	48 2f       	mov	r20, r24
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	28 2f       	mov	r18, r24
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 2e       	mov	r0, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <GPIO_setupPinDirection+0x13c>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <GPIO_setupPinDirection+0x138>
 390:	84 2b       	or	r24, r20
 392:	8c 93       	st	X, r24
 394:	40 c0       	rjmp	.+128    	; 0x416 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 396:	a4 e3       	ldi	r26, 0x34	; 52
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	e4 e3       	ldi	r30, 0x34	; 52
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	48 2f       	mov	r20, r24
 3a2:	8a 81       	ldd	r24, Y+2	; 0x02
 3a4:	28 2f       	mov	r18, r24
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 2e       	mov	r0, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <GPIO_setupPinDirection+0x164>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <GPIO_setupPinDirection+0x160>
 3b8:	80 95       	com	r24
 3ba:	84 23       	and	r24, r20
 3bc:	8c 93       	st	X, r24
 3be:	2b c0       	rjmp	.+86     	; 0x416 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 3c0:	8b 81       	ldd	r24, Y+3	; 0x03
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	a1 f4       	brne	.+40     	; 0x3ee <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 3c6:	a1 e3       	ldi	r26, 0x31	; 49
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	e1 e3       	ldi	r30, 0x31	; 49
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	48 2f       	mov	r20, r24
 3d2:	8a 81       	ldd	r24, Y+2	; 0x02
 3d4:	28 2f       	mov	r18, r24
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 2e       	mov	r0, r18
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <GPIO_setupPinDirection+0x194>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	0a 94       	dec	r0
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <GPIO_setupPinDirection+0x190>
 3e8:	84 2b       	or	r24, r20
 3ea:	8c 93       	st	X, r24
 3ec:	14 c0       	rjmp	.+40     	; 0x416 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 3ee:	a1 e3       	ldi	r26, 0x31	; 49
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	e1 e3       	ldi	r30, 0x31	; 49
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 2e       	mov	r0, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <GPIO_setupPinDirection+0x1bc>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <GPIO_setupPinDirection+0x1b8>
 410:	80 95       	com	r24
 412:	84 23       	and	r24, r20
 414:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	cf 91       	pop	r28
 422:	df 91       	pop	r29
 424:	08 95       	ret

00000426 <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
 426:	df 93       	push	r29
 428:	cf 93       	push	r28
 42a:	00 d0       	rcall	.+0      	; 0x42c <GPIO_writePin+0x6>
 42c:	00 d0       	rcall	.+0      	; 0x42e <GPIO_writePin+0x8>
 42e:	0f 92       	push	r0
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
 434:	89 83       	std	Y+1, r24	; 0x01
 436:	6a 83       	std	Y+2, r22	; 0x02
 438:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 43a:	8a 81       	ldd	r24, Y+2	; 0x02
 43c:	88 30       	cpi	r24, 0x08	; 8
 43e:	08 f0       	brcs	.+2      	; 0x442 <GPIO_writePin+0x1c>
 440:	d5 c0       	rjmp	.+426    	; 0x5ec <GPIO_writePin+0x1c6>
 442:	89 81       	ldd	r24, Y+1	; 0x01
 444:	84 30       	cpi	r24, 0x04	; 4
 446:	08 f0       	brcs	.+2      	; 0x44a <GPIO_writePin+0x24>
 448:	d1 c0       	rjmp	.+418    	; 0x5ec <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	28 2f       	mov	r18, r24
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	3d 83       	std	Y+5, r19	; 0x05
 452:	2c 83       	std	Y+4, r18	; 0x04
 454:	8c 81       	ldd	r24, Y+4	; 0x04
 456:	9d 81       	ldd	r25, Y+5	; 0x05
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	91 05       	cpc	r25, r1
 45c:	09 f4       	brne	.+2      	; 0x460 <GPIO_writePin+0x3a>
 45e:	43 c0       	rjmp	.+134    	; 0x4e6 <GPIO_writePin+0xc0>
 460:	2c 81       	ldd	r18, Y+4	; 0x04
 462:	3d 81       	ldd	r19, Y+5	; 0x05
 464:	22 30       	cpi	r18, 0x02	; 2
 466:	31 05       	cpc	r19, r1
 468:	2c f4       	brge	.+10     	; 0x474 <GPIO_writePin+0x4e>
 46a:	8c 81       	ldd	r24, Y+4	; 0x04
 46c:	9d 81       	ldd	r25, Y+5	; 0x05
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	71 f0       	breq	.+28     	; 0x48e <GPIO_writePin+0x68>
 472:	bc c0       	rjmp	.+376    	; 0x5ec <GPIO_writePin+0x1c6>
 474:	2c 81       	ldd	r18, Y+4	; 0x04
 476:	3d 81       	ldd	r19, Y+5	; 0x05
 478:	22 30       	cpi	r18, 0x02	; 2
 47a:	31 05       	cpc	r19, r1
 47c:	09 f4       	brne	.+2      	; 0x480 <GPIO_writePin+0x5a>
 47e:	5f c0       	rjmp	.+190    	; 0x53e <GPIO_writePin+0x118>
 480:	8c 81       	ldd	r24, Y+4	; 0x04
 482:	9d 81       	ldd	r25, Y+5	; 0x05
 484:	83 30       	cpi	r24, 0x03	; 3
 486:	91 05       	cpc	r25, r1
 488:	09 f4       	brne	.+2      	; 0x48c <GPIO_writePin+0x66>
 48a:	85 c0       	rjmp	.+266    	; 0x596 <GPIO_writePin+0x170>
 48c:	af c0       	rjmp	.+350    	; 0x5ec <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	a1 f4       	brne	.+40     	; 0x4bc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 494:	ab e3       	ldi	r26, 0x3B	; 59
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	eb e3       	ldi	r30, 0x3B	; 59
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	48 2f       	mov	r20, r24
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 2e       	mov	r0, r18
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <GPIO_writePin+0x8c>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <GPIO_writePin+0x88>
 4b6:	84 2b       	or	r24, r20
 4b8:	8c 93       	st	X, r24
 4ba:	98 c0       	rjmp	.+304    	; 0x5ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 4bc:	ab e3       	ldi	r26, 0x3B	; 59
 4be:	b0 e0       	ldi	r27, 0x00	; 0
 4c0:	eb e3       	ldi	r30, 0x3B	; 59
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	48 2f       	mov	r20, r24
 4c8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 2e       	mov	r0, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <GPIO_writePin+0xb4>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	0a 94       	dec	r0
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <GPIO_writePin+0xb0>
 4de:	80 95       	com	r24
 4e0:	84 23       	and	r24, r20
 4e2:	8c 93       	st	X, r24
 4e4:	83 c0       	rjmp	.+262    	; 0x5ec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	a1 f4       	brne	.+40     	; 0x514 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 4ec:	a8 e3       	ldi	r26, 0x38	; 56
 4ee:	b0 e0       	ldi	r27, 0x00	; 0
 4f0:	e8 e3       	ldi	r30, 0x38	; 56
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 81       	ld	r24, Z
 4f6:	48 2f       	mov	r20, r24
 4f8:	8a 81       	ldd	r24, Y+2	; 0x02
 4fa:	28 2f       	mov	r18, r24
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 2e       	mov	r0, r18
 504:	02 c0       	rjmp	.+4      	; 0x50a <GPIO_writePin+0xe4>
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	0a 94       	dec	r0
 50c:	e2 f7       	brpl	.-8      	; 0x506 <GPIO_writePin+0xe0>
 50e:	84 2b       	or	r24, r20
 510:	8c 93       	st	X, r24
 512:	6c c0       	rjmp	.+216    	; 0x5ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 514:	a8 e3       	ldi	r26, 0x38	; 56
 516:	b0 e0       	ldi	r27, 0x00	; 0
 518:	e8 e3       	ldi	r30, 0x38	; 56
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	80 81       	ld	r24, Z
 51e:	48 2f       	mov	r20, r24
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	28 2f       	mov	r18, r24
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 2e       	mov	r0, r18
 52c:	02 c0       	rjmp	.+4      	; 0x532 <GPIO_writePin+0x10c>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	0a 94       	dec	r0
 534:	e2 f7       	brpl	.-8      	; 0x52e <GPIO_writePin+0x108>
 536:	80 95       	com	r24
 538:	84 23       	and	r24, r20
 53a:	8c 93       	st	X, r24
 53c:	57 c0       	rjmp	.+174    	; 0x5ec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 53e:	8b 81       	ldd	r24, Y+3	; 0x03
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	a1 f4       	brne	.+40     	; 0x56c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 544:	a5 e3       	ldi	r26, 0x35	; 53
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e5 e3       	ldi	r30, 0x35	; 53
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	48 2f       	mov	r20, r24
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	28 2f       	mov	r18, r24
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 2e       	mov	r0, r18
 55c:	02 c0       	rjmp	.+4      	; 0x562 <GPIO_writePin+0x13c>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	0a 94       	dec	r0
 564:	e2 f7       	brpl	.-8      	; 0x55e <GPIO_writePin+0x138>
 566:	84 2b       	or	r24, r20
 568:	8c 93       	st	X, r24
 56a:	40 c0       	rjmp	.+128    	; 0x5ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 56c:	a5 e3       	ldi	r26, 0x35	; 53
 56e:	b0 e0       	ldi	r27, 0x00	; 0
 570:	e5 e3       	ldi	r30, 0x35	; 53
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	48 2f       	mov	r20, r24
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	28 2f       	mov	r18, r24
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 2e       	mov	r0, r18
 584:	02 c0       	rjmp	.+4      	; 0x58a <GPIO_writePin+0x164>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	0a 94       	dec	r0
 58c:	e2 f7       	brpl	.-8      	; 0x586 <GPIO_writePin+0x160>
 58e:	80 95       	com	r24
 590:	84 23       	and	r24, r20
 592:	8c 93       	st	X, r24
 594:	2b c0       	rjmp	.+86     	; 0x5ec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 596:	8b 81       	ldd	r24, Y+3	; 0x03
 598:	81 30       	cpi	r24, 0x01	; 1
 59a:	a1 f4       	brne	.+40     	; 0x5c4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 59c:	a2 e3       	ldi	r26, 0x32	; 50
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	e2 e3       	ldi	r30, 0x32	; 50
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	48 2f       	mov	r20, r24
 5a8:	8a 81       	ldd	r24, Y+2	; 0x02
 5aa:	28 2f       	mov	r18, r24
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 2e       	mov	r0, r18
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <GPIO_writePin+0x194>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	0a 94       	dec	r0
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <GPIO_writePin+0x190>
 5be:	84 2b       	or	r24, r20
 5c0:	8c 93       	st	X, r24
 5c2:	14 c0       	rjmp	.+40     	; 0x5ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 5c4:	a2 e3       	ldi	r26, 0x32	; 50
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
 5c8:	e2 e3       	ldi	r30, 0x32	; 50
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	48 2f       	mov	r20, r24
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	28 2f       	mov	r18, r24
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 2e       	mov	r0, r18
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <GPIO_writePin+0x1bc>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	0a 94       	dec	r0
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <GPIO_writePin+0x1b8>
 5e6:	80 95       	com	r24
 5e8:	84 23       	and	r24, r20
 5ea:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 5ec:	0f 90       	pop	r0
 5ee:	0f 90       	pop	r0
 5f0:	0f 90       	pop	r0
 5f2:	0f 90       	pop	r0
 5f4:	0f 90       	pop	r0
 5f6:	cf 91       	pop	r28
 5f8:	df 91       	pop	r29
 5fa:	08 95       	ret

000005fc <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 5fc:	df 93       	push	r29
 5fe:	cf 93       	push	r28
 600:	00 d0       	rcall	.+0      	; 0x602 <GPIO_readPin+0x6>
 602:	00 d0       	rcall	.+0      	; 0x604 <GPIO_readPin+0x8>
 604:	0f 92       	push	r0
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
 60a:	8a 83       	std	Y+2, r24	; 0x02
 60c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 60e:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 610:	8b 81       	ldd	r24, Y+3	; 0x03
 612:	88 30       	cpi	r24, 0x08	; 8
 614:	08 f0       	brcs	.+2      	; 0x618 <GPIO_readPin+0x1c>
 616:	84 c0       	rjmp	.+264    	; 0x720 <GPIO_readPin+0x124>
 618:	8a 81       	ldd	r24, Y+2	; 0x02
 61a:	84 30       	cpi	r24, 0x04	; 4
 61c:	08 f0       	brcs	.+2      	; 0x620 <GPIO_readPin+0x24>
 61e:	80 c0       	rjmp	.+256    	; 0x720 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 620:	8a 81       	ldd	r24, Y+2	; 0x02
 622:	28 2f       	mov	r18, r24
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	3d 83       	std	Y+5, r19	; 0x05
 628:	2c 83       	std	Y+4, r18	; 0x04
 62a:	4c 81       	ldd	r20, Y+4	; 0x04
 62c:	5d 81       	ldd	r21, Y+5	; 0x05
 62e:	41 30       	cpi	r20, 0x01	; 1
 630:	51 05       	cpc	r21, r1
 632:	79 f1       	breq	.+94     	; 0x692 <GPIO_readPin+0x96>
 634:	8c 81       	ldd	r24, Y+4	; 0x04
 636:	9d 81       	ldd	r25, Y+5	; 0x05
 638:	82 30       	cpi	r24, 0x02	; 2
 63a:	91 05       	cpc	r25, r1
 63c:	34 f4       	brge	.+12     	; 0x64a <GPIO_readPin+0x4e>
 63e:	2c 81       	ldd	r18, Y+4	; 0x04
 640:	3d 81       	ldd	r19, Y+5	; 0x05
 642:	21 15       	cp	r18, r1
 644:	31 05       	cpc	r19, r1
 646:	69 f0       	breq	.+26     	; 0x662 <GPIO_readPin+0x66>
 648:	6b c0       	rjmp	.+214    	; 0x720 <GPIO_readPin+0x124>
 64a:	4c 81       	ldd	r20, Y+4	; 0x04
 64c:	5d 81       	ldd	r21, Y+5	; 0x05
 64e:	42 30       	cpi	r20, 0x02	; 2
 650:	51 05       	cpc	r21, r1
 652:	b9 f1       	breq	.+110    	; 0x6c2 <GPIO_readPin+0xc6>
 654:	8c 81       	ldd	r24, Y+4	; 0x04
 656:	9d 81       	ldd	r25, Y+5	; 0x05
 658:	83 30       	cpi	r24, 0x03	; 3
 65a:	91 05       	cpc	r25, r1
 65c:	09 f4       	brne	.+2      	; 0x660 <GPIO_readPin+0x64>
 65e:	49 c0       	rjmp	.+146    	; 0x6f2 <GPIO_readPin+0xf6>
 660:	5f c0       	rjmp	.+190    	; 0x720 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 662:	e9 e3       	ldi	r30, 0x39	; 57
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	28 2f       	mov	r18, r24
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	88 2f       	mov	r24, r24
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	a9 01       	movw	r20, r18
 674:	02 c0       	rjmp	.+4      	; 0x67a <GPIO_readPin+0x7e>
 676:	55 95       	asr	r21
 678:	47 95       	ror	r20
 67a:	8a 95       	dec	r24
 67c:	e2 f7       	brpl	.-8      	; 0x676 <GPIO_readPin+0x7a>
 67e:	ca 01       	movw	r24, r20
 680:	81 70       	andi	r24, 0x01	; 1
 682:	90 70       	andi	r25, 0x00	; 0
 684:	88 23       	and	r24, r24
 686:	19 f0       	breq	.+6      	; 0x68e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	89 83       	std	Y+1, r24	; 0x01
 68c:	49 c0       	rjmp	.+146    	; 0x720 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 68e:	19 82       	std	Y+1, r1	; 0x01
 690:	47 c0       	rjmp	.+142    	; 0x720 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 692:	e6 e3       	ldi	r30, 0x36	; 54
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	28 2f       	mov	r18, r24
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	8b 81       	ldd	r24, Y+3	; 0x03
 69e:	88 2f       	mov	r24, r24
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	a9 01       	movw	r20, r18
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <GPIO_readPin+0xae>
 6a6:	55 95       	asr	r21
 6a8:	47 95       	ror	r20
 6aa:	8a 95       	dec	r24
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <GPIO_readPin+0xaa>
 6ae:	ca 01       	movw	r24, r20
 6b0:	81 70       	andi	r24, 0x01	; 1
 6b2:	90 70       	andi	r25, 0x00	; 0
 6b4:	88 23       	and	r24, r24
 6b6:	19 f0       	breq	.+6      	; 0x6be <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	89 83       	std	Y+1, r24	; 0x01
 6bc:	31 c0       	rjmp	.+98     	; 0x720 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 6be:	19 82       	std	Y+1, r1	; 0x01
 6c0:	2f c0       	rjmp	.+94     	; 0x720 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 6c2:	e3 e3       	ldi	r30, 0x33	; 51
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	28 2f       	mov	r18, r24
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	8b 81       	ldd	r24, Y+3	; 0x03
 6ce:	88 2f       	mov	r24, r24
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	a9 01       	movw	r20, r18
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <GPIO_readPin+0xde>
 6d6:	55 95       	asr	r21
 6d8:	47 95       	ror	r20
 6da:	8a 95       	dec	r24
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <GPIO_readPin+0xda>
 6de:	ca 01       	movw	r24, r20
 6e0:	81 70       	andi	r24, 0x01	; 1
 6e2:	90 70       	andi	r25, 0x00	; 0
 6e4:	88 23       	and	r24, r24
 6e6:	19 f0       	breq	.+6      	; 0x6ee <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	89 83       	std	Y+1, r24	; 0x01
 6ec:	19 c0       	rjmp	.+50     	; 0x720 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 6ee:	19 82       	std	Y+1, r1	; 0x01
 6f0:	17 c0       	rjmp	.+46     	; 0x720 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 6f2:	e0 e3       	ldi	r30, 0x30	; 48
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	28 2f       	mov	r18, r24
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	8b 81       	ldd	r24, Y+3	; 0x03
 6fe:	88 2f       	mov	r24, r24
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	a9 01       	movw	r20, r18
 704:	02 c0       	rjmp	.+4      	; 0x70a <GPIO_readPin+0x10e>
 706:	55 95       	asr	r21
 708:	47 95       	ror	r20
 70a:	8a 95       	dec	r24
 70c:	e2 f7       	brpl	.-8      	; 0x706 <GPIO_readPin+0x10a>
 70e:	ca 01       	movw	r24, r20
 710:	81 70       	andi	r24, 0x01	; 1
 712:	90 70       	andi	r25, 0x00	; 0
 714:	88 23       	and	r24, r24
 716:	19 f0       	breq	.+6      	; 0x71e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	89 83       	std	Y+1, r24	; 0x01
 71c:	01 c0       	rjmp	.+2      	; 0x720 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 71e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 720:	89 81       	ldd	r24, Y+1	; 0x01
}
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	0f 90       	pop	r0
 728:	0f 90       	pop	r0
 72a:	0f 90       	pop	r0
 72c:	cf 91       	pop	r28
 72e:	df 91       	pop	r29
 730:	08 95       	ret

00000732 <GPIO_togglePin>:
void GPIO_togglePin(uint8 port_num, uint8 pin_num){
 732:	df 93       	push	r29
 734:	cf 93       	push	r28
 736:	00 d0       	rcall	.+0      	; 0x738 <GPIO_togglePin+0x6>
 738:	00 d0       	rcall	.+0      	; 0x73a <GPIO_togglePin+0x8>
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	89 83       	std	Y+1, r24	; 0x01
 740:	6a 83       	std	Y+2, r22	; 0x02


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 742:	8a 81       	ldd	r24, Y+2	; 0x02
 744:	88 30       	cpi	r24, 0x08	; 8
 746:	08 f0       	brcs	.+2      	; 0x74a <GPIO_togglePin+0x18>
 748:	72 c0       	rjmp	.+228    	; 0x82e <GPIO_togglePin+0xfc>
 74a:	89 81       	ldd	r24, Y+1	; 0x01
 74c:	84 30       	cpi	r24, 0x04	; 4
 74e:	08 f0       	brcs	.+2      	; 0x752 <GPIO_togglePin+0x20>
 750:	6e c0       	rjmp	.+220    	; 0x82e <GPIO_togglePin+0xfc>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	28 2f       	mov	r18, r24
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	3c 83       	std	Y+4, r19	; 0x04
 75a:	2b 83       	std	Y+3, r18	; 0x03
 75c:	8b 81       	ldd	r24, Y+3	; 0x03
 75e:	9c 81       	ldd	r25, Y+4	; 0x04
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	91 05       	cpc	r25, r1
 764:	49 f1       	breq	.+82     	; 0x7b8 <GPIO_togglePin+0x86>
 766:	2b 81       	ldd	r18, Y+3	; 0x03
 768:	3c 81       	ldd	r19, Y+4	; 0x04
 76a:	22 30       	cpi	r18, 0x02	; 2
 76c:	31 05       	cpc	r19, r1
 76e:	2c f4       	brge	.+10     	; 0x77a <GPIO_togglePin+0x48>
 770:	8b 81       	ldd	r24, Y+3	; 0x03
 772:	9c 81       	ldd	r25, Y+4	; 0x04
 774:	00 97       	sbiw	r24, 0x00	; 0
 776:	61 f0       	breq	.+24     	; 0x790 <GPIO_togglePin+0x5e>
 778:	5a c0       	rjmp	.+180    	; 0x82e <GPIO_togglePin+0xfc>
 77a:	2b 81       	ldd	r18, Y+3	; 0x03
 77c:	3c 81       	ldd	r19, Y+4	; 0x04
 77e:	22 30       	cpi	r18, 0x02	; 2
 780:	31 05       	cpc	r19, r1
 782:	71 f1       	breq	.+92     	; 0x7e0 <GPIO_togglePin+0xae>
 784:	8b 81       	ldd	r24, Y+3	; 0x03
 786:	9c 81       	ldd	r25, Y+4	; 0x04
 788:	83 30       	cpi	r24, 0x03	; 3
 78a:	91 05       	cpc	r25, r1
 78c:	e9 f1       	breq	.+122    	; 0x808 <GPIO_togglePin+0xd6>
 78e:	4f c0       	rjmp	.+158    	; 0x82e <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA, pin_num);
 790:	ab e3       	ldi	r26, 0x3B	; 59
 792:	b0 e0       	ldi	r27, 0x00	; 0
 794:	eb e3       	ldi	r30, 0x3B	; 59
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	48 2f       	mov	r20, r24
 79c:	8a 81       	ldd	r24, Y+2	; 0x02
 79e:	28 2f       	mov	r18, r24
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	02 2e       	mov	r0, r18
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <GPIO_togglePin+0x7c>
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	0a 94       	dec	r0
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <GPIO_togglePin+0x78>
 7b2:	84 27       	eor	r24, r20
 7b4:	8c 93       	st	X, r24
 7b6:	3b c0       	rjmp	.+118    	; 0x82e <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB, pin_num);
 7b8:	a8 e3       	ldi	r26, 0x38	; 56
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	e8 e3       	ldi	r30, 0x38	; 56
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	48 2f       	mov	r20, r24
 7c4:	8a 81       	ldd	r24, Y+2	; 0x02
 7c6:	28 2f       	mov	r18, r24
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	02 2e       	mov	r0, r18
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <GPIO_togglePin+0xa4>
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	0a 94       	dec	r0
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <GPIO_togglePin+0xa0>
 7da:	84 27       	eor	r24, r20
 7dc:	8c 93       	st	X, r24
 7de:	27 c0       	rjmp	.+78     	; 0x82e <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC, pin_num);
 7e0:	a5 e3       	ldi	r26, 0x35	; 53
 7e2:	b0 e0       	ldi	r27, 0x00	; 0
 7e4:	e5 e3       	ldi	r30, 0x35	; 53
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	48 2f       	mov	r20, r24
 7ec:	8a 81       	ldd	r24, Y+2	; 0x02
 7ee:	28 2f       	mov	r18, r24
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	02 2e       	mov	r0, r18
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <GPIO_togglePin+0xcc>
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	0a 94       	dec	r0
 800:	e2 f7       	brpl	.-8      	; 0x7fa <GPIO_togglePin+0xc8>
 802:	84 27       	eor	r24, r20
 804:	8c 93       	st	X, r24
 806:	13 c0       	rjmp	.+38     	; 0x82e <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD, pin_num);
 808:	a2 e3       	ldi	r26, 0x32	; 50
 80a:	b0 e0       	ldi	r27, 0x00	; 0
 80c:	e2 e3       	ldi	r30, 0x32	; 50
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	80 81       	ld	r24, Z
 812:	48 2f       	mov	r20, r24
 814:	8a 81       	ldd	r24, Y+2	; 0x02
 816:	28 2f       	mov	r18, r24
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	02 2e       	mov	r0, r18
 820:	02 c0       	rjmp	.+4      	; 0x826 <GPIO_togglePin+0xf4>
 822:	88 0f       	add	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	0a 94       	dec	r0
 828:	e2 f7       	brpl	.-8      	; 0x822 <GPIO_togglePin+0xf0>
 82a:	84 27       	eor	r24, r20
 82c:	8c 93       	st	X, r24
			break;
		}
	}
}
 82e:	0f 90       	pop	r0
 830:	0f 90       	pop	r0
 832:	0f 90       	pop	r0
 834:	0f 90       	pop	r0
 836:	cf 91       	pop	r28
 838:	df 91       	pop	r29
 83a:	08 95       	ret

0000083c <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
 83c:	df 93       	push	r29
 83e:	cf 93       	push	r28
 840:	00 d0       	rcall	.+0      	; 0x842 <GPIO_setupPortDirection+0x6>
 842:	00 d0       	rcall	.+0      	; 0x844 <GPIO_setupPortDirection+0x8>
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
 848:	89 83       	std	Y+1, r24	; 0x01
 84a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 84c:	89 81       	ldd	r24, Y+1	; 0x01
 84e:	84 30       	cpi	r24, 0x04	; 4
 850:	90 f5       	brcc	.+100    	; 0x8b6 <__stack+0x57>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 852:	89 81       	ldd	r24, Y+1	; 0x01
 854:	28 2f       	mov	r18, r24
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	3c 83       	std	Y+4, r19	; 0x04
 85a:	2b 83       	std	Y+3, r18	; 0x03
 85c:	8b 81       	ldd	r24, Y+3	; 0x03
 85e:	9c 81       	ldd	r25, Y+4	; 0x04
 860:	81 30       	cpi	r24, 0x01	; 1
 862:	91 05       	cpc	r25, r1
 864:	d1 f0       	breq	.+52     	; 0x89a <__stack+0x3b>
 866:	2b 81       	ldd	r18, Y+3	; 0x03
 868:	3c 81       	ldd	r19, Y+4	; 0x04
 86a:	22 30       	cpi	r18, 0x02	; 2
 86c:	31 05       	cpc	r19, r1
 86e:	2c f4       	brge	.+10     	; 0x87a <__stack+0x1b>
 870:	8b 81       	ldd	r24, Y+3	; 0x03
 872:	9c 81       	ldd	r25, Y+4	; 0x04
 874:	00 97       	sbiw	r24, 0x00	; 0
 876:	61 f0       	breq	.+24     	; 0x890 <__stack+0x31>
 878:	1e c0       	rjmp	.+60     	; 0x8b6 <__stack+0x57>
 87a:	2b 81       	ldd	r18, Y+3	; 0x03
 87c:	3c 81       	ldd	r19, Y+4	; 0x04
 87e:	22 30       	cpi	r18, 0x02	; 2
 880:	31 05       	cpc	r19, r1
 882:	81 f0       	breq	.+32     	; 0x8a4 <__stack+0x45>
 884:	8b 81       	ldd	r24, Y+3	; 0x03
 886:	9c 81       	ldd	r25, Y+4	; 0x04
 888:	83 30       	cpi	r24, 0x03	; 3
 88a:	91 05       	cpc	r25, r1
 88c:	81 f0       	breq	.+32     	; 0x8ae <__stack+0x4f>
 88e:	13 c0       	rjmp	.+38     	; 0x8b6 <__stack+0x57>
		{
		case PORTA_ID:
			DDRA = direction;
 890:	ea e3       	ldi	r30, 0x3A	; 58
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	8a 81       	ldd	r24, Y+2	; 0x02
 896:	80 83       	st	Z, r24
 898:	0e c0       	rjmp	.+28     	; 0x8b6 <__stack+0x57>
			break;
		case PORTB_ID:
			DDRB = direction;
 89a:	e7 e3       	ldi	r30, 0x37	; 55
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	8a 81       	ldd	r24, Y+2	; 0x02
 8a0:	80 83       	st	Z, r24
 8a2:	09 c0       	rjmp	.+18     	; 0x8b6 <__stack+0x57>
			break;
		case PORTC_ID:
			DDRC = direction;
 8a4:	e4 e3       	ldi	r30, 0x34	; 52
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	8a 81       	ldd	r24, Y+2	; 0x02
 8aa:	80 83       	st	Z, r24
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
			break;
		case PORTD_ID:
			DDRD = direction;
 8ae:	e1 e3       	ldi	r30, 0x31	; 49
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	8a 81       	ldd	r24, Y+2	; 0x02
 8b4:	80 83       	st	Z, r24
			break;
		}
	}
}
 8b6:	0f 90       	pop	r0
 8b8:	0f 90       	pop	r0
 8ba:	0f 90       	pop	r0
 8bc:	0f 90       	pop	r0
 8be:	cf 91       	pop	r28
 8c0:	df 91       	pop	r29
 8c2:	08 95       	ret

000008c4 <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value){
 8c4:	df 93       	push	r29
 8c6:	cf 93       	push	r28
 8c8:	00 d0       	rcall	.+0      	; 0x8ca <GPIO_writePort+0x6>
 8ca:	00 d0       	rcall	.+0      	; 0x8cc <GPIO_writePort+0x8>
 8cc:	cd b7       	in	r28, 0x3d	; 61
 8ce:	de b7       	in	r29, 0x3e	; 62
 8d0:	89 83       	std	Y+1, r24	; 0x01
 8d2:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 8d4:	89 81       	ldd	r24, Y+1	; 0x01
 8d6:	84 30       	cpi	r24, 0x04	; 4
 8d8:	90 f5       	brcc	.+100    	; 0x93e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 8da:	89 81       	ldd	r24, Y+1	; 0x01
 8dc:	28 2f       	mov	r18, r24
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	3c 83       	std	Y+4, r19	; 0x04
 8e2:	2b 83       	std	Y+3, r18	; 0x03
 8e4:	8b 81       	ldd	r24, Y+3	; 0x03
 8e6:	9c 81       	ldd	r25, Y+4	; 0x04
 8e8:	81 30       	cpi	r24, 0x01	; 1
 8ea:	91 05       	cpc	r25, r1
 8ec:	d1 f0       	breq	.+52     	; 0x922 <GPIO_writePort+0x5e>
 8ee:	2b 81       	ldd	r18, Y+3	; 0x03
 8f0:	3c 81       	ldd	r19, Y+4	; 0x04
 8f2:	22 30       	cpi	r18, 0x02	; 2
 8f4:	31 05       	cpc	r19, r1
 8f6:	2c f4       	brge	.+10     	; 0x902 <GPIO_writePort+0x3e>
 8f8:	8b 81       	ldd	r24, Y+3	; 0x03
 8fa:	9c 81       	ldd	r25, Y+4	; 0x04
 8fc:	00 97       	sbiw	r24, 0x00	; 0
 8fe:	61 f0       	breq	.+24     	; 0x918 <GPIO_writePort+0x54>
 900:	1e c0       	rjmp	.+60     	; 0x93e <GPIO_writePort+0x7a>
 902:	2b 81       	ldd	r18, Y+3	; 0x03
 904:	3c 81       	ldd	r19, Y+4	; 0x04
 906:	22 30       	cpi	r18, 0x02	; 2
 908:	31 05       	cpc	r19, r1
 90a:	81 f0       	breq	.+32     	; 0x92c <GPIO_writePort+0x68>
 90c:	8b 81       	ldd	r24, Y+3	; 0x03
 90e:	9c 81       	ldd	r25, Y+4	; 0x04
 910:	83 30       	cpi	r24, 0x03	; 3
 912:	91 05       	cpc	r25, r1
 914:	81 f0       	breq	.+32     	; 0x936 <GPIO_writePort+0x72>
 916:	13 c0       	rjmp	.+38     	; 0x93e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 918:	eb e3       	ldi	r30, 0x3B	; 59
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	8a 81       	ldd	r24, Y+2	; 0x02
 91e:	80 83       	st	Z, r24
 920:	0e c0       	rjmp	.+28     	; 0x93e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 922:	e8 e3       	ldi	r30, 0x38	; 56
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	8a 81       	ldd	r24, Y+2	; 0x02
 928:	80 83       	st	Z, r24
 92a:	09 c0       	rjmp	.+18     	; 0x93e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 92c:	e5 e3       	ldi	r30, 0x35	; 53
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	8a 81       	ldd	r24, Y+2	; 0x02
 932:	80 83       	st	Z, r24
 934:	04 c0       	rjmp	.+8      	; 0x93e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 936:	e2 e3       	ldi	r30, 0x32	; 50
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	8a 81       	ldd	r24, Y+2	; 0x02
 93c:	80 83       	st	Z, r24
			break;
		}
	}
}
 93e:	0f 90       	pop	r0
 940:	0f 90       	pop	r0
 942:	0f 90       	pop	r0
 944:	0f 90       	pop	r0
 946:	cf 91       	pop	r28
 948:	df 91       	pop	r29
 94a:	08 95       	ret

0000094c <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num){
 94c:	df 93       	push	r29
 94e:	cf 93       	push	r28
 950:	00 d0       	rcall	.+0      	; 0x952 <GPIO_readPort+0x6>
 952:	00 d0       	rcall	.+0      	; 0x954 <GPIO_readPort+0x8>
 954:	cd b7       	in	r28, 0x3d	; 61
 956:	de b7       	in	r29, 0x3e	; 62
 958:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
 95a:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
 95c:	8a 81       	ldd	r24, Y+2	; 0x02
 95e:	84 30       	cpi	r24, 0x04	; 4
 960:	90 f5       	brcc	.+100    	; 0x9c6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 962:	8a 81       	ldd	r24, Y+2	; 0x02
 964:	28 2f       	mov	r18, r24
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	3c 83       	std	Y+4, r19	; 0x04
 96a:	2b 83       	std	Y+3, r18	; 0x03
 96c:	8b 81       	ldd	r24, Y+3	; 0x03
 96e:	9c 81       	ldd	r25, Y+4	; 0x04
 970:	81 30       	cpi	r24, 0x01	; 1
 972:	91 05       	cpc	r25, r1
 974:	d1 f0       	breq	.+52     	; 0x9aa <GPIO_readPort+0x5e>
 976:	2b 81       	ldd	r18, Y+3	; 0x03
 978:	3c 81       	ldd	r19, Y+4	; 0x04
 97a:	22 30       	cpi	r18, 0x02	; 2
 97c:	31 05       	cpc	r19, r1
 97e:	2c f4       	brge	.+10     	; 0x98a <GPIO_readPort+0x3e>
 980:	8b 81       	ldd	r24, Y+3	; 0x03
 982:	9c 81       	ldd	r25, Y+4	; 0x04
 984:	00 97       	sbiw	r24, 0x00	; 0
 986:	61 f0       	breq	.+24     	; 0x9a0 <GPIO_readPort+0x54>
 988:	1e c0       	rjmp	.+60     	; 0x9c6 <GPIO_readPort+0x7a>
 98a:	2b 81       	ldd	r18, Y+3	; 0x03
 98c:	3c 81       	ldd	r19, Y+4	; 0x04
 98e:	22 30       	cpi	r18, 0x02	; 2
 990:	31 05       	cpc	r19, r1
 992:	81 f0       	breq	.+32     	; 0x9b4 <GPIO_readPort+0x68>
 994:	8b 81       	ldd	r24, Y+3	; 0x03
 996:	9c 81       	ldd	r25, Y+4	; 0x04
 998:	83 30       	cpi	r24, 0x03	; 3
 99a:	91 05       	cpc	r25, r1
 99c:	81 f0       	breq	.+32     	; 0x9be <GPIO_readPort+0x72>
 99e:	13 c0       	rjmp	.+38     	; 0x9c6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 9a0:	e9 e3       	ldi	r30, 0x39	; 57
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	80 81       	ld	r24, Z
 9a6:	89 83       	std	Y+1, r24	; 0x01
 9a8:	0e c0       	rjmp	.+28     	; 0x9c6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 9aa:	e6 e3       	ldi	r30, 0x36	; 54
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	80 81       	ld	r24, Z
 9b0:	89 83       	std	Y+1, r24	; 0x01
 9b2:	09 c0       	rjmp	.+18     	; 0x9c6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 9b4:	e3 e3       	ldi	r30, 0x33	; 51
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	80 81       	ld	r24, Z
 9ba:	89 83       	std	Y+1, r24	; 0x01
 9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 9be:	e0 e3       	ldi	r30, 0x30	; 48
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 81       	ld	r24, Z
 9c4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 9c6:	89 81       	ldd	r24, Y+1	; 0x01
}
 9c8:	0f 90       	pop	r0
 9ca:	0f 90       	pop	r0
 9cc:	0f 90       	pop	r0
 9ce:	0f 90       	pop	r0
 9d0:	cf 91       	pop	r28
 9d2:	df 91       	pop	r29
 9d4:	08 95       	ret

000009d6 <DcMotor_init>:
#include "../../MCAL/timer0/timer0.h"


//DcMotor_configType config_pwm = {EN_TIMER0_ID, PWM_MAX};

void DcMotor_init(DcMotor_configType *dcMotor){
 9d6:	df 93       	push	r29
 9d8:	cf 93       	push	r28
 9da:	00 d0       	rcall	.+0      	; 0x9dc <DcMotor_init+0x6>
 9dc:	cd b7       	in	r28, 0x3d	; 61
 9de:	de b7       	in	r29, 0x3e	; 62
 9e0:	9a 83       	std	Y+2, r25	; 0x02
 9e2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(dcMotor->port1_id, dcMotor->pin1_id, PIN_OUTPUT);
 9e4:	e9 81       	ldd	r30, Y+1	; 0x01
 9e6:	fa 81       	ldd	r31, Y+2	; 0x02
 9e8:	80 81       	ld	r24, Z
 9ea:	e9 81       	ldd	r30, Y+1	; 0x01
 9ec:	fa 81       	ldd	r31, Y+2	; 0x02
 9ee:	92 81       	ldd	r25, Z+2	; 0x02
 9f0:	69 2f       	mov	r22, r25
 9f2:	41 e0       	ldi	r20, 0x01	; 1
 9f4:	0e 94 28 01 	call	0x250	; 0x250 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(dcMotor->port2_id, dcMotor->pin2_id, PIN_OUTPUT);
 9f8:	e9 81       	ldd	r30, Y+1	; 0x01
 9fa:	fa 81       	ldd	r31, Y+2	; 0x02
 9fc:	81 81       	ldd	r24, Z+1	; 0x01
 9fe:	e9 81       	ldd	r30, Y+1	; 0x01
 a00:	fa 81       	ldd	r31, Y+2	; 0x02
 a02:	93 81       	ldd	r25, Z+3	; 0x03
 a04:	69 2f       	mov	r22, r25
 a06:	41 e0       	ldi	r20, 0x01	; 1
 a08:	0e 94 28 01 	call	0x250	; 0x250 <GPIO_setupPinDirection>

//	PWM_T0_init();

}
 a0c:	0f 90       	pop	r0
 a0e:	0f 90       	pop	r0
 a10:	cf 91       	pop	r28
 a12:	df 91       	pop	r29
 a14:	08 95       	ret

00000a16 <DcMotor_rotate>:
void DcMotor_rotate(DcMotor_configType *dcMotor, DcMotor_state state, uint8 speedPercentage){
 a16:	df 93       	push	r29
 a18:	cf 93       	push	r28
 a1a:	00 d0       	rcall	.+0      	; 0xa1c <DcMotor_rotate+0x6>
 a1c:	00 d0       	rcall	.+0      	; 0xa1e <DcMotor_rotate+0x8>
 a1e:	00 d0       	rcall	.+0      	; 0xa20 <DcMotor_rotate+0xa>
 a20:	cd b7       	in	r28, 0x3d	; 61
 a22:	de b7       	in	r29, 0x3e	; 62
 a24:	9a 83       	std	Y+2, r25	; 0x02
 a26:	89 83       	std	Y+1, r24	; 0x01
 a28:	6b 83       	std	Y+3, r22	; 0x03
 a2a:	4c 83       	std	Y+4, r20	; 0x04

//	PWM_T0_setDutyCycle(speedPercentage);

	switch(state){
 a2c:	8b 81       	ldd	r24, Y+3	; 0x03
 a2e:	28 2f       	mov	r18, r24
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	3e 83       	std	Y+6, r19	; 0x06
 a34:	2d 83       	std	Y+5, r18	; 0x05
 a36:	8d 81       	ldd	r24, Y+5	; 0x05
 a38:	9e 81       	ldd	r25, Y+6	; 0x06
 a3a:	81 30       	cpi	r24, 0x01	; 1
 a3c:	91 05       	cpc	r25, r1
 a3e:	f9 f0       	breq	.+62     	; 0xa7e <DcMotor_rotate+0x68>
 a40:	2d 81       	ldd	r18, Y+5	; 0x05
 a42:	3e 81       	ldd	r19, Y+6	; 0x06
 a44:	22 30       	cpi	r18, 0x02	; 2
 a46:	31 05       	cpc	r19, r1
 a48:	79 f1       	breq	.+94     	; 0xaa8 <DcMotor_rotate+0x92>
 a4a:	8d 81       	ldd	r24, Y+5	; 0x05
 a4c:	9e 81       	ldd	r25, Y+6	; 0x06
 a4e:	00 97       	sbiw	r24, 0x00	; 0
 a50:	09 f0       	breq	.+2      	; 0xa54 <DcMotor_rotate+0x3e>
 a52:	3e c0       	rjmp	.+124    	; 0xad0 <DcMotor_rotate+0xba>
	case EN_DC_STOP:
		GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_LOW);
 a54:	e9 81       	ldd	r30, Y+1	; 0x01
 a56:	fa 81       	ldd	r31, Y+2	; 0x02
 a58:	80 81       	ld	r24, Z
 a5a:	e9 81       	ldd	r30, Y+1	; 0x01
 a5c:	fa 81       	ldd	r31, Y+2	; 0x02
 a5e:	92 81       	ldd	r25, Z+2	; 0x02
 a60:	69 2f       	mov	r22, r25
 a62:	40 e0       	ldi	r20, 0x00	; 0
 a64:	0e 94 13 02 	call	0x426	; 0x426 <GPIO_writePin>
		GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_LOW);
 a68:	e9 81       	ldd	r30, Y+1	; 0x01
 a6a:	fa 81       	ldd	r31, Y+2	; 0x02
 a6c:	81 81       	ldd	r24, Z+1	; 0x01
 a6e:	e9 81       	ldd	r30, Y+1	; 0x01
 a70:	fa 81       	ldd	r31, Y+2	; 0x02
 a72:	93 81       	ldd	r25, Z+3	; 0x03
 a74:	69 2f       	mov	r22, r25
 a76:	40 e0       	ldi	r20, 0x00	; 0
 a78:	0e 94 13 02 	call	0x426	; 0x426 <GPIO_writePin>
 a7c:	29 c0       	rjmp	.+82     	; 0xad0 <DcMotor_rotate+0xba>

		break;

	case EN_DC_CW:
		GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_HIGH);
 a7e:	e9 81       	ldd	r30, Y+1	; 0x01
 a80:	fa 81       	ldd	r31, Y+2	; 0x02
 a82:	80 81       	ld	r24, Z
 a84:	e9 81       	ldd	r30, Y+1	; 0x01
 a86:	fa 81       	ldd	r31, Y+2	; 0x02
 a88:	92 81       	ldd	r25, Z+2	; 0x02
 a8a:	69 2f       	mov	r22, r25
 a8c:	41 e0       	ldi	r20, 0x01	; 1
 a8e:	0e 94 13 02 	call	0x426	; 0x426 <GPIO_writePin>
		GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_LOW);
 a92:	e9 81       	ldd	r30, Y+1	; 0x01
 a94:	fa 81       	ldd	r31, Y+2	; 0x02
 a96:	81 81       	ldd	r24, Z+1	; 0x01
 a98:	e9 81       	ldd	r30, Y+1	; 0x01
 a9a:	fa 81       	ldd	r31, Y+2	; 0x02
 a9c:	93 81       	ldd	r25, Z+3	; 0x03
 a9e:	69 2f       	mov	r22, r25
 aa0:	40 e0       	ldi	r20, 0x00	; 0
 aa2:	0e 94 13 02 	call	0x426	; 0x426 <GPIO_writePin>
 aa6:	14 c0       	rjmp	.+40     	; 0xad0 <DcMotor_rotate+0xba>

		break;

	case EN_DC_A_CW:
		GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_LOW);
 aa8:	e9 81       	ldd	r30, Y+1	; 0x01
 aaa:	fa 81       	ldd	r31, Y+2	; 0x02
 aac:	80 81       	ld	r24, Z
 aae:	e9 81       	ldd	r30, Y+1	; 0x01
 ab0:	fa 81       	ldd	r31, Y+2	; 0x02
 ab2:	92 81       	ldd	r25, Z+2	; 0x02
 ab4:	69 2f       	mov	r22, r25
 ab6:	40 e0       	ldi	r20, 0x00	; 0
 ab8:	0e 94 13 02 	call	0x426	; 0x426 <GPIO_writePin>
		GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_HIGH);
 abc:	e9 81       	ldd	r30, Y+1	; 0x01
 abe:	fa 81       	ldd	r31, Y+2	; 0x02
 ac0:	81 81       	ldd	r24, Z+1	; 0x01
 ac2:	e9 81       	ldd	r30, Y+1	; 0x01
 ac4:	fa 81       	ldd	r31, Y+2	; 0x02
 ac6:	93 81       	ldd	r25, Z+3	; 0x03
 ac8:	69 2f       	mov	r22, r25
 aca:	41 e0       	ldi	r20, 0x01	; 1
 acc:	0e 94 13 02 	call	0x426	; 0x426 <GPIO_writePin>

		break;
	}
}
 ad0:	26 96       	adiw	r28, 0x06	; 6
 ad2:	0f b6       	in	r0, 0x3f	; 63
 ad4:	f8 94       	cli
 ad6:	de bf       	out	0x3e, r29	; 62
 ad8:	0f be       	out	0x3f, r0	; 63
 ada:	cd bf       	out	0x3d, r28	; 61
 adc:	cf 91       	pop	r28
 ade:	df 91       	pop	r29
 ae0:	08 95       	ret

00000ae2 <setup>:


#define PASSWORD_SIZE 6


void setup(){
 ae2:	df 93       	push	r29
 ae4:	cf 93       	push	r28
 ae6:	cd b7       	in	r28, 0x3d	; 61
 ae8:	de b7       	in	r29, 0x3e	; 62
	UART_init();
 aea:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_init>
}
 aee:	cf 91       	pop	r28
 af0:	df 91       	pop	r29
 af2:	08 95       	ret

00000af4 <rcvPassword>:

void rcvPassword(uint8* str){
 af4:	0f 93       	push	r16
 af6:	1f 93       	push	r17
 af8:	df 93       	push	r29
 afa:	cf 93       	push	r28
 afc:	00 d0       	rcall	.+0      	; 0xafe <rcvPassword+0xa>
 afe:	0f 92       	push	r0
 b00:	cd b7       	in	r28, 0x3d	; 61
 b02:	de b7       	in	r29, 0x3e	; 62
 b04:	9b 83       	std	Y+3, r25	; 0x03
 b06:	8a 83       	std	Y+2, r24	; 0x02

	uint8 index = 0;
 b08:	19 82       	std	Y+1, r1	; 0x01
 b0a:	23 c0       	rjmp	.+70     	; 0xb52 <rcvPassword+0x5e>

	while(index < PASSWORD_SIZE){
		str[index] = UART_rcvCharacter();
 b0c:	89 81       	ldd	r24, Y+1	; 0x01
 b0e:	28 2f       	mov	r18, r24
 b10:	30 e0       	ldi	r19, 0x00	; 0
 b12:	8a 81       	ldd	r24, Y+2	; 0x02
 b14:	9b 81       	ldd	r25, Y+3	; 0x03
 b16:	8c 01       	movw	r16, r24
 b18:	02 0f       	add	r16, r18
 b1a:	13 1f       	adc	r17, r19
 b1c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <UART_rcvCharacter>
 b20:	f8 01       	movw	r30, r16
 b22:	80 83       	st	Z, r24
		if( str[index] == '=')
 b24:	89 81       	ldd	r24, Y+1	; 0x01
 b26:	28 2f       	mov	r18, r24
 b28:	30 e0       	ldi	r19, 0x00	; 0
 b2a:	8a 81       	ldd	r24, Y+2	; 0x02
 b2c:	9b 81       	ldd	r25, Y+3	; 0x03
 b2e:	fc 01       	movw	r30, r24
 b30:	e2 0f       	add	r30, r18
 b32:	f3 1f       	adc	r31, r19
 b34:	80 81       	ld	r24, Z
 b36:	8d 33       	cpi	r24, 0x3D	; 61
 b38:	49 f4       	brne	.+18     	; 0xb4c <rcvPassword+0x58>
		{
			str[index] = '\0';
 b3a:	89 81       	ldd	r24, Y+1	; 0x01
 b3c:	28 2f       	mov	r18, r24
 b3e:	30 e0       	ldi	r19, 0x00	; 0
 b40:	8a 81       	ldd	r24, Y+2	; 0x02
 b42:	9b 81       	ldd	r25, Y+3	; 0x03
 b44:	fc 01       	movw	r30, r24
 b46:	e2 0f       	add	r30, r18
 b48:	f3 1f       	adc	r31, r19
 b4a:	10 82       	st	Z, r1
		}
		index++;
 b4c:	89 81       	ldd	r24, Y+1	; 0x01
 b4e:	8f 5f       	subi	r24, 0xFF	; 255
 b50:	89 83       	std	Y+1, r24	; 0x01

void rcvPassword(uint8* str){

	uint8 index = 0;

	while(index < PASSWORD_SIZE){
 b52:	89 81       	ldd	r24, Y+1	; 0x01
 b54:	86 30       	cpi	r24, 0x06	; 6
 b56:	d0 f2       	brcs	.-76     	; 0xb0c <rcvPassword+0x18>
			str[index] = '\0';
		}
		index++;
	}

}
 b58:	0f 90       	pop	r0
 b5a:	0f 90       	pop	r0
 b5c:	0f 90       	pop	r0
 b5e:	cf 91       	pop	r28
 b60:	df 91       	pop	r29
 b62:	1f 91       	pop	r17
 b64:	0f 91       	pop	r16
 b66:	08 95       	ret

00000b68 <changePass>:

void changePass(){
 b68:	df 93       	push	r29
 b6a:	cf 93       	push	r28
 b6c:	cd b7       	in	r28, 0x3d	; 61
 b6e:	de b7       	in	r29, 0x3e	; 62
 b70:	2c 97       	sbiw	r28, 0x0c	; 12
 b72:	0f b6       	in	r0, 0x3f	; 63
 b74:	f8 94       	cli
 b76:	de bf       	out	0x3e, r29	; 62
 b78:	0f be       	out	0x3f, r0	; 63
 b7a:	cd bf       	out	0x3d, r28	; 61

	uint8 password[6];
	uint8 rePassword[6];
	rcvPassword(password);
 b7c:	ce 01       	movw	r24, r28
 b7e:	01 96       	adiw	r24, 0x01	; 1
 b80:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rcvPassword>
	rcvPassword(rePassword);
 b84:	ce 01       	movw	r24, r28
 b86:	07 96       	adiw	r24, 0x07	; 7
 b88:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rcvPassword>


	if(strcmp(password, rePassword) == 0)
 b8c:	9e 01       	movw	r18, r28
 b8e:	29 5f       	subi	r18, 0xF9	; 249
 b90:	3f 4f       	sbci	r19, 0xFF	; 255
 b92:	ce 01       	movw	r24, r28
 b94:	01 96       	adiw	r24, 0x01	; 1
 b96:	b9 01       	movw	r22, r18
 b98:	0e 94 45 06 	call	0xc8a	; 0xc8a <strcmp>
 b9c:	00 97       	sbiw	r24, 0x00	; 0
 b9e:	21 f4       	brne	.+8      	; 0xba8 <changePass+0x40>
		UART_sendCharacter('t');
 ba0:	84 e7       	ldi	r24, 0x74	; 116
 ba2:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendCharacter>
 ba6:	03 c0       	rjmp	.+6      	; 0xbae <changePass+0x46>
	else
		UART_sendCharacter('f');
 ba8:	86 e6       	ldi	r24, 0x66	; 102
 baa:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendCharacter>
}
 bae:	2c 96       	adiw	r28, 0x0c	; 12
 bb0:	0f b6       	in	r0, 0x3f	; 63
 bb2:	f8 94       	cli
 bb4:	de bf       	out	0x3e, r29	; 62
 bb6:	0f be       	out	0x3f, r0	; 63
 bb8:	cd bf       	out	0x3d, r28	; 61
 bba:	cf 91       	pop	r28
 bbc:	df 91       	pop	r29
 bbe:	08 95       	ret

00000bc0 <checkPass>:

void checkPass(){
 bc0:	df 93       	push	r29
 bc2:	cf 93       	push	r28
 bc4:	cd b7       	in	r28, 0x3d	; 61
 bc6:	de b7       	in	r29, 0x3e	; 62
 bc8:	61 97       	sbiw	r28, 0x11	; 17
 bca:	0f b6       	in	r0, 0x3f	; 63
 bcc:	f8 94       	cli
 bce:	de bf       	out	0x3e, r29	; 62
 bd0:	0f be       	out	0x3f, r0	; 63
 bd2:	cd bf       	out	0x3d, r28	; 61
	uint8 default_pass[6] = {'1', '2', '3', '4', '5', '\0'};
 bd4:	ce 01       	movw	r24, r28
 bd6:	01 96       	adiw	r24, 0x01	; 1
 bd8:	9e 87       	std	Y+14, r25	; 0x0e
 bda:	8d 87       	std	Y+13, r24	; 0x0d
 bdc:	e1 e6       	ldi	r30, 0x61	; 97
 bde:	f0 e0       	ldi	r31, 0x00	; 0
 be0:	f8 8b       	std	Y+16, r31	; 0x10
 be2:	ef 87       	std	Y+15, r30	; 0x0f
 be4:	f6 e0       	ldi	r31, 0x06	; 6
 be6:	f9 8b       	std	Y+17, r31	; 0x11
 be8:	ef 85       	ldd	r30, Y+15	; 0x0f
 bea:	f8 89       	ldd	r31, Y+16	; 0x10
 bec:	00 80       	ld	r0, Z
 bee:	8f 85       	ldd	r24, Y+15	; 0x0f
 bf0:	98 89       	ldd	r25, Y+16	; 0x10
 bf2:	01 96       	adiw	r24, 0x01	; 1
 bf4:	98 8b       	std	Y+16, r25	; 0x10
 bf6:	8f 87       	std	Y+15, r24	; 0x0f
 bf8:	ed 85       	ldd	r30, Y+13	; 0x0d
 bfa:	fe 85       	ldd	r31, Y+14	; 0x0e
 bfc:	00 82       	st	Z, r0
 bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
 c00:	9e 85       	ldd	r25, Y+14	; 0x0e
 c02:	01 96       	adiw	r24, 0x01	; 1
 c04:	9e 87       	std	Y+14, r25	; 0x0e
 c06:	8d 87       	std	Y+13, r24	; 0x0d
 c08:	99 89       	ldd	r25, Y+17	; 0x11
 c0a:	91 50       	subi	r25, 0x01	; 1
 c0c:	99 8b       	std	Y+17, r25	; 0x11
 c0e:	e9 89       	ldd	r30, Y+17	; 0x11
 c10:	ee 23       	and	r30, r30
 c12:	51 f7       	brne	.-44     	; 0xbe8 <checkPass+0x28>
	uint8 password[6];
	rcvPassword(password);
 c14:	ce 01       	movw	r24, r28
 c16:	07 96       	adiw	r24, 0x07	; 7
 c18:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rcvPassword>

	if(strcmp(password, default_pass) == 0)
 c1c:	ce 01       	movw	r24, r28
 c1e:	07 96       	adiw	r24, 0x07	; 7
 c20:	9e 01       	movw	r18, r28
 c22:	2f 5f       	subi	r18, 0xFF	; 255
 c24:	3f 4f       	sbci	r19, 0xFF	; 255
 c26:	b9 01       	movw	r22, r18
 c28:	0e 94 45 06 	call	0xc8a	; 0xc8a <strcmp>
 c2c:	00 97       	sbiw	r24, 0x00	; 0
 c2e:	21 f4       	brne	.+8      	; 0xc38 <checkPass+0x78>
		UART_sendCharacter('t');
 c30:	84 e7       	ldi	r24, 0x74	; 116
 c32:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendCharacter>
 c36:	03 c0       	rjmp	.+6      	; 0xc3e <checkPass+0x7e>
	else
		UART_sendCharacter('f');
 c38:	86 e6       	ldi	r24, 0x66	; 102
 c3a:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendCharacter>
}
 c3e:	61 96       	adiw	r28, 0x11	; 17
 c40:	0f b6       	in	r0, 0x3f	; 63
 c42:	f8 94       	cli
 c44:	de bf       	out	0x3e, r29	; 62
 c46:	0f be       	out	0x3f, r0	; 63
 c48:	cd bf       	out	0x3d, r28	; 61
 c4a:	cf 91       	pop	r28
 c4c:	df 91       	pop	r29
 c4e:	08 95       	ret

00000c50 <main>:

void main(void){
 c50:	df 93       	push	r29
 c52:	cf 93       	push	r28
 c54:	0f 92       	push	r0
 c56:	cd b7       	in	r28, 0x3d	; 61
 c58:	de b7       	in	r29, 0x3e	; 62

	uint8 response = 0;
 c5a:	19 82       	std	Y+1, r1	; 0x01

	setup();
 c5c:	0e 94 71 05 	call	0xae2	; 0xae2 <setup>

	do{
		response = UART_rcvCharacter();
 c60:	0e 94 f6 00 	call	0x1ec	; 0x1ec <UART_rcvCharacter>
 c64:	89 83       	std	Y+1, r24	; 0x01

		if(response == '+' ){
 c66:	89 81       	ldd	r24, Y+1	; 0x01
 c68:	8b 32       	cpi	r24, 0x2B	; 43
 c6a:	19 f4       	brne	.+6      	; 0xc72 <main+0x22>
			checkPass();
 c6c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <checkPass>
 c70:	f7 cf       	rjmp	.-18     	; 0xc60 <main+0x10>
		}	//TODO move motor
		else if(response == '-')
 c72:	89 81       	ldd	r24, Y+1	; 0x01
 c74:	8d 32       	cpi	r24, 0x2D	; 45
 c76:	19 f4       	brne	.+6      	; 0xc7e <main+0x2e>
			checkPass();
 c78:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <checkPass>
 c7c:	f1 cf       	rjmp	.-30     	; 0xc60 <main+0x10>
		else if(response == 'p')
 c7e:	89 81       	ldd	r24, Y+1	; 0x01
 c80:	80 37       	cpi	r24, 0x70	; 112
 c82:	71 f7       	brne	.-36     	; 0xc60 <main+0x10>
			changePass();
 c84:	0e 94 b4 05 	call	0xb68	; 0xb68 <changePass>
 c88:	eb cf       	rjmp	.-42     	; 0xc60 <main+0x10>

00000c8a <strcmp>:
 c8a:	fb 01       	movw	r30, r22
 c8c:	dc 01       	movw	r26, r24
 c8e:	8d 91       	ld	r24, X+
 c90:	01 90       	ld	r0, Z+
 c92:	80 19       	sub	r24, r0
 c94:	01 10       	cpse	r0, r1
 c96:	d9 f3       	breq	.-10     	; 0xc8e <strcmp+0x4>
 c98:	99 0b       	sbc	r25, r25
 c9a:	08 95       	ret

00000c9c <_exit>:
 c9c:	f8 94       	cli

00000c9e <__stop_program>:
 c9e:	ff cf       	rjmp	.-2      	; 0xc9e <__stop_program>
