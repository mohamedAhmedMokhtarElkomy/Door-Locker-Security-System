
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d6a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000d6a  00000dde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b0c  00000000  00000000  00000de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000124a  00000000  00000000  000028f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 8d 06 	call	0xd1a	; 0xd1a <main>
  7a:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_13>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(USART_RXC_vect){
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	g_uartRcvData = UDR;
  9a:	ec e2       	ldi	r30, 0x2C	; 44
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 93 60 00 	sts	0x0060, r24
}
  a4:	cf 91       	pop	r28
  a6:	df 91       	pop	r29
  a8:	ff 91       	pop	r31
  aa:	ef 91       	pop	r30
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <UART_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void UART_init(){
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	00 d0       	rcall	.+0      	; 0xbe <UART_init+0x6>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62

	uint16 ubrr_value = 0;
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRA, U2X);		/* : Double the USART Transmission Speed */
  c6:	ab e2       	ldi	r26, 0x2B	; 43
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	eb e2       	ldi	r30, 0x2B	; 43
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	8c 93       	st	X, r24

	SET_BIT(UCSRB, RXCIE);		/* RX Complete Interrupt Enable */
  d4:	aa e2       	ldi	r26, 0x2A	; 42
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	ea e2       	ldi	r30, 0x2A	; 42
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);		/* Transmitter Enable*/
  e2:	aa e2       	ldi	r26, 0x2A	; 42
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	ea e2       	ldi	r30, 0x2A	; 42
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 60       	ori	r24, 0x08	; 8
  ee:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);		/* Receiver Enable */
  f0:	aa e2       	ldi	r26, 0x2A	; 42
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	ea e2       	ldi	r30, 0x2A	; 42
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC, UMSEL);	/* USART Mode Select 0 -> async, 1 -> sync*/
  fe:	a0 e4       	ldi	r26, 0x40	; 64
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	e0 e4       	ldi	r30, 0x40	; 64
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);		/* UCSZ1:0: Character Size */
 10c:	a0 e4       	ldi	r26, 0x40	; 64
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e0 e4       	ldi	r30, 0x40	; 64
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);		/* UCSZ1:0: 11 -> 8-bit */
 11a:	a0 e4       	ldi	r26, 0x40	; 64
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e0 e4       	ldi	r30, 0x40	; 64
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	8c 93       	st	X, r24


	ubrr_value = (uint16)(( F_CPU / ( BAUDRATE * 8UL )) - 1 );
 128:	87 e6       	ldi	r24, 0x67	; 103
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	9a 83       	std	Y+2, r25	; 0x02
 12e:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = (ubrr_value >> 8) & (0x0F);
 130:	e0 e4       	ldi	r30, 0x40	; 64
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	9a 81       	ldd	r25, Y+2	; 0x02
 138:	89 2f       	mov	r24, r25
 13a:	99 27       	eor	r25, r25
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
 140:	e9 e2       	ldi	r30, 0x29	; 41
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	80 83       	st	Z, r24
}
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	08 95       	ret

00000152 <UART_sendCharacter>:

void UART_sendCharacter(uint8 data){
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	0f 92       	push	r0
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
 15e:	eb e2       	ldi	r30, 0x2B	; 43
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 2f       	mov	r24, r24
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	80 72       	andi	r24, 0x20	; 32
 16a:	90 70       	andi	r25, 0x00	; 0
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	b9 f3       	breq	.-18     	; 0x15e <UART_sendCharacter+0xc>
	UDR = data;
 170:	ec e2       	ldi	r30, 0x2C	; 44
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	80 83       	st	Z, r24
}
 178:	0f 90       	pop	r0
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	08 95       	ret

00000180 <UART_sendArray>:

void UART_sendArray(uint8 *str, uint8 str_size){
 180:	df 93       	push	r29
 182:	cf 93       	push	r28
 184:	00 d0       	rcall	.+0      	; 0x186 <UART_sendArray+0x6>
 186:	00 d0       	rcall	.+0      	; 0x188 <UART_sendArray+0x8>
 188:	0f 92       	push	r0
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	9c 83       	std	Y+4, r25	; 0x04
 190:	8b 83       	std	Y+3, r24	; 0x03
 192:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < str_size; i++){
 194:	1a 82       	std	Y+2, r1	; 0x02
 196:	19 82       	std	Y+1, r1	; 0x01
 198:	19 c0       	rjmp	.+50     	; 0x1cc <UART_sendArray+0x4c>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
 19a:	eb e2       	ldi	r30, 0x2B	; 43
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	80 72       	andi	r24, 0x20	; 32
 1a6:	90 70       	andi	r25, 0x00	; 0
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	b9 f3       	breq	.-18     	; 0x19a <UART_sendArray+0x1a>
		UDR = str[i];
 1ac:	ac e2       	ldi	r26, 0x2C	; 44
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	29 81       	ldd	r18, Y+1	; 0x01
 1b2:	3a 81       	ldd	r19, Y+2	; 0x02
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	9c 81       	ldd	r25, Y+4	; 0x04
 1b8:	fc 01       	movw	r30, r24
 1ba:	e2 0f       	add	r30, r18
 1bc:	f3 1f       	adc	r31, r19
 1be:	80 81       	ld	r24, Z
 1c0:	8c 93       	st	X, r24
	UDR = data;
}

void UART_sendArray(uint8 *str, uint8 str_size){

	for(int i = 0; i < str_size; i++){
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	9a 83       	std	Y+2, r25	; 0x02
 1ca:	89 83       	std	Y+1, r24	; 0x01
 1cc:	8d 81       	ldd	r24, Y+5	; 0x05
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	9a 81       	ldd	r25, Y+2	; 0x02
 1d6:	82 17       	cp	r24, r18
 1d8:	93 07       	cpc	r25, r19
 1da:	fc f2       	brlt	.-66     	; 0x19a <UART_sendArray+0x1a>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
		UDR = str[i];
	}

}
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	cf 91       	pop	r28
 1e8:	df 91       	pop	r29
 1ea:	08 95       	ret

000001ec <UART_rcvCharacter>:

uint8 UART_rcvCharacter(){
 1ec:	df 93       	push	r29
 1ee:	cf 93       	push	r28
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
	while( BIT_IS_CLEAR(UCSRA, RXC) ){}
 1f4:	eb e2       	ldi	r30, 0x2B	; 43
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	88 23       	and	r24, r24
 1fc:	dc f7       	brge	.-10     	; 0x1f4 <UART_rcvCharacter+0x8>
	return UDR;
 1fe:	ec e2       	ldi	r30, 0x2C	; 44
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
}
 204:	cf 91       	pop	r28
 206:	df 91       	pop	r29
 208:	08 95       	ret

0000020a <TIMER0_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void TIMER0_init(){
 20a:	df 93       	push	r29
 20c:	cf 93       	push	r28
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0, FOC0); /* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
 212:	a3 e5       	ldi	r26, 0x53	; 83
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e3 e5       	ldi	r30, 0x53	; 83
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	8f 77       	andi	r24, 0x7F	; 127
 21e:	8c 93       	st	X, r24
	 *  0   |   0  * Normal
	 *  0   |   1  * PWM, phase correct
	 *  1   |   0  * CTC
	 *  1   |   1  * Fast PWM
	 ***************/
}
 220:	cf 91       	pop	r28
 222:	df 91       	pop	r29
 224:	08 95       	ret

00000226 <TIMER0_start>:
void TIMER0_start(){}
 226:	df 93       	push	r29
 228:	cf 93       	push	r28
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	cf 91       	pop	r28
 230:	df 91       	pop	r29
 232:	08 95       	ret

00000234 <TIMER0_stop>:
void TIMER0_stop(){}
 234:	df 93       	push	r29
 236:	cf 93       	push	r28
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	08 95       	ret

00000242 <TIMER0_clear>:
void TIMER0_clear(){}
 242:	df 93       	push	r29
 244:	cf 93       	push	r28
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	cf 91       	pop	r28
 24c:	df 91       	pop	r29
 24e:	08 95       	ret

00000250 <TWI_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void TWI_init(){
 250:	df 93       	push	r29
 252:	cf 93       	push	r28
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62

	//TODO make TWBR dynamic
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = 0x02;
 258:	e0 e2       	ldi	r30, 0x20	; 32
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	80 83       	st	Z, r24
	TWSR = 0x00;
 260:	e1 e2       	ldi	r30, 0x21	; 33
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	10 82       	st	Z, r1

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
   	   General Call Recognition: Off */
	TWAR = 0b00000010; // my address = 0x01 address from BIT 7..1
 266:	e2 e2       	ldi	r30, 0x22	; 34
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	80 83       	st	Z, r24

	TWCR = (1 << TWINT) | ( TWEN << 1);
 26e:	e6 e5       	ldi	r30, 0x56	; 86
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	84 e8       	ldi	r24, 0x84	; 132
 274:	80 83       	st	Z, r24

}
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	08 95       	ret

0000027c <TWI_start>:
void TWI_start(){
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1 << TWINT) | ( TWSTA << 1) | ( TWEN << 1);
 284:	e6 e5       	ldi	r30, 0x56	; 86
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	8e e8       	ldi	r24, 0x8E	; 142
 28a:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR(TWCR, TWINT) ); //wait until TWI finish its process
 28c:	e6 e5       	ldi	r30, 0x56	; 86
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	88 23       	and	r24, r24
 294:	dc f7       	brge	.-10     	; 0x28c <TWI_start+0x10>
}
 296:	cf 91       	pop	r28
 298:	df 91       	pop	r29
 29a:	08 95       	ret

0000029c <TWI_stop>:

void TWI_stop(){
 29c:	df 93       	push	r29
 29e:	cf 93       	push	r28
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | ( TWSTO << 1) | ( TWEN << 1);
 2a4:	e6 e5       	ldi	r30, 0x56	; 86
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	8c e8       	ldi	r24, 0x8C	; 140
 2aa:	80 83       	st	Z, r24
}
 2ac:	cf 91       	pop	r28
 2ae:	df 91       	pop	r29
 2b0:	08 95       	ret

000002b2 <TWI_writeByte>:
void TWI_writeByte(){}
 2b2:	df 93       	push	r29
 2b4:	cf 93       	push	r28
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	08 95       	ret

000002c0 <TWI_readByteWithACK>:
uint8 TWI_readByteWithACK(){}
 2c0:	df 93       	push	r29
 2c2:	cf 93       	push	r28
 2c4:	0f 92       	push	r0
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	0f 90       	pop	r0
 2cc:	cf 91       	pop	r28
 2ce:	df 91       	pop	r29
 2d0:	08 95       	ret

000002d2 <TWI_readByteWithNACK>:
uint8 TWI_readByteWithNACK(){}
 2d2:	df 93       	push	r29
 2d4:	cf 93       	push	r28
 2d6:	0f 92       	push	r0
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	0f 90       	pop	r0
 2de:	cf 91       	pop	r28
 2e0:	df 91       	pop	r29
 2e2:	08 95       	ret

000002e4 <TWI_getStatus>:

uint8 TWI_getStatus(){
 2e4:	df 93       	push	r29
 2e6:	cf 93       	push	r28
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
	return ( TWSR & 0xF8 );
 2ec:	e1 e2       	ldi	r30, 0x21	; 33
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	88 7f       	andi	r24, 0xF8	; 248
}
 2f4:	cf 91       	pop	r28
 2f6:	df 91       	pop	r29
 2f8:	08 95       	ret

000002fa <GPIO_setupPinDirection>:
 *******************************************************************************/



void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
 2fa:	df 93       	push	r29
 2fc:	cf 93       	push	r28
 2fe:	00 d0       	rcall	.+0      	; 0x300 <GPIO_setupPinDirection+0x6>
 300:	00 d0       	rcall	.+0      	; 0x302 <GPIO_setupPinDirection+0x8>
 302:	0f 92       	push	r0
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	6a 83       	std	Y+2, r22	; 0x02
 30c:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 30e:	8a 81       	ldd	r24, Y+2	; 0x02
 310:	88 30       	cpi	r24, 0x08	; 8
 312:	08 f0       	brcs	.+2      	; 0x316 <GPIO_setupPinDirection+0x1c>
 314:	d5 c0       	rjmp	.+426    	; 0x4c0 <GPIO_setupPinDirection+0x1c6>
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	84 30       	cpi	r24, 0x04	; 4
 31a:	08 f0       	brcs	.+2      	; 0x31e <GPIO_setupPinDirection+0x24>
 31c:	d1 c0       	rjmp	.+418    	; 0x4c0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	3d 83       	std	Y+5, r19	; 0x05
 326:	2c 83       	std	Y+4, r18	; 0x04
 328:	8c 81       	ldd	r24, Y+4	; 0x04
 32a:	9d 81       	ldd	r25, Y+5	; 0x05
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	91 05       	cpc	r25, r1
 330:	09 f4       	brne	.+2      	; 0x334 <GPIO_setupPinDirection+0x3a>
 332:	43 c0       	rjmp	.+134    	; 0x3ba <GPIO_setupPinDirection+0xc0>
 334:	2c 81       	ldd	r18, Y+4	; 0x04
 336:	3d 81       	ldd	r19, Y+5	; 0x05
 338:	22 30       	cpi	r18, 0x02	; 2
 33a:	31 05       	cpc	r19, r1
 33c:	2c f4       	brge	.+10     	; 0x348 <GPIO_setupPinDirection+0x4e>
 33e:	8c 81       	ldd	r24, Y+4	; 0x04
 340:	9d 81       	ldd	r25, Y+5	; 0x05
 342:	00 97       	sbiw	r24, 0x00	; 0
 344:	71 f0       	breq	.+28     	; 0x362 <GPIO_setupPinDirection+0x68>
 346:	bc c0       	rjmp	.+376    	; 0x4c0 <GPIO_setupPinDirection+0x1c6>
 348:	2c 81       	ldd	r18, Y+4	; 0x04
 34a:	3d 81       	ldd	r19, Y+5	; 0x05
 34c:	22 30       	cpi	r18, 0x02	; 2
 34e:	31 05       	cpc	r19, r1
 350:	09 f4       	brne	.+2      	; 0x354 <GPIO_setupPinDirection+0x5a>
 352:	5f c0       	rjmp	.+190    	; 0x412 <GPIO_setupPinDirection+0x118>
 354:	8c 81       	ldd	r24, Y+4	; 0x04
 356:	9d 81       	ldd	r25, Y+5	; 0x05
 358:	83 30       	cpi	r24, 0x03	; 3
 35a:	91 05       	cpc	r25, r1
 35c:	09 f4       	brne	.+2      	; 0x360 <GPIO_setupPinDirection+0x66>
 35e:	85 c0       	rjmp	.+266    	; 0x46a <GPIO_setupPinDirection+0x170>
 360:	af c0       	rjmp	.+350    	; 0x4c0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 362:	8b 81       	ldd	r24, Y+3	; 0x03
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	a1 f4       	brne	.+40     	; 0x390 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 368:	aa e3       	ldi	r26, 0x3A	; 58
 36a:	b0 e0       	ldi	r27, 0x00	; 0
 36c:	ea e3       	ldi	r30, 0x3A	; 58
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	48 2f       	mov	r20, r24
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	28 2f       	mov	r18, r24
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 2e       	mov	r0, r18
 380:	02 c0       	rjmp	.+4      	; 0x386 <GPIO_setupPinDirection+0x8c>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	0a 94       	dec	r0
 388:	e2 f7       	brpl	.-8      	; 0x382 <GPIO_setupPinDirection+0x88>
 38a:	84 2b       	or	r24, r20
 38c:	8c 93       	st	X, r24
 38e:	98 c0       	rjmp	.+304    	; 0x4c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 390:	aa e3       	ldi	r26, 0x3A	; 58
 392:	b0 e0       	ldi	r27, 0x00	; 0
 394:	ea e3       	ldi	r30, 0x3A	; 58
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	48 2f       	mov	r20, r24
 39c:	8a 81       	ldd	r24, Y+2	; 0x02
 39e:	28 2f       	mov	r18, r24
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 2e       	mov	r0, r18
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <GPIO_setupPinDirection+0xb4>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	0a 94       	dec	r0
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <GPIO_setupPinDirection+0xb0>
 3b2:	80 95       	com	r24
 3b4:	84 23       	and	r24, r20
 3b6:	8c 93       	st	X, r24
 3b8:	83 c0       	rjmp	.+262    	; 0x4c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	a1 f4       	brne	.+40     	; 0x3e8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 3c0:	a7 e3       	ldi	r26, 0x37	; 55
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	e7 e3       	ldi	r30, 0x37	; 55
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	48 2f       	mov	r20, r24
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 2e       	mov	r0, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <GPIO_setupPinDirection+0xe4>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <GPIO_setupPinDirection+0xe0>
 3e2:	84 2b       	or	r24, r20
 3e4:	8c 93       	st	X, r24
 3e6:	6c c0       	rjmp	.+216    	; 0x4c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 3e8:	a7 e3       	ldi	r26, 0x37	; 55
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	e7 e3       	ldi	r30, 0x37	; 55
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	48 2f       	mov	r20, r24
 3f4:	8a 81       	ldd	r24, Y+2	; 0x02
 3f6:	28 2f       	mov	r18, r24
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 2e       	mov	r0, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <GPIO_setupPinDirection+0x10c>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <GPIO_setupPinDirection+0x108>
 40a:	80 95       	com	r24
 40c:	84 23       	and	r24, r20
 40e:	8c 93       	st	X, r24
 410:	57 c0       	rjmp	.+174    	; 0x4c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	a1 f4       	brne	.+40     	; 0x440 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 418:	a4 e3       	ldi	r26, 0x34	; 52
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	e4 e3       	ldi	r30, 0x34	; 52
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	48 2f       	mov	r20, r24
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	28 2f       	mov	r18, r24
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 2e       	mov	r0, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <GPIO_setupPinDirection+0x13c>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <GPIO_setupPinDirection+0x138>
 43a:	84 2b       	or	r24, r20
 43c:	8c 93       	st	X, r24
 43e:	40 c0       	rjmp	.+128    	; 0x4c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 440:	a4 e3       	ldi	r26, 0x34	; 52
 442:	b0 e0       	ldi	r27, 0x00	; 0
 444:	e4 e3       	ldi	r30, 0x34	; 52
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	48 2f       	mov	r20, r24
 44c:	8a 81       	ldd	r24, Y+2	; 0x02
 44e:	28 2f       	mov	r18, r24
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 2e       	mov	r0, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <GPIO_setupPinDirection+0x164>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	0a 94       	dec	r0
 460:	e2 f7       	brpl	.-8      	; 0x45a <GPIO_setupPinDirection+0x160>
 462:	80 95       	com	r24
 464:	84 23       	and	r24, r20
 466:	8c 93       	st	X, r24
 468:	2b c0       	rjmp	.+86     	; 0x4c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	a1 f4       	brne	.+40     	; 0x498 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 470:	a1 e3       	ldi	r26, 0x31	; 49
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	e1 e3       	ldi	r30, 0x31	; 49
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	48 2f       	mov	r20, r24
 47c:	8a 81       	ldd	r24, Y+2	; 0x02
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 2e       	mov	r0, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <GPIO_setupPinDirection+0x194>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	0a 94       	dec	r0
 490:	e2 f7       	brpl	.-8      	; 0x48a <GPIO_setupPinDirection+0x190>
 492:	84 2b       	or	r24, r20
 494:	8c 93       	st	X, r24
 496:	14 c0       	rjmp	.+40     	; 0x4c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 498:	a1 e3       	ldi	r26, 0x31	; 49
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	e1 e3       	ldi	r30, 0x31	; 49
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	48 2f       	mov	r20, r24
 4a4:	8a 81       	ldd	r24, Y+2	; 0x02
 4a6:	28 2f       	mov	r18, r24
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 2e       	mov	r0, r18
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <GPIO_setupPinDirection+0x1bc>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	0a 94       	dec	r0
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <GPIO_setupPinDirection+0x1b8>
 4ba:	80 95       	com	r24
 4bc:	84 23       	and	r24, r20
 4be:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 4c0:	0f 90       	pop	r0
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	cf 91       	pop	r28
 4cc:	df 91       	pop	r29
 4ce:	08 95       	ret

000004d0 <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
 4d0:	df 93       	push	r29
 4d2:	cf 93       	push	r28
 4d4:	00 d0       	rcall	.+0      	; 0x4d6 <GPIO_writePin+0x6>
 4d6:	00 d0       	rcall	.+0      	; 0x4d8 <GPIO_writePin+0x8>
 4d8:	0f 92       	push	r0
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	89 83       	std	Y+1, r24	; 0x01
 4e0:	6a 83       	std	Y+2, r22	; 0x02
 4e2:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	88 30       	cpi	r24, 0x08	; 8
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <GPIO_writePin+0x1c>
 4ea:	d5 c0       	rjmp	.+426    	; 0x696 <GPIO_writePin+0x1c6>
 4ec:	89 81       	ldd	r24, Y+1	; 0x01
 4ee:	84 30       	cpi	r24, 0x04	; 4
 4f0:	08 f0       	brcs	.+2      	; 0x4f4 <GPIO_writePin+0x24>
 4f2:	d1 c0       	rjmp	.+418    	; 0x696 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	28 2f       	mov	r18, r24
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	3d 83       	std	Y+5, r19	; 0x05
 4fc:	2c 83       	std	Y+4, r18	; 0x04
 4fe:	8c 81       	ldd	r24, Y+4	; 0x04
 500:	9d 81       	ldd	r25, Y+5	; 0x05
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	91 05       	cpc	r25, r1
 506:	09 f4       	brne	.+2      	; 0x50a <GPIO_writePin+0x3a>
 508:	43 c0       	rjmp	.+134    	; 0x590 <GPIO_writePin+0xc0>
 50a:	2c 81       	ldd	r18, Y+4	; 0x04
 50c:	3d 81       	ldd	r19, Y+5	; 0x05
 50e:	22 30       	cpi	r18, 0x02	; 2
 510:	31 05       	cpc	r19, r1
 512:	2c f4       	brge	.+10     	; 0x51e <GPIO_writePin+0x4e>
 514:	8c 81       	ldd	r24, Y+4	; 0x04
 516:	9d 81       	ldd	r25, Y+5	; 0x05
 518:	00 97       	sbiw	r24, 0x00	; 0
 51a:	71 f0       	breq	.+28     	; 0x538 <GPIO_writePin+0x68>
 51c:	bc c0       	rjmp	.+376    	; 0x696 <GPIO_writePin+0x1c6>
 51e:	2c 81       	ldd	r18, Y+4	; 0x04
 520:	3d 81       	ldd	r19, Y+5	; 0x05
 522:	22 30       	cpi	r18, 0x02	; 2
 524:	31 05       	cpc	r19, r1
 526:	09 f4       	brne	.+2      	; 0x52a <GPIO_writePin+0x5a>
 528:	5f c0       	rjmp	.+190    	; 0x5e8 <GPIO_writePin+0x118>
 52a:	8c 81       	ldd	r24, Y+4	; 0x04
 52c:	9d 81       	ldd	r25, Y+5	; 0x05
 52e:	83 30       	cpi	r24, 0x03	; 3
 530:	91 05       	cpc	r25, r1
 532:	09 f4       	brne	.+2      	; 0x536 <GPIO_writePin+0x66>
 534:	85 c0       	rjmp	.+266    	; 0x640 <GPIO_writePin+0x170>
 536:	af c0       	rjmp	.+350    	; 0x696 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	a1 f4       	brne	.+40     	; 0x566 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 53e:	ab e3       	ldi	r26, 0x3B	; 59
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	eb e3       	ldi	r30, 0x3B	; 59
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	48 2f       	mov	r20, r24
 54a:	8a 81       	ldd	r24, Y+2	; 0x02
 54c:	28 2f       	mov	r18, r24
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 2e       	mov	r0, r18
 556:	02 c0       	rjmp	.+4      	; 0x55c <GPIO_writePin+0x8c>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	0a 94       	dec	r0
 55e:	e2 f7       	brpl	.-8      	; 0x558 <GPIO_writePin+0x88>
 560:	84 2b       	or	r24, r20
 562:	8c 93       	st	X, r24
 564:	98 c0       	rjmp	.+304    	; 0x696 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 566:	ab e3       	ldi	r26, 0x3B	; 59
 568:	b0 e0       	ldi	r27, 0x00	; 0
 56a:	eb e3       	ldi	r30, 0x3B	; 59
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	80 81       	ld	r24, Z
 570:	48 2f       	mov	r20, r24
 572:	8a 81       	ldd	r24, Y+2	; 0x02
 574:	28 2f       	mov	r18, r24
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	02 2e       	mov	r0, r18
 57e:	02 c0       	rjmp	.+4      	; 0x584 <GPIO_writePin+0xb4>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	0a 94       	dec	r0
 586:	e2 f7       	brpl	.-8      	; 0x580 <GPIO_writePin+0xb0>
 588:	80 95       	com	r24
 58a:	84 23       	and	r24, r20
 58c:	8c 93       	st	X, r24
 58e:	83 c0       	rjmp	.+262    	; 0x696 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	a1 f4       	brne	.+40     	; 0x5be <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 596:	a8 e3       	ldi	r26, 0x38	; 56
 598:	b0 e0       	ldi	r27, 0x00	; 0
 59a:	e8 e3       	ldi	r30, 0x38	; 56
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	48 2f       	mov	r20, r24
 5a2:	8a 81       	ldd	r24, Y+2	; 0x02
 5a4:	28 2f       	mov	r18, r24
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 2e       	mov	r0, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <GPIO_writePin+0xe4>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <GPIO_writePin+0xe0>
 5b8:	84 2b       	or	r24, r20
 5ba:	8c 93       	st	X, r24
 5bc:	6c c0       	rjmp	.+216    	; 0x696 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 5be:	a8 e3       	ldi	r26, 0x38	; 56
 5c0:	b0 e0       	ldi	r27, 0x00	; 0
 5c2:	e8 e3       	ldi	r30, 0x38	; 56
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	48 2f       	mov	r20, r24
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	28 2f       	mov	r18, r24
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 2e       	mov	r0, r18
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <GPIO_writePin+0x10c>
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	0a 94       	dec	r0
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <GPIO_writePin+0x108>
 5e0:	80 95       	com	r24
 5e2:	84 23       	and	r24, r20
 5e4:	8c 93       	st	X, r24
 5e6:	57 c0       	rjmp	.+174    	; 0x696 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 5e8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	a1 f4       	brne	.+40     	; 0x616 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 5ee:	a5 e3       	ldi	r26, 0x35	; 53
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	e5 e3       	ldi	r30, 0x35	; 53
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	48 2f       	mov	r20, r24
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 2e       	mov	r0, r18
 606:	02 c0       	rjmp	.+4      	; 0x60c <GPIO_writePin+0x13c>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	0a 94       	dec	r0
 60e:	e2 f7       	brpl	.-8      	; 0x608 <GPIO_writePin+0x138>
 610:	84 2b       	or	r24, r20
 612:	8c 93       	st	X, r24
 614:	40 c0       	rjmp	.+128    	; 0x696 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 616:	a5 e3       	ldi	r26, 0x35	; 53
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	e5 e3       	ldi	r30, 0x35	; 53
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	80 81       	ld	r24, Z
 620:	48 2f       	mov	r20, r24
 622:	8a 81       	ldd	r24, Y+2	; 0x02
 624:	28 2f       	mov	r18, r24
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 2e       	mov	r0, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <GPIO_writePin+0x164>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	0a 94       	dec	r0
 636:	e2 f7       	brpl	.-8      	; 0x630 <GPIO_writePin+0x160>
 638:	80 95       	com	r24
 63a:	84 23       	and	r24, r20
 63c:	8c 93       	st	X, r24
 63e:	2b c0       	rjmp	.+86     	; 0x696 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 640:	8b 81       	ldd	r24, Y+3	; 0x03
 642:	81 30       	cpi	r24, 0x01	; 1
 644:	a1 f4       	brne	.+40     	; 0x66e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 646:	a2 e3       	ldi	r26, 0x32	; 50
 648:	b0 e0       	ldi	r27, 0x00	; 0
 64a:	e2 e3       	ldi	r30, 0x32	; 50
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	48 2f       	mov	r20, r24
 652:	8a 81       	ldd	r24, Y+2	; 0x02
 654:	28 2f       	mov	r18, r24
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	02 2e       	mov	r0, r18
 65e:	02 c0       	rjmp	.+4      	; 0x664 <GPIO_writePin+0x194>
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	0a 94       	dec	r0
 666:	e2 f7       	brpl	.-8      	; 0x660 <GPIO_writePin+0x190>
 668:	84 2b       	or	r24, r20
 66a:	8c 93       	st	X, r24
 66c:	14 c0       	rjmp	.+40     	; 0x696 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 66e:	a2 e3       	ldi	r26, 0x32	; 50
 670:	b0 e0       	ldi	r27, 0x00	; 0
 672:	e2 e3       	ldi	r30, 0x32	; 50
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	48 2f       	mov	r20, r24
 67a:	8a 81       	ldd	r24, Y+2	; 0x02
 67c:	28 2f       	mov	r18, r24
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 2e       	mov	r0, r18
 686:	02 c0       	rjmp	.+4      	; 0x68c <GPIO_writePin+0x1bc>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	0a 94       	dec	r0
 68e:	e2 f7       	brpl	.-8      	; 0x688 <GPIO_writePin+0x1b8>
 690:	80 95       	com	r24
 692:	84 23       	and	r24, r20
 694:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 696:	0f 90       	pop	r0
 698:	0f 90       	pop	r0
 69a:	0f 90       	pop	r0
 69c:	0f 90       	pop	r0
 69e:	0f 90       	pop	r0
 6a0:	cf 91       	pop	r28
 6a2:	df 91       	pop	r29
 6a4:	08 95       	ret

000006a6 <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 6a6:	df 93       	push	r29
 6a8:	cf 93       	push	r28
 6aa:	00 d0       	rcall	.+0      	; 0x6ac <GPIO_readPin+0x6>
 6ac:	00 d0       	rcall	.+0      	; 0x6ae <GPIO_readPin+0x8>
 6ae:	0f 92       	push	r0
 6b0:	cd b7       	in	r28, 0x3d	; 61
 6b2:	de b7       	in	r29, 0x3e	; 62
 6b4:	8a 83       	std	Y+2, r24	; 0x02
 6b6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 6b8:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 6ba:	8b 81       	ldd	r24, Y+3	; 0x03
 6bc:	88 30       	cpi	r24, 0x08	; 8
 6be:	08 f0       	brcs	.+2      	; 0x6c2 <GPIO_readPin+0x1c>
 6c0:	84 c0       	rjmp	.+264    	; 0x7ca <GPIO_readPin+0x124>
 6c2:	8a 81       	ldd	r24, Y+2	; 0x02
 6c4:	84 30       	cpi	r24, 0x04	; 4
 6c6:	08 f0       	brcs	.+2      	; 0x6ca <GPIO_readPin+0x24>
 6c8:	80 c0       	rjmp	.+256    	; 0x7ca <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	28 2f       	mov	r18, r24
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	3d 83       	std	Y+5, r19	; 0x05
 6d2:	2c 83       	std	Y+4, r18	; 0x04
 6d4:	4c 81       	ldd	r20, Y+4	; 0x04
 6d6:	5d 81       	ldd	r21, Y+5	; 0x05
 6d8:	41 30       	cpi	r20, 0x01	; 1
 6da:	51 05       	cpc	r21, r1
 6dc:	79 f1       	breq	.+94     	; 0x73c <GPIO_readPin+0x96>
 6de:	8c 81       	ldd	r24, Y+4	; 0x04
 6e0:	9d 81       	ldd	r25, Y+5	; 0x05
 6e2:	82 30       	cpi	r24, 0x02	; 2
 6e4:	91 05       	cpc	r25, r1
 6e6:	34 f4       	brge	.+12     	; 0x6f4 <GPIO_readPin+0x4e>
 6e8:	2c 81       	ldd	r18, Y+4	; 0x04
 6ea:	3d 81       	ldd	r19, Y+5	; 0x05
 6ec:	21 15       	cp	r18, r1
 6ee:	31 05       	cpc	r19, r1
 6f0:	69 f0       	breq	.+26     	; 0x70c <GPIO_readPin+0x66>
 6f2:	6b c0       	rjmp	.+214    	; 0x7ca <GPIO_readPin+0x124>
 6f4:	4c 81       	ldd	r20, Y+4	; 0x04
 6f6:	5d 81       	ldd	r21, Y+5	; 0x05
 6f8:	42 30       	cpi	r20, 0x02	; 2
 6fa:	51 05       	cpc	r21, r1
 6fc:	b9 f1       	breq	.+110    	; 0x76c <GPIO_readPin+0xc6>
 6fe:	8c 81       	ldd	r24, Y+4	; 0x04
 700:	9d 81       	ldd	r25, Y+5	; 0x05
 702:	83 30       	cpi	r24, 0x03	; 3
 704:	91 05       	cpc	r25, r1
 706:	09 f4       	brne	.+2      	; 0x70a <GPIO_readPin+0x64>
 708:	49 c0       	rjmp	.+146    	; 0x79c <GPIO_readPin+0xf6>
 70a:	5f c0       	rjmp	.+190    	; 0x7ca <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 70c:	e9 e3       	ldi	r30, 0x39	; 57
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	28 2f       	mov	r18, r24
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	8b 81       	ldd	r24, Y+3	; 0x03
 718:	88 2f       	mov	r24, r24
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	a9 01       	movw	r20, r18
 71e:	02 c0       	rjmp	.+4      	; 0x724 <GPIO_readPin+0x7e>
 720:	55 95       	asr	r21
 722:	47 95       	ror	r20
 724:	8a 95       	dec	r24
 726:	e2 f7       	brpl	.-8      	; 0x720 <GPIO_readPin+0x7a>
 728:	ca 01       	movw	r24, r20
 72a:	81 70       	andi	r24, 0x01	; 1
 72c:	90 70       	andi	r25, 0x00	; 0
 72e:	88 23       	and	r24, r24
 730:	19 f0       	breq	.+6      	; 0x738 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	89 83       	std	Y+1, r24	; 0x01
 736:	49 c0       	rjmp	.+146    	; 0x7ca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 738:	19 82       	std	Y+1, r1	; 0x01
 73a:	47 c0       	rjmp	.+142    	; 0x7ca <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 73c:	e6 e3       	ldi	r30, 0x36	; 54
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	28 2f       	mov	r18, r24
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	8b 81       	ldd	r24, Y+3	; 0x03
 748:	88 2f       	mov	r24, r24
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	a9 01       	movw	r20, r18
 74e:	02 c0       	rjmp	.+4      	; 0x754 <GPIO_readPin+0xae>
 750:	55 95       	asr	r21
 752:	47 95       	ror	r20
 754:	8a 95       	dec	r24
 756:	e2 f7       	brpl	.-8      	; 0x750 <GPIO_readPin+0xaa>
 758:	ca 01       	movw	r24, r20
 75a:	81 70       	andi	r24, 0x01	; 1
 75c:	90 70       	andi	r25, 0x00	; 0
 75e:	88 23       	and	r24, r24
 760:	19 f0       	breq	.+6      	; 0x768 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	89 83       	std	Y+1, r24	; 0x01
 766:	31 c0       	rjmp	.+98     	; 0x7ca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 768:	19 82       	std	Y+1, r1	; 0x01
 76a:	2f c0       	rjmp	.+94     	; 0x7ca <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 76c:	e3 e3       	ldi	r30, 0x33	; 51
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	28 2f       	mov	r18, r24
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	8b 81       	ldd	r24, Y+3	; 0x03
 778:	88 2f       	mov	r24, r24
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	a9 01       	movw	r20, r18
 77e:	02 c0       	rjmp	.+4      	; 0x784 <GPIO_readPin+0xde>
 780:	55 95       	asr	r21
 782:	47 95       	ror	r20
 784:	8a 95       	dec	r24
 786:	e2 f7       	brpl	.-8      	; 0x780 <GPIO_readPin+0xda>
 788:	ca 01       	movw	r24, r20
 78a:	81 70       	andi	r24, 0x01	; 1
 78c:	90 70       	andi	r25, 0x00	; 0
 78e:	88 23       	and	r24, r24
 790:	19 f0       	breq	.+6      	; 0x798 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	89 83       	std	Y+1, r24	; 0x01
 796:	19 c0       	rjmp	.+50     	; 0x7ca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 798:	19 82       	std	Y+1, r1	; 0x01
 79a:	17 c0       	rjmp	.+46     	; 0x7ca <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 79c:	e0 e3       	ldi	r30, 0x30	; 48
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 81       	ld	r24, Z
 7a2:	28 2f       	mov	r18, r24
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	8b 81       	ldd	r24, Y+3	; 0x03
 7a8:	88 2f       	mov	r24, r24
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	a9 01       	movw	r20, r18
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <GPIO_readPin+0x10e>
 7b0:	55 95       	asr	r21
 7b2:	47 95       	ror	r20
 7b4:	8a 95       	dec	r24
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <GPIO_readPin+0x10a>
 7b8:	ca 01       	movw	r24, r20
 7ba:	81 70       	andi	r24, 0x01	; 1
 7bc:	90 70       	andi	r25, 0x00	; 0
 7be:	88 23       	and	r24, r24
 7c0:	19 f0       	breq	.+6      	; 0x7c8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	89 83       	std	Y+1, r24	; 0x01
 7c6:	01 c0       	rjmp	.+2      	; 0x7ca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 7c8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 7ca:	89 81       	ldd	r24, Y+1	; 0x01
}
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	0f 90       	pop	r0
 7d2:	0f 90       	pop	r0
 7d4:	0f 90       	pop	r0
 7d6:	cf 91       	pop	r28
 7d8:	df 91       	pop	r29
 7da:	08 95       	ret

000007dc <GPIO_togglePin>:
void GPIO_togglePin(uint8 port_num, uint8 pin_num){
 7dc:	df 93       	push	r29
 7de:	cf 93       	push	r28
 7e0:	00 d0       	rcall	.+0      	; 0x7e2 <GPIO_togglePin+0x6>
 7e2:	00 d0       	rcall	.+0      	; 0x7e4 <GPIO_togglePin+0x8>
 7e4:	cd b7       	in	r28, 0x3d	; 61
 7e6:	de b7       	in	r29, 0x3e	; 62
 7e8:	89 83       	std	Y+1, r24	; 0x01
 7ea:	6a 83       	std	Y+2, r22	; 0x02


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 7ec:	8a 81       	ldd	r24, Y+2	; 0x02
 7ee:	88 30       	cpi	r24, 0x08	; 8
 7f0:	08 f0       	brcs	.+2      	; 0x7f4 <GPIO_togglePin+0x18>
 7f2:	72 c0       	rjmp	.+228    	; 0x8d8 <__stack+0x79>
 7f4:	89 81       	ldd	r24, Y+1	; 0x01
 7f6:	84 30       	cpi	r24, 0x04	; 4
 7f8:	08 f0       	brcs	.+2      	; 0x7fc <GPIO_togglePin+0x20>
 7fa:	6e c0       	rjmp	.+220    	; 0x8d8 <__stack+0x79>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
 7fe:	28 2f       	mov	r18, r24
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	3c 83       	std	Y+4, r19	; 0x04
 804:	2b 83       	std	Y+3, r18	; 0x03
 806:	8b 81       	ldd	r24, Y+3	; 0x03
 808:	9c 81       	ldd	r25, Y+4	; 0x04
 80a:	81 30       	cpi	r24, 0x01	; 1
 80c:	91 05       	cpc	r25, r1
 80e:	49 f1       	breq	.+82     	; 0x862 <__stack+0x3>
 810:	2b 81       	ldd	r18, Y+3	; 0x03
 812:	3c 81       	ldd	r19, Y+4	; 0x04
 814:	22 30       	cpi	r18, 0x02	; 2
 816:	31 05       	cpc	r19, r1
 818:	2c f4       	brge	.+10     	; 0x824 <GPIO_togglePin+0x48>
 81a:	8b 81       	ldd	r24, Y+3	; 0x03
 81c:	9c 81       	ldd	r25, Y+4	; 0x04
 81e:	00 97       	sbiw	r24, 0x00	; 0
 820:	61 f0       	breq	.+24     	; 0x83a <GPIO_togglePin+0x5e>
 822:	5a c0       	rjmp	.+180    	; 0x8d8 <__stack+0x79>
 824:	2b 81       	ldd	r18, Y+3	; 0x03
 826:	3c 81       	ldd	r19, Y+4	; 0x04
 828:	22 30       	cpi	r18, 0x02	; 2
 82a:	31 05       	cpc	r19, r1
 82c:	71 f1       	breq	.+92     	; 0x88a <__stack+0x2b>
 82e:	8b 81       	ldd	r24, Y+3	; 0x03
 830:	9c 81       	ldd	r25, Y+4	; 0x04
 832:	83 30       	cpi	r24, 0x03	; 3
 834:	91 05       	cpc	r25, r1
 836:	e9 f1       	breq	.+122    	; 0x8b2 <__stack+0x53>
 838:	4f c0       	rjmp	.+158    	; 0x8d8 <__stack+0x79>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA, pin_num);
 83a:	ab e3       	ldi	r26, 0x3B	; 59
 83c:	b0 e0       	ldi	r27, 0x00	; 0
 83e:	eb e3       	ldi	r30, 0x3B	; 59
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	48 2f       	mov	r20, r24
 846:	8a 81       	ldd	r24, Y+2	; 0x02
 848:	28 2f       	mov	r18, r24
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 2e       	mov	r0, r18
 852:	02 c0       	rjmp	.+4      	; 0x858 <GPIO_togglePin+0x7c>
 854:	88 0f       	add	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	0a 94       	dec	r0
 85a:	e2 f7       	brpl	.-8      	; 0x854 <GPIO_togglePin+0x78>
 85c:	84 27       	eor	r24, r20
 85e:	8c 93       	st	X, r24
 860:	3b c0       	rjmp	.+118    	; 0x8d8 <__stack+0x79>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB, pin_num);
 862:	a8 e3       	ldi	r26, 0x38	; 56
 864:	b0 e0       	ldi	r27, 0x00	; 0
 866:	e8 e3       	ldi	r30, 0x38	; 56
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	80 81       	ld	r24, Z
 86c:	48 2f       	mov	r20, r24
 86e:	8a 81       	ldd	r24, Y+2	; 0x02
 870:	28 2f       	mov	r18, r24
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	02 2e       	mov	r0, r18
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x21>
 87c:	88 0f       	add	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	0a 94       	dec	r0
 882:	e2 f7       	brpl	.-8      	; 0x87c <__stack+0x1d>
 884:	84 27       	eor	r24, r20
 886:	8c 93       	st	X, r24
 888:	27 c0       	rjmp	.+78     	; 0x8d8 <__stack+0x79>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC, pin_num);
 88a:	a5 e3       	ldi	r26, 0x35	; 53
 88c:	b0 e0       	ldi	r27, 0x00	; 0
 88e:	e5 e3       	ldi	r30, 0x35	; 53
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	80 81       	ld	r24, Z
 894:	48 2f       	mov	r20, r24
 896:	8a 81       	ldd	r24, Y+2	; 0x02
 898:	28 2f       	mov	r18, r24
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	02 2e       	mov	r0, r18
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
 8a4:	88 0f       	add	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	0a 94       	dec	r0
 8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
 8ac:	84 27       	eor	r24, r20
 8ae:	8c 93       	st	X, r24
 8b0:	13 c0       	rjmp	.+38     	; 0x8d8 <__stack+0x79>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD, pin_num);
 8b2:	a2 e3       	ldi	r26, 0x32	; 50
 8b4:	b0 e0       	ldi	r27, 0x00	; 0
 8b6:	e2 e3       	ldi	r30, 0x32	; 50
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	48 2f       	mov	r20, r24
 8be:	8a 81       	ldd	r24, Y+2	; 0x02
 8c0:	28 2f       	mov	r18, r24
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	02 2e       	mov	r0, r18
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <__stack+0x71>
 8cc:	88 0f       	add	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	0a 94       	dec	r0
 8d2:	e2 f7       	brpl	.-8      	; 0x8cc <__stack+0x6d>
 8d4:	84 27       	eor	r24, r20
 8d6:	8c 93       	st	X, r24
			break;
		}
	}
}
 8d8:	0f 90       	pop	r0
 8da:	0f 90       	pop	r0
 8dc:	0f 90       	pop	r0
 8de:	0f 90       	pop	r0
 8e0:	cf 91       	pop	r28
 8e2:	df 91       	pop	r29
 8e4:	08 95       	ret

000008e6 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
 8e6:	df 93       	push	r29
 8e8:	cf 93       	push	r28
 8ea:	00 d0       	rcall	.+0      	; 0x8ec <GPIO_setupPortDirection+0x6>
 8ec:	00 d0       	rcall	.+0      	; 0x8ee <GPIO_setupPortDirection+0x8>
 8ee:	cd b7       	in	r28, 0x3d	; 61
 8f0:	de b7       	in	r29, 0x3e	; 62
 8f2:	89 83       	std	Y+1, r24	; 0x01
 8f4:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 8f6:	89 81       	ldd	r24, Y+1	; 0x01
 8f8:	84 30       	cpi	r24, 0x04	; 4
 8fa:	90 f5       	brcc	.+100    	; 0x960 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 8fc:	89 81       	ldd	r24, Y+1	; 0x01
 8fe:	28 2f       	mov	r18, r24
 900:	30 e0       	ldi	r19, 0x00	; 0
 902:	3c 83       	std	Y+4, r19	; 0x04
 904:	2b 83       	std	Y+3, r18	; 0x03
 906:	8b 81       	ldd	r24, Y+3	; 0x03
 908:	9c 81       	ldd	r25, Y+4	; 0x04
 90a:	81 30       	cpi	r24, 0x01	; 1
 90c:	91 05       	cpc	r25, r1
 90e:	d1 f0       	breq	.+52     	; 0x944 <GPIO_setupPortDirection+0x5e>
 910:	2b 81       	ldd	r18, Y+3	; 0x03
 912:	3c 81       	ldd	r19, Y+4	; 0x04
 914:	22 30       	cpi	r18, 0x02	; 2
 916:	31 05       	cpc	r19, r1
 918:	2c f4       	brge	.+10     	; 0x924 <GPIO_setupPortDirection+0x3e>
 91a:	8b 81       	ldd	r24, Y+3	; 0x03
 91c:	9c 81       	ldd	r25, Y+4	; 0x04
 91e:	00 97       	sbiw	r24, 0x00	; 0
 920:	61 f0       	breq	.+24     	; 0x93a <GPIO_setupPortDirection+0x54>
 922:	1e c0       	rjmp	.+60     	; 0x960 <GPIO_setupPortDirection+0x7a>
 924:	2b 81       	ldd	r18, Y+3	; 0x03
 926:	3c 81       	ldd	r19, Y+4	; 0x04
 928:	22 30       	cpi	r18, 0x02	; 2
 92a:	31 05       	cpc	r19, r1
 92c:	81 f0       	breq	.+32     	; 0x94e <GPIO_setupPortDirection+0x68>
 92e:	8b 81       	ldd	r24, Y+3	; 0x03
 930:	9c 81       	ldd	r25, Y+4	; 0x04
 932:	83 30       	cpi	r24, 0x03	; 3
 934:	91 05       	cpc	r25, r1
 936:	81 f0       	breq	.+32     	; 0x958 <GPIO_setupPortDirection+0x72>
 938:	13 c0       	rjmp	.+38     	; 0x960 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 93a:	ea e3       	ldi	r30, 0x3A	; 58
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	8a 81       	ldd	r24, Y+2	; 0x02
 940:	80 83       	st	Z, r24
 942:	0e c0       	rjmp	.+28     	; 0x960 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 944:	e7 e3       	ldi	r30, 0x37	; 55
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	8a 81       	ldd	r24, Y+2	; 0x02
 94a:	80 83       	st	Z, r24
 94c:	09 c0       	rjmp	.+18     	; 0x960 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 94e:	e4 e3       	ldi	r30, 0x34	; 52
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	8a 81       	ldd	r24, Y+2	; 0x02
 954:	80 83       	st	Z, r24
 956:	04 c0       	rjmp	.+8      	; 0x960 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 958:	e1 e3       	ldi	r30, 0x31	; 49
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	8a 81       	ldd	r24, Y+2	; 0x02
 95e:	80 83       	st	Z, r24
			break;
		}
	}
}
 960:	0f 90       	pop	r0
 962:	0f 90       	pop	r0
 964:	0f 90       	pop	r0
 966:	0f 90       	pop	r0
 968:	cf 91       	pop	r28
 96a:	df 91       	pop	r29
 96c:	08 95       	ret

0000096e <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value){
 96e:	df 93       	push	r29
 970:	cf 93       	push	r28
 972:	00 d0       	rcall	.+0      	; 0x974 <GPIO_writePort+0x6>
 974:	00 d0       	rcall	.+0      	; 0x976 <GPIO_writePort+0x8>
 976:	cd b7       	in	r28, 0x3d	; 61
 978:	de b7       	in	r29, 0x3e	; 62
 97a:	89 83       	std	Y+1, r24	; 0x01
 97c:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 97e:	89 81       	ldd	r24, Y+1	; 0x01
 980:	84 30       	cpi	r24, 0x04	; 4
 982:	90 f5       	brcc	.+100    	; 0x9e8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 984:	89 81       	ldd	r24, Y+1	; 0x01
 986:	28 2f       	mov	r18, r24
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	3c 83       	std	Y+4, r19	; 0x04
 98c:	2b 83       	std	Y+3, r18	; 0x03
 98e:	8b 81       	ldd	r24, Y+3	; 0x03
 990:	9c 81       	ldd	r25, Y+4	; 0x04
 992:	81 30       	cpi	r24, 0x01	; 1
 994:	91 05       	cpc	r25, r1
 996:	d1 f0       	breq	.+52     	; 0x9cc <GPIO_writePort+0x5e>
 998:	2b 81       	ldd	r18, Y+3	; 0x03
 99a:	3c 81       	ldd	r19, Y+4	; 0x04
 99c:	22 30       	cpi	r18, 0x02	; 2
 99e:	31 05       	cpc	r19, r1
 9a0:	2c f4       	brge	.+10     	; 0x9ac <GPIO_writePort+0x3e>
 9a2:	8b 81       	ldd	r24, Y+3	; 0x03
 9a4:	9c 81       	ldd	r25, Y+4	; 0x04
 9a6:	00 97       	sbiw	r24, 0x00	; 0
 9a8:	61 f0       	breq	.+24     	; 0x9c2 <GPIO_writePort+0x54>
 9aa:	1e c0       	rjmp	.+60     	; 0x9e8 <GPIO_writePort+0x7a>
 9ac:	2b 81       	ldd	r18, Y+3	; 0x03
 9ae:	3c 81       	ldd	r19, Y+4	; 0x04
 9b0:	22 30       	cpi	r18, 0x02	; 2
 9b2:	31 05       	cpc	r19, r1
 9b4:	81 f0       	breq	.+32     	; 0x9d6 <GPIO_writePort+0x68>
 9b6:	8b 81       	ldd	r24, Y+3	; 0x03
 9b8:	9c 81       	ldd	r25, Y+4	; 0x04
 9ba:	83 30       	cpi	r24, 0x03	; 3
 9bc:	91 05       	cpc	r25, r1
 9be:	81 f0       	breq	.+32     	; 0x9e0 <GPIO_writePort+0x72>
 9c0:	13 c0       	rjmp	.+38     	; 0x9e8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 9c2:	eb e3       	ldi	r30, 0x3B	; 59
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	8a 81       	ldd	r24, Y+2	; 0x02
 9c8:	80 83       	st	Z, r24
 9ca:	0e c0       	rjmp	.+28     	; 0x9e8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 9cc:	e8 e3       	ldi	r30, 0x38	; 56
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	8a 81       	ldd	r24, Y+2	; 0x02
 9d2:	80 83       	st	Z, r24
 9d4:	09 c0       	rjmp	.+18     	; 0x9e8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 9d6:	e5 e3       	ldi	r30, 0x35	; 53
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	8a 81       	ldd	r24, Y+2	; 0x02
 9dc:	80 83       	st	Z, r24
 9de:	04 c0       	rjmp	.+8      	; 0x9e8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 9e0:	e2 e3       	ldi	r30, 0x32	; 50
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	8a 81       	ldd	r24, Y+2	; 0x02
 9e6:	80 83       	st	Z, r24
			break;
		}
	}
}
 9e8:	0f 90       	pop	r0
 9ea:	0f 90       	pop	r0
 9ec:	0f 90       	pop	r0
 9ee:	0f 90       	pop	r0
 9f0:	cf 91       	pop	r28
 9f2:	df 91       	pop	r29
 9f4:	08 95       	ret

000009f6 <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num){
 9f6:	df 93       	push	r29
 9f8:	cf 93       	push	r28
 9fa:	00 d0       	rcall	.+0      	; 0x9fc <GPIO_readPort+0x6>
 9fc:	00 d0       	rcall	.+0      	; 0x9fe <GPIO_readPort+0x8>
 9fe:	cd b7       	in	r28, 0x3d	; 61
 a00:	de b7       	in	r29, 0x3e	; 62
 a02:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
 a04:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
 a06:	8a 81       	ldd	r24, Y+2	; 0x02
 a08:	84 30       	cpi	r24, 0x04	; 4
 a0a:	90 f5       	brcc	.+100    	; 0xa70 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 a0c:	8a 81       	ldd	r24, Y+2	; 0x02
 a0e:	28 2f       	mov	r18, r24
 a10:	30 e0       	ldi	r19, 0x00	; 0
 a12:	3c 83       	std	Y+4, r19	; 0x04
 a14:	2b 83       	std	Y+3, r18	; 0x03
 a16:	8b 81       	ldd	r24, Y+3	; 0x03
 a18:	9c 81       	ldd	r25, Y+4	; 0x04
 a1a:	81 30       	cpi	r24, 0x01	; 1
 a1c:	91 05       	cpc	r25, r1
 a1e:	d1 f0       	breq	.+52     	; 0xa54 <GPIO_readPort+0x5e>
 a20:	2b 81       	ldd	r18, Y+3	; 0x03
 a22:	3c 81       	ldd	r19, Y+4	; 0x04
 a24:	22 30       	cpi	r18, 0x02	; 2
 a26:	31 05       	cpc	r19, r1
 a28:	2c f4       	brge	.+10     	; 0xa34 <GPIO_readPort+0x3e>
 a2a:	8b 81       	ldd	r24, Y+3	; 0x03
 a2c:	9c 81       	ldd	r25, Y+4	; 0x04
 a2e:	00 97       	sbiw	r24, 0x00	; 0
 a30:	61 f0       	breq	.+24     	; 0xa4a <GPIO_readPort+0x54>
 a32:	1e c0       	rjmp	.+60     	; 0xa70 <GPIO_readPort+0x7a>
 a34:	2b 81       	ldd	r18, Y+3	; 0x03
 a36:	3c 81       	ldd	r19, Y+4	; 0x04
 a38:	22 30       	cpi	r18, 0x02	; 2
 a3a:	31 05       	cpc	r19, r1
 a3c:	81 f0       	breq	.+32     	; 0xa5e <GPIO_readPort+0x68>
 a3e:	8b 81       	ldd	r24, Y+3	; 0x03
 a40:	9c 81       	ldd	r25, Y+4	; 0x04
 a42:	83 30       	cpi	r24, 0x03	; 3
 a44:	91 05       	cpc	r25, r1
 a46:	81 f0       	breq	.+32     	; 0xa68 <GPIO_readPort+0x72>
 a48:	13 c0       	rjmp	.+38     	; 0xa70 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 a4a:	e9 e3       	ldi	r30, 0x39	; 57
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	80 81       	ld	r24, Z
 a50:	89 83       	std	Y+1, r24	; 0x01
 a52:	0e c0       	rjmp	.+28     	; 0xa70 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 a54:	e6 e3       	ldi	r30, 0x36	; 54
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	80 81       	ld	r24, Z
 a5a:	89 83       	std	Y+1, r24	; 0x01
 a5c:	09 c0       	rjmp	.+18     	; 0xa70 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 a5e:	e3 e3       	ldi	r30, 0x33	; 51
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	80 81       	ld	r24, Z
 a64:	89 83       	std	Y+1, r24	; 0x01
 a66:	04 c0       	rjmp	.+8      	; 0xa70 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 a68:	e0 e3       	ldi	r30, 0x30	; 48
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	80 81       	ld	r24, Z
 a6e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 a70:	89 81       	ldd	r24, Y+1	; 0x01
}
 a72:	0f 90       	pop	r0
 a74:	0f 90       	pop	r0
 a76:	0f 90       	pop	r0
 a78:	0f 90       	pop	r0
 a7a:	cf 91       	pop	r28
 a7c:	df 91       	pop	r29
 a7e:	08 95       	ret

00000a80 <DcMotor_init>:
#include "../../MCAL/timer0/timer0.h"


//DcMotor_configType config_pwm = {EN_TIMER0_ID, PWM_MAX};

void DcMotor_init(DcMotor_configType *dcMotor){
 a80:	df 93       	push	r29
 a82:	cf 93       	push	r28
 a84:	00 d0       	rcall	.+0      	; 0xa86 <DcMotor_init+0x6>
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
 a8a:	9a 83       	std	Y+2, r25	; 0x02
 a8c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(dcMotor->port1_id, dcMotor->pin1_id, PIN_OUTPUT);
 a8e:	e9 81       	ldd	r30, Y+1	; 0x01
 a90:	fa 81       	ldd	r31, Y+2	; 0x02
 a92:	80 81       	ld	r24, Z
 a94:	e9 81       	ldd	r30, Y+1	; 0x01
 a96:	fa 81       	ldd	r31, Y+2	; 0x02
 a98:	92 81       	ldd	r25, Z+2	; 0x02
 a9a:	69 2f       	mov	r22, r25
 a9c:	41 e0       	ldi	r20, 0x01	; 1
 a9e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(dcMotor->port2_id, dcMotor->pin2_id, PIN_OUTPUT);
 aa2:	e9 81       	ldd	r30, Y+1	; 0x01
 aa4:	fa 81       	ldd	r31, Y+2	; 0x02
 aa6:	81 81       	ldd	r24, Z+1	; 0x01
 aa8:	e9 81       	ldd	r30, Y+1	; 0x01
 aaa:	fa 81       	ldd	r31, Y+2	; 0x02
 aac:	93 81       	ldd	r25, Z+3	; 0x03
 aae:	69 2f       	mov	r22, r25
 ab0:	41 e0       	ldi	r20, 0x01	; 1
 ab2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_setupPinDirection>

//	PWM_T0_init();

}
 ab6:	0f 90       	pop	r0
 ab8:	0f 90       	pop	r0
 aba:	cf 91       	pop	r28
 abc:	df 91       	pop	r29
 abe:	08 95       	ret

00000ac0 <DcMotor_rotate>:
void DcMotor_rotate(DcMotor_configType *dcMotor, DcMotor_state state, uint8 speedPercentage){
 ac0:	df 93       	push	r29
 ac2:	cf 93       	push	r28
 ac4:	00 d0       	rcall	.+0      	; 0xac6 <DcMotor_rotate+0x6>
 ac6:	00 d0       	rcall	.+0      	; 0xac8 <DcMotor_rotate+0x8>
 ac8:	00 d0       	rcall	.+0      	; 0xaca <DcMotor_rotate+0xa>
 aca:	cd b7       	in	r28, 0x3d	; 61
 acc:	de b7       	in	r29, 0x3e	; 62
 ace:	9a 83       	std	Y+2, r25	; 0x02
 ad0:	89 83       	std	Y+1, r24	; 0x01
 ad2:	6b 83       	std	Y+3, r22	; 0x03
 ad4:	4c 83       	std	Y+4, r20	; 0x04

//	PWM_T0_setDutyCycle(speedPercentage);

	switch(state){
 ad6:	8b 81       	ldd	r24, Y+3	; 0x03
 ad8:	28 2f       	mov	r18, r24
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	3e 83       	std	Y+6, r19	; 0x06
 ade:	2d 83       	std	Y+5, r18	; 0x05
 ae0:	8d 81       	ldd	r24, Y+5	; 0x05
 ae2:	9e 81       	ldd	r25, Y+6	; 0x06
 ae4:	81 30       	cpi	r24, 0x01	; 1
 ae6:	91 05       	cpc	r25, r1
 ae8:	f9 f0       	breq	.+62     	; 0xb28 <DcMotor_rotate+0x68>
 aea:	2d 81       	ldd	r18, Y+5	; 0x05
 aec:	3e 81       	ldd	r19, Y+6	; 0x06
 aee:	22 30       	cpi	r18, 0x02	; 2
 af0:	31 05       	cpc	r19, r1
 af2:	79 f1       	breq	.+94     	; 0xb52 <DcMotor_rotate+0x92>
 af4:	8d 81       	ldd	r24, Y+5	; 0x05
 af6:	9e 81       	ldd	r25, Y+6	; 0x06
 af8:	00 97       	sbiw	r24, 0x00	; 0
 afa:	09 f0       	breq	.+2      	; 0xafe <DcMotor_rotate+0x3e>
 afc:	3e c0       	rjmp	.+124    	; 0xb7a <DcMotor_rotate+0xba>
	case EN_DC_STOP:
		GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_LOW);
 afe:	e9 81       	ldd	r30, Y+1	; 0x01
 b00:	fa 81       	ldd	r31, Y+2	; 0x02
 b02:	80 81       	ld	r24, Z
 b04:	e9 81       	ldd	r30, Y+1	; 0x01
 b06:	fa 81       	ldd	r31, Y+2	; 0x02
 b08:	92 81       	ldd	r25, Z+2	; 0x02
 b0a:	69 2f       	mov	r22, r25
 b0c:	40 e0       	ldi	r20, 0x00	; 0
 b0e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <GPIO_writePin>
		GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_LOW);
 b12:	e9 81       	ldd	r30, Y+1	; 0x01
 b14:	fa 81       	ldd	r31, Y+2	; 0x02
 b16:	81 81       	ldd	r24, Z+1	; 0x01
 b18:	e9 81       	ldd	r30, Y+1	; 0x01
 b1a:	fa 81       	ldd	r31, Y+2	; 0x02
 b1c:	93 81       	ldd	r25, Z+3	; 0x03
 b1e:	69 2f       	mov	r22, r25
 b20:	40 e0       	ldi	r20, 0x00	; 0
 b22:	0e 94 68 02 	call	0x4d0	; 0x4d0 <GPIO_writePin>
 b26:	29 c0       	rjmp	.+82     	; 0xb7a <DcMotor_rotate+0xba>

		break;

	case EN_DC_CW:
		GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_HIGH);
 b28:	e9 81       	ldd	r30, Y+1	; 0x01
 b2a:	fa 81       	ldd	r31, Y+2	; 0x02
 b2c:	80 81       	ld	r24, Z
 b2e:	e9 81       	ldd	r30, Y+1	; 0x01
 b30:	fa 81       	ldd	r31, Y+2	; 0x02
 b32:	92 81       	ldd	r25, Z+2	; 0x02
 b34:	69 2f       	mov	r22, r25
 b36:	41 e0       	ldi	r20, 0x01	; 1
 b38:	0e 94 68 02 	call	0x4d0	; 0x4d0 <GPIO_writePin>
		GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_LOW);
 b3c:	e9 81       	ldd	r30, Y+1	; 0x01
 b3e:	fa 81       	ldd	r31, Y+2	; 0x02
 b40:	81 81       	ldd	r24, Z+1	; 0x01
 b42:	e9 81       	ldd	r30, Y+1	; 0x01
 b44:	fa 81       	ldd	r31, Y+2	; 0x02
 b46:	93 81       	ldd	r25, Z+3	; 0x03
 b48:	69 2f       	mov	r22, r25
 b4a:	40 e0       	ldi	r20, 0x00	; 0
 b4c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <GPIO_writePin>
 b50:	14 c0       	rjmp	.+40     	; 0xb7a <DcMotor_rotate+0xba>

		break;

	case EN_DC_A_CW:
		GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_LOW);
 b52:	e9 81       	ldd	r30, Y+1	; 0x01
 b54:	fa 81       	ldd	r31, Y+2	; 0x02
 b56:	80 81       	ld	r24, Z
 b58:	e9 81       	ldd	r30, Y+1	; 0x01
 b5a:	fa 81       	ldd	r31, Y+2	; 0x02
 b5c:	92 81       	ldd	r25, Z+2	; 0x02
 b5e:	69 2f       	mov	r22, r25
 b60:	40 e0       	ldi	r20, 0x00	; 0
 b62:	0e 94 68 02 	call	0x4d0	; 0x4d0 <GPIO_writePin>
		GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_HIGH);
 b66:	e9 81       	ldd	r30, Y+1	; 0x01
 b68:	fa 81       	ldd	r31, Y+2	; 0x02
 b6a:	81 81       	ldd	r24, Z+1	; 0x01
 b6c:	e9 81       	ldd	r30, Y+1	; 0x01
 b6e:	fa 81       	ldd	r31, Y+2	; 0x02
 b70:	93 81       	ldd	r25, Z+3	; 0x03
 b72:	69 2f       	mov	r22, r25
 b74:	41 e0       	ldi	r20, 0x01	; 1
 b76:	0e 94 68 02 	call	0x4d0	; 0x4d0 <GPIO_writePin>

		break;
	}
}
 b7a:	26 96       	adiw	r28, 0x06	; 6
 b7c:	0f b6       	in	r0, 0x3f	; 63
 b7e:	f8 94       	cli
 b80:	de bf       	out	0x3e, r29	; 62
 b82:	0f be       	out	0x3f, r0	; 63
 b84:	cd bf       	out	0x3d, r28	; 61
 b86:	cf 91       	pop	r28
 b88:	df 91       	pop	r29
 b8a:	08 95       	ret

00000b8c <setup>:

#define PASSWORD_SIZE 6

static uint8 attempts = 3;

void setup(){
 b8c:	df 93       	push	r29
 b8e:	cf 93       	push	r28
 b90:	cd b7       	in	r28, 0x3d	; 61
 b92:	de b7       	in	r29, 0x3e	; 62
	UART_init();
 b94:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_init>
}
 b98:	cf 91       	pop	r28
 b9a:	df 91       	pop	r29
 b9c:	08 95       	ret

00000b9e <rcvPassword>:

void rcvPassword(uint8* str){
 b9e:	0f 93       	push	r16
 ba0:	1f 93       	push	r17
 ba2:	df 93       	push	r29
 ba4:	cf 93       	push	r28
 ba6:	00 d0       	rcall	.+0      	; 0xba8 <rcvPassword+0xa>
 ba8:	0f 92       	push	r0
 baa:	cd b7       	in	r28, 0x3d	; 61
 bac:	de b7       	in	r29, 0x3e	; 62
 bae:	9b 83       	std	Y+3, r25	; 0x03
 bb0:	8a 83       	std	Y+2, r24	; 0x02

	uint8 index = 0;
 bb2:	19 82       	std	Y+1, r1	; 0x01
 bb4:	23 c0       	rjmp	.+70     	; 0xbfc <rcvPassword+0x5e>

	while(index < PASSWORD_SIZE){
		str[index] = UART_rcvCharacter();
 bb6:	89 81       	ldd	r24, Y+1	; 0x01
 bb8:	28 2f       	mov	r18, r24
 bba:	30 e0       	ldi	r19, 0x00	; 0
 bbc:	8a 81       	ldd	r24, Y+2	; 0x02
 bbe:	9b 81       	ldd	r25, Y+3	; 0x03
 bc0:	8c 01       	movw	r16, r24
 bc2:	02 0f       	add	r16, r18
 bc4:	13 1f       	adc	r17, r19
 bc6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <UART_rcvCharacter>
 bca:	f8 01       	movw	r30, r16
 bcc:	80 83       	st	Z, r24
		if( str[index] == '=')
 bce:	89 81       	ldd	r24, Y+1	; 0x01
 bd0:	28 2f       	mov	r18, r24
 bd2:	30 e0       	ldi	r19, 0x00	; 0
 bd4:	8a 81       	ldd	r24, Y+2	; 0x02
 bd6:	9b 81       	ldd	r25, Y+3	; 0x03
 bd8:	fc 01       	movw	r30, r24
 bda:	e2 0f       	add	r30, r18
 bdc:	f3 1f       	adc	r31, r19
 bde:	80 81       	ld	r24, Z
 be0:	8d 33       	cpi	r24, 0x3D	; 61
 be2:	49 f4       	brne	.+18     	; 0xbf6 <rcvPassword+0x58>
		{
			str[index] = '\0';
 be4:	89 81       	ldd	r24, Y+1	; 0x01
 be6:	28 2f       	mov	r18, r24
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	8a 81       	ldd	r24, Y+2	; 0x02
 bec:	9b 81       	ldd	r25, Y+3	; 0x03
 bee:	fc 01       	movw	r30, r24
 bf0:	e2 0f       	add	r30, r18
 bf2:	f3 1f       	adc	r31, r19
 bf4:	10 82       	st	Z, r1
		}
		index++;
 bf6:	89 81       	ldd	r24, Y+1	; 0x01
 bf8:	8f 5f       	subi	r24, 0xFF	; 255
 bfa:	89 83       	std	Y+1, r24	; 0x01

void rcvPassword(uint8* str){

	uint8 index = 0;

	while(index < PASSWORD_SIZE){
 bfc:	89 81       	ldd	r24, Y+1	; 0x01
 bfe:	86 30       	cpi	r24, 0x06	; 6
 c00:	d0 f2       	brcs	.-76     	; 0xbb6 <rcvPassword+0x18>
			str[index] = '\0';
		}
		index++;
	}

}
 c02:	0f 90       	pop	r0
 c04:	0f 90       	pop	r0
 c06:	0f 90       	pop	r0
 c08:	cf 91       	pop	r28
 c0a:	df 91       	pop	r29
 c0c:	1f 91       	pop	r17
 c0e:	0f 91       	pop	r16
 c10:	08 95       	ret

00000c12 <changePass>:

void changePass(){
 c12:	df 93       	push	r29
 c14:	cf 93       	push	r28
 c16:	cd b7       	in	r28, 0x3d	; 61
 c18:	de b7       	in	r29, 0x3e	; 62
 c1a:	2c 97       	sbiw	r28, 0x0c	; 12
 c1c:	0f b6       	in	r0, 0x3f	; 63
 c1e:	f8 94       	cli
 c20:	de bf       	out	0x3e, r29	; 62
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	cd bf       	out	0x3d, r28	; 61

	uint8 password[6];
	uint8 rePassword[6];
	rcvPassword(password);
 c26:	ce 01       	movw	r24, r28
 c28:	01 96       	adiw	r24, 0x01	; 1
 c2a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <rcvPassword>
	rcvPassword(rePassword);
 c2e:	ce 01       	movw	r24, r28
 c30:	07 96       	adiw	r24, 0x07	; 7
 c32:	0e 94 cf 05 	call	0xb9e	; 0xb9e <rcvPassword>


	if(strcmp(password, rePassword) == 0)
 c36:	9e 01       	movw	r18, r28
 c38:	29 5f       	subi	r18, 0xF9	; 249
 c3a:	3f 4f       	sbci	r19, 0xFF	; 255
 c3c:	ce 01       	movw	r24, r28
 c3e:	01 96       	adiw	r24, 0x01	; 1
 c40:	b9 01       	movw	r22, r18
 c42:	0e 94 aa 06 	call	0xd54	; 0xd54 <strcmp>
 c46:	00 97       	sbiw	r24, 0x00	; 0
 c48:	21 f4       	brne	.+8      	; 0xc52 <changePass+0x40>
		UART_sendCharacter('t');
 c4a:	84 e7       	ldi	r24, 0x74	; 116
 c4c:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendCharacter>
 c50:	03 c0       	rjmp	.+6      	; 0xc58 <changePass+0x46>
	else
		UART_sendCharacter('f');
 c52:	86 e6       	ldi	r24, 0x66	; 102
 c54:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendCharacter>
}
 c58:	2c 96       	adiw	r28, 0x0c	; 12
 c5a:	0f b6       	in	r0, 0x3f	; 63
 c5c:	f8 94       	cli
 c5e:	de bf       	out	0x3e, r29	; 62
 c60:	0f be       	out	0x3f, r0	; 63
 c62:	cd bf       	out	0x3d, r28	; 61
 c64:	cf 91       	pop	r28
 c66:	df 91       	pop	r29
 c68:	08 95       	ret

00000c6a <checkPass>:

void checkPass(){
 c6a:	df 93       	push	r29
 c6c:	cf 93       	push	r28
 c6e:	cd b7       	in	r28, 0x3d	; 61
 c70:	de b7       	in	r29, 0x3e	; 62
 c72:	61 97       	sbiw	r28, 0x11	; 17
 c74:	0f b6       	in	r0, 0x3f	; 63
 c76:	f8 94       	cli
 c78:	de bf       	out	0x3e, r29	; 62
 c7a:	0f be       	out	0x3f, r0	; 63
 c7c:	cd bf       	out	0x3d, r28	; 61
	uint8 default_pass[6] = {'1', '2', '3', '4', '5', '\0'};
 c7e:	ce 01       	movw	r24, r28
 c80:	01 96       	adiw	r24, 0x01	; 1
 c82:	9e 87       	std	Y+14, r25	; 0x0e
 c84:	8d 87       	std	Y+13, r24	; 0x0d
 c86:	e2 e6       	ldi	r30, 0x62	; 98
 c88:	f0 e0       	ldi	r31, 0x00	; 0
 c8a:	f8 8b       	std	Y+16, r31	; 0x10
 c8c:	ef 87       	std	Y+15, r30	; 0x0f
 c8e:	f6 e0       	ldi	r31, 0x06	; 6
 c90:	f9 8b       	std	Y+17, r31	; 0x11
 c92:	ef 85       	ldd	r30, Y+15	; 0x0f
 c94:	f8 89       	ldd	r31, Y+16	; 0x10
 c96:	00 80       	ld	r0, Z
 c98:	8f 85       	ldd	r24, Y+15	; 0x0f
 c9a:	98 89       	ldd	r25, Y+16	; 0x10
 c9c:	01 96       	adiw	r24, 0x01	; 1
 c9e:	98 8b       	std	Y+16, r25	; 0x10
 ca0:	8f 87       	std	Y+15, r24	; 0x0f
 ca2:	ed 85       	ldd	r30, Y+13	; 0x0d
 ca4:	fe 85       	ldd	r31, Y+14	; 0x0e
 ca6:	00 82       	st	Z, r0
 ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
 caa:	9e 85       	ldd	r25, Y+14	; 0x0e
 cac:	01 96       	adiw	r24, 0x01	; 1
 cae:	9e 87       	std	Y+14, r25	; 0x0e
 cb0:	8d 87       	std	Y+13, r24	; 0x0d
 cb2:	99 89       	ldd	r25, Y+17	; 0x11
 cb4:	91 50       	subi	r25, 0x01	; 1
 cb6:	99 8b       	std	Y+17, r25	; 0x11
 cb8:	e9 89       	ldd	r30, Y+17	; 0x11
 cba:	ee 23       	and	r30, r30
 cbc:	51 f7       	brne	.-44     	; 0xc92 <checkPass+0x28>
	uint8 password[6];
	rcvPassword(password);
 cbe:	ce 01       	movw	r24, r28
 cc0:	07 96       	adiw	r24, 0x07	; 7
 cc2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <rcvPassword>

	if(strcmp(password, default_pass) == 0)
 cc6:	ce 01       	movw	r24, r28
 cc8:	07 96       	adiw	r24, 0x07	; 7
 cca:	9e 01       	movw	r18, r28
 ccc:	2f 5f       	subi	r18, 0xFF	; 255
 cce:	3f 4f       	sbci	r19, 0xFF	; 255
 cd0:	b9 01       	movw	r22, r18
 cd2:	0e 94 aa 06 	call	0xd54	; 0xd54 <strcmp>
 cd6:	00 97       	sbiw	r24, 0x00	; 0
 cd8:	21 f4       	brne	.+8      	; 0xce2 <checkPass+0x78>
		UART_sendCharacter('t');
 cda:	84 e7       	ldi	r24, 0x74	; 116
 cdc:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendCharacter>
 ce0:	13 c0       	rjmp	.+38     	; 0xd08 <checkPass+0x9e>
	else{
		if(attempts == 0){
 ce2:	80 91 61 00 	lds	r24, 0x0061
 ce6:	88 23       	and	r24, r24
 ce8:	39 f4       	brne	.+14     	; 0xcf8 <checkPass+0x8e>
			UART_sendCharacter('b');
 cea:	82 e6       	ldi	r24, 0x62	; 98
 cec:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendCharacter>
			attempts = 3;
 cf0:	83 e0       	ldi	r24, 0x03	; 3
 cf2:	80 93 61 00 	sts	0x0061, r24
 cf6:	08 c0       	rjmp	.+16     	; 0xd08 <checkPass+0x9e>
		}
		else{
			UART_sendCharacter('f');
 cf8:	86 e6       	ldi	r24, 0x66	; 102
 cfa:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendCharacter>
			attempts--;
 cfe:	80 91 61 00 	lds	r24, 0x0061
 d02:	81 50       	subi	r24, 0x01	; 1
 d04:	80 93 61 00 	sts	0x0061, r24
		}
	}
}
 d08:	61 96       	adiw	r28, 0x11	; 17
 d0a:	0f b6       	in	r0, 0x3f	; 63
 d0c:	f8 94       	cli
 d0e:	de bf       	out	0x3e, r29	; 62
 d10:	0f be       	out	0x3f, r0	; 63
 d12:	cd bf       	out	0x3d, r28	; 61
 d14:	cf 91       	pop	r28
 d16:	df 91       	pop	r29
 d18:	08 95       	ret

00000d1a <main>:

void main(void){
 d1a:	df 93       	push	r29
 d1c:	cf 93       	push	r28
 d1e:	0f 92       	push	r0
 d20:	cd b7       	in	r28, 0x3d	; 61
 d22:	de b7       	in	r29, 0x3e	; 62

	uint8 response = 0;
 d24:	19 82       	std	Y+1, r1	; 0x01

	setup();
 d26:	0e 94 c6 05 	call	0xb8c	; 0xb8c <setup>

	do{
		response = UART_rcvCharacter();
 d2a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <UART_rcvCharacter>
 d2e:	89 83       	std	Y+1, r24	; 0x01

		if(response == '+' ){
 d30:	89 81       	ldd	r24, Y+1	; 0x01
 d32:	8b 32       	cpi	r24, 0x2B	; 43
 d34:	19 f4       	brne	.+6      	; 0xd3c <main+0x22>
			checkPass();
 d36:	0e 94 35 06 	call	0xc6a	; 0xc6a <checkPass>
 d3a:	f7 cf       	rjmp	.-18     	; 0xd2a <main+0x10>
		}	//TODO move motor
		else if(response == '-')
 d3c:	89 81       	ldd	r24, Y+1	; 0x01
 d3e:	8d 32       	cpi	r24, 0x2D	; 45
 d40:	19 f4       	brne	.+6      	; 0xd48 <main+0x2e>
			checkPass();
 d42:	0e 94 35 06 	call	0xc6a	; 0xc6a <checkPass>
 d46:	f1 cf       	rjmp	.-30     	; 0xd2a <main+0x10>
		else if(response == 'p')
 d48:	89 81       	ldd	r24, Y+1	; 0x01
 d4a:	80 37       	cpi	r24, 0x70	; 112
 d4c:	71 f7       	brne	.-36     	; 0xd2a <main+0x10>
			changePass();
 d4e:	0e 94 09 06 	call	0xc12	; 0xc12 <changePass>
 d52:	eb cf       	rjmp	.-42     	; 0xd2a <main+0x10>

00000d54 <strcmp>:
 d54:	fb 01       	movw	r30, r22
 d56:	dc 01       	movw	r26, r24
 d58:	8d 91       	ld	r24, X+
 d5a:	01 90       	ld	r0, Z+
 d5c:	80 19       	sub	r24, r0
 d5e:	01 10       	cpse	r0, r1
 d60:	d9 f3       	breq	.-10     	; 0xd58 <strcmp+0x4>
 d62:	99 0b       	sbc	r25, r25
 d64:	08 95       	ret

00000d66 <_exit>:
 d66:	f8 94       	cli

00000d68 <__stop_program>:
 d68:	ff cf       	rjmp	.-2      	; 0xd68 <__stop_program>
