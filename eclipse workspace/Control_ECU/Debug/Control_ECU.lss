
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000020a4  00002138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800080  00800080  00002158  2**0
                  ALLOC
  3 .stab         00002b98  00000000  00000000  00002158  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019c5  00000000  00000000  00004cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000066b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000067f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006965  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000085ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009499  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a248  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a635  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ae03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <main>
      8a:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_13>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(USART_RXC_vect){
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	8f 93       	push	r24
     b52:	ef 93       	push	r30
     b54:	ff 93       	push	r31
     b56:	df 93       	push	r29
     b58:	cf 93       	push	r28
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
	g_uartRcvData = UDR;
     b5e:	ec e2       	ldi	r30, 0x2C	; 44
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 93 68 00 	sts	0x0068, r24
}
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	ff 91       	pop	r31
     b6e:	ef 91       	pop	r30
     b70:	8f 91       	pop	r24
     b72:	0f 90       	pop	r0
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	0f 90       	pop	r0
     b78:	1f 90       	pop	r1
     b7a:	18 95       	reti

00000b7c <UART_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void UART_init(ST_uart_ConfigType *configType){
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <UART_init+0x6>
     b82:	00 d0       	rcall	.+0      	; 0xb84 <UART_init+0x8>
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	9c 83       	std	Y+4, r25	; 0x04
     b8a:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value = 0;
     b8c:	1a 82       	std	Y+2, r1	; 0x02
     b8e:	19 82       	std	Y+1, r1	; 0x01

	//	SET_BIT(UCSRB, RXCIE);		/* RX Complete Interrupt Enable */


	SET_BIT(UCSRB, TXEN);		/* Transmitter Enable*/
     b90:	aa e2       	ldi	r26, 0x2A	; 42
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	ea e2       	ldi	r30, 0x2A	; 42
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	88 60       	ori	r24, 0x08	; 8
     b9c:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);		/* Receiver Enable */
     b9e:	aa e2       	ldi	r26, 0x2A	; 42
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	ea e2       	ldi	r30, 0x2A	; 42
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	80 61       	ori	r24, 0x10	; 16
     baa:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC, UMSEL);	/* USART Mode Select 0 -> async, 1 -> sync*/
     bac:	a0 e4       	ldi	r26, 0x40	; 64
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e0 e4       	ldi	r30, 0x40	; 64
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	8f 7b       	andi	r24, 0xBF	; 191
     bb8:	8c 93       	st	X, r24

	UCSRC |= ( configType->bit_data << UCSZ0 ); /* configure number of bits to be send, UCSZ1:0: 11 -> 8-bit */ /* will not work with 9-bits because UCSZ2 not in UCSRC */
     bba:	a0 e4       	ldi	r26, 0x40	; 64
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e0 e4       	ldi	r30, 0x40	; 64
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	28 2f       	mov	r18, r24
     bc6:	eb 81       	ldd	r30, Y+3	; 0x03
     bc8:	fc 81       	ldd	r31, Y+4	; 0x04
     bca:	80 81       	ld	r24, Z
     bcc:	88 2f       	mov	r24, r24
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	82 2b       	or	r24, r18
     bd6:	8c 93       	st	X, r24
	UCSRC |= ( configType->parity << UPM0 );	/* configure parity bits */
     bd8:	a0 e4       	ldi	r26, 0x40	; 64
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e0 e4       	ldi	r30, 0x40	; 64
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	28 2f       	mov	r18, r24
     be4:	eb 81       	ldd	r30, Y+3	; 0x03
     be6:	fc 81       	ldd	r31, Y+4	; 0x04
     be8:	81 81       	ldd	r24, Z+1	; 0x01
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	82 95       	swap	r24
     bf0:	92 95       	swap	r25
     bf2:	90 7f       	andi	r25, 0xF0	; 240
     bf4:	98 27       	eor	r25, r24
     bf6:	80 7f       	andi	r24, 0xF0	; 240
     bf8:	98 27       	eor	r25, r24
     bfa:	82 2b       	or	r24, r18
     bfc:	8c 93       	st	X, r24
	UCSRC |= ( configType->stop_bit << USBS );
     bfe:	a0 e4       	ldi	r26, 0x40	; 64
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e0 e4       	ldi	r30, 0x40	; 64
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	28 2f       	mov	r18, r24
     c0a:	eb 81       	ldd	r30, Y+3	; 0x03
     c0c:	fc 81       	ldd	r31, Y+4	; 0x04
     c0e:	82 81       	ldd	r24, Z+2	; 0x02
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	82 2b       	or	r24, r18
     c22:	8c 93       	st	X, r24

#if(U2X_ENABLE == 1)
	SET_BIT(UCSRA, U2X);		/* : Double the USART Transmission Speed */
     c24:	ab e2       	ldi	r26, 0x2B	; 43
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	eb e2       	ldi	r30, 0x2B	; 43
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	82 60       	ori	r24, 0x02	; 2
     c30:	8c 93       	st	X, r24
	ubrr_value = (uint16) calcluateBaudRateU2X(configType->baud_rate);
     c32:	eb 81       	ldd	r30, Y+3	; 0x03
     c34:	fc 81       	ldd	r31, Y+4	; 0x04
     c36:	83 81       	ldd	r24, Z+3	; 0x03
     c38:	94 81       	ldd	r25, Z+4	; 0x04
     c3a:	cc 01       	movw	r24, r24
     c3c:	a0 e0       	ldi	r26, 0x00	; 0
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	aa 1f       	adc	r26, r26
     c46:	bb 1f       	adc	r27, r27
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	aa 1f       	adc	r26, r26
     c4e:	bb 1f       	adc	r27, r27
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	aa 1f       	adc	r26, r26
     c56:	bb 1f       	adc	r27, r27
     c58:	9c 01       	movw	r18, r24
     c5a:	ad 01       	movw	r20, r26
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	92 e1       	ldi	r25, 0x12	; 18
     c60:	aa e7       	ldi	r26, 0x7A	; 122
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	bc 01       	movw	r22, r24
     c66:	cd 01       	movw	r24, r26
     c68:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__udivmodsi4>
     c6c:	da 01       	movw	r26, r20
     c6e:	c9 01       	movw	r24, r18
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	9a 83       	std	Y+2, r25	; 0x02
     c74:	89 83       	std	Y+1, r24	; 0x01
	ubrr_value = (uint16) calcluateBaudRateU2X(configType->baud_rate * 2);
#endif
//	ubrr_value = (uint16)(( F_CPU / ( BAUDRATE * 8UL )) - 1 );


	UBRRH = (ubrr_value >> 8) & (0x0F);
     c76:	e0 e4       	ldi	r30, 0x40	; 64
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	89 2f       	mov	r24, r25
     c80:	99 27       	eor	r25, r25
     c82:	8f 70       	andi	r24, 0x0F	; 15
     c84:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     c86:	e9 e2       	ldi	r30, 0x29	; 41
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	80 83       	st	Z, r24
}
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <UART_sendCharacter>:

void UART_sendCharacter(uint8 data){
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	0f 92       	push	r0
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
     ca8:	eb e2       	ldi	r30, 0x2B	; 43
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	88 2f       	mov	r24, r24
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	80 72       	andi	r24, 0x20	; 32
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	b9 f3       	breq	.-18     	; 0xca8 <UART_sendCharacter+0xc>
	UDR = data;
     cba:	ec e2       	ldi	r30, 0x2C	; 44
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	80 83       	st	Z, r24
}
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <UART_sendArray>:

void UART_sendArray(uint8 *str, uint8 str_size){
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <UART_sendArray+0x6>
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <UART_sendArray+0x8>
     cd2:	0f 92       	push	r0
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	9c 83       	std	Y+4, r25	; 0x04
     cda:	8b 83       	std	Y+3, r24	; 0x03
     cdc:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < str_size; i++){
     cde:	1a 82       	std	Y+2, r1	; 0x02
     ce0:	19 82       	std	Y+1, r1	; 0x01
     ce2:	19 c0       	rjmp	.+50     	; 0xd16 <UART_sendArray+0x4c>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
     ce4:	eb e2       	ldi	r30, 0x2B	; 43
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	88 2f       	mov	r24, r24
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	80 72       	andi	r24, 0x20	; 32
     cf0:	90 70       	andi	r25, 0x00	; 0
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	b9 f3       	breq	.-18     	; 0xce4 <UART_sendArray+0x1a>
		UDR = str[i];
     cf6:	ac e2       	ldi	r26, 0x2C	; 44
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	29 81       	ldd	r18, Y+1	; 0x01
     cfc:	3a 81       	ldd	r19, Y+2	; 0x02
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	fc 01       	movw	r30, r24
     d04:	e2 0f       	add	r30, r18
     d06:	f3 1f       	adc	r31, r19
     d08:	80 81       	ld	r24, Z
     d0a:	8c 93       	st	X, r24
	UDR = data;
}

void UART_sendArray(uint8 *str, uint8 str_size){

	for(int i = 0; i < str_size; i++){
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	8d 81       	ldd	r24, Y+5	; 0x05
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	82 17       	cp	r24, r18
     d22:	93 07       	cpc	r25, r19
     d24:	fc f2       	brlt	.-66     	; 0xce4 <UART_sendArray+0x1a>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
		UDR = str[i];
	}

}
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <UART_rcvCharacter>:

uint8 UART_rcvCharacter(){
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
	while( BIT_IS_CLEAR(UCSRA, RXC) ){}
     d3e:	eb e2       	ldi	r30, 0x2B	; 43
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	88 23       	and	r24, r24
     d46:	dc f7       	brge	.-10     	; 0xd3e <UART_rcvCharacter+0x8>
	return UDR;
     d48:	ec e2       	ldi	r30, 0x2C	; 44
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
}
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <TIMER0_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void TIMER0_init(){
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0, FOC0); /* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
     d5c:	a3 e5       	ldi	r26, 0x53	; 83
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e3 e5       	ldi	r30, 0x53	; 83
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8f 77       	andi	r24, 0x7F	; 127
     d68:	8c 93       	st	X, r24
	 *  0   |   0  * Normal
	 *  0   |   1  * PWM, phase correct
	 *  1   |   0  * CTC
	 *  1   |   1  * Fast PWM
	 ***************/
}
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <TIMER0_start>:
void TIMER0_start(){}
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <TIMER0_stop>:
void TIMER0_stop(){}
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <TIMER0_clear>:
void TIMER0_clear(){}
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <PWM_T0_init>:



void PWM_T0_init(){
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62

	DDRB |= ( 1 << PB3 );
     da2:	a7 e3       	ldi	r26, 0x37	; 55
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e7 e3       	ldi	r30, 0x37	; 55
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	88 60       	ori	r24, 0x08	; 8
     dae:	8c 93       	st	X, r24
	TCNT0 = 0;
     db0:	e2 e5       	ldi	r30, 0x52	; 82
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	10 82       	st	Z, r1
	TCCR0 |= ( 1 << WGM00 ) | ( 1 << WGM01 ) | ( 1 << CS01 ); /* F_PWM=(F_CPU)/(256*N) = (8*10^6)/(256*8) = 4kHz*/
     db6:	a3 e5       	ldi	r26, 0x53	; 83
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e3 e5       	ldi	r30, 0x53	; 83
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8a 64       	ori	r24, 0x4A	; 74
     dc2:	8c 93       	st	X, r24
	TCCR0 |= ( 1 << COM01 );
     dc4:	a3 e5       	ldi	r26, 0x53	; 83
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e3 e5       	ldi	r30, 0x53	; 83
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	80 62       	ori	r24, 0x20	; 32
     dd0:	8c 93       	st	X, r24
	OCR0 = 255;
     dd2:	ec e5       	ldi	r30, 0x5C	; 92
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	80 83       	st	Z, r24

}
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <PWM_T0_setDutyCycle>:

void PWM_T0_setDutyCycle(uint8 dutyCycle){
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <PWM_T0_setDutyCycle+0x6>
     de6:	0f 92       	push	r0
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	8b 83       	std	Y+3, r24	; 0x03

	uint16 temp_dutyCycle = (dutyCycle * 255) / 100;
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	48 2f       	mov	r20, r24
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	ca 01       	movw	r24, r20
     df6:	9c 01       	movw	r18, r24
     df8:	22 0f       	add	r18, r18
     dfa:	33 1f       	adc	r19, r19
     dfc:	c9 01       	movw	r24, r18
     dfe:	96 95       	lsr	r25
     e00:	98 2f       	mov	r25, r24
     e02:	88 27       	eor	r24, r24
     e04:	97 95       	ror	r25
     e06:	87 95       	ror	r24
     e08:	82 1b       	sub	r24, r18
     e0a:	93 0b       	sbc	r25, r19
     e0c:	84 0f       	add	r24, r20
     e0e:	95 1f       	adc	r25, r21
     e10:	24 e6       	ldi	r18, 0x64	; 100
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	b9 01       	movw	r22, r18
     e16:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__divmodhi4>
     e1a:	cb 01       	movw	r24, r22
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = temp_dutyCycle;
     e20:	ec e5       	ldi	r30, 0x5C	; 92
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	80 83       	st	Z, r24
}
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <__vector_9>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(TIMER1_OVF_vect){
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	2f 93       	push	r18
     e40:	3f 93       	push	r19
     e42:	4f 93       	push	r20
     e44:	5f 93       	push	r21
     e46:	6f 93       	push	r22
     e48:	7f 93       	push	r23
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62

	(*callBackFunction)();
     e5e:	e0 91 86 00 	lds	r30, 0x0086
     e62:	f0 91 87 00 	lds	r31, 0x0087
     e66:	09 95       	icall
	TCNT1 = tcnt1_value;
     e68:	ec e4       	ldi	r30, 0x4C	; 76
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 91 80 00 	lds	r24, 0x0080
     e70:	90 91 81 00 	lds	r25, 0x0081
     e74:	91 83       	std	Z+1, r25	; 0x01
     e76:	80 83       	st	Z, r24

}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	ff 91       	pop	r31
     e7e:	ef 91       	pop	r30
     e80:	bf 91       	pop	r27
     e82:	af 91       	pop	r26
     e84:	9f 91       	pop	r25
     e86:	8f 91       	pop	r24
     e88:	7f 91       	pop	r23
     e8a:	6f 91       	pop	r22
     e8c:	5f 91       	pop	r21
     e8e:	4f 91       	pop	r20
     e90:	3f 91       	pop	r19
     e92:	2f 91       	pop	r18
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	0f 90       	pop	r0
     e9a:	1f 90       	pop	r1
     e9c:	18 95       	reti

00000e9e <Timer1_init>:


void Timer1_init(const ST_timer1_configType * Config_Ptr){
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <Timer1_init+0x6>
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	9a 83       	std	Y+2, r25	; 0x02
     eaa:	89 83       	std	Y+1, r24	; 0x01

	tcnt1_value = Config_Ptr->initial_value;
     eac:	e9 81       	ldd	r30, Y+1	; 0x01
     eae:	fa 81       	ldd	r31, Y+2	; 0x02
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	90 93 81 00 	sts	0x0081, r25
     eb8:	80 93 80 00 	sts	0x0080, r24


	TCNT1 = tcnt1_value;
     ebc:	ec e4       	ldi	r30, 0x4C	; 76
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 91 80 00 	lds	r24, 0x0080
     ec4:	90 91 81 00 	lds	r25, 0x0081
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	80 83       	st	Z, r24
	TCCR1B |= ( 0x07 & Config_Ptr->prescaler );
     ecc:	ae e4       	ldi	r26, 0x4E	; 78
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	ee e4       	ldi	r30, 0x4E	; 78
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	98 2f       	mov	r25, r24
     ed8:	e9 81       	ldd	r30, Y+1	; 0x01
     eda:	fa 81       	ldd	r31, Y+2	; 0x02
     edc:	84 81       	ldd	r24, Z+4	; 0x04
     ede:	87 70       	andi	r24, 0x07	; 7
     ee0:	89 2b       	or	r24, r25
     ee2:	8c 93       	st	X, r24
	SET_BIT(TIMSK, TOIE1);	/* Overflow Interrupt Enable */
     ee4:	a9 e5       	ldi	r26, 0x59	; 89
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e9 e5       	ldi	r30, 0x59	; 89
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	84 60       	ori	r24, 0x04	; 4
     ef0:	8c 93       	st	X, r24


}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <Timer1_deInit>:
void Timer1_deInit(void){
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     f04:	ec e4       	ldi	r30, 0x4C	; 76
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	11 82       	std	Z+1, r1	; 0x01
     f0a:	10 82       	st	Z, r1
	TCCR1A = 0;
     f0c:	ef e4       	ldi	r30, 0x4F	; 79
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	10 82       	st	Z, r1
	TCCR1B = 0;
     f12:	ee e4       	ldi	r30, 0x4E	; 78
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, TOIE1);
     f18:	a9 e5       	ldi	r26, 0x59	; 89
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e9 e5       	ldi	r30, 0x59	; 89
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8b 7f       	andi	r24, 0xFB	; 251
     f24:	8c 93       	st	X, r24
}
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <Timer1_setCallBack+0x6>
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	9a 83       	std	Y+2, r25	; 0x02
     f38:	89 83       	std	Y+1, r24	; 0x01

	callBackFunction = a_ptr;
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	9a 81       	ldd	r25, Y+2	; 0x02
     f3e:	90 93 87 00 	sts	0x0087, r25
     f42:	80 93 86 00 	sts	0x0086, r24
}
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <TWI_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void TWI_init(){
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62

	TWAR = 0b00000010; // my address = 0x01 address from BIT 7..1
     f58:	e2 e2       	ldi	r30, 0x22	; 34
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	80 83       	st	Z, r24

	TWSR = 0x00; /* set Prescaler and clear old status*/
     f60:	e1 e2       	ldi	r30, 0x21	; 33
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	10 82       	st	Z, r1

	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = BITRATE(TWSR); /* set baud rate */
     f66:	e0 e2       	ldi	r30, 0x20	; 32
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	80 83       	st	Z, r24
   	   General Call Recognition: Off */


//	TWCR = ( 1 << TWEN);

}
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <TWI_start>:
void TWI_start(){
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1 << TWINT) | ( 1 << TWSTA) | ( 1 << TWEN);
     f7c:	e6 e5       	ldi	r30, 0x56	; 86
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	84 ea       	ldi	r24, 0xA4	; 164
     f82:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR(TWCR, TWINT) ); //wait until TWI finish its process
     f84:	e6 e5       	ldi	r30, 0x56	; 86
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	88 23       	and	r24, r24
     f8c:	dc f7       	brge	.-10     	; 0xf84 <TWI_start+0x10>
}
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <TWI_stop>:

void TWI_stop(){
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | ( 1 << TWSTO ) | ( 1 << TWEN);
     f9c:	e6 e5       	ldi	r30, 0x56	; 86
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	84 e9       	ldi	r24, 0x94	; 148
     fa2:	80 83       	st	Z, r24
//	while( BIT_IS_CLEAR(TWCR, TWINT) ); //wait until TWI finish its process

}
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <TWI_writeByte>:
void TWI_writeByte(uint8 data)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	0f 92       	push	r0
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data;
     fb6:	e3 e2       	ldi	r30, 0x23	; 35
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	80 83       	st	Z, r24
    TWCR = (1 << TWINT) | (1 << TWEN);
     fbe:	e6 e5       	ldi	r30, 0x56	; 86
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	84 e8       	ldi	r24, 0x84	; 132
     fc4:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));
     fc6:	e6 e5       	ldi	r30, 0x56	; 86
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	88 23       	and	r24, r24
     fce:	dc f7       	brge	.-10     	; 0xfc6 <TWI_writeByte+0x1c>
}
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <TWI_readByteWithACK>:
uint8 TWI_readByteWithACK(){
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
   TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     fe0:	e6 e5       	ldi	r30, 0x56	; 86
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	84 ec       	ldi	r24, 0xC4	; 196
     fe6:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
     fe8:	e6 e5       	ldi	r30, 0x56	; 86
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	88 23       	and	r24, r24
     ff0:	dc f7       	brge	.-10     	; 0xfe8 <TWI_readByteWithACK+0x10>
	return TWDR;
     ff2:	e3 e2       	ldi	r30, 0x23	; 35
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
}
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <TWI_readByteWithNACK>:
uint8 TWI_readByteWithNACK(){
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN);
    1006:	e6 e5       	ldi	r30, 0x56	; 86
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	84 e8       	ldi	r24, 0x84	; 132
    100c:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    100e:	e6 e5       	ldi	r30, 0x56	; 86
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	88 23       	and	r24, r24
    1016:	dc f7       	brge	.-10     	; 0x100e <TWI_readByteWithNACK+0x10>
	return TWDR;
    1018:	e3 e2       	ldi	r30, 0x23	; 35
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
}
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <TWI_getStatus>:

uint8 TWI_getStatus(){
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	return ( TWSR & 0xF8 );
    102c:	e1 e2       	ldi	r30, 0x21	; 33
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	88 7f       	andi	r24, 0xF8	; 248
}
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <GPIO_setupPinDirection>:
 *******************************************************************************/



void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <GPIO_setupPinDirection+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <GPIO_setupPinDirection+0x8>
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	6a 83       	std	Y+2, r22	; 0x02
    104c:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	88 30       	cpi	r24, 0x08	; 8
    1052:	08 f0       	brcs	.+2      	; 0x1056 <GPIO_setupPinDirection+0x1c>
    1054:	d5 c0       	rjmp	.+426    	; 0x1200 <GPIO_setupPinDirection+0x1c6>
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	84 30       	cpi	r24, 0x04	; 4
    105a:	08 f0       	brcs	.+2      	; 0x105e <GPIO_setupPinDirection+0x24>
    105c:	d1 c0       	rjmp	.+418    	; 0x1200 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3d 83       	std	Y+5, r19	; 0x05
    1066:	2c 83       	std	Y+4, r18	; 0x04
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <GPIO_setupPinDirection+0x3a>
    1072:	43 c0       	rjmp	.+134    	; 0x10fa <GPIO_setupPinDirection+0xc0>
    1074:	2c 81       	ldd	r18, Y+4	; 0x04
    1076:	3d 81       	ldd	r19, Y+5	; 0x05
    1078:	22 30       	cpi	r18, 0x02	; 2
    107a:	31 05       	cpc	r19, r1
    107c:	2c f4       	brge	.+10     	; 0x1088 <GPIO_setupPinDirection+0x4e>
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	9d 81       	ldd	r25, Y+5	; 0x05
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	71 f0       	breq	.+28     	; 0x10a2 <GPIO_setupPinDirection+0x68>
    1086:	bc c0       	rjmp	.+376    	; 0x1200 <GPIO_setupPinDirection+0x1c6>
    1088:	2c 81       	ldd	r18, Y+4	; 0x04
    108a:	3d 81       	ldd	r19, Y+5	; 0x05
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <GPIO_setupPinDirection+0x5a>
    1092:	5f c0       	rjmp	.+190    	; 0x1152 <GPIO_setupPinDirection+0x118>
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	9d 81       	ldd	r25, Y+5	; 0x05
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	91 05       	cpc	r25, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <GPIO_setupPinDirection+0x66>
    109e:	85 c0       	rjmp	.+266    	; 0x11aa <GPIO_setupPinDirection+0x170>
    10a0:	af c0       	rjmp	.+350    	; 0x1200 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	a1 f4       	brne	.+40     	; 0x10d0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10a8:	aa e3       	ldi	r26, 0x3A	; 58
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ea e3       	ldi	r30, 0x3A	; 58
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <GPIO_setupPinDirection+0x8c>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <GPIO_setupPinDirection+0x88>
    10ca:	84 2b       	or	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	98 c0       	rjmp	.+304    	; 0x1200 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    10d0:	aa e3       	ldi	r26, 0x3A	; 58
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ea e3       	ldi	r30, 0x3A	; 58
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <GPIO_setupPinDirection+0xb4>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <GPIO_setupPinDirection+0xb0>
    10f2:	80 95       	com	r24
    10f4:	84 23       	and	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	83 c0       	rjmp	.+262    	; 0x1200 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	a1 f4       	brne	.+40     	; 0x1128 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1100:	a7 e3       	ldi	r26, 0x37	; 55
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e7 e3       	ldi	r30, 0x37	; 55
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <GPIO_setupPinDirection+0xe4>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <GPIO_setupPinDirection+0xe0>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	6c c0       	rjmp	.+216    	; 0x1200 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1128:	a7 e3       	ldi	r26, 0x37	; 55
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e7 e3       	ldi	r30, 0x37	; 55
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <GPIO_setupPinDirection+0x10c>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <GPIO_setupPinDirection+0x108>
    114a:	80 95       	com	r24
    114c:	84 23       	and	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	57 c0       	rjmp	.+174    	; 0x1200 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	a1 f4       	brne	.+40     	; 0x1180 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1158:	a4 e3       	ldi	r26, 0x34	; 52
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e4 e3       	ldi	r30, 0x34	; 52
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <GPIO_setupPinDirection+0x13c>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <GPIO_setupPinDirection+0x138>
    117a:	84 2b       	or	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	40 c0       	rjmp	.+128    	; 0x1200 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1180:	a4 e3       	ldi	r26, 0x34	; 52
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e4 e3       	ldi	r30, 0x34	; 52
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <GPIO_setupPinDirection+0x164>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <GPIO_setupPinDirection+0x160>
    11a2:	80 95       	com	r24
    11a4:	84 23       	and	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	2b c0       	rjmp	.+86     	; 0x1200 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	a1 f4       	brne	.+40     	; 0x11d8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11b0:	a1 e3       	ldi	r26, 0x31	; 49
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e1 e3       	ldi	r30, 0x31	; 49
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <GPIO_setupPinDirection+0x194>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <GPIO_setupPinDirection+0x190>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11d8:	a1 e3       	ldi	r26, 0x31	; 49
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e1 e3       	ldi	r30, 0x31	; 49
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <GPIO_setupPinDirection+0x1bc>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <GPIO_setupPinDirection+0x1b8>
    11fa:	80 95       	com	r24
    11fc:	84 23       	and	r24, r20
    11fe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	00 d0       	rcall	.+0      	; 0x1216 <GPIO_writePin+0x6>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <GPIO_writePin+0x8>
    1218:	0f 92       	push	r0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	6a 83       	std	Y+2, r22	; 0x02
    1222:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	88 30       	cpi	r24, 0x08	; 8
    1228:	08 f0       	brcs	.+2      	; 0x122c <GPIO_writePin+0x1c>
    122a:	d5 c0       	rjmp	.+426    	; 0x13d6 <GPIO_writePin+0x1c6>
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	84 30       	cpi	r24, 0x04	; 4
    1230:	08 f0       	brcs	.+2      	; 0x1234 <GPIO_writePin+0x24>
    1232:	d1 c0       	rjmp	.+418    	; 0x13d6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3d 83       	std	Y+5, r19	; 0x05
    123c:	2c 83       	std	Y+4, r18	; 0x04
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	09 f4       	brne	.+2      	; 0x124a <GPIO_writePin+0x3a>
    1248:	43 c0       	rjmp	.+134    	; 0x12d0 <GPIO_writePin+0xc0>
    124a:	2c 81       	ldd	r18, Y+4	; 0x04
    124c:	3d 81       	ldd	r19, Y+5	; 0x05
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	31 05       	cpc	r19, r1
    1252:	2c f4       	brge	.+10     	; 0x125e <GPIO_writePin+0x4e>
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	9d 81       	ldd	r25, Y+5	; 0x05
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	71 f0       	breq	.+28     	; 0x1278 <GPIO_writePin+0x68>
    125c:	bc c0       	rjmp	.+376    	; 0x13d6 <GPIO_writePin+0x1c6>
    125e:	2c 81       	ldd	r18, Y+4	; 0x04
    1260:	3d 81       	ldd	r19, Y+5	; 0x05
    1262:	22 30       	cpi	r18, 0x02	; 2
    1264:	31 05       	cpc	r19, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <GPIO_writePin+0x5a>
    1268:	5f c0       	rjmp	.+190    	; 0x1328 <GPIO_writePin+0x118>
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	9d 81       	ldd	r25, Y+5	; 0x05
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <GPIO_writePin+0x66>
    1274:	85 c0       	rjmp	.+266    	; 0x1380 <GPIO_writePin+0x170>
    1276:	af c0       	rjmp	.+350    	; 0x13d6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	a1 f4       	brne	.+40     	; 0x12a6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    127e:	ab e3       	ldi	r26, 0x3B	; 59
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	eb e3       	ldi	r30, 0x3B	; 59
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <GPIO_writePin+0x8c>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <GPIO_writePin+0x88>
    12a0:	84 2b       	or	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	98 c0       	rjmp	.+304    	; 0x13d6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    12a6:	ab e3       	ldi	r26, 0x3B	; 59
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	eb e3       	ldi	r30, 0x3B	; 59
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <GPIO_writePin+0xb4>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <GPIO_writePin+0xb0>
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	83 c0       	rjmp	.+262    	; 0x13d6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a1 f4       	brne	.+40     	; 0x12fe <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12d6:	a8 e3       	ldi	r26, 0x38	; 56
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e8 e3       	ldi	r30, 0x38	; 56
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <GPIO_writePin+0xe4>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <GPIO_writePin+0xe0>
    12f8:	84 2b       	or	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	6c c0       	rjmp	.+216    	; 0x13d6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12fe:	a8 e3       	ldi	r26, 0x38	; 56
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e8 e3       	ldi	r30, 0x38	; 56
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <GPIO_writePin+0x10c>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <GPIO_writePin+0x108>
    1320:	80 95       	com	r24
    1322:	84 23       	and	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	57 c0       	rjmp	.+174    	; 0x13d6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	a1 f4       	brne	.+40     	; 0x1356 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    132e:	a5 e3       	ldi	r26, 0x35	; 53
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e5 e3       	ldi	r30, 0x35	; 53
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <GPIO_writePin+0x13c>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <GPIO_writePin+0x138>
    1350:	84 2b       	or	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	40 c0       	rjmp	.+128    	; 0x13d6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1356:	a5 e3       	ldi	r26, 0x35	; 53
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e5 e3       	ldi	r30, 0x35	; 53
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <GPIO_writePin+0x164>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <GPIO_writePin+0x160>
    1378:	80 95       	com	r24
    137a:	84 23       	and	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	2b c0       	rjmp	.+86     	; 0x13d6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	a1 f4       	brne	.+40     	; 0x13ae <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1386:	a2 e3       	ldi	r26, 0x32	; 50
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e2 e3       	ldi	r30, 0x32	; 50
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <GPIO_writePin+0x194>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <GPIO_writePin+0x190>
    13a8:	84 2b       	or	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	14 c0       	rjmp	.+40     	; 0x13d6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    13ae:	a2 e3       	ldi	r26, 0x32	; 50
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e2 e3       	ldi	r30, 0x32	; 50
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <GPIO_writePin+0x1bc>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <GPIO_writePin+0x1b8>
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <GPIO_readPin+0x6>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <GPIO_readPin+0x8>
    13ee:	0f 92       	push	r0
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	8a 83       	std	Y+2, r24	; 0x02
    13f6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13f8:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	88 30       	cpi	r24, 0x08	; 8
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <GPIO_readPin+0x1c>
    1400:	84 c0       	rjmp	.+264    	; 0x150a <GPIO_readPin+0x124>
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	84 30       	cpi	r24, 0x04	; 4
    1406:	08 f0       	brcs	.+2      	; 0x140a <GPIO_readPin+0x24>
    1408:	80 c0       	rjmp	.+256    	; 0x150a <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	3d 83       	std	Y+5, r19	; 0x05
    1412:	2c 83       	std	Y+4, r18	; 0x04
    1414:	4c 81       	ldd	r20, Y+4	; 0x04
    1416:	5d 81       	ldd	r21, Y+5	; 0x05
    1418:	41 30       	cpi	r20, 0x01	; 1
    141a:	51 05       	cpc	r21, r1
    141c:	79 f1       	breq	.+94     	; 0x147c <GPIO_readPin+0x96>
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	9d 81       	ldd	r25, Y+5	; 0x05
    1422:	82 30       	cpi	r24, 0x02	; 2
    1424:	91 05       	cpc	r25, r1
    1426:	34 f4       	brge	.+12     	; 0x1434 <GPIO_readPin+0x4e>
    1428:	2c 81       	ldd	r18, Y+4	; 0x04
    142a:	3d 81       	ldd	r19, Y+5	; 0x05
    142c:	21 15       	cp	r18, r1
    142e:	31 05       	cpc	r19, r1
    1430:	69 f0       	breq	.+26     	; 0x144c <GPIO_readPin+0x66>
    1432:	6b c0       	rjmp	.+214    	; 0x150a <GPIO_readPin+0x124>
    1434:	4c 81       	ldd	r20, Y+4	; 0x04
    1436:	5d 81       	ldd	r21, Y+5	; 0x05
    1438:	42 30       	cpi	r20, 0x02	; 2
    143a:	51 05       	cpc	r21, r1
    143c:	b9 f1       	breq	.+110    	; 0x14ac <GPIO_readPin+0xc6>
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	9d 81       	ldd	r25, Y+5	; 0x05
    1442:	83 30       	cpi	r24, 0x03	; 3
    1444:	91 05       	cpc	r25, r1
    1446:	09 f4       	brne	.+2      	; 0x144a <GPIO_readPin+0x64>
    1448:	49 c0       	rjmp	.+146    	; 0x14dc <GPIO_readPin+0xf6>
    144a:	5f c0       	rjmp	.+190    	; 0x150a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    144c:	e9 e3       	ldi	r30, 0x39	; 57
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a9 01       	movw	r20, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <GPIO_readPin+0x7e>
    1460:	55 95       	asr	r21
    1462:	47 95       	ror	r20
    1464:	8a 95       	dec	r24
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <GPIO_readPin+0x7a>
    1468:	ca 01       	movw	r24, r20
    146a:	81 70       	andi	r24, 0x01	; 1
    146c:	90 70       	andi	r25, 0x00	; 0
    146e:	88 23       	and	r24, r24
    1470:	19 f0       	breq	.+6      	; 0x1478 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	49 c0       	rjmp	.+146    	; 0x150a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1478:	19 82       	std	Y+1, r1	; 0x01
    147a:	47 c0       	rjmp	.+142    	; 0x150a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    147c:	e6 e3       	ldi	r30, 0x36	; 54
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a9 01       	movw	r20, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_readPin+0xae>
    1490:	55 95       	asr	r21
    1492:	47 95       	ror	r20
    1494:	8a 95       	dec	r24
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_readPin+0xaa>
    1498:	ca 01       	movw	r24, r20
    149a:	81 70       	andi	r24, 0x01	; 1
    149c:	90 70       	andi	r25, 0x00	; 0
    149e:	88 23       	and	r24, r24
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	31 c0       	rjmp	.+98     	; 0x150a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14a8:	19 82       	std	Y+1, r1	; 0x01
    14aa:	2f c0       	rjmp	.+94     	; 0x150a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    14ac:	e3 e3       	ldi	r30, 0x33	; 51
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_readPin+0xde>
    14c0:	55 95       	asr	r21
    14c2:	47 95       	ror	r20
    14c4:	8a 95       	dec	r24
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_readPin+0xda>
    14c8:	ca 01       	movw	r24, r20
    14ca:	81 70       	andi	r24, 0x01	; 1
    14cc:	90 70       	andi	r25, 0x00	; 0
    14ce:	88 23       	and	r24, r24
    14d0:	19 f0       	breq	.+6      	; 0x14d8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	19 c0       	rjmp	.+50     	; 0x150a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14d8:	19 82       	std	Y+1, r1	; 0x01
    14da:	17 c0       	rjmp	.+46     	; 0x150a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14dc:	e0 e3       	ldi	r30, 0x30	; 48
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a9 01       	movw	r20, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <GPIO_readPin+0x10e>
    14f0:	55 95       	asr	r21
    14f2:	47 95       	ror	r20
    14f4:	8a 95       	dec	r24
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <GPIO_readPin+0x10a>
    14f8:	ca 01       	movw	r24, r20
    14fa:	81 70       	andi	r24, 0x01	; 1
    14fc:	90 70       	andi	r25, 0x00	; 0
    14fe:	88 23       	and	r24, r24
    1500:	19 f0       	breq	.+6      	; 0x1508 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	01 c0       	rjmp	.+2      	; 0x150a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1508:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    150a:	89 81       	ldd	r24, Y+1	; 0x01
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <GPIO_togglePin>:
void GPIO_togglePin(uint8 port_num, uint8 pin_num){
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <GPIO_togglePin+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <GPIO_togglePin+0x8>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	6a 83       	std	Y+2, r22	; 0x02


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	88 30       	cpi	r24, 0x08	; 8
    1530:	08 f0       	brcs	.+2      	; 0x1534 <GPIO_togglePin+0x18>
    1532:	72 c0       	rjmp	.+228    	; 0x1618 <GPIO_togglePin+0xfc>
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	84 30       	cpi	r24, 0x04	; 4
    1538:	08 f0       	brcs	.+2      	; 0x153c <GPIO_togglePin+0x20>
    153a:	6e c0       	rjmp	.+220    	; 0x1618 <GPIO_togglePin+0xfc>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	3c 83       	std	Y+4, r19	; 0x04
    1544:	2b 83       	std	Y+3, r18	; 0x03
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	91 05       	cpc	r25, r1
    154e:	49 f1       	breq	.+82     	; 0x15a2 <GPIO_togglePin+0x86>
    1550:	2b 81       	ldd	r18, Y+3	; 0x03
    1552:	3c 81       	ldd	r19, Y+4	; 0x04
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	2c f4       	brge	.+10     	; 0x1564 <GPIO_togglePin+0x48>
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	61 f0       	breq	.+24     	; 0x157a <GPIO_togglePin+0x5e>
    1562:	5a c0       	rjmp	.+180    	; 0x1618 <GPIO_togglePin+0xfc>
    1564:	2b 81       	ldd	r18, Y+3	; 0x03
    1566:	3c 81       	ldd	r19, Y+4	; 0x04
    1568:	22 30       	cpi	r18, 0x02	; 2
    156a:	31 05       	cpc	r19, r1
    156c:	71 f1       	breq	.+92     	; 0x15ca <GPIO_togglePin+0xae>
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	9c 81       	ldd	r25, Y+4	; 0x04
    1572:	83 30       	cpi	r24, 0x03	; 3
    1574:	91 05       	cpc	r25, r1
    1576:	e9 f1       	breq	.+122    	; 0x15f2 <GPIO_togglePin+0xd6>
    1578:	4f c0       	rjmp	.+158    	; 0x1618 <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA, pin_num);
    157a:	ab e3       	ldi	r26, 0x3B	; 59
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	eb e3       	ldi	r30, 0x3B	; 59
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <GPIO_togglePin+0x7c>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <GPIO_togglePin+0x78>
    159c:	84 27       	eor	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	3b c0       	rjmp	.+118    	; 0x1618 <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB, pin_num);
    15a2:	a8 e3       	ldi	r26, 0x38	; 56
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e8 e3       	ldi	r30, 0x38	; 56
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <GPIO_togglePin+0xa4>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <GPIO_togglePin+0xa0>
    15c4:	84 27       	eor	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	27 c0       	rjmp	.+78     	; 0x1618 <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC, pin_num);
    15ca:	a5 e3       	ldi	r26, 0x35	; 53
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e5 e3       	ldi	r30, 0x35	; 53
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <GPIO_togglePin+0xcc>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <GPIO_togglePin+0xc8>
    15ec:	84 27       	eor	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	13 c0       	rjmp	.+38     	; 0x1618 <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD, pin_num);
    15f2:	a2 e3       	ldi	r26, 0x32	; 50
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e2 e3       	ldi	r30, 0x32	; 50
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <GPIO_togglePin+0xf4>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <GPIO_togglePin+0xf0>
    1614:	84 27       	eor	r24, r20
    1616:	8c 93       	st	X, r24
			break;
		}
	}
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <GPIO_setupPortDirection+0x6>
    162c:	00 d0       	rcall	.+0      	; 0x162e <GPIO_setupPortDirection+0x8>
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	84 30       	cpi	r24, 0x04	; 4
    163a:	90 f5       	brcc	.+100    	; 0x16a0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	3c 83       	std	Y+4, r19	; 0x04
    1644:	2b 83       	std	Y+3, r18	; 0x03
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	91 05       	cpc	r25, r1
    164e:	d1 f0       	breq	.+52     	; 0x1684 <GPIO_setupPortDirection+0x5e>
    1650:	2b 81       	ldd	r18, Y+3	; 0x03
    1652:	3c 81       	ldd	r19, Y+4	; 0x04
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	2c f4       	brge	.+10     	; 0x1664 <GPIO_setupPortDirection+0x3e>
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	61 f0       	breq	.+24     	; 0x167a <GPIO_setupPortDirection+0x54>
    1662:	1e c0       	rjmp	.+60     	; 0x16a0 <GPIO_setupPortDirection+0x7a>
    1664:	2b 81       	ldd	r18, Y+3	; 0x03
    1666:	3c 81       	ldd	r19, Y+4	; 0x04
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	81 f0       	breq	.+32     	; 0x168e <GPIO_setupPortDirection+0x68>
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	83 30       	cpi	r24, 0x03	; 3
    1674:	91 05       	cpc	r25, r1
    1676:	81 f0       	breq	.+32     	; 0x1698 <GPIO_setupPortDirection+0x72>
    1678:	13 c0       	rjmp	.+38     	; 0x16a0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    167a:	ea e3       	ldi	r30, 0x3A	; 58
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	80 83       	st	Z, r24
    1682:	0e c0       	rjmp	.+28     	; 0x16a0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1684:	e7 e3       	ldi	r30, 0x37	; 55
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	80 83       	st	Z, r24
    168c:	09 c0       	rjmp	.+18     	; 0x16a0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    168e:	e4 e3       	ldi	r30, 0x34	; 52
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	80 83       	st	Z, r24
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1698:	e1 e3       	ldi	r30, 0x31	; 49
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 83       	st	Z, r24
			break;
		}
	}
}
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value){
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <GPIO_writePort+0x6>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <GPIO_writePort+0x8>
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	84 30       	cpi	r24, 0x04	; 4
    16c2:	90 f5       	brcc	.+100    	; 0x1728 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	3c 83       	std	Y+4, r19	; 0x04
    16cc:	2b 83       	std	Y+3, r18	; 0x03
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	91 05       	cpc	r25, r1
    16d6:	d1 f0       	breq	.+52     	; 0x170c <GPIO_writePort+0x5e>
    16d8:	2b 81       	ldd	r18, Y+3	; 0x03
    16da:	3c 81       	ldd	r19, Y+4	; 0x04
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	31 05       	cpc	r19, r1
    16e0:	2c f4       	brge	.+10     	; 0x16ec <GPIO_writePort+0x3e>
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	61 f0       	breq	.+24     	; 0x1702 <GPIO_writePort+0x54>
    16ea:	1e c0       	rjmp	.+60     	; 0x1728 <GPIO_writePort+0x7a>
    16ec:	2b 81       	ldd	r18, Y+3	; 0x03
    16ee:	3c 81       	ldd	r19, Y+4	; 0x04
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	81 f0       	breq	.+32     	; 0x1716 <GPIO_writePort+0x68>
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	83 30       	cpi	r24, 0x03	; 3
    16fc:	91 05       	cpc	r25, r1
    16fe:	81 f0       	breq	.+32     	; 0x1720 <GPIO_writePort+0x72>
    1700:	13 c0       	rjmp	.+38     	; 0x1728 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1702:	eb e3       	ldi	r30, 0x3B	; 59
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	80 83       	st	Z, r24
    170a:	0e c0       	rjmp	.+28     	; 0x1728 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    170c:	e8 e3       	ldi	r30, 0x38	; 56
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	80 83       	st	Z, r24
    1714:	09 c0       	rjmp	.+18     	; 0x1728 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1716:	e5 e3       	ldi	r30, 0x35	; 53
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	80 83       	st	Z, r24
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1720:	e2 e3       	ldi	r30, 0x32	; 50
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	80 83       	st	Z, r24
			break;
		}
	}
}
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num){
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	00 d0       	rcall	.+0      	; 0x173c <GPIO_readPort+0x6>
    173c:	00 d0       	rcall	.+0      	; 0x173e <GPIO_readPort+0x8>
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
    1744:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	84 30       	cpi	r24, 0x04	; 4
    174a:	90 f5       	brcc	.+100    	; 0x17b0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	3c 83       	std	Y+4, r19	; 0x04
    1754:	2b 83       	std	Y+3, r18	; 0x03
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	91 05       	cpc	r25, r1
    175e:	d1 f0       	breq	.+52     	; 0x1794 <GPIO_readPort+0x5e>
    1760:	2b 81       	ldd	r18, Y+3	; 0x03
    1762:	3c 81       	ldd	r19, Y+4	; 0x04
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	31 05       	cpc	r19, r1
    1768:	2c f4       	brge	.+10     	; 0x1774 <GPIO_readPort+0x3e>
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	61 f0       	breq	.+24     	; 0x178a <GPIO_readPort+0x54>
    1772:	1e c0       	rjmp	.+60     	; 0x17b0 <GPIO_readPort+0x7a>
    1774:	2b 81       	ldd	r18, Y+3	; 0x03
    1776:	3c 81       	ldd	r19, Y+4	; 0x04
    1778:	22 30       	cpi	r18, 0x02	; 2
    177a:	31 05       	cpc	r19, r1
    177c:	81 f0       	breq	.+32     	; 0x179e <GPIO_readPort+0x68>
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
    1782:	83 30       	cpi	r24, 0x03	; 3
    1784:	91 05       	cpc	r25, r1
    1786:	81 f0       	breq	.+32     	; 0x17a8 <GPIO_readPort+0x72>
    1788:	13 c0       	rjmp	.+38     	; 0x17b0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    178a:	e9 e3       	ldi	r30, 0x39	; 57
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	0e c0       	rjmp	.+28     	; 0x17b0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1794:	e6 e3       	ldi	r30, 0x36	; 54
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    179e:	e3 e3       	ldi	r30, 0x33	; 51
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	04 c0       	rjmp	.+8      	; 0x17b0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17a8:	e0 e3       	ldi	r30, 0x30	; 48
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <EEPROM_writeByte>:
#include "eeprom.h"
#include "../../MCAL/i2c/i2c.h"
#include "avr/io.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <EEPROM_writeByte+0x6>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <EEPROM_writeByte+0x8>
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	9a 83       	std	Y+2, r25	; 0x02
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    17d2:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_start>
    if (TWI_getStatus() != TWI_START_STATE)
    17d6:	0e 94 12 08 	call	0x1024	; 0x1024 <TWI_getStatus>
    17da:	88 30       	cpi	r24, 0x08	; 8
    17dc:	11 f0       	breq	.+4      	; 0x17e2 <EEPROM_writeByte+0x22>
        return ERROR;
    17de:	1c 82       	std	Y+4, r1	; 0x04
    17e0:	28 c0       	rjmp	.+80     	; 0x1832 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	9a 81       	ldd	r25, Y+2	; 0x02
    17e6:	80 70       	andi	r24, 0x00	; 0
    17e8:	97 70       	andi	r25, 0x07	; 7
    17ea:	88 0f       	add	r24, r24
    17ec:	89 2f       	mov	r24, r25
    17ee:	88 1f       	adc	r24, r24
    17f0:	99 0b       	sbc	r25, r25
    17f2:	91 95       	neg	r25
    17f4:	80 6a       	ori	r24, 0xA0	; 160
    17f6:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TWI_writeByte>
    if (TWI_getStatus() != TWI_SLA_W_ACK_STATE)
    17fa:	0e 94 12 08 	call	0x1024	; 0x1024 <TWI_getStatus>
    17fe:	88 31       	cpi	r24, 0x18	; 24
    1800:	11 f0       	breq	.+4      	; 0x1806 <EEPROM_writeByte+0x46>
        return ERROR;
    1802:	1c 82       	std	Y+4, r1	; 0x04
    1804:	16 c0       	rjmp	.+44     	; 0x1832 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TWI_writeByte>
    if (TWI_getStatus() != TWI_DATA_WRITE_ACK_STATE)
    180c:	0e 94 12 08 	call	0x1024	; 0x1024 <TWI_getStatus>
    1810:	88 32       	cpi	r24, 0x28	; 40
    1812:	11 f0       	breq	.+4      	; 0x1818 <EEPROM_writeByte+0x58>
        return ERROR;
    1814:	1c 82       	std	Y+4, r1	; 0x04
    1816:	0d c0       	rjmp	.+26     	; 0x1832 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TWI_writeByte>
    if (TWI_getStatus() != TWI_DATA_WRITE_ACK_STATE)
    181e:	0e 94 12 08 	call	0x1024	; 0x1024 <TWI_getStatus>
    1822:	88 32       	cpi	r24, 0x28	; 40
    1824:	11 f0       	breq	.+4      	; 0x182a <EEPROM_writeByte+0x6a>
        return ERROR;
    1826:	1c 82       	std	Y+4, r1	; 0x04
    1828:	04 c0       	rjmp	.+8      	; 0x1832 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    182a:	0e 94 ca 07 	call	0xf94	; 0xf94 <TWI_stop>

    return SUCCESS;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	8c 83       	std	Y+4, r24	; 0x04
    1832:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	00 d0       	rcall	.+0      	; 0x1848 <EEPROM_readByte+0x6>
    1848:	00 d0       	rcall	.+0      	; 0x184a <EEPROM_readByte+0x8>
    184a:	0f 92       	push	r0
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	7c 83       	std	Y+4, r23	; 0x04
    1856:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1858:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_start>
    if (TWI_getStatus() != TWI_START_STATE)
    185c:	0e 94 12 08 	call	0x1024	; 0x1024 <TWI_getStatus>
    1860:	88 30       	cpi	r24, 0x08	; 8
    1862:	11 f0       	breq	.+4      	; 0x1868 <EEPROM_readByte+0x26>
        return ERROR;
    1864:	1d 82       	std	Y+5, r1	; 0x05
    1866:	44 c0       	rjmp	.+136    	; 0x18f0 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	80 70       	andi	r24, 0x00	; 0
    186e:	97 70       	andi	r25, 0x07	; 7
    1870:	88 0f       	add	r24, r24
    1872:	89 2f       	mov	r24, r25
    1874:	88 1f       	adc	r24, r24
    1876:	99 0b       	sbc	r25, r25
    1878:	91 95       	neg	r25
    187a:	80 6a       	ori	r24, 0xA0	; 160
    187c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TWI_writeByte>
    if (TWI_getStatus() != TWI_SLA_W_ACK_STATE)
    1880:	0e 94 12 08 	call	0x1024	; 0x1024 <TWI_getStatus>
    1884:	88 31       	cpi	r24, 0x18	; 24
    1886:	11 f0       	breq	.+4      	; 0x188c <EEPROM_readByte+0x4a>
        return ERROR;
    1888:	1d 82       	std	Y+5, r1	; 0x05
    188a:	32 c0       	rjmp	.+100    	; 0x18f0 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TWI_writeByte>
    if (TWI_getStatus() != TWI_DATA_WRITE_ACK_STATE)
    1892:	0e 94 12 08 	call	0x1024	; 0x1024 <TWI_getStatus>
    1896:	88 32       	cpi	r24, 0x28	; 40
    1898:	11 f0       	breq	.+4      	; 0x189e <EEPROM_readByte+0x5c>
        return ERROR;
    189a:	1d 82       	std	Y+5, r1	; 0x05
    189c:	29 c0       	rjmp	.+82     	; 0x18f0 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    189e:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_start>
    if (TWI_getStatus() != TWI_REPEATED_START_STATE)
    18a2:	0e 94 12 08 	call	0x1024	; 0x1024 <TWI_getStatus>
    18a6:	80 31       	cpi	r24, 0x10	; 16
    18a8:	11 f0       	breq	.+4      	; 0x18ae <EEPROM_readByte+0x6c>
        return ERROR;
    18aa:	1d 82       	std	Y+5, r1	; 0x05
    18ac:	21 c0       	rjmp	.+66     	; 0x18f0 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	80 70       	andi	r24, 0x00	; 0
    18b4:	97 70       	andi	r25, 0x07	; 7
    18b6:	88 0f       	add	r24, r24
    18b8:	89 2f       	mov	r24, r25
    18ba:	88 1f       	adc	r24, r24
    18bc:	99 0b       	sbc	r25, r25
    18be:	91 95       	neg	r25
    18c0:	81 6a       	ori	r24, 0xA1	; 161
    18c2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TWI_writeByte>
    if (TWI_getStatus() != TWI_SLA_R_ACK_STATE)
    18c6:	0e 94 12 08 	call	0x1024	; 0x1024 <TWI_getStatus>
    18ca:	80 34       	cpi	r24, 0x40	; 64
    18cc:	11 f0       	breq	.+4      	; 0x18d2 <EEPROM_readByte+0x90>
        return ERROR;
    18ce:	1d 82       	std	Y+5, r1	; 0x05
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    18d2:	0e 94 ff 07 	call	0xffe	; 0xffe <TWI_readByteWithNACK>
    18d6:	eb 81       	ldd	r30, Y+3	; 0x03
    18d8:	fc 81       	ldd	r31, Y+4	; 0x04
    18da:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_DATA_READ_NACK_STATE)
    18dc:	0e 94 12 08 	call	0x1024	; 0x1024 <TWI_getStatus>
    18e0:	88 35       	cpi	r24, 0x58	; 88
    18e2:	11 f0       	breq	.+4      	; 0x18e8 <EEPROM_readByte+0xa6>
        return ERROR;
    18e4:	1d 82       	std	Y+5, r1	; 0x05
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    18e8:	0e 94 ca 07 	call	0xf94	; 0xf94 <TWI_stop>

    return SUCCESS;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	8d 83       	std	Y+5, r24	; 0x05
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <DcMotor_init>:
#include "../../MCAL/timer0/timer0.h"


//DcMotor_configType config_pwm = {EN_TIMER0_ID, PWM_MAX};

void DcMotor_init(ST_dcMotor_configType *dcMotor){
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	00 d0       	rcall	.+0      	; 0x1908 <DcMotor_init+0x6>
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(dcMotor->port1_id, dcMotor->pin1_id, PIN_OUTPUT);
    1910:	e9 81       	ldd	r30, Y+1	; 0x01
    1912:	fa 81       	ldd	r31, Y+2	; 0x02
    1914:	80 81       	ld	r24, Z
    1916:	e9 81       	ldd	r30, Y+1	; 0x01
    1918:	fa 81       	ldd	r31, Y+2	; 0x02
    191a:	92 81       	ldd	r25, Z+2	; 0x02
    191c:	69 2f       	mov	r22, r25
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(dcMotor->port2_id, dcMotor->pin2_id, PIN_OUTPUT);
    1924:	e9 81       	ldd	r30, Y+1	; 0x01
    1926:	fa 81       	ldd	r31, Y+2	; 0x02
    1928:	81 81       	ldd	r24, Z+1	; 0x01
    192a:	e9 81       	ldd	r30, Y+1	; 0x01
    192c:	fa 81       	ldd	r31, Y+2	; 0x02
    192e:	93 81       	ldd	r25, Z+3	; 0x03
    1930:	69 2f       	mov	r22, r25
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_setupPinDirection>

	PWM_T0_init();
    1938:	0e 94 cd 06 	call	0xd9a	; 0xd9a <PWM_T0_init>

}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <DcMotor_rotate>:
void DcMotor_rotate(ST_dcMotor_configType *dcMotor, EN_dcMotor_state state, uint8 speed){
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <DcMotor_rotate+0x6>
    194c:	00 d0       	rcall	.+0      	; 0x194e <DcMotor_rotate+0x8>
    194e:	00 d0       	rcall	.+0      	; 0x1950 <DcMotor_rotate+0xa>
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	6b 83       	std	Y+3, r22	; 0x03
    195a:	4c 83       	std	Y+4, r20	; 0x04

	PWM_T0_setDutyCycle(speed);
    195c:	8c 81       	ldd	r24, Y+4	; 0x04
    195e:	0e 94 f0 06 	call	0xde0	; 0xde0 <PWM_T0_setDutyCycle>

	switch(state){
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	3e 83       	std	Y+6, r19	; 0x06
    196a:	2d 83       	std	Y+5, r18	; 0x05
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
    196e:	9e 81       	ldd	r25, Y+6	; 0x06
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	91 05       	cpc	r25, r1
    1974:	31 f0       	breq	.+12     	; 0x1982 <DcMotor_rotate+0x3c>
    1976:	2d 81       	ldd	r18, Y+5	; 0x05
    1978:	3e 81       	ldd	r19, Y+6	; 0x06
    197a:	22 30       	cpi	r18, 0x02	; 2
    197c:	31 05       	cpc	r19, r1
    197e:	b1 f0       	breq	.+44     	; 0x19ac <DcMotor_rotate+0x66>
    1980:	29 c0       	rjmp	.+82     	; 0x19d4 <DcMotor_rotate+0x8e>
		case EN_DC_CW:
			GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_HIGH);
    1982:	e9 81       	ldd	r30, Y+1	; 0x01
    1984:	fa 81       	ldd	r31, Y+2	; 0x02
    1986:	80 81       	ld	r24, Z
    1988:	e9 81       	ldd	r30, Y+1	; 0x01
    198a:	fa 81       	ldd	r31, Y+2	; 0x02
    198c:	92 81       	ldd	r25, Z+2	; 0x02
    198e:	69 2f       	mov	r22, r25
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 08 09 	call	0x1210	; 0x1210 <GPIO_writePin>
			GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_LOW);
    1996:	e9 81       	ldd	r30, Y+1	; 0x01
    1998:	fa 81       	ldd	r31, Y+2	; 0x02
    199a:	81 81       	ldd	r24, Z+1	; 0x01
    199c:	e9 81       	ldd	r30, Y+1	; 0x01
    199e:	fa 81       	ldd	r31, Y+2	; 0x02
    19a0:	93 81       	ldd	r25, Z+3	; 0x03
    19a2:	69 2f       	mov	r22, r25
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 08 09 	call	0x1210	; 0x1210 <GPIO_writePin>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <DcMotor_rotate+0x8e>

			break;

		case EN_DC_A_CW:
			GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_LOW);
    19ac:	e9 81       	ldd	r30, Y+1	; 0x01
    19ae:	fa 81       	ldd	r31, Y+2	; 0x02
    19b0:	80 81       	ld	r24, Z
    19b2:	e9 81       	ldd	r30, Y+1	; 0x01
    19b4:	fa 81       	ldd	r31, Y+2	; 0x02
    19b6:	92 81       	ldd	r25, Z+2	; 0x02
    19b8:	69 2f       	mov	r22, r25
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	0e 94 08 09 	call	0x1210	; 0x1210 <GPIO_writePin>
			GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_HIGH);
    19c0:	e9 81       	ldd	r30, Y+1	; 0x01
    19c2:	fa 81       	ldd	r31, Y+2	; 0x02
    19c4:	81 81       	ldd	r24, Z+1	; 0x01
    19c6:	e9 81       	ldd	r30, Y+1	; 0x01
    19c8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	69 2f       	mov	r22, r25
    19ce:	41 e0       	ldi	r20, 0x01	; 1
    19d0:	0e 94 08 09 	call	0x1210	; 0x1210 <GPIO_writePin>

			break;
	}
}
    19d4:	26 96       	adiw	r28, 0x06	; 6
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <DcMotor_stop>:

void DcMotor_stop(ST_dcMotor_configType *dcMotor){
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <DcMotor_stop+0x6>
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(dcMotor->port1_id, dcMotor->pin1_id, LOGIC_LOW);
    19f4:	e9 81       	ldd	r30, Y+1	; 0x01
    19f6:	fa 81       	ldd	r31, Y+2	; 0x02
    19f8:	80 81       	ld	r24, Z
    19fa:	e9 81       	ldd	r30, Y+1	; 0x01
    19fc:	fa 81       	ldd	r31, Y+2	; 0x02
    19fe:	92 81       	ldd	r25, Z+2	; 0x02
    1a00:	69 2f       	mov	r22, r25
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	0e 94 08 09 	call	0x1210	; 0x1210 <GPIO_writePin>
	GPIO_writePin(dcMotor->port2_id, dcMotor->pin2_id, LOGIC_LOW);
    1a08:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0c:	81 81       	ldd	r24, Z+1	; 0x01
    1a0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a10:	fa 81       	ldd	r31, Y+2	; 0x02
    1a12:	93 81       	ldd	r25, Z+3	; 0x03
    1a14:	69 2f       	mov	r22, r25
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	0e 94 08 09 	call	0x1210	; 0x1210 <GPIO_writePin>
}
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <Buzzer_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Buzzer_init(){
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(buzzer_port, buzzer_pin, PIN_OUTPUT);
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	60 e0       	ldi	r22, 0x00	; 0
    1a32:	41 e0       	ldi	r20, 0x01	; 1
    1a34:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_setupPinDirection>
}
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <Buzzer_on>:
void Buzzer_on(void){
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(buzzer_port, buzzer_pin, LOGIC_HIGH);
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	41 e0       	ldi	r20, 0x01	; 1
    1a4c:	0e 94 08 09 	call	0x1210	; 0x1210 <GPIO_writePin>
}
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <Buzzer_off>:
void Buzzer_off(void){
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(buzzer_port, buzzer_pin, LOGIC_LOW);
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	0e 94 08 09 	call	0x1210	; 0x1210 <GPIO_writePin>
}
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <secondsCountDown>:
ST_uart_ConfigType uart_configType = {BITS_EIGHT, PARITY_DISABLE, STOP_ONE_BIT, BAUD_9600};
ST_timer1_configType timer1_configType = {TIMER1_MAX_VALUE - TIMER1_ONE_SECOND_CLK_256_8M, TIMER1_MAX_VALUE, TIMER1_CLK_256, TIMER1_NORMAL};

static uint8 seconds = 0;

void secondsCountDown(){
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
	if (seconds > 0)
    1a76:	80 91 85 00 	lds	r24, 0x0085
    1a7a:	88 23       	and	r24, r24
    1a7c:	29 f0       	breq	.+10     	; 0x1a88 <secondsCountDown+0x1a>
		seconds--;
    1a7e:	80 91 85 00 	lds	r24, 0x0085
    1a82:	81 50       	subi	r24, 0x01	; 1
    1a84:	80 93 85 00 	sts	0x0085, r24
}
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <setup>:


void setup(){
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62


	UART_init(&uart_configType);
    1a96:	8e e6       	ldi	r24, 0x6E	; 110
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	0e 94 be 05 	call	0xb7c	; 0xb7c <UART_init>
	Buzzer_init();
    1a9e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <Buzzer_init>
	DcMotor_init(&dcMotor);
    1aa2:	8a e6       	ldi	r24, 0x6A	; 106
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 81 0c 	call	0x1902	; 0x1902 <DcMotor_init>
	TWI_init();
    1aaa:	0e 94 a8 07 	call	0xf50	; 0xf50 <TWI_init>
	Timer1_init(&timer1_configType);
    1aae:	83 e7       	ldi	r24, 0x73	; 115
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Timer1_init>
	Timer1_setCallBack(&secondsCountDown);
    1ab6:	87 e3       	ldi	r24, 0x37	; 55
    1ab8:	9d e0       	ldi	r25, 0x0D	; 13
    1aba:	0e 94 96 07 	call	0xf2c	; 0xf2c <Timer1_setCallBack>
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    1abe:	af e5       	ldi	r26, 0x5F	; 95
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	ef e5       	ldi	r30, 0x5F	; 95
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 68       	ori	r24, 0x80	; 128
    1aca:	8c 93       	st	X, r24


}
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <main>:

void rcvPassword(uint8* str);
void changePass();
uint8 checkPass();

void main(void){
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <main+0x6>
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62

	uint8 response = 0;
    1adc:	1a 82       	std	Y+2, r1	; 0x02

	setup();
    1ade:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <setup>

	do{
		response = UART_rcvCharacter();
    1ae2:	0e 94 9b 06 	call	0xd36	; 0xd36 <UART_rcvCharacter>
    1ae6:	8a 83       	std	Y+2, r24	; 0x02
		uint8 result = 0;
    1ae8:	19 82       	std	Y+1, r1	; 0x01

		if(response == '+' ){
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	8b 32       	cpi	r24, 0x2B	; 43
    1aee:	e1 f5       	brne	.+120    	; 0x1b68 <main+0x96>
			result = checkPass();
    1af0:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <checkPass>
    1af4:	89 83       	std	Y+1, r24	; 0x01
			if(result == 1){
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	99 f7       	brne	.-26     	; 0x1ae2 <main+0x10>
				DcMotor_rotate(&dcMotor, EN_DC_CW, 100);
    1afc:	8a e6       	ldi	r24, 0x6A	; 106
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	44 e6       	ldi	r20, 0x64	; 100
    1b04:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DcMotor_rotate>
				seconds = 15;
    1b08:	8f e0       	ldi	r24, 0x0F	; 15
    1b0a:	80 93 85 00 	sts	0x0085, r24
				while(seconds > 0){};
    1b0e:	80 91 85 00 	lds	r24, 0x0085
    1b12:	88 23       	and	r24, r24
    1b14:	e1 f7       	brne	.-8      	; 0x1b0e <main+0x3c>
				UART_sendCharacter(' ');
    1b16:	80 e2       	ldi	r24, 0x20	; 32
    1b18:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_sendCharacter>

				DcMotor_stop(&dcMotor);
    1b1c:	8a e6       	ldi	r24, 0x6A	; 106
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DcMotor_stop>
				seconds = 3;
    1b24:	83 e0       	ldi	r24, 0x03	; 3
    1b26:	80 93 85 00 	sts	0x0085, r24
				while(seconds > 0){};
    1b2a:	80 91 85 00 	lds	r24, 0x0085
    1b2e:	88 23       	and	r24, r24
    1b30:	e1 f7       	brne	.-8      	; 0x1b2a <main+0x58>
				UART_sendCharacter(' ');
    1b32:	80 e2       	ldi	r24, 0x20	; 32
    1b34:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_sendCharacter>

				DcMotor_rotate(&dcMotor, EN_DC_A_CW, 100);
    1b38:	8a e6       	ldi	r24, 0x6A	; 106
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	62 e0       	ldi	r22, 0x02	; 2
    1b3e:	44 e6       	ldi	r20, 0x64	; 100
    1b40:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DcMotor_rotate>
				seconds = 15;
    1b44:	8f e0       	ldi	r24, 0x0F	; 15
    1b46:	80 93 85 00 	sts	0x0085, r24
				while(seconds > 0){};
    1b4a:	80 91 85 00 	lds	r24, 0x0085
    1b4e:	88 23       	and	r24, r24
    1b50:	e1 f7       	brne	.-8      	; 0x1b4a <main+0x78>

				UART_sendCharacter(' ');
    1b52:	80 e2       	ldi	r24, 0x20	; 32
    1b54:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_sendCharacter>
				DcMotor_stop(&dcMotor);
    1b58:	8a e6       	ldi	r24, 0x6A	; 106
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DcMotor_stop>
				UART_sendCharacter(' ');
    1b60:	80 e2       	ldi	r24, 0x20	; 32
    1b62:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_sendCharacter>
    1b66:	bd cf       	rjmp	.-134    	; 0x1ae2 <main+0x10>

			}
		}
		else if(response == '-')
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	8d 32       	cpi	r24, 0x2D	; 45
    1b6c:	51 f4       	brne	.+20     	; 0x1b82 <main+0xb0>
		{
			result = checkPass();
    1b6e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <checkPass>
    1b72:	89 83       	std	Y+1, r24	; 0x01
			if(result == 1)
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <main+0xaa>
    1b7a:	b3 cf       	rjmp	.-154    	; 0x1ae2 <main+0x10>
				changePass();
    1b7c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <changePass>
    1b80:	b0 cf       	rjmp	.-160    	; 0x1ae2 <main+0x10>

		}
		else if(response == 'p')
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	80 37       	cpi	r24, 0x70	; 112
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <main+0xb8>
    1b88:	ac cf       	rjmp	.-168    	; 0x1ae2 <main+0x10>
			changePass();
    1b8a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <changePass>
    1b8e:	a9 cf       	rjmp	.-174    	; 0x1ae2 <main+0x10>

00001b90 <rcvPassword>:
	}while(1);


}

void rcvPassword(uint8* str){
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <rcvPassword+0xa>
    1b9a:	0f 92       	push	r0
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	9b 83       	std	Y+3, r25	; 0x03
    1ba2:	8a 83       	std	Y+2, r24	; 0x02

	uint8 index = 0;
    1ba4:	19 82       	std	Y+1, r1	; 0x01
    1ba6:	23 c0       	rjmp	.+70     	; 0x1bee <rcvPassword+0x5e>

	while(index < PASSWORD_SIZE){
		str[index] = UART_rcvCharacter();
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb2:	8c 01       	movw	r16, r24
    1bb4:	02 0f       	add	r16, r18
    1bb6:	13 1f       	adc	r17, r19
    1bb8:	0e 94 9b 06 	call	0xd36	; 0xd36 <UART_rcvCharacter>
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	80 83       	st	Z, r24
		if( str[index] == '=')
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bca:	fc 01       	movw	r30, r24
    1bcc:	e2 0f       	add	r30, r18
    1bce:	f3 1f       	adc	r31, r19
    1bd0:	80 81       	ld	r24, Z
    1bd2:	8d 33       	cpi	r24, 0x3D	; 61
    1bd4:	49 f4       	brne	.+18     	; 0x1be8 <rcvPassword+0x58>
		{
			str[index] = '\0';
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	9b 81       	ldd	r25, Y+3	; 0x03
    1be0:	fc 01       	movw	r30, r24
    1be2:	e2 0f       	add	r30, r18
    1be4:	f3 1f       	adc	r31, r19
    1be6:	10 82       	st	Z, r1
		}
		index++;
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	8f 5f       	subi	r24, 0xFF	; 255
    1bec:	89 83       	std	Y+1, r24	; 0x01

void rcvPassword(uint8* str){

	uint8 index = 0;

	while(index < PASSWORD_SIZE){
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	86 30       	cpi	r24, 0x06	; 6
    1bf2:	d0 f2       	brcs	.-76     	; 0x1ba8 <rcvPassword+0x18>
		{
			str[index] = '\0';
		}
		index++;
	}
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	08 95       	ret

00001c04 <changePass>:
void changePass(){
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	6c 97       	sbiw	r28, 0x1c	; 28
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61

	uint8 password[6];
	uint8 rePassword[6];
	rcvPassword(password);
    1c18:	ce 01       	movw	r24, r28
    1c1a:	41 96       	adiw	r24, 0x11	; 17
    1c1c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <rcvPassword>
	rcvPassword(rePassword);
    1c20:	ce 01       	movw	r24, r28
    1c22:	47 96       	adiw	r24, 0x17	; 23
    1c24:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <rcvPassword>

	if(strcmp(password, rePassword) == 0){
    1c28:	ce 01       	movw	r24, r28
    1c2a:	41 96       	adiw	r24, 0x11	; 17
    1c2c:	9e 01       	movw	r18, r28
    1c2e:	29 5e       	subi	r18, 0xE9	; 233
    1c30:	3f 4f       	sbci	r19, 0xFF	; 255
    1c32:	b9 01       	movw	r22, r18
    1c34:	0e 94 47 10 	call	0x208e	; 0x208e <strcmp>
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <changePass+0x3a>
    1c3c:	95 c0       	rjmp	.+298    	; 0x1d68 <changePass+0x164>
		for(int i = 0; i < 6; i++){
    1c3e:	18 8a       	std	Y+16, r1	; 0x10
    1c40:	1f 86       	std	Y+15, r1	; 0x0f
    1c42:	88 c0       	rjmp	.+272    	; 0x1d54 <changePass+0x150>
			EEPROM_writeByte(0x0311+i, password[i]);
    1c44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c46:	98 89       	ldd	r25, Y+16	; 0x10
    1c48:	8f 5e       	subi	r24, 0xEF	; 239
    1c4a:	9c 4f       	sbci	r25, 0xFC	; 252
    1c4c:	ac 01       	movw	r20, r24
    1c4e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1c50:	38 89       	ldd	r19, Y+16	; 0x10
    1c52:	ce 01       	movw	r24, r28
    1c54:	41 96       	adiw	r24, 0x11	; 17
    1c56:	fc 01       	movw	r30, r24
    1c58:	e2 0f       	add	r30, r18
    1c5a:	f3 1f       	adc	r31, r19
    1c5c:	20 81       	ld	r18, Z
    1c5e:	ca 01       	movw	r24, r20
    1c60:	62 2f       	mov	r22, r18
    1c62:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <EEPROM_writeByte>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	a0 e2       	ldi	r26, 0x20	; 32
    1c6c:	b1 e4       	ldi	r27, 0x41	; 65
    1c6e:	8b 87       	std	Y+11, r24	; 0x0b
    1c70:	9c 87       	std	Y+12, r25	; 0x0c
    1c72:	ad 87       	std	Y+13, r26	; 0x0d
    1c74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a ef       	ldi	r20, 0xFA	; 250
    1c84:	54 e4       	ldi	r21, 0x44	; 68
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8f 83       	std	Y+7, r24	; 0x07
    1c90:	98 87       	std	Y+8, r25	; 0x08
    1c92:	a9 87       	std	Y+9, r26	; 0x09
    1c94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c96:	6f 81       	ldd	r22, Y+7	; 0x07
    1c98:	78 85       	ldd	r23, Y+8	; 0x08
    1c9a:	89 85       	ldd	r24, Y+9	; 0x09
    1c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <changePass+0xb4>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <changePass+0x132>
	else if (__tmp > 65535)
    1cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cba:	78 85       	ldd	r23, Y+8	; 0x08
    1cbc:	89 85       	ldd	r24, Y+9	; 0x09
    1cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	3f ef       	ldi	r19, 0xFF	; 255
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	4c f5       	brge	.+82     	; 0x1d22 <changePass+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9e 83       	std	Y+6, r25	; 0x06
    1cf6:	8d 83       	std	Y+5, r24	; 0x05
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <changePass+0x114>
    1cfa:	88 ec       	ldi	r24, 0xC8	; 200
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9c 83       	std	Y+4, r25	; 0x04
    1d00:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <changePass+0x102>
    1d0a:	9c 83       	std	Y+4, r25	; 0x04
    1d0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	9e 83       	std	Y+6, r25	; 0x06
    1d16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <changePass+0xf6>
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <changePass+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	6f 81       	ldd	r22, Y+7	; 0x07
    1d24:	78 85       	ldd	r23, Y+8	; 0x08
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <changePass+0x13e>
    1d46:	9a 83       	std	Y+2, r25	; 0x02
    1d48:	89 83       	std	Y+1, r24	; 0x01
	uint8 rePassword[6];
	rcvPassword(password);
	rcvPassword(rePassword);

	if(strcmp(password, rePassword) == 0){
		for(int i = 0; i < 6; i++){
    1d4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d4c:	98 89       	ldd	r25, Y+16	; 0x10
    1d4e:	01 96       	adiw	r24, 0x01	; 1
    1d50:	98 8b       	std	Y+16, r25	; 0x10
    1d52:	8f 87       	std	Y+15, r24	; 0x0f
    1d54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d56:	98 89       	ldd	r25, Y+16	; 0x10
    1d58:	86 30       	cpi	r24, 0x06	; 6
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	0c f4       	brge	.+2      	; 0x1d60 <changePass+0x15c>
    1d5e:	72 cf       	rjmp	.-284    	; 0x1c44 <changePass+0x40>
			EEPROM_writeByte(0x0311+i, password[i]);
			_delay_ms(10);
		}
		UART_sendCharacter('t');
    1d60:	84 e7       	ldi	r24, 0x74	; 116
    1d62:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_sendCharacter>
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <changePass+0x16a>
	}
	else
		UART_sendCharacter('f');
    1d68:	86 e6       	ldi	r24, 0x66	; 102
    1d6a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_sendCharacter>
}
    1d6e:	6c 96       	adiw	r28, 0x1c	; 28
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <checkPass>:
uint8 checkPass(){
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	a2 97       	sbiw	r28, 0x22	; 34
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
	uint8 default_pass[6] = {'=', '=', '=', '=', '=', '='};
    1d94:	ce 01       	movw	r24, r28
    1d96:	41 96       	adiw	r24, 0x11	; 17
    1d98:	9f 8f       	std	Y+31, r25	; 0x1f
    1d9a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d9c:	a9 e7       	ldi	r26, 0x79	; 121
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	b9 a3       	std	Y+33, r27	; 0x21
    1da2:	a8 a3       	std	Y+32, r26	; 0x20
    1da4:	b6 e0       	ldi	r27, 0x06	; 6
    1da6:	ba a3       	std	Y+34, r27	; 0x22
    1da8:	e8 a1       	ldd	r30, Y+32	; 0x20
    1daa:	f9 a1       	ldd	r31, Y+33	; 0x21
    1dac:	00 80       	ld	r0, Z
    1dae:	88 a1       	ldd	r24, Y+32	; 0x20
    1db0:	99 a1       	ldd	r25, Y+33	; 0x21
    1db2:	01 96       	adiw	r24, 0x01	; 1
    1db4:	99 a3       	std	Y+33, r25	; 0x21
    1db6:	88 a3       	std	Y+32, r24	; 0x20
    1db8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1dba:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1dbc:	0c 92       	st	X, r0
    1dbe:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1dc0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1dc2:	31 96       	adiw	r30, 0x01	; 1
    1dc4:	ff 8f       	std	Y+31, r31	; 0x1f
    1dc6:	ee 8f       	std	Y+30, r30	; 0x1e
    1dc8:	fa a1       	ldd	r31, Y+34	; 0x22
    1dca:	f1 50       	subi	r31, 0x01	; 1
    1dcc:	fa a3       	std	Y+34, r31	; 0x22
    1dce:	8a a1       	ldd	r24, Y+34	; 0x22
    1dd0:	88 23       	and	r24, r24
    1dd2:	51 f7       	brne	.-44     	; 0x1da8 <checkPass+0x28>
	uint8 password[6] = {'='};
    1dd4:	86 e0       	ldi	r24, 0x06	; 6
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	77 96       	adiw	r30, 0x17	; 23
    1dda:	df 01       	movw	r26, r30
    1ddc:	98 2f       	mov	r25, r24
    1dde:	1d 92       	st	X+, r1
    1de0:	9a 95       	dec	r25
    1de2:	e9 f7       	brne	.-6      	; 0x1dde <checkPass+0x5e>
    1de4:	8d e3       	ldi	r24, 0x3D	; 61
    1de6:	8f 8b       	std	Y+23, r24	; 0x17
	rcvPassword(password);
    1de8:	ce 01       	movw	r24, r28
    1dea:	47 96       	adiw	r24, 0x17	; 23
    1dec:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <rcvPassword>

	for(int i = 0; i < 6; i++){
    1df0:	18 8a       	std	Y+16, r1	; 0x10
    1df2:	1f 86       	std	Y+15, r1	; 0x0f
    1df4:	87 c0       	rjmp	.+270    	; 0x1f04 <checkPass+0x184>
		EEPROM_readByte(0x0311+i, &default_pass[i]);
    1df6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df8:	98 89       	ldd	r25, Y+16	; 0x10
    1dfa:	8f 5e       	subi	r24, 0xEF	; 239
    1dfc:	9c 4f       	sbci	r25, 0xFC	; 252
    1dfe:	ac 01       	movw	r20, r24
    1e00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e02:	98 89       	ldd	r25, Y+16	; 0x10
    1e04:	9e 01       	movw	r18, r28
    1e06:	2f 5e       	subi	r18, 0xEF	; 239
    1e08:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0a:	28 0f       	add	r18, r24
    1e0c:	39 1f       	adc	r19, r25
    1e0e:	ca 01       	movw	r24, r20
    1e10:	b9 01       	movw	r22, r18
    1e12:	0e 94 21 0c 	call	0x1842	; 0x1842 <EEPROM_readByte>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a0 e2       	ldi	r26, 0x20	; 32
    1e1c:	b1 e4       	ldi	r27, 0x41	; 65
    1e1e:	8b 87       	std	Y+11, r24	; 0x0b
    1e20:	9c 87       	std	Y+12, r25	; 0x0c
    1e22:	ad 87       	std	Y+13, r26	; 0x0d
    1e24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a ef       	ldi	r20, 0xFA	; 250
    1e34:	54 e4       	ldi	r21, 0x44	; 68
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8f 83       	std	Y+7, r24	; 0x07
    1e40:	98 87       	std	Y+8, r25	; 0x08
    1e42:	a9 87       	std	Y+9, r26	; 0x09
    1e44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <checkPass+0xe8>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
    1e66:	3f c0       	rjmp	.+126    	; 0x1ee6 <checkPass+0x166>
	else if (__tmp > 65535)
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	4c f5       	brge	.+82     	; 0x1ed2 <checkPass+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <checkPass+0x148>
    1eaa:	88 ec       	ldi	r24, 0xC8	; 200
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	8b 83       	std	Y+3, r24	; 0x03
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <checkPass+0x136>
    1eba:	9c 83       	std	Y+4, r25	; 0x04
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <checkPass+0x12a>
    1ed0:	14 c0       	rjmp	.+40     	; 0x1efa <checkPass+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <checkPass+0x172>
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01
uint8 checkPass(){
	uint8 default_pass[6] = {'=', '=', '=', '=', '=', '='};
	uint8 password[6] = {'='};
	rcvPassword(password);

	for(int i = 0; i < 6; i++){
    1efa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1efc:	98 89       	ldd	r25, Y+16	; 0x10
    1efe:	01 96       	adiw	r24, 0x01	; 1
    1f00:	98 8b       	std	Y+16, r25	; 0x10
    1f02:	8f 87       	std	Y+15, r24	; 0x0f
    1f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f06:	98 89       	ldd	r25, Y+16	; 0x10
    1f08:	86 30       	cpi	r24, 0x06	; 6
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	0c f4       	brge	.+2      	; 0x1f10 <checkPass+0x190>
    1f0e:	73 cf       	rjmp	.-282    	; 0x1df6 <checkPass+0x76>
		_delay_ms(10);
	}



	if(strcmp(password, default_pass) == 0){
    1f10:	ce 01       	movw	r24, r28
    1f12:	47 96       	adiw	r24, 0x17	; 23
    1f14:	9e 01       	movw	r18, r28
    1f16:	2f 5e       	subi	r18, 0xEF	; 239
    1f18:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1a:	b9 01       	movw	r22, r18
    1f1c:	0e 94 47 10 	call	0x208e	; 0x208e <strcmp>
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	49 f4       	brne	.+18     	; 0x1f36 <checkPass+0x1b6>

		UART_sendCharacter('t');
    1f24:	84 e7       	ldi	r24, 0x74	; 116
    1f26:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_sendCharacter>
		attempts = 2;
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	80 93 69 00 	sts	0x0069, r24
		return 1;
    1f30:	a1 e0       	ldi	r26, 0x01	; 1
    1f32:	ad 8f       	std	Y+29, r26	; 0x1d
    1f34:	22 c0       	rjmp	.+68     	; 0x1f7a <checkPass+0x1fa>
	}
	else{

		if(attempts == 0){
    1f36:	80 91 69 00 	lds	r24, 0x0069
    1f3a:	88 23       	and	r24, r24
    1f3c:	a9 f4       	brne	.+42     	; 0x1f68 <checkPass+0x1e8>
			UART_sendCharacter('b');
    1f3e:	82 e6       	ldi	r24, 0x62	; 98
    1f40:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_sendCharacter>
			Buzzer_on();
    1f44:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Buzzer_on>
			seconds = 60;
    1f48:	8c e3       	ldi	r24, 0x3C	; 60
    1f4a:	80 93 85 00 	sts	0x0085, r24
			while(seconds > 0){};
    1f4e:	80 91 85 00 	lds	r24, 0x0085
    1f52:	88 23       	and	r24, r24
    1f54:	e1 f7       	brne	.-8      	; 0x1f4e <checkPass+0x1ce>
			Buzzer_off();
    1f56:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Buzzer_off>
			UART_sendCharacter('b');
    1f5a:	82 e6       	ldi	r24, 0x62	; 98
    1f5c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_sendCharacter>
			attempts = 2;
    1f60:	82 e0       	ldi	r24, 0x02	; 2
    1f62:	80 93 69 00 	sts	0x0069, r24
    1f66:	08 c0       	rjmp	.+16     	; 0x1f78 <checkPass+0x1f8>
		}
		else{
			UART_sendCharacter('f');
    1f68:	86 e6       	ldi	r24, 0x66	; 102
    1f6a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_sendCharacter>
			attempts--;
    1f6e:	80 91 69 00 	lds	r24, 0x0069
    1f72:	81 50       	subi	r24, 0x01	; 1
    1f74:	80 93 69 00 	sts	0x0069, r24
		}
		return 0;
    1f78:	1d 8e       	std	Y+29, r1	; 0x1d
    1f7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
	}
}
    1f7c:	a2 96       	adiw	r28, 0x22	; 34
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <__divmodhi4>:
    1f8e:	97 fb       	bst	r25, 7
    1f90:	09 2e       	mov	r0, r25
    1f92:	07 26       	eor	r0, r23
    1f94:	0a d0       	rcall	.+20     	; 0x1faa <__divmodhi4_neg1>
    1f96:	77 fd       	sbrc	r23, 7
    1f98:	04 d0       	rcall	.+8      	; 0x1fa2 <__divmodhi4_neg2>
    1f9a:	2e d0       	rcall	.+92     	; 0x1ff8 <__udivmodhi4>
    1f9c:	06 d0       	rcall	.+12     	; 0x1faa <__divmodhi4_neg1>
    1f9e:	00 20       	and	r0, r0
    1fa0:	1a f4       	brpl	.+6      	; 0x1fa8 <__divmodhi4_exit>

00001fa2 <__divmodhi4_neg2>:
    1fa2:	70 95       	com	r23
    1fa4:	61 95       	neg	r22
    1fa6:	7f 4f       	sbci	r23, 0xFF	; 255

00001fa8 <__divmodhi4_exit>:
    1fa8:	08 95       	ret

00001faa <__divmodhi4_neg1>:
    1faa:	f6 f7       	brtc	.-4      	; 0x1fa8 <__divmodhi4_exit>
    1fac:	90 95       	com	r25
    1fae:	81 95       	neg	r24
    1fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb2:	08 95       	ret

00001fb4 <__udivmodsi4>:
    1fb4:	a1 e2       	ldi	r26, 0x21	; 33
    1fb6:	1a 2e       	mov	r1, r26
    1fb8:	aa 1b       	sub	r26, r26
    1fba:	bb 1b       	sub	r27, r27
    1fbc:	fd 01       	movw	r30, r26
    1fbe:	0d c0       	rjmp	.+26     	; 0x1fda <__udivmodsi4_ep>

00001fc0 <__udivmodsi4_loop>:
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	ee 1f       	adc	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	a2 17       	cp	r26, r18
    1fca:	b3 07       	cpc	r27, r19
    1fcc:	e4 07       	cpc	r30, r20
    1fce:	f5 07       	cpc	r31, r21
    1fd0:	20 f0       	brcs	.+8      	; 0x1fda <__udivmodsi4_ep>
    1fd2:	a2 1b       	sub	r26, r18
    1fd4:	b3 0b       	sbc	r27, r19
    1fd6:	e4 0b       	sbc	r30, r20
    1fd8:	f5 0b       	sbc	r31, r21

00001fda <__udivmodsi4_ep>:
    1fda:	66 1f       	adc	r22, r22
    1fdc:	77 1f       	adc	r23, r23
    1fde:	88 1f       	adc	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	1a 94       	dec	r1
    1fe4:	69 f7       	brne	.-38     	; 0x1fc0 <__udivmodsi4_loop>
    1fe6:	60 95       	com	r22
    1fe8:	70 95       	com	r23
    1fea:	80 95       	com	r24
    1fec:	90 95       	com	r25
    1fee:	9b 01       	movw	r18, r22
    1ff0:	ac 01       	movw	r20, r24
    1ff2:	bd 01       	movw	r22, r26
    1ff4:	cf 01       	movw	r24, r30
    1ff6:	08 95       	ret

00001ff8 <__udivmodhi4>:
    1ff8:	aa 1b       	sub	r26, r26
    1ffa:	bb 1b       	sub	r27, r27
    1ffc:	51 e1       	ldi	r21, 0x11	; 17
    1ffe:	07 c0       	rjmp	.+14     	; 0x200e <__udivmodhi4_ep>

00002000 <__udivmodhi4_loop>:
    2000:	aa 1f       	adc	r26, r26
    2002:	bb 1f       	adc	r27, r27
    2004:	a6 17       	cp	r26, r22
    2006:	b7 07       	cpc	r27, r23
    2008:	10 f0       	brcs	.+4      	; 0x200e <__udivmodhi4_ep>
    200a:	a6 1b       	sub	r26, r22
    200c:	b7 0b       	sbc	r27, r23

0000200e <__udivmodhi4_ep>:
    200e:	88 1f       	adc	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	5a 95       	dec	r21
    2014:	a9 f7       	brne	.-22     	; 0x2000 <__udivmodhi4_loop>
    2016:	80 95       	com	r24
    2018:	90 95       	com	r25
    201a:	bc 01       	movw	r22, r24
    201c:	cd 01       	movw	r24, r26
    201e:	08 95       	ret

00002020 <__prologue_saves__>:
    2020:	2f 92       	push	r2
    2022:	3f 92       	push	r3
    2024:	4f 92       	push	r4
    2026:	5f 92       	push	r5
    2028:	6f 92       	push	r6
    202a:	7f 92       	push	r7
    202c:	8f 92       	push	r8
    202e:	9f 92       	push	r9
    2030:	af 92       	push	r10
    2032:	bf 92       	push	r11
    2034:	cf 92       	push	r12
    2036:	df 92       	push	r13
    2038:	ef 92       	push	r14
    203a:	ff 92       	push	r15
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	ca 1b       	sub	r28, r26
    204a:	db 0b       	sbc	r29, r27
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	09 94       	ijmp

00002058 <__epilogue_restores__>:
    2058:	2a 88       	ldd	r2, Y+18	; 0x12
    205a:	39 88       	ldd	r3, Y+17	; 0x11
    205c:	48 88       	ldd	r4, Y+16	; 0x10
    205e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2060:	6e 84       	ldd	r6, Y+14	; 0x0e
    2062:	7d 84       	ldd	r7, Y+13	; 0x0d
    2064:	8c 84       	ldd	r8, Y+12	; 0x0c
    2066:	9b 84       	ldd	r9, Y+11	; 0x0b
    2068:	aa 84       	ldd	r10, Y+10	; 0x0a
    206a:	b9 84       	ldd	r11, Y+9	; 0x09
    206c:	c8 84       	ldd	r12, Y+8	; 0x08
    206e:	df 80       	ldd	r13, Y+7	; 0x07
    2070:	ee 80       	ldd	r14, Y+6	; 0x06
    2072:	fd 80       	ldd	r15, Y+5	; 0x05
    2074:	0c 81       	ldd	r16, Y+4	; 0x04
    2076:	1b 81       	ldd	r17, Y+3	; 0x03
    2078:	aa 81       	ldd	r26, Y+2	; 0x02
    207a:	b9 81       	ldd	r27, Y+1	; 0x01
    207c:	ce 0f       	add	r28, r30
    207e:	d1 1d       	adc	r29, r1
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	de bf       	out	0x3e, r29	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	cd bf       	out	0x3d, r28	; 61
    208a:	ed 01       	movw	r28, r26
    208c:	08 95       	ret

0000208e <strcmp>:
    208e:	fb 01       	movw	r30, r22
    2090:	dc 01       	movw	r26, r24
    2092:	8d 91       	ld	r24, X+
    2094:	01 90       	ld	r0, Z+
    2096:	80 19       	sub	r24, r0
    2098:	01 10       	cpse	r0, r1
    209a:	d9 f3       	breq	.-10     	; 0x2092 <strcmp+0x4>
    209c:	99 0b       	sbc	r25, r25
    209e:	08 95       	ret

000020a0 <_exit>:
    20a0:	f8 94       	cli

000020a2 <__stop_program>:
    20a2:	ff cf       	rjmp	.-2      	; 0x20a2 <__stop_program>
