
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a78  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000a78  00000aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000010d4  00000000  00000000  00000af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c35  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 0b 05 	call	0xa16	; 0xa16 <main>
  7a:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_13>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(USART_RXC_vect){
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	g_uartRcvData = UDR;
  9a:	ec e2       	ldi	r30, 0x2C	; 44
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 93 60 00 	sts	0x0060, r24
}
  a4:	cf 91       	pop	r28
  a6:	df 91       	pop	r29
  a8:	ff 91       	pop	r31
  aa:	ef 91       	pop	r30
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <UART_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void UART_init(){
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	00 d0       	rcall	.+0      	; 0xbe <UART_init+0x6>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62

	uint16 ubrr_value = 0;
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRA, U2X);		/* : Double the USART Transmission Speed */
  c6:	ab e2       	ldi	r26, 0x2B	; 43
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	eb e2       	ldi	r30, 0x2B	; 43
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	8c 93       	st	X, r24

	SET_BIT(UCSRB, RXCIE);		/* RX Complete Interrupt Enable */
  d4:	aa e2       	ldi	r26, 0x2A	; 42
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	ea e2       	ldi	r30, 0x2A	; 42
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);		/* Transmitter Enable*/
  e2:	aa e2       	ldi	r26, 0x2A	; 42
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	ea e2       	ldi	r30, 0x2A	; 42
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 60       	ori	r24, 0x08	; 8
  ee:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);		/* Receiver Enable */
  f0:	aa e2       	ldi	r26, 0x2A	; 42
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	ea e2       	ldi	r30, 0x2A	; 42
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC, UMSEL);	/* USART Mode Select 0 -> async, 1 -> sync*/
  fe:	a0 e4       	ldi	r26, 0x40	; 64
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	e0 e4       	ldi	r30, 0x40	; 64
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);		/* UCSZ1:0: Character Size */
 10c:	a0 e4       	ldi	r26, 0x40	; 64
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e0 e4       	ldi	r30, 0x40	; 64
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);		/* UCSZ1:0: 11 -> 8-bit */
 11a:	a0 e4       	ldi	r26, 0x40	; 64
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e0 e4       	ldi	r30, 0x40	; 64
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	8c 93       	st	X, r24


	ubrr_value = (uint16)(( F_CPU / ( BAUDRATE * 8UL )) - 1 );
 128:	87 e6       	ldi	r24, 0x67	; 103
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	9a 83       	std	Y+2, r25	; 0x02
 12e:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = (ubrr_value >> 8) & (0x0F);
 130:	e0 e4       	ldi	r30, 0x40	; 64
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	9a 81       	ldd	r25, Y+2	; 0x02
 138:	89 2f       	mov	r24, r25
 13a:	99 27       	eor	r25, r25
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
 140:	e9 e2       	ldi	r30, 0x29	; 41
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	80 83       	st	Z, r24
}
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	08 95       	ret

00000152 <UART_sendCharacter>:

void UART_sendCharacter(uint8 data){
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	0f 92       	push	r0
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
 15e:	eb e2       	ldi	r30, 0x2B	; 43
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 2f       	mov	r24, r24
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	80 72       	andi	r24, 0x20	; 32
 16a:	90 70       	andi	r25, 0x00	; 0
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	b9 f3       	breq	.-18     	; 0x15e <UART_sendCharacter+0xc>
	UDR = data;
 170:	ec e2       	ldi	r30, 0x2C	; 44
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	80 83       	st	Z, r24
}
 178:	0f 90       	pop	r0
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	08 95       	ret

00000180 <UART_sendArray>:

void UART_sendArray(uint8 *str, uint8 str_size){
 180:	df 93       	push	r29
 182:	cf 93       	push	r28
 184:	00 d0       	rcall	.+0      	; 0x186 <UART_sendArray+0x6>
 186:	00 d0       	rcall	.+0      	; 0x188 <UART_sendArray+0x8>
 188:	0f 92       	push	r0
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	9c 83       	std	Y+4, r25	; 0x04
 190:	8b 83       	std	Y+3, r24	; 0x03
 192:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < str_size; i++){
 194:	1a 82       	std	Y+2, r1	; 0x02
 196:	19 82       	std	Y+1, r1	; 0x01
 198:	19 c0       	rjmp	.+50     	; 0x1cc <UART_sendArray+0x4c>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
 19a:	eb e2       	ldi	r30, 0x2B	; 43
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	80 72       	andi	r24, 0x20	; 32
 1a6:	90 70       	andi	r25, 0x00	; 0
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	b9 f3       	breq	.-18     	; 0x19a <UART_sendArray+0x1a>
		UDR = str[i];
 1ac:	ac e2       	ldi	r26, 0x2C	; 44
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	29 81       	ldd	r18, Y+1	; 0x01
 1b2:	3a 81       	ldd	r19, Y+2	; 0x02
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	9c 81       	ldd	r25, Y+4	; 0x04
 1b8:	fc 01       	movw	r30, r24
 1ba:	e2 0f       	add	r30, r18
 1bc:	f3 1f       	adc	r31, r19
 1be:	80 81       	ld	r24, Z
 1c0:	8c 93       	st	X, r24
	UDR = data;
}

void UART_sendArray(uint8 *str, uint8 str_size){

	for(int i = 0; i < str_size; i++){
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	9a 83       	std	Y+2, r25	; 0x02
 1ca:	89 83       	std	Y+1, r24	; 0x01
 1cc:	8d 81       	ldd	r24, Y+5	; 0x05
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	9a 81       	ldd	r25, Y+2	; 0x02
 1d6:	82 17       	cp	r24, r18
 1d8:	93 07       	cpc	r25, r19
 1da:	fc f2       	brlt	.-66     	; 0x19a <UART_sendArray+0x1a>
		while( BIT_IS_CLEAR(UCSRA, UDRE) ){} /* wait if previous byte still sending */
		UDR = str[i];
	}

}
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	cf 91       	pop	r28
 1e8:	df 91       	pop	r29
 1ea:	08 95       	ret

000001ec <UART_rcvCharacter>:

uint8 UART_rcvCharacter(){
 1ec:	df 93       	push	r29
 1ee:	cf 93       	push	r28
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
	while( BIT_IS_CLEAR(UCSRA, RXC) ){}
 1f4:	eb e2       	ldi	r30, 0x2B	; 43
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	88 23       	and	r24, r24
 1fc:	dc f7       	brge	.-10     	; 0x1f4 <UART_rcvCharacter+0x8>
	return UDR;
 1fe:	ec e2       	ldi	r30, 0x2C	; 44
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
}
 204:	cf 91       	pop	r28
 206:	df 91       	pop	r29
 208:	08 95       	ret

0000020a <GPIO_setupPinDirection>:
 *******************************************************************************/



void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
 20a:	df 93       	push	r29
 20c:	cf 93       	push	r28
 20e:	00 d0       	rcall	.+0      	; 0x210 <GPIO_setupPinDirection+0x6>
 210:	00 d0       	rcall	.+0      	; 0x212 <GPIO_setupPinDirection+0x8>
 212:	0f 92       	push	r0
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	6a 83       	std	Y+2, r22	; 0x02
 21c:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	88 30       	cpi	r24, 0x08	; 8
 222:	08 f0       	brcs	.+2      	; 0x226 <GPIO_setupPinDirection+0x1c>
 224:	d5 c0       	rjmp	.+426    	; 0x3d0 <GPIO_setupPinDirection+0x1c6>
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	84 30       	cpi	r24, 0x04	; 4
 22a:	08 f0       	brcs	.+2      	; 0x22e <GPIO_setupPinDirection+0x24>
 22c:	d1 c0       	rjmp	.+418    	; 0x3d0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	28 2f       	mov	r18, r24
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	3d 83       	std	Y+5, r19	; 0x05
 236:	2c 83       	std	Y+4, r18	; 0x04
 238:	8c 81       	ldd	r24, Y+4	; 0x04
 23a:	9d 81       	ldd	r25, Y+5	; 0x05
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	91 05       	cpc	r25, r1
 240:	09 f4       	brne	.+2      	; 0x244 <GPIO_setupPinDirection+0x3a>
 242:	43 c0       	rjmp	.+134    	; 0x2ca <GPIO_setupPinDirection+0xc0>
 244:	2c 81       	ldd	r18, Y+4	; 0x04
 246:	3d 81       	ldd	r19, Y+5	; 0x05
 248:	22 30       	cpi	r18, 0x02	; 2
 24a:	31 05       	cpc	r19, r1
 24c:	2c f4       	brge	.+10     	; 0x258 <GPIO_setupPinDirection+0x4e>
 24e:	8c 81       	ldd	r24, Y+4	; 0x04
 250:	9d 81       	ldd	r25, Y+5	; 0x05
 252:	00 97       	sbiw	r24, 0x00	; 0
 254:	71 f0       	breq	.+28     	; 0x272 <GPIO_setupPinDirection+0x68>
 256:	bc c0       	rjmp	.+376    	; 0x3d0 <GPIO_setupPinDirection+0x1c6>
 258:	2c 81       	ldd	r18, Y+4	; 0x04
 25a:	3d 81       	ldd	r19, Y+5	; 0x05
 25c:	22 30       	cpi	r18, 0x02	; 2
 25e:	31 05       	cpc	r19, r1
 260:	09 f4       	brne	.+2      	; 0x264 <GPIO_setupPinDirection+0x5a>
 262:	5f c0       	rjmp	.+190    	; 0x322 <GPIO_setupPinDirection+0x118>
 264:	8c 81       	ldd	r24, Y+4	; 0x04
 266:	9d 81       	ldd	r25, Y+5	; 0x05
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	91 05       	cpc	r25, r1
 26c:	09 f4       	brne	.+2      	; 0x270 <GPIO_setupPinDirection+0x66>
 26e:	85 c0       	rjmp	.+266    	; 0x37a <GPIO_setupPinDirection+0x170>
 270:	af c0       	rjmp	.+350    	; 0x3d0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 272:	8b 81       	ldd	r24, Y+3	; 0x03
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	a1 f4       	brne	.+40     	; 0x2a0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 278:	aa e3       	ldi	r26, 0x3A	; 58
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	ea e3       	ldi	r30, 0x3A	; 58
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	48 2f       	mov	r20, r24
 284:	8a 81       	ldd	r24, Y+2	; 0x02
 286:	28 2f       	mov	r18, r24
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 2e       	mov	r0, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <GPIO_setupPinDirection+0x8c>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <GPIO_setupPinDirection+0x88>
 29a:	84 2b       	or	r24, r20
 29c:	8c 93       	st	X, r24
 29e:	98 c0       	rjmp	.+304    	; 0x3d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 2a0:	aa e3       	ldi	r26, 0x3A	; 58
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	ea e3       	ldi	r30, 0x3A	; 58
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	48 2f       	mov	r20, r24
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	28 2f       	mov	r18, r24
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 2e       	mov	r0, r18
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <GPIO_setupPinDirection+0xb4>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <GPIO_setupPinDirection+0xb0>
 2c2:	80 95       	com	r24
 2c4:	84 23       	and	r24, r20
 2c6:	8c 93       	st	X, r24
 2c8:	83 c0       	rjmp	.+262    	; 0x3d0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 2ca:	8b 81       	ldd	r24, Y+3	; 0x03
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	a1 f4       	brne	.+40     	; 0x2f8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 2d0:	a7 e3       	ldi	r26, 0x37	; 55
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	e7 e3       	ldi	r30, 0x37	; 55
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	48 2f       	mov	r20, r24
 2dc:	8a 81       	ldd	r24, Y+2	; 0x02
 2de:	28 2f       	mov	r18, r24
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 2e       	mov	r0, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <GPIO_setupPinDirection+0xe4>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	0a 94       	dec	r0
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <GPIO_setupPinDirection+0xe0>
 2f2:	84 2b       	or	r24, r20
 2f4:	8c 93       	st	X, r24
 2f6:	6c c0       	rjmp	.+216    	; 0x3d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 2f8:	a7 e3       	ldi	r26, 0x37	; 55
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	e7 e3       	ldi	r30, 0x37	; 55
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	48 2f       	mov	r20, r24
 304:	8a 81       	ldd	r24, Y+2	; 0x02
 306:	28 2f       	mov	r18, r24
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 2e       	mov	r0, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <GPIO_setupPinDirection+0x10c>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	0a 94       	dec	r0
 318:	e2 f7       	brpl	.-8      	; 0x312 <GPIO_setupPinDirection+0x108>
 31a:	80 95       	com	r24
 31c:	84 23       	and	r24, r20
 31e:	8c 93       	st	X, r24
 320:	57 c0       	rjmp	.+174    	; 0x3d0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 322:	8b 81       	ldd	r24, Y+3	; 0x03
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	a1 f4       	brne	.+40     	; 0x350 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 328:	a4 e3       	ldi	r26, 0x34	; 52
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	e4 e3       	ldi	r30, 0x34	; 52
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	48 2f       	mov	r20, r24
 334:	8a 81       	ldd	r24, Y+2	; 0x02
 336:	28 2f       	mov	r18, r24
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 2e       	mov	r0, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <GPIO_setupPinDirection+0x13c>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	0a 94       	dec	r0
 348:	e2 f7       	brpl	.-8      	; 0x342 <GPIO_setupPinDirection+0x138>
 34a:	84 2b       	or	r24, r20
 34c:	8c 93       	st	X, r24
 34e:	40 c0       	rjmp	.+128    	; 0x3d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 350:	a4 e3       	ldi	r26, 0x34	; 52
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	e4 e3       	ldi	r30, 0x34	; 52
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	48 2f       	mov	r20, r24
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 2e       	mov	r0, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <GPIO_setupPinDirection+0x164>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <GPIO_setupPinDirection+0x160>
 372:	80 95       	com	r24
 374:	84 23       	and	r24, r20
 376:	8c 93       	st	X, r24
 378:	2b c0       	rjmp	.+86     	; 0x3d0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 37a:	8b 81       	ldd	r24, Y+3	; 0x03
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	a1 f4       	brne	.+40     	; 0x3a8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 380:	a1 e3       	ldi	r26, 0x31	; 49
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	e1 e3       	ldi	r30, 0x31	; 49
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	48 2f       	mov	r20, r24
 38c:	8a 81       	ldd	r24, Y+2	; 0x02
 38e:	28 2f       	mov	r18, r24
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 2e       	mov	r0, r18
 398:	02 c0       	rjmp	.+4      	; 0x39e <GPIO_setupPinDirection+0x194>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <GPIO_setupPinDirection+0x190>
 3a2:	84 2b       	or	r24, r20
 3a4:	8c 93       	st	X, r24
 3a6:	14 c0       	rjmp	.+40     	; 0x3d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 3a8:	a1 e3       	ldi	r26, 0x31	; 49
 3aa:	b0 e0       	ldi	r27, 0x00	; 0
 3ac:	e1 e3       	ldi	r30, 0x31	; 49
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	48 2f       	mov	r20, r24
 3b4:	8a 81       	ldd	r24, Y+2	; 0x02
 3b6:	28 2f       	mov	r18, r24
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 2e       	mov	r0, r18
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <GPIO_setupPinDirection+0x1bc>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	0a 94       	dec	r0
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <GPIO_setupPinDirection+0x1b8>
 3ca:	80 95       	com	r24
 3cc:	84 23       	and	r24, r20
 3ce:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	cf 91       	pop	r28
 3dc:	df 91       	pop	r29
 3de:	08 95       	ret

000003e0 <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
 3e0:	df 93       	push	r29
 3e2:	cf 93       	push	r28
 3e4:	00 d0       	rcall	.+0      	; 0x3e6 <GPIO_writePin+0x6>
 3e6:	00 d0       	rcall	.+0      	; 0x3e8 <GPIO_writePin+0x8>
 3e8:	0f 92       	push	r0
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	89 83       	std	Y+1, r24	; 0x01
 3f0:	6a 83       	std	Y+2, r22	; 0x02
 3f2:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 3f4:	8a 81       	ldd	r24, Y+2	; 0x02
 3f6:	88 30       	cpi	r24, 0x08	; 8
 3f8:	08 f0       	brcs	.+2      	; 0x3fc <GPIO_writePin+0x1c>
 3fa:	d5 c0       	rjmp	.+426    	; 0x5a6 <GPIO_writePin+0x1c6>
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	84 30       	cpi	r24, 0x04	; 4
 400:	08 f0       	brcs	.+2      	; 0x404 <GPIO_writePin+0x24>
 402:	d1 c0       	rjmp	.+418    	; 0x5a6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 404:	89 81       	ldd	r24, Y+1	; 0x01
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	3d 83       	std	Y+5, r19	; 0x05
 40c:	2c 83       	std	Y+4, r18	; 0x04
 40e:	8c 81       	ldd	r24, Y+4	; 0x04
 410:	9d 81       	ldd	r25, Y+5	; 0x05
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	91 05       	cpc	r25, r1
 416:	09 f4       	brne	.+2      	; 0x41a <GPIO_writePin+0x3a>
 418:	43 c0       	rjmp	.+134    	; 0x4a0 <GPIO_writePin+0xc0>
 41a:	2c 81       	ldd	r18, Y+4	; 0x04
 41c:	3d 81       	ldd	r19, Y+5	; 0x05
 41e:	22 30       	cpi	r18, 0x02	; 2
 420:	31 05       	cpc	r19, r1
 422:	2c f4       	brge	.+10     	; 0x42e <GPIO_writePin+0x4e>
 424:	8c 81       	ldd	r24, Y+4	; 0x04
 426:	9d 81       	ldd	r25, Y+5	; 0x05
 428:	00 97       	sbiw	r24, 0x00	; 0
 42a:	71 f0       	breq	.+28     	; 0x448 <GPIO_writePin+0x68>
 42c:	bc c0       	rjmp	.+376    	; 0x5a6 <GPIO_writePin+0x1c6>
 42e:	2c 81       	ldd	r18, Y+4	; 0x04
 430:	3d 81       	ldd	r19, Y+5	; 0x05
 432:	22 30       	cpi	r18, 0x02	; 2
 434:	31 05       	cpc	r19, r1
 436:	09 f4       	brne	.+2      	; 0x43a <GPIO_writePin+0x5a>
 438:	5f c0       	rjmp	.+190    	; 0x4f8 <GPIO_writePin+0x118>
 43a:	8c 81       	ldd	r24, Y+4	; 0x04
 43c:	9d 81       	ldd	r25, Y+5	; 0x05
 43e:	83 30       	cpi	r24, 0x03	; 3
 440:	91 05       	cpc	r25, r1
 442:	09 f4       	brne	.+2      	; 0x446 <GPIO_writePin+0x66>
 444:	85 c0       	rjmp	.+266    	; 0x550 <GPIO_writePin+0x170>
 446:	af c0       	rjmp	.+350    	; 0x5a6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 448:	8b 81       	ldd	r24, Y+3	; 0x03
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	a1 f4       	brne	.+40     	; 0x476 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 44e:	ab e3       	ldi	r26, 0x3B	; 59
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	eb e3       	ldi	r30, 0x3B	; 59
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	48 2f       	mov	r20, r24
 45a:	8a 81       	ldd	r24, Y+2	; 0x02
 45c:	28 2f       	mov	r18, r24
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 2e       	mov	r0, r18
 466:	02 c0       	rjmp	.+4      	; 0x46c <GPIO_writePin+0x8c>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	0a 94       	dec	r0
 46e:	e2 f7       	brpl	.-8      	; 0x468 <GPIO_writePin+0x88>
 470:	84 2b       	or	r24, r20
 472:	8c 93       	st	X, r24
 474:	98 c0       	rjmp	.+304    	; 0x5a6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 476:	ab e3       	ldi	r26, 0x3B	; 59
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	eb e3       	ldi	r30, 0x3B	; 59
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	48 2f       	mov	r20, r24
 482:	8a 81       	ldd	r24, Y+2	; 0x02
 484:	28 2f       	mov	r18, r24
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 2e       	mov	r0, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <GPIO_writePin+0xb4>
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	0a 94       	dec	r0
 496:	e2 f7       	brpl	.-8      	; 0x490 <GPIO_writePin+0xb0>
 498:	80 95       	com	r24
 49a:	84 23       	and	r24, r20
 49c:	8c 93       	st	X, r24
 49e:	83 c0       	rjmp	.+262    	; 0x5a6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	a1 f4       	brne	.+40     	; 0x4ce <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 4a6:	a8 e3       	ldi	r26, 0x38	; 56
 4a8:	b0 e0       	ldi	r27, 0x00	; 0
 4aa:	e8 e3       	ldi	r30, 0x38	; 56
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	48 2f       	mov	r20, r24
 4b2:	8a 81       	ldd	r24, Y+2	; 0x02
 4b4:	28 2f       	mov	r18, r24
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 2e       	mov	r0, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <GPIO_writePin+0xe4>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	0a 94       	dec	r0
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <GPIO_writePin+0xe0>
 4c8:	84 2b       	or	r24, r20
 4ca:	8c 93       	st	X, r24
 4cc:	6c c0       	rjmp	.+216    	; 0x5a6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 4ce:	a8 e3       	ldi	r26, 0x38	; 56
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	e8 e3       	ldi	r30, 0x38	; 56
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	48 2f       	mov	r20, r24
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 2e       	mov	r0, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <GPIO_writePin+0x10c>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	0a 94       	dec	r0
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <GPIO_writePin+0x108>
 4f0:	80 95       	com	r24
 4f2:	84 23       	and	r24, r20
 4f4:	8c 93       	st	X, r24
 4f6:	57 c0       	rjmp	.+174    	; 0x5a6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 4f8:	8b 81       	ldd	r24, Y+3	; 0x03
 4fa:	81 30       	cpi	r24, 0x01	; 1
 4fc:	a1 f4       	brne	.+40     	; 0x526 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 4fe:	a5 e3       	ldi	r26, 0x35	; 53
 500:	b0 e0       	ldi	r27, 0x00	; 0
 502:	e5 e3       	ldi	r30, 0x35	; 53
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	48 2f       	mov	r20, r24
 50a:	8a 81       	ldd	r24, Y+2	; 0x02
 50c:	28 2f       	mov	r18, r24
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 2e       	mov	r0, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <GPIO_writePin+0x13c>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	0a 94       	dec	r0
 51e:	e2 f7       	brpl	.-8      	; 0x518 <GPIO_writePin+0x138>
 520:	84 2b       	or	r24, r20
 522:	8c 93       	st	X, r24
 524:	40 c0       	rjmp	.+128    	; 0x5a6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 526:	a5 e3       	ldi	r26, 0x35	; 53
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	e5 e3       	ldi	r30, 0x35	; 53
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	48 2f       	mov	r20, r24
 532:	8a 81       	ldd	r24, Y+2	; 0x02
 534:	28 2f       	mov	r18, r24
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 2e       	mov	r0, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <GPIO_writePin+0x164>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <GPIO_writePin+0x160>
 548:	80 95       	com	r24
 54a:	84 23       	and	r24, r20
 54c:	8c 93       	st	X, r24
 54e:	2b c0       	rjmp	.+86     	; 0x5a6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 550:	8b 81       	ldd	r24, Y+3	; 0x03
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	a1 f4       	brne	.+40     	; 0x57e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 556:	a2 e3       	ldi	r26, 0x32	; 50
 558:	b0 e0       	ldi	r27, 0x00	; 0
 55a:	e2 e3       	ldi	r30, 0x32	; 50
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	48 2f       	mov	r20, r24
 562:	8a 81       	ldd	r24, Y+2	; 0x02
 564:	28 2f       	mov	r18, r24
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 2e       	mov	r0, r18
 56e:	02 c0       	rjmp	.+4      	; 0x574 <GPIO_writePin+0x194>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	0a 94       	dec	r0
 576:	e2 f7       	brpl	.-8      	; 0x570 <GPIO_writePin+0x190>
 578:	84 2b       	or	r24, r20
 57a:	8c 93       	st	X, r24
 57c:	14 c0       	rjmp	.+40     	; 0x5a6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 57e:	a2 e3       	ldi	r26, 0x32	; 50
 580:	b0 e0       	ldi	r27, 0x00	; 0
 582:	e2 e3       	ldi	r30, 0x32	; 50
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	48 2f       	mov	r20, r24
 58a:	8a 81       	ldd	r24, Y+2	; 0x02
 58c:	28 2f       	mov	r18, r24
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 2e       	mov	r0, r18
 596:	02 c0       	rjmp	.+4      	; 0x59c <GPIO_writePin+0x1bc>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	0a 94       	dec	r0
 59e:	e2 f7       	brpl	.-8      	; 0x598 <GPIO_writePin+0x1b8>
 5a0:	80 95       	com	r24
 5a2:	84 23       	and	r24, r20
 5a4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	cf 91       	pop	r28
 5b2:	df 91       	pop	r29
 5b4:	08 95       	ret

000005b6 <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 5b6:	df 93       	push	r29
 5b8:	cf 93       	push	r28
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <GPIO_readPin+0x6>
 5bc:	00 d0       	rcall	.+0      	; 0x5be <GPIO_readPin+0x8>
 5be:	0f 92       	push	r0
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	8a 83       	std	Y+2, r24	; 0x02
 5c6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 5c8:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 5ca:	8b 81       	ldd	r24, Y+3	; 0x03
 5cc:	88 30       	cpi	r24, 0x08	; 8
 5ce:	08 f0       	brcs	.+2      	; 0x5d2 <GPIO_readPin+0x1c>
 5d0:	84 c0       	rjmp	.+264    	; 0x6da <GPIO_readPin+0x124>
 5d2:	8a 81       	ldd	r24, Y+2	; 0x02
 5d4:	84 30       	cpi	r24, 0x04	; 4
 5d6:	08 f0       	brcs	.+2      	; 0x5da <GPIO_readPin+0x24>
 5d8:	80 c0       	rjmp	.+256    	; 0x6da <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 5da:	8a 81       	ldd	r24, Y+2	; 0x02
 5dc:	28 2f       	mov	r18, r24
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	3d 83       	std	Y+5, r19	; 0x05
 5e2:	2c 83       	std	Y+4, r18	; 0x04
 5e4:	4c 81       	ldd	r20, Y+4	; 0x04
 5e6:	5d 81       	ldd	r21, Y+5	; 0x05
 5e8:	41 30       	cpi	r20, 0x01	; 1
 5ea:	51 05       	cpc	r21, r1
 5ec:	79 f1       	breq	.+94     	; 0x64c <GPIO_readPin+0x96>
 5ee:	8c 81       	ldd	r24, Y+4	; 0x04
 5f0:	9d 81       	ldd	r25, Y+5	; 0x05
 5f2:	82 30       	cpi	r24, 0x02	; 2
 5f4:	91 05       	cpc	r25, r1
 5f6:	34 f4       	brge	.+12     	; 0x604 <GPIO_readPin+0x4e>
 5f8:	2c 81       	ldd	r18, Y+4	; 0x04
 5fa:	3d 81       	ldd	r19, Y+5	; 0x05
 5fc:	21 15       	cp	r18, r1
 5fe:	31 05       	cpc	r19, r1
 600:	69 f0       	breq	.+26     	; 0x61c <GPIO_readPin+0x66>
 602:	6b c0       	rjmp	.+214    	; 0x6da <GPIO_readPin+0x124>
 604:	4c 81       	ldd	r20, Y+4	; 0x04
 606:	5d 81       	ldd	r21, Y+5	; 0x05
 608:	42 30       	cpi	r20, 0x02	; 2
 60a:	51 05       	cpc	r21, r1
 60c:	b9 f1       	breq	.+110    	; 0x67c <GPIO_readPin+0xc6>
 60e:	8c 81       	ldd	r24, Y+4	; 0x04
 610:	9d 81       	ldd	r25, Y+5	; 0x05
 612:	83 30       	cpi	r24, 0x03	; 3
 614:	91 05       	cpc	r25, r1
 616:	09 f4       	brne	.+2      	; 0x61a <GPIO_readPin+0x64>
 618:	49 c0       	rjmp	.+146    	; 0x6ac <GPIO_readPin+0xf6>
 61a:	5f c0       	rjmp	.+190    	; 0x6da <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 61c:	e9 e3       	ldi	r30, 0x39	; 57
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	28 2f       	mov	r18, r24
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	8b 81       	ldd	r24, Y+3	; 0x03
 628:	88 2f       	mov	r24, r24
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	a9 01       	movw	r20, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <GPIO_readPin+0x7e>
 630:	55 95       	asr	r21
 632:	47 95       	ror	r20
 634:	8a 95       	dec	r24
 636:	e2 f7       	brpl	.-8      	; 0x630 <GPIO_readPin+0x7a>
 638:	ca 01       	movw	r24, r20
 63a:	81 70       	andi	r24, 0x01	; 1
 63c:	90 70       	andi	r25, 0x00	; 0
 63e:	88 23       	and	r24, r24
 640:	19 f0       	breq	.+6      	; 0x648 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	89 83       	std	Y+1, r24	; 0x01
 646:	49 c0       	rjmp	.+146    	; 0x6da <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 648:	19 82       	std	Y+1, r1	; 0x01
 64a:	47 c0       	rjmp	.+142    	; 0x6da <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 64c:	e6 e3       	ldi	r30, 0x36	; 54
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	28 2f       	mov	r18, r24
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	8b 81       	ldd	r24, Y+3	; 0x03
 658:	88 2f       	mov	r24, r24
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	a9 01       	movw	r20, r18
 65e:	02 c0       	rjmp	.+4      	; 0x664 <GPIO_readPin+0xae>
 660:	55 95       	asr	r21
 662:	47 95       	ror	r20
 664:	8a 95       	dec	r24
 666:	e2 f7       	brpl	.-8      	; 0x660 <GPIO_readPin+0xaa>
 668:	ca 01       	movw	r24, r20
 66a:	81 70       	andi	r24, 0x01	; 1
 66c:	90 70       	andi	r25, 0x00	; 0
 66e:	88 23       	and	r24, r24
 670:	19 f0       	breq	.+6      	; 0x678 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	89 83       	std	Y+1, r24	; 0x01
 676:	31 c0       	rjmp	.+98     	; 0x6da <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 678:	19 82       	std	Y+1, r1	; 0x01
 67a:	2f c0       	rjmp	.+94     	; 0x6da <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 67c:	e3 e3       	ldi	r30, 0x33	; 51
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	28 2f       	mov	r18, r24
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	8b 81       	ldd	r24, Y+3	; 0x03
 688:	88 2f       	mov	r24, r24
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	a9 01       	movw	r20, r18
 68e:	02 c0       	rjmp	.+4      	; 0x694 <GPIO_readPin+0xde>
 690:	55 95       	asr	r21
 692:	47 95       	ror	r20
 694:	8a 95       	dec	r24
 696:	e2 f7       	brpl	.-8      	; 0x690 <GPIO_readPin+0xda>
 698:	ca 01       	movw	r24, r20
 69a:	81 70       	andi	r24, 0x01	; 1
 69c:	90 70       	andi	r25, 0x00	; 0
 69e:	88 23       	and	r24, r24
 6a0:	19 f0       	breq	.+6      	; 0x6a8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	89 83       	std	Y+1, r24	; 0x01
 6a6:	19 c0       	rjmp	.+50     	; 0x6da <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 6a8:	19 82       	std	Y+1, r1	; 0x01
 6aa:	17 c0       	rjmp	.+46     	; 0x6da <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 6ac:	e0 e3       	ldi	r30, 0x30	; 48
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	28 2f       	mov	r18, r24
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	88 2f       	mov	r24, r24
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	a9 01       	movw	r20, r18
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <GPIO_readPin+0x10e>
 6c0:	55 95       	asr	r21
 6c2:	47 95       	ror	r20
 6c4:	8a 95       	dec	r24
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <GPIO_readPin+0x10a>
 6c8:	ca 01       	movw	r24, r20
 6ca:	81 70       	andi	r24, 0x01	; 1
 6cc:	90 70       	andi	r25, 0x00	; 0
 6ce:	88 23       	and	r24, r24
 6d0:	19 f0       	breq	.+6      	; 0x6d8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	89 83       	std	Y+1, r24	; 0x01
 6d6:	01 c0       	rjmp	.+2      	; 0x6da <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 6d8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 6da:	89 81       	ldd	r24, Y+1	; 0x01
}
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	cf 91       	pop	r28
 6e8:	df 91       	pop	r29
 6ea:	08 95       	ret

000006ec <GPIO_togglePin>:
void GPIO_togglePin(uint8 port_num, uint8 pin_num){
 6ec:	df 93       	push	r29
 6ee:	cf 93       	push	r28
 6f0:	00 d0       	rcall	.+0      	; 0x6f2 <GPIO_togglePin+0x6>
 6f2:	00 d0       	rcall	.+0      	; 0x6f4 <GPIO_togglePin+0x8>
 6f4:	cd b7       	in	r28, 0x3d	; 61
 6f6:	de b7       	in	r29, 0x3e	; 62
 6f8:	89 83       	std	Y+1, r24	; 0x01
 6fa:	6a 83       	std	Y+2, r22	; 0x02


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 6fc:	8a 81       	ldd	r24, Y+2	; 0x02
 6fe:	88 30       	cpi	r24, 0x08	; 8
 700:	08 f0       	brcs	.+2      	; 0x704 <GPIO_togglePin+0x18>
 702:	72 c0       	rjmp	.+228    	; 0x7e8 <GPIO_togglePin+0xfc>
 704:	89 81       	ldd	r24, Y+1	; 0x01
 706:	84 30       	cpi	r24, 0x04	; 4
 708:	08 f0       	brcs	.+2      	; 0x70c <GPIO_togglePin+0x20>
 70a:	6e c0       	rjmp	.+220    	; 0x7e8 <GPIO_togglePin+0xfc>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 70c:	89 81       	ldd	r24, Y+1	; 0x01
 70e:	28 2f       	mov	r18, r24
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	3c 83       	std	Y+4, r19	; 0x04
 714:	2b 83       	std	Y+3, r18	; 0x03
 716:	8b 81       	ldd	r24, Y+3	; 0x03
 718:	9c 81       	ldd	r25, Y+4	; 0x04
 71a:	81 30       	cpi	r24, 0x01	; 1
 71c:	91 05       	cpc	r25, r1
 71e:	49 f1       	breq	.+82     	; 0x772 <GPIO_togglePin+0x86>
 720:	2b 81       	ldd	r18, Y+3	; 0x03
 722:	3c 81       	ldd	r19, Y+4	; 0x04
 724:	22 30       	cpi	r18, 0x02	; 2
 726:	31 05       	cpc	r19, r1
 728:	2c f4       	brge	.+10     	; 0x734 <GPIO_togglePin+0x48>
 72a:	8b 81       	ldd	r24, Y+3	; 0x03
 72c:	9c 81       	ldd	r25, Y+4	; 0x04
 72e:	00 97       	sbiw	r24, 0x00	; 0
 730:	61 f0       	breq	.+24     	; 0x74a <GPIO_togglePin+0x5e>
 732:	5a c0       	rjmp	.+180    	; 0x7e8 <GPIO_togglePin+0xfc>
 734:	2b 81       	ldd	r18, Y+3	; 0x03
 736:	3c 81       	ldd	r19, Y+4	; 0x04
 738:	22 30       	cpi	r18, 0x02	; 2
 73a:	31 05       	cpc	r19, r1
 73c:	71 f1       	breq	.+92     	; 0x79a <GPIO_togglePin+0xae>
 73e:	8b 81       	ldd	r24, Y+3	; 0x03
 740:	9c 81       	ldd	r25, Y+4	; 0x04
 742:	83 30       	cpi	r24, 0x03	; 3
 744:	91 05       	cpc	r25, r1
 746:	e9 f1       	breq	.+122    	; 0x7c2 <GPIO_togglePin+0xd6>
 748:	4f c0       	rjmp	.+158    	; 0x7e8 <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA, pin_num);
 74a:	ab e3       	ldi	r26, 0x3B	; 59
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	eb e3       	ldi	r30, 0x3B	; 59
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	48 2f       	mov	r20, r24
 756:	8a 81       	ldd	r24, Y+2	; 0x02
 758:	28 2f       	mov	r18, r24
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	02 2e       	mov	r0, r18
 762:	02 c0       	rjmp	.+4      	; 0x768 <GPIO_togglePin+0x7c>
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	0a 94       	dec	r0
 76a:	e2 f7       	brpl	.-8      	; 0x764 <GPIO_togglePin+0x78>
 76c:	84 27       	eor	r24, r20
 76e:	8c 93       	st	X, r24
 770:	3b c0       	rjmp	.+118    	; 0x7e8 <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB, pin_num);
 772:	a8 e3       	ldi	r26, 0x38	; 56
 774:	b0 e0       	ldi	r27, 0x00	; 0
 776:	e8 e3       	ldi	r30, 0x38	; 56
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	80 81       	ld	r24, Z
 77c:	48 2f       	mov	r20, r24
 77e:	8a 81       	ldd	r24, Y+2	; 0x02
 780:	28 2f       	mov	r18, r24
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	02 2e       	mov	r0, r18
 78a:	02 c0       	rjmp	.+4      	; 0x790 <GPIO_togglePin+0xa4>
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	0a 94       	dec	r0
 792:	e2 f7       	brpl	.-8      	; 0x78c <GPIO_togglePin+0xa0>
 794:	84 27       	eor	r24, r20
 796:	8c 93       	st	X, r24
 798:	27 c0       	rjmp	.+78     	; 0x7e8 <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC, pin_num);
 79a:	a5 e3       	ldi	r26, 0x35	; 53
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	e5 e3       	ldi	r30, 0x35	; 53
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	48 2f       	mov	r20, r24
 7a6:	8a 81       	ldd	r24, Y+2	; 0x02
 7a8:	28 2f       	mov	r18, r24
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	02 2e       	mov	r0, r18
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <GPIO_togglePin+0xcc>
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	0a 94       	dec	r0
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <GPIO_togglePin+0xc8>
 7bc:	84 27       	eor	r24, r20
 7be:	8c 93       	st	X, r24
 7c0:	13 c0       	rjmp	.+38     	; 0x7e8 <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD, pin_num);
 7c2:	a2 e3       	ldi	r26, 0x32	; 50
 7c4:	b0 e0       	ldi	r27, 0x00	; 0
 7c6:	e2 e3       	ldi	r30, 0x32	; 50
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	80 81       	ld	r24, Z
 7cc:	48 2f       	mov	r20, r24
 7ce:	8a 81       	ldd	r24, Y+2	; 0x02
 7d0:	28 2f       	mov	r18, r24
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	02 2e       	mov	r0, r18
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <GPIO_togglePin+0xf4>
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	0a 94       	dec	r0
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <GPIO_togglePin+0xf0>
 7e4:	84 27       	eor	r24, r20
 7e6:	8c 93       	st	X, r24
			break;
		}
	}
}
 7e8:	0f 90       	pop	r0
 7ea:	0f 90       	pop	r0
 7ec:	0f 90       	pop	r0
 7ee:	0f 90       	pop	r0
 7f0:	cf 91       	pop	r28
 7f2:	df 91       	pop	r29
 7f4:	08 95       	ret

000007f6 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
 7f6:	df 93       	push	r29
 7f8:	cf 93       	push	r28
 7fa:	00 d0       	rcall	.+0      	; 0x7fc <GPIO_setupPortDirection+0x6>
 7fc:	00 d0       	rcall	.+0      	; 0x7fe <GPIO_setupPortDirection+0x8>
 7fe:	cd b7       	in	r28, 0x3d	; 61
 800:	de b7       	in	r29, 0x3e	; 62
 802:	89 83       	std	Y+1, r24	; 0x01
 804:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 806:	89 81       	ldd	r24, Y+1	; 0x01
 808:	84 30       	cpi	r24, 0x04	; 4
 80a:	90 f5       	brcc	.+100    	; 0x870 <__stack+0x11>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 80c:	89 81       	ldd	r24, Y+1	; 0x01
 80e:	28 2f       	mov	r18, r24
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	3c 83       	std	Y+4, r19	; 0x04
 814:	2b 83       	std	Y+3, r18	; 0x03
 816:	8b 81       	ldd	r24, Y+3	; 0x03
 818:	9c 81       	ldd	r25, Y+4	; 0x04
 81a:	81 30       	cpi	r24, 0x01	; 1
 81c:	91 05       	cpc	r25, r1
 81e:	d1 f0       	breq	.+52     	; 0x854 <GPIO_setupPortDirection+0x5e>
 820:	2b 81       	ldd	r18, Y+3	; 0x03
 822:	3c 81       	ldd	r19, Y+4	; 0x04
 824:	22 30       	cpi	r18, 0x02	; 2
 826:	31 05       	cpc	r19, r1
 828:	2c f4       	brge	.+10     	; 0x834 <GPIO_setupPortDirection+0x3e>
 82a:	8b 81       	ldd	r24, Y+3	; 0x03
 82c:	9c 81       	ldd	r25, Y+4	; 0x04
 82e:	00 97       	sbiw	r24, 0x00	; 0
 830:	61 f0       	breq	.+24     	; 0x84a <GPIO_setupPortDirection+0x54>
 832:	1e c0       	rjmp	.+60     	; 0x870 <__stack+0x11>
 834:	2b 81       	ldd	r18, Y+3	; 0x03
 836:	3c 81       	ldd	r19, Y+4	; 0x04
 838:	22 30       	cpi	r18, 0x02	; 2
 83a:	31 05       	cpc	r19, r1
 83c:	81 f0       	breq	.+32     	; 0x85e <GPIO_setupPortDirection+0x68>
 83e:	8b 81       	ldd	r24, Y+3	; 0x03
 840:	9c 81       	ldd	r25, Y+4	; 0x04
 842:	83 30       	cpi	r24, 0x03	; 3
 844:	91 05       	cpc	r25, r1
 846:	81 f0       	breq	.+32     	; 0x868 <__stack+0x9>
 848:	13 c0       	rjmp	.+38     	; 0x870 <__stack+0x11>
		{
		case PORTA_ID:
			DDRA = direction;
 84a:	ea e3       	ldi	r30, 0x3A	; 58
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	8a 81       	ldd	r24, Y+2	; 0x02
 850:	80 83       	st	Z, r24
 852:	0e c0       	rjmp	.+28     	; 0x870 <__stack+0x11>
			break;
		case PORTB_ID:
			DDRB = direction;
 854:	e7 e3       	ldi	r30, 0x37	; 55
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	8a 81       	ldd	r24, Y+2	; 0x02
 85a:	80 83       	st	Z, r24
 85c:	09 c0       	rjmp	.+18     	; 0x870 <__stack+0x11>
			break;
		case PORTC_ID:
			DDRC = direction;
 85e:	e4 e3       	ldi	r30, 0x34	; 52
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	8a 81       	ldd	r24, Y+2	; 0x02
 864:	80 83       	st	Z, r24
 866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
			break;
		case PORTD_ID:
			DDRD = direction;
 868:	e1 e3       	ldi	r30, 0x31	; 49
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	8a 81       	ldd	r24, Y+2	; 0x02
 86e:	80 83       	st	Z, r24
			break;
		}
	}
}
 870:	0f 90       	pop	r0
 872:	0f 90       	pop	r0
 874:	0f 90       	pop	r0
 876:	0f 90       	pop	r0
 878:	cf 91       	pop	r28
 87a:	df 91       	pop	r29
 87c:	08 95       	ret

0000087e <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value){
 87e:	df 93       	push	r29
 880:	cf 93       	push	r28
 882:	00 d0       	rcall	.+0      	; 0x884 <GPIO_writePort+0x6>
 884:	00 d0       	rcall	.+0      	; 0x886 <GPIO_writePort+0x8>
 886:	cd b7       	in	r28, 0x3d	; 61
 888:	de b7       	in	r29, 0x3e	; 62
 88a:	89 83       	std	Y+1, r24	; 0x01
 88c:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 88e:	89 81       	ldd	r24, Y+1	; 0x01
 890:	84 30       	cpi	r24, 0x04	; 4
 892:	90 f5       	brcc	.+100    	; 0x8f8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 894:	89 81       	ldd	r24, Y+1	; 0x01
 896:	28 2f       	mov	r18, r24
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	3c 83       	std	Y+4, r19	; 0x04
 89c:	2b 83       	std	Y+3, r18	; 0x03
 89e:	8b 81       	ldd	r24, Y+3	; 0x03
 8a0:	9c 81       	ldd	r25, Y+4	; 0x04
 8a2:	81 30       	cpi	r24, 0x01	; 1
 8a4:	91 05       	cpc	r25, r1
 8a6:	d1 f0       	breq	.+52     	; 0x8dc <GPIO_writePort+0x5e>
 8a8:	2b 81       	ldd	r18, Y+3	; 0x03
 8aa:	3c 81       	ldd	r19, Y+4	; 0x04
 8ac:	22 30       	cpi	r18, 0x02	; 2
 8ae:	31 05       	cpc	r19, r1
 8b0:	2c f4       	brge	.+10     	; 0x8bc <GPIO_writePort+0x3e>
 8b2:	8b 81       	ldd	r24, Y+3	; 0x03
 8b4:	9c 81       	ldd	r25, Y+4	; 0x04
 8b6:	00 97       	sbiw	r24, 0x00	; 0
 8b8:	61 f0       	breq	.+24     	; 0x8d2 <GPIO_writePort+0x54>
 8ba:	1e c0       	rjmp	.+60     	; 0x8f8 <GPIO_writePort+0x7a>
 8bc:	2b 81       	ldd	r18, Y+3	; 0x03
 8be:	3c 81       	ldd	r19, Y+4	; 0x04
 8c0:	22 30       	cpi	r18, 0x02	; 2
 8c2:	31 05       	cpc	r19, r1
 8c4:	81 f0       	breq	.+32     	; 0x8e6 <GPIO_writePort+0x68>
 8c6:	8b 81       	ldd	r24, Y+3	; 0x03
 8c8:	9c 81       	ldd	r25, Y+4	; 0x04
 8ca:	83 30       	cpi	r24, 0x03	; 3
 8cc:	91 05       	cpc	r25, r1
 8ce:	81 f0       	breq	.+32     	; 0x8f0 <GPIO_writePort+0x72>
 8d0:	13 c0       	rjmp	.+38     	; 0x8f8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 8d2:	eb e3       	ldi	r30, 0x3B	; 59
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	8a 81       	ldd	r24, Y+2	; 0x02
 8d8:	80 83       	st	Z, r24
 8da:	0e c0       	rjmp	.+28     	; 0x8f8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 8dc:	e8 e3       	ldi	r30, 0x38	; 56
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	8a 81       	ldd	r24, Y+2	; 0x02
 8e2:	80 83       	st	Z, r24
 8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 8e6:	e5 e3       	ldi	r30, 0x35	; 53
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	8a 81       	ldd	r24, Y+2	; 0x02
 8ec:	80 83       	st	Z, r24
 8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 8f0:	e2 e3       	ldi	r30, 0x32	; 50
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	8a 81       	ldd	r24, Y+2	; 0x02
 8f6:	80 83       	st	Z, r24
			break;
		}
	}
}
 8f8:	0f 90       	pop	r0
 8fa:	0f 90       	pop	r0
 8fc:	0f 90       	pop	r0
 8fe:	0f 90       	pop	r0
 900:	cf 91       	pop	r28
 902:	df 91       	pop	r29
 904:	08 95       	ret

00000906 <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num){
 906:	df 93       	push	r29
 908:	cf 93       	push	r28
 90a:	00 d0       	rcall	.+0      	; 0x90c <GPIO_readPort+0x6>
 90c:	00 d0       	rcall	.+0      	; 0x90e <GPIO_readPort+0x8>
 90e:	cd b7       	in	r28, 0x3d	; 61
 910:	de b7       	in	r29, 0x3e	; 62
 912:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
 914:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
 916:	8a 81       	ldd	r24, Y+2	; 0x02
 918:	84 30       	cpi	r24, 0x04	; 4
 91a:	90 f5       	brcc	.+100    	; 0x980 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 91c:	8a 81       	ldd	r24, Y+2	; 0x02
 91e:	28 2f       	mov	r18, r24
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	3c 83       	std	Y+4, r19	; 0x04
 924:	2b 83       	std	Y+3, r18	; 0x03
 926:	8b 81       	ldd	r24, Y+3	; 0x03
 928:	9c 81       	ldd	r25, Y+4	; 0x04
 92a:	81 30       	cpi	r24, 0x01	; 1
 92c:	91 05       	cpc	r25, r1
 92e:	d1 f0       	breq	.+52     	; 0x964 <GPIO_readPort+0x5e>
 930:	2b 81       	ldd	r18, Y+3	; 0x03
 932:	3c 81       	ldd	r19, Y+4	; 0x04
 934:	22 30       	cpi	r18, 0x02	; 2
 936:	31 05       	cpc	r19, r1
 938:	2c f4       	brge	.+10     	; 0x944 <GPIO_readPort+0x3e>
 93a:	8b 81       	ldd	r24, Y+3	; 0x03
 93c:	9c 81       	ldd	r25, Y+4	; 0x04
 93e:	00 97       	sbiw	r24, 0x00	; 0
 940:	61 f0       	breq	.+24     	; 0x95a <GPIO_readPort+0x54>
 942:	1e c0       	rjmp	.+60     	; 0x980 <GPIO_readPort+0x7a>
 944:	2b 81       	ldd	r18, Y+3	; 0x03
 946:	3c 81       	ldd	r19, Y+4	; 0x04
 948:	22 30       	cpi	r18, 0x02	; 2
 94a:	31 05       	cpc	r19, r1
 94c:	81 f0       	breq	.+32     	; 0x96e <GPIO_readPort+0x68>
 94e:	8b 81       	ldd	r24, Y+3	; 0x03
 950:	9c 81       	ldd	r25, Y+4	; 0x04
 952:	83 30       	cpi	r24, 0x03	; 3
 954:	91 05       	cpc	r25, r1
 956:	81 f0       	breq	.+32     	; 0x978 <GPIO_readPort+0x72>
 958:	13 c0       	rjmp	.+38     	; 0x980 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 95a:	e9 e3       	ldi	r30, 0x39	; 57
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	80 81       	ld	r24, Z
 960:	89 83       	std	Y+1, r24	; 0x01
 962:	0e c0       	rjmp	.+28     	; 0x980 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 964:	e6 e3       	ldi	r30, 0x36	; 54
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	89 83       	std	Y+1, r24	; 0x01
 96c:	09 c0       	rjmp	.+18     	; 0x980 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 96e:	e3 e3       	ldi	r30, 0x33	; 51
 970:	f0 e0       	ldi	r31, 0x00	; 0
 972:	80 81       	ld	r24, Z
 974:	89 83       	std	Y+1, r24	; 0x01
 976:	04 c0       	rjmp	.+8      	; 0x980 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 978:	e0 e3       	ldi	r30, 0x30	; 48
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	80 81       	ld	r24, Z
 97e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 980:	89 81       	ldd	r24, Y+1	; 0x01
}
 982:	0f 90       	pop	r0
 984:	0f 90       	pop	r0
 986:	0f 90       	pop	r0
 988:	0f 90       	pop	r0
 98a:	cf 91       	pop	r28
 98c:	df 91       	pop	r29
 98e:	08 95       	ret

00000990 <setup>:
#include <util/delay.h>


#define PASSWORD_SIZE 6

void setup(){
 990:	df 93       	push	r29
 992:	cf 93       	push	r28
 994:	cd b7       	in	r28, 0x3d	; 61
 996:	de b7       	in	r29, 0x3e	; 62
	UART_init();
 998:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_init>
}
 99c:	cf 91       	pop	r28
 99e:	df 91       	pop	r29
 9a0:	08 95       	ret

000009a2 <rcvPassword>:

void rcvPassword(uint8* str){
 9a2:	0f 93       	push	r16
 9a4:	1f 93       	push	r17
 9a6:	df 93       	push	r29
 9a8:	cf 93       	push	r28
 9aa:	00 d0       	rcall	.+0      	; 0x9ac <rcvPassword+0xa>
 9ac:	0f 92       	push	r0
 9ae:	cd b7       	in	r28, 0x3d	; 61
 9b0:	de b7       	in	r29, 0x3e	; 62
 9b2:	9b 83       	std	Y+3, r25	; 0x03
 9b4:	8a 83       	std	Y+2, r24	; 0x02

	uint8 index = 0;
 9b6:	19 82       	std	Y+1, r1	; 0x01
 9b8:	23 c0       	rjmp	.+70     	; 0xa00 <rcvPassword+0x5e>

	while(index < PASSWORD_SIZE){
		str[index] = UART_rcvCharacter();
 9ba:	89 81       	ldd	r24, Y+1	; 0x01
 9bc:	28 2f       	mov	r18, r24
 9be:	30 e0       	ldi	r19, 0x00	; 0
 9c0:	8a 81       	ldd	r24, Y+2	; 0x02
 9c2:	9b 81       	ldd	r25, Y+3	; 0x03
 9c4:	8c 01       	movw	r16, r24
 9c6:	02 0f       	add	r16, r18
 9c8:	13 1f       	adc	r17, r19
 9ca:	0e 94 f6 00 	call	0x1ec	; 0x1ec <UART_rcvCharacter>
 9ce:	f8 01       	movw	r30, r16
 9d0:	80 83       	st	Z, r24
		if( str[index] == '=')
 9d2:	89 81       	ldd	r24, Y+1	; 0x01
 9d4:	28 2f       	mov	r18, r24
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	8a 81       	ldd	r24, Y+2	; 0x02
 9da:	9b 81       	ldd	r25, Y+3	; 0x03
 9dc:	fc 01       	movw	r30, r24
 9de:	e2 0f       	add	r30, r18
 9e0:	f3 1f       	adc	r31, r19
 9e2:	80 81       	ld	r24, Z
 9e4:	8d 33       	cpi	r24, 0x3D	; 61
 9e6:	49 f4       	brne	.+18     	; 0x9fa <rcvPassword+0x58>
		{
			str[index] = '\0';
 9e8:	89 81       	ldd	r24, Y+1	; 0x01
 9ea:	28 2f       	mov	r18, r24
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	8a 81       	ldd	r24, Y+2	; 0x02
 9f0:	9b 81       	ldd	r25, Y+3	; 0x03
 9f2:	fc 01       	movw	r30, r24
 9f4:	e2 0f       	add	r30, r18
 9f6:	f3 1f       	adc	r31, r19
 9f8:	10 82       	st	Z, r1
		}
		index++;
 9fa:	89 81       	ldd	r24, Y+1	; 0x01
 9fc:	8f 5f       	subi	r24, 0xFF	; 255
 9fe:	89 83       	std	Y+1, r24	; 0x01

void rcvPassword(uint8* str){

	uint8 index = 0;

	while(index < PASSWORD_SIZE){
 a00:	89 81       	ldd	r24, Y+1	; 0x01
 a02:	86 30       	cpi	r24, 0x06	; 6
 a04:	d0 f2       	brcs	.-76     	; 0x9ba <rcvPassword+0x18>
			str[index] = '\0';
		}
		index++;
	}

}
 a06:	0f 90       	pop	r0
 a08:	0f 90       	pop	r0
 a0a:	0f 90       	pop	r0
 a0c:	cf 91       	pop	r28
 a0e:	df 91       	pop	r29
 a10:	1f 91       	pop	r17
 a12:	0f 91       	pop	r16
 a14:	08 95       	ret

00000a16 <main>:

void main(void){
 a16:	df 93       	push	r29
 a18:	cf 93       	push	r28
 a1a:	cd b7       	in	r28, 0x3d	; 61
 a1c:	de b7       	in	r29, 0x3e	; 62
 a1e:	2c 97       	sbiw	r28, 0x0c	; 12
 a20:	0f b6       	in	r0, 0x3f	; 63
 a22:	f8 94       	cli
 a24:	de bf       	out	0x3e, r29	; 62
 a26:	0f be       	out	0x3f, r0	; 63
 a28:	cd bf       	out	0x3d, r28	; 61


	setup();
 a2a:	0e 94 c8 04 	call	0x990	; 0x990 <setup>
	uint8 password[6];
	uint8 rePassword[6];


	for(;;){
		rcvPassword(password);
 a2e:	ce 01       	movw	r24, r28
 a30:	01 96       	adiw	r24, 0x01	; 1
 a32:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <rcvPassword>
		rcvPassword(rePassword);
 a36:	ce 01       	movw	r24, r28
 a38:	07 96       	adiw	r24, 0x07	; 7
 a3a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <rcvPassword>


		if(strcmp(password, rePassword) == 0)
 a3e:	9e 01       	movw	r18, r28
 a40:	29 5f       	subi	r18, 0xF9	; 249
 a42:	3f 4f       	sbci	r19, 0xFF	; 255
 a44:	ce 01       	movw	r24, r28
 a46:	01 96       	adiw	r24, 0x01	; 1
 a48:	b9 01       	movw	r22, r18
 a4a:	0e 94 31 05 	call	0xa62	; 0xa62 <strcmp>
 a4e:	00 97       	sbiw	r24, 0x00	; 0
 a50:	21 f4       	brne	.+8      	; 0xa5a <main+0x44>
			UART_sendCharacter('t');
 a52:	84 e7       	ldi	r24, 0x74	; 116
 a54:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendCharacter>
 a58:	ea cf       	rjmp	.-44     	; 0xa2e <main+0x18>
		else
			UART_sendCharacter('f');
 a5a:	86 e6       	ldi	r24, 0x66	; 102
 a5c:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendCharacter>
 a60:	e6 cf       	rjmp	.-52     	; 0xa2e <main+0x18>

00000a62 <strcmp>:
 a62:	fb 01       	movw	r30, r22
 a64:	dc 01       	movw	r26, r24
 a66:	8d 91       	ld	r24, X+
 a68:	01 90       	ld	r0, Z+
 a6a:	80 19       	sub	r24, r0
 a6c:	01 10       	cpse	r0, r1
 a6e:	d9 f3       	breq	.-10     	; 0xa66 <strcmp+0x4>
 a70:	99 0b       	sbc	r25, r25
 a72:	08 95       	ret

00000a74 <_exit>:
 a74:	f8 94       	cli

00000a76 <__stop_program>:
 a76:	ff cf       	rjmp	.-2      	; 0xa76 <__stop_program>
